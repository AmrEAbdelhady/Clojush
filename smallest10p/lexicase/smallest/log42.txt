Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-16 -91 -91 -91] -91] [[-17 -15 -17 -17] -17] [[-91 -91 -3 -91] -91] [[89 89 32 89] 32] [[72 72 -95 72] -95] [[-10 65 -10 -10] -10] [[5 -33 -33 -33] -33] [[-18 -18 -18 -26] -26] [[-39 -39 -33 -39] -39] [[-78 -78 -78 -41] -78] [(-70 -70 -70 -70) -70] [(5 5 5 5) 5] [(10 10 10 10) 10] [(81 81 81 81) 81] [(56 56 56 56) 56] [(15 59 11 0) 0] [(73 88 1 25) 1] [(18 26 4 86) 4] [(47 83 21 97) 21] [(94 40 95 19) 19] [(57 50 25 85) 25] [(55 51 16 2) 2] [(82 0 18 92) 0] [(15 49 30 37) 15] [(41 12 91 43) 12] [(78 63 47 46) 46] [(19 65 39 99) 19] [(51 92 86 60) 51] [(40 66 82 12) 12] [(94 98 64 74) 64] [(24 5 32 29) 5] [(57 66 58 47) 47] [(0 40 42 68) 0] [(54 65 68 10) 10] [(44 86 53 17) 17] [(77 26 -78 -35) -78] [(-78 6 -36 -75) -78] [(33 25 -33 31) -33] [(22 -8 -44 76) -44] [(83 48 85 86) 48] [(75 12 36 17) 12] [(50 16 -84 -53) -84] [(73 -32 -7 -17) -32] [(24 4 -18 82) -18] [(-51 73 -42 73) -51] [(-8 95 33 -46) -46] [(59 -95 -10 -40) -95] [(56 93 9 81) 9] [(40 81 -37 26) -37] [(42 -83 63 -45) -83] [(81 -15 34 -17) -17] [(-27 -57 -59 47) -59] [(89 20 24 48) 20] [(-51 -90 -8 -89) -90] [(-31 -1 -1 -23) -31] [(-28 88 53 -88) -88] [(11 53 61 43) 11] [(-62 -73 92 91) -73] [(74 34 34 88) 34] [(-26 -91 14 -47) -91] [(46 19 -74 44) -74] [(-1 -29 -20 -41) -41] [(-23 -22 -53 97) -53] [(-47 9 47 21) -47] [(-26 14 -3 95) -26] [(-22 -75 -70 -4) -75] [(-56 -51 35 70) -56] [(-69 -27 29 -15) -69] [(-70 -13 22 -36) -70] [(-48 -48 50 -85) -85] [(32 -54 -11 -59) -59] [(85 -35 16 85) -35] [(36 -79 -61 0) -79] [(81 -39 41 -18) -39] [(-96 41 24 38) -96] [(-83 59 -87 -38) -87] [(-45 62 -24 -9) -45] [(-40 39 49 27) -40] [(-52 -54 -27 -10) -54] [(-75 37 97 -100) -100] [(73 6 18 25) 6] [(-19 -74 22 1) -74] [(-51 5 67 -52) -52] [(-88 -73 23 16) -88] [(68 -25 44 -19) -25] [(47 93 -23 73) -23] [(-36 -98 85 14) -98] [(-32 -93 -84 -51) -93] [(-85 47 -54 22) -85] [(88 31 -44 -33) -44] [(25 -28 95 11) -28] [(-96 20 -4 92) -96] [(-85 -24 -67 0) -85] [(80 -12 1 45) -12] [(65 73 -88 1) -88])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-16 -91 -91 -91] -91]
Train Case:   6 | Input/Output: [[-17 -15 -17 -17] -17]
Train Case:   7 | Input/Output: [[-91 -91 -3 -91] -91]
Train Case:   8 | Input/Output: [[89 89 32 89] 32]
Train Case:   9 | Input/Output: [[72 72 -95 72] -95]
Train Case:  10 | Input/Output: [[-10 65 -10 -10] -10]
Train Case:  11 | Input/Output: [[5 -33 -33 -33] -33]
Train Case:  12 | Input/Output: [[-18 -18 -18 -26] -26]
Train Case:  13 | Input/Output: [[-39 -39 -33 -39] -39]
Train Case:  14 | Input/Output: [[-78 -78 -78 -41] -78]
Train Case:  15 | Input/Output: [(-70 -70 -70 -70) -70]
Train Case:  16 | Input/Output: [(5 5 5 5) 5]
Train Case:  17 | Input/Output: [(10 10 10 10) 10]
Train Case:  18 | Input/Output: [(81 81 81 81) 81]
Train Case:  19 | Input/Output: [(56 56 56 56) 56]
Train Case:  20 | Input/Output: [(15 59 11 0) 0]
Train Case:  21 | Input/Output: [(73 88 1 25) 1]
Train Case:  22 | Input/Output: [(18 26 4 86) 4]
Train Case:  23 | Input/Output: [(47 83 21 97) 21]
Train Case:  24 | Input/Output: [(94 40 95 19) 19]
Train Case:  25 | Input/Output: [(57 50 25 85) 25]
Train Case:  26 | Input/Output: [(55 51 16 2) 2]
Train Case:  27 | Input/Output: [(82 0 18 92) 0]
Train Case:  28 | Input/Output: [(15 49 30 37) 15]
Train Case:  29 | Input/Output: [(41 12 91 43) 12]
Train Case:  30 | Input/Output: [(78 63 47 46) 46]
Train Case:  31 | Input/Output: [(19 65 39 99) 19]
Train Case:  32 | Input/Output: [(51 92 86 60) 51]
Train Case:  33 | Input/Output: [(40 66 82 12) 12]
Train Case:  34 | Input/Output: [(94 98 64 74) 64]
Train Case:  35 | Input/Output: [(24 5 32 29) 5]
Train Case:  36 | Input/Output: [(57 66 58 47) 47]
Train Case:  37 | Input/Output: [(0 40 42 68) 0]
Train Case:  38 | Input/Output: [(54 65 68 10) 10]
Train Case:  39 | Input/Output: [(44 86 53 17) 17]
Train Case:  40 | Input/Output: [(77 26 -78 -35) -78]
Train Case:  41 | Input/Output: [(-78 6 -36 -75) -78]
Train Case:  42 | Input/Output: [(33 25 -33 31) -33]
Train Case:  43 | Input/Output: [(22 -8 -44 76) -44]
Train Case:  44 | Input/Output: [(83 48 85 86) 48]
Train Case:  45 | Input/Output: [(75 12 36 17) 12]
Train Case:  46 | Input/Output: [(50 16 -84 -53) -84]
Train Case:  47 | Input/Output: [(73 -32 -7 -17) -32]
Train Case:  48 | Input/Output: [(24 4 -18 82) -18]
Train Case:  49 | Input/Output: [(-51 73 -42 73) -51]
Train Case:  50 | Input/Output: [(-8 95 33 -46) -46]
Train Case:  51 | Input/Output: [(59 -95 -10 -40) -95]
Train Case:  52 | Input/Output: [(56 93 9 81) 9]
Train Case:  53 | Input/Output: [(40 81 -37 26) -37]
Train Case:  54 | Input/Output: [(42 -83 63 -45) -83]
Train Case:  55 | Input/Output: [(81 -15 34 -17) -17]
Train Case:  56 | Input/Output: [(-27 -57 -59 47) -59]
Train Case:  57 | Input/Output: [(89 20 24 48) 20]
Train Case:  58 | Input/Output: [(-51 -90 -8 -89) -90]
Train Case:  59 | Input/Output: [(-31 -1 -1 -23) -31]
Train Case:  60 | Input/Output: [(-28 88 53 -88) -88]
Train Case:  61 | Input/Output: [(11 53 61 43) 11]
Train Case:  62 | Input/Output: [(-62 -73 92 91) -73]
Train Case:  63 | Input/Output: [(74 34 34 88) 34]
Train Case:  64 | Input/Output: [(-26 -91 14 -47) -91]
Train Case:  65 | Input/Output: [(46 19 -74 44) -74]
Train Case:  66 | Input/Output: [(-1 -29 -20 -41) -41]
Train Case:  67 | Input/Output: [(-23 -22 -53 97) -53]
Train Case:  68 | Input/Output: [(-47 9 47 21) -47]
Train Case:  69 | Input/Output: [(-26 14 -3 95) -26]
Train Case:  70 | Input/Output: [(-22 -75 -70 -4) -75]
Train Case:  71 | Input/Output: [(-56 -51 35 70) -56]
Train Case:  72 | Input/Output: [(-69 -27 29 -15) -69]
Train Case:  73 | Input/Output: [(-70 -13 22 -36) -70]
Train Case:  74 | Input/Output: [(-48 -48 50 -85) -85]
Train Case:  75 | Input/Output: [(32 -54 -11 -59) -59]
Train Case:  76 | Input/Output: [(85 -35 16 85) -35]
Train Case:  77 | Input/Output: [(36 -79 -61 0) -79]
Train Case:  78 | Input/Output: [(81 -39 41 -18) -39]
Train Case:  79 | Input/Output: [(-96 41 24 38) -96]
Train Case:  80 | Input/Output: [(-83 59 -87 -38) -87]
Train Case:  81 | Input/Output: [(-45 62 -24 -9) -45]
Train Case:  82 | Input/Output: [(-40 39 49 27) -40]
Train Case:  83 | Input/Output: [(-52 -54 -27 -10) -54]
Train Case:  84 | Input/Output: [(-75 37 97 -100) -100]
Train Case:  85 | Input/Output: [(73 6 18 25) 6]
Train Case:  86 | Input/Output: [(-19 -74 22 1) -74]
Train Case:  87 | Input/Output: [(-51 5 67 -52) -52]
Train Case:  88 | Input/Output: [(-88 -73 23 16) -88]
Train Case:  89 | Input/Output: [(68 -25 44 -19) -25]
Train Case:  90 | Input/Output: [(47 93 -23 73) -23]
Train Case:  91 | Input/Output: [(-36 -98 85 14) -98]
Train Case:  92 | Input/Output: [(-32 -93 -84 -51) -93]
Train Case:  93 | Input/Output: [(-85 47 -54 22) -85]
Train Case:  94 | Input/Output: [(88 31 -44 -33) -44]
Train Case:  95 | Input/Output: [(25 -28 95 11) -28]
Train Case:  96 | Input/Output: [(-96 20 -4 92) -96]
Train Case:  97 | Input/Output: [(-85 -24 -67 0) -85]
Train Case:  98 | Input/Output: [(80 -12 1 45) -12]
Train Case:  99 | Input/Output: [(65 73 -88 1) -88]
Test Case:   0 | Input/Output: [[14 14 -98 14] -98]
Test Case:   1 | Input/Output: [[-64 -91 -64 -64] -91]
Test Case:   2 | Input/Output: [[19 19 19 51] 19]
Test Case:   3 | Input/Output: [[-43 -43 -11 -43] -43]
Test Case:   4 | Input/Output: [[20 20 20 17] 17]
Test Case:   5 | Input/Output: [[-39 -39 26 -39] -39]
Test Case:   6 | Input/Output: [[-63 -63 -63 24] -63]
Test Case:   7 | Input/Output: [[15 -36 15 15] -36]
Test Case:   8 | Input/Output: [[18 18 18 -8] -8]
Test Case:   9 | Input/Output: [[2 2 -95 2] -95]
Test Case:  10 | Input/Output: [[58 58 74 58] 58]
Test Case:  11 | Input/Output: [[-20 79 79 79] -20]
Test Case:  12 | Input/Output: [[-12 47 47 47] -12]
Test Case:  13 | Input/Output: [[19 19 19 64] 19]
Test Case:  14 | Input/Output: [[-33 15 -33 -33] -33]
Test Case:  15 | Input/Output: [[46 46 46 46] 46]
Test Case:  16 | Input/Output: [[-9 35 -9 -9] -9]
Test Case:  17 | Input/Output: [[64 -28 64 64] -28]
Test Case:  18 | Input/Output: [[-52 -94 -52 -52] -94]
Test Case:  19 | Input/Output: [[-41 -41 -41 -13] -41]
Test Case:  20 | Input/Output: [[94 94 94 1] 1]
Test Case:  21 | Input/Output: [[-6 -6 -6 82] -6]
Test Case:  22 | Input/Output: [[-81 -18 -81 -81] -81]
Test Case:  23 | Input/Output: [[-86 -31 -86 -86] -86]
Test Case:  24 | Input/Output: [[-57 -57 -60 -57] -60]
Test Case:  25 | Input/Output: [[90 90 -89 90] -89]
Test Case:  26 | Input/Output: [[0 0 43 0] 0]
Test Case:  27 | Input/Output: [[-24 -24 -10 -24] -24]
Test Case:  28 | Input/Output: [[97 -78 -78 -78] -78]
Test Case:  29 | Input/Output: [[74 74 -61 74] -61]
Test Case:  30 | Input/Output: [[63 33 63 63] 33]
Test Case:  31 | Input/Output: [[1 5 1 1] 1]
Test Case:  32 | Input/Output: [[18 18 -73 18] -73]
Test Case:  33 | Input/Output: [[98 98 98 -34] -34]
Test Case:  34 | Input/Output: [[-65 -93 -65 -65] -93]
Test Case:  35 | Input/Output: [[-82 79 -82 -82] -82]
Test Case:  36 | Input/Output: [[-29 -73 -73 -73] -73]
Test Case:  37 | Input/Output: [[57 57 -53 57] -53]
Test Case:  38 | Input/Output: [[-47 -97 -47 -47] -97]
Test Case:  39 | Input/Output: [[-52 81 -52 -52] -52]
Test Case:  40 | Input/Output: [[69 69 69 27] 27]
Test Case:  41 | Input/Output: [[-26 -71 -26 -26] -71]
Test Case:  42 | Input/Output: [[-91 -91 -91 43] -91]
Test Case:  43 | Input/Output: [[-67 -67 -76 -67] -76]
Test Case:  44 | Input/Output: [[-41 -41 -41 -81] -81]
Test Case:  45 | Input/Output: [[-22 -63 -63 -63] -63]
Test Case:  46 | Input/Output: [[81 81 81 -37] -37]
Test Case:  47 | Input/Output: [[-65 -38 -38 -38] -65]
Test Case:  48 | Input/Output: [[-67 27 -67 -67] -67]
Test Case:  49 | Input/Output: [[-17 -31 -31 -31] -31]
Test Case:  50 | Input/Output: [[-48 14 14 14] -48]
Test Case:  51 | Input/Output: [[-42 -42 -87 -42] -87]
Test Case:  52 | Input/Output: [[-69 -69 -69 -24] -69]
Test Case:  53 | Input/Output: [[-43 -81 -43 -43] -81]
Test Case:  54 | Input/Output: [[48 60 48 48] 48]
Test Case:  55 | Input/Output: [[-65 -65 -51 -65] -65]
Test Case:  56 | Input/Output: [[-72 30 30 30] -72]
Test Case:  57 | Input/Output: [[-97 -30 -30 -30] -97]
Test Case:  58 | Input/Output: [[94 91 94 94] 91]
Test Case:  59 | Input/Output: [[-39 -39 -39 72] -39]
Test Case:  60 | Input/Output: [[-54 -54 -6 -54] -54]
Test Case:  61 | Input/Output: [[-39 -39 -82 -39] -82]
Test Case:  62 | Input/Output: [[-75 41 41 41] -75]
Test Case:  63 | Input/Output: [[64 64 64 -45] -45]
Test Case:  64 | Input/Output: [[47 32 32 32] 32]
Test Case:  65 | Input/Output: [[50 57 57 57] 50]
Test Case:  66 | Input/Output: [[36 36 36 -55] -55]
Test Case:  67 | Input/Output: [[-79 87 -79 -79] -79]
Test Case:  68 | Input/Output: [[2 -75 -75 -75] -75]
Test Case:  69 | Input/Output: [[-41 -41 -73 -41] -73]
Test Case:  70 | Input/Output: [[-64 -64 -41 -64] -64]
Test Case:  71 | Input/Output: [[42 99 42 42] 42]
Test Case:  72 | Input/Output: [[19 -16 -16 -16] -16]
Test Case:  73 | Input/Output: [[15 15 70 15] 15]
Test Case:  74 | Input/Output: [[-51 6 6 6] -51]
Test Case:  75 | Input/Output: [[92 92 -86 92] -86]
Test Case:  76 | Input/Output: [[-44 -44 -50 -44] -50]
Test Case:  77 | Input/Output: [[-96 -96 63 -96] -96]
Test Case:  78 | Input/Output: [[-9 -14 -9 -9] -14]
Test Case:  79 | Input/Output: [[-73 -73 72 -73] -73]
Test Case:  80 | Input/Output: [[-76 -41 -41 -41] -76]
Test Case:  81 | Input/Output: [[26 -38 26 26] -38]
Test Case:  82 | Input/Output: [[64 -27 64 64] -27]
Test Case:  83 | Input/Output: [[-25 -25 31 -25] -25]
Test Case:  84 | Input/Output: [[-83 -19 -83 -83] -83]
Test Case:  85 | Input/Output: [[35 35 35 -82] -82]
Test Case:  86 | Input/Output: [[35 35 14 35] 14]
Test Case:  87 | Input/Output: [[-83 98 -83 -83] -83]
Test Case:  88 | Input/Output: [[78 -71 -71 -71] -71]
Test Case:  89 | Input/Output: [[-26 -34 -34 -34] -34]
Test Case:  90 | Input/Output: [[16 -29 16 16] -29]
Test Case:  91 | Input/Output: [[-33 -33 -33 -79] -79]
Test Case:  92 | Input/Output: [[28 28 -31 28] -31]
Test Case:  93 | Input/Output: [[-82 -82 -82 -24] -82]
Test Case:  94 | Input/Output: [[17 -38 -38 -38] -38]
Test Case:  95 | Input/Output: [[32 -89 -89 -89] -89]
Test Case:  96 | Input/Output: [[77 77 77 14] 14]
Test Case:  97 | Input/Output: [[-54 -54 -54 34] -54]
Test Case:  98 | Input/Output: [[69 69 69 75] 69]
Test Case:  99 | Input/Output: [[72 -61 -61 -61] -61]
Test Case: 100 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 101 | Input/Output: [(20 20 20 20) 20]
Test Case: 102 | Input/Output: [(40 40 40 40) 40]
Test Case: 103 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 104 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 105 | Input/Output: [(97 97 97 97) 97]
Test Case: 106 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 107 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 108 | Input/Output: [(9 9 9 9) 9]
Test Case: 109 | Input/Output: [(85 85 85 85) 85]
Test Case: 110 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 111 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 112 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 113 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 114 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 115 | Input/Output: [(11 11 11 11) 11]
Test Case: 116 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 117 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 118 | Input/Output: [(5 5 5 5) 5]
Test Case: 119 | Input/Output: [(49 49 49 49) 49]
Test Case: 120 | Input/Output: [(28 28 28 28) 28]
Test Case: 121 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 122 | Input/Output: [(52 52 52 52) 52]
Test Case: 123 | Input/Output: [(30 30 30 30) 30]
Test Case: 124 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 125 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 126 | Input/Output: [(43 43 43 43) 43]
Test Case: 127 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 128 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 129 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 130 | Input/Output: [(26 26 26 26) 26]
Test Case: 131 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 132 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 133 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 134 | Input/Output: [(82 82 82 82) 82]
Test Case: 135 | Input/Output: [(52 52 52 52) 52]
Test Case: 136 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 137 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 138 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 139 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 140 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 141 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 142 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 143 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 144 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 145 | Input/Output: [(70 70 70 70) 70]
Test Case: 146 | Input/Output: [(35 35 35 35) 35]
Test Case: 147 | Input/Output: [(65 65 65 65) 65]
Test Case: 148 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 149 | Input/Output: [(1 1 1 1) 1]
Test Case: 150 | Input/Output: [(34 34 34 34) 34]
Test Case: 151 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 152 | Input/Output: [(48 48 48 48) 48]
Test Case: 153 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 154 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 155 | Input/Output: [(19 19 19 19) 19]
Test Case: 156 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 157 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 158 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 159 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 160 | Input/Output: [(13 13 13 13) 13]
Test Case: 161 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 162 | Input/Output: [(89 89 89 89) 89]
Test Case: 163 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 164 | Input/Output: [(98 98 98 98) 98]
Test Case: 165 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 166 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 167 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 168 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 169 | Input/Output: [(42 42 42 42) 42]
Test Case: 170 | Input/Output: [(77 77 77 77) 77]
Test Case: 171 | Input/Output: [(27 27 27 27) 27]
Test Case: 172 | Input/Output: [(14 14 14 14) 14]
Test Case: 173 | Input/Output: [(60 60 60 60) 60]
Test Case: 174 | Input/Output: [(2 2 2 2) 2]
Test Case: 175 | Input/Output: [(99 99 99 99) 99]
Test Case: 176 | Input/Output: [(83 83 83 83) 83]
Test Case: 177 | Input/Output: [(76 76 76 76) 76]
Test Case: 178 | Input/Output: [(60 60 60 60) 60]
Test Case: 179 | Input/Output: [(84 84 84 84) 84]
Test Case: 180 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 181 | Input/Output: [(43 43 43 43) 43]
Test Case: 182 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 183 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 184 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 185 | Input/Output: [(33 33 33 33) 33]
Test Case: 186 | Input/Output: [(89 89 89 89) 89]
Test Case: 187 | Input/Output: [(99 99 99 99) 99]
Test Case: 188 | Input/Output: [(10 10 10 10) 10]
Test Case: 189 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 190 | Input/Output: [(81 81 81 81) 81]
Test Case: 191 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 192 | Input/Output: [(4 4 4 4) 4]
Test Case: 193 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 194 | Input/Output: [(35 35 35 35) 35]
Test Case: 195 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 196 | Input/Output: [(26 26 26 26) 26]
Test Case: 197 | Input/Output: [(32 32 32 32) 32]
Test Case: 198 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 199 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 200 | Input/Output: [(6 89 93 29) 6]
Test Case: 201 | Input/Output: [(59 32 39 40) 32]
Test Case: 202 | Input/Output: [(41 31 86 89) 31]
Test Case: 203 | Input/Output: [(37 63 59 37) 37]
Test Case: 204 | Input/Output: [(75 57 68 53) 53]
Test Case: 205 | Input/Output: [(92 27 34 58) 27]
Test Case: 206 | Input/Output: [(9 100 9 54) 9]
Test Case: 207 | Input/Output: [(41 23 84 44) 23]
Test Case: 208 | Input/Output: [(4 98 38 27) 4]
Test Case: 209 | Input/Output: [(64 10 35 90) 10]
Test Case: 210 | Input/Output: [(68 46 36 39) 36]
Test Case: 211 | Input/Output: [(94 27 20 10) 10]
Test Case: 212 | Input/Output: [(59 35 81 70) 35]
Test Case: 213 | Input/Output: [(56 47 72 96) 47]
Test Case: 214 | Input/Output: [(46 29 72 25) 25]
Test Case: 215 | Input/Output: [(0 59 95 2) 0]
Test Case: 216 | Input/Output: [(83 66 50 59) 50]
Test Case: 217 | Input/Output: [(92 88 89 31) 31]
Test Case: 218 | Input/Output: [(70 24 6 45) 6]
Test Case: 219 | Input/Output: [(90 24 81 17) 17]
Test Case: 220 | Input/Output: [(92 48 48 9) 9]
Test Case: 221 | Input/Output: [(55 79 7 58) 7]
Test Case: 222 | Input/Output: [(22 6 30 73) 6]
Test Case: 223 | Input/Output: [(95 11 48 40) 11]
Test Case: 224 | Input/Output: [(47 33 8 2) 2]
Test Case: 225 | Input/Output: [(78 76 20 58) 20]
Test Case: 226 | Input/Output: [(60 5 49 26) 5]
Test Case: 227 | Input/Output: [(69 46 36 6) 6]
Test Case: 228 | Input/Output: [(93 14 6 85) 6]
Test Case: 229 | Input/Output: [(76 89 30 13) 13]
Test Case: 230 | Input/Output: [(34 100 49 82) 34]
Test Case: 231 | Input/Output: [(18 11 66 49) 11]
Test Case: 232 | Input/Output: [(50 98 75 41) 41]
Test Case: 233 | Input/Output: [(49 85 49 89) 49]
Test Case: 234 | Input/Output: [(58 6 80 18) 6]
Test Case: 235 | Input/Output: [(57 38 94 59) 38]
Test Case: 236 | Input/Output: [(75 20 68 29) 20]
Test Case: 237 | Input/Output: [(22 1 19 84) 1]
Test Case: 238 | Input/Output: [(56 86 2 40) 2]
Test Case: 239 | Input/Output: [(26 97 84 48) 26]
Test Case: 240 | Input/Output: [(42 29 87 0) 0]
Test Case: 241 | Input/Output: [(61 26 19 0) 0]
Test Case: 242 | Input/Output: [(81 58 4 26) 4]
Test Case: 243 | Input/Output: [(83 40 88 74) 40]
Test Case: 244 | Input/Output: [(94 65 60 4) 4]
Test Case: 245 | Input/Output: [(85 39 1 66) 1]
Test Case: 246 | Input/Output: [(20 34 7 70) 7]
Test Case: 247 | Input/Output: [(54 27 15 28) 15]
Test Case: 248 | Input/Output: [(86 61 98 51) 51]
Test Case: 249 | Input/Output: [(0 0 48 1) 0]
Test Case: 250 | Input/Output: [(75 82 16 4) 4]
Test Case: 251 | Input/Output: [(67 59 7 10) 7]
Test Case: 252 | Input/Output: [(81 57 28 24) 24]
Test Case: 253 | Input/Output: [(13 86 79 11) 11]
Test Case: 254 | Input/Output: [(7 5 31 11) 5]
Test Case: 255 | Input/Output: [(4 95 98 79) 4]
Test Case: 256 | Input/Output: [(25 82 81 20) 20]
Test Case: 257 | Input/Output: [(66 94 53 34) 34]
Test Case: 258 | Input/Output: [(36 68 36 39) 36]
Test Case: 259 | Input/Output: [(23 35 98 47) 23]
Test Case: 260 | Input/Output: [(91 35 59 24) 24]
Test Case: 261 | Input/Output: [(69 27 96 9) 9]
Test Case: 262 | Input/Output: [(85 63 61 14) 14]
Test Case: 263 | Input/Output: [(92 15 83 22) 15]
Test Case: 264 | Input/Output: [(79 0 16 91) 0]
Test Case: 265 | Input/Output: [(29 48 2 45) 2]
Test Case: 266 | Input/Output: [(36 88 91 21) 21]
Test Case: 267 | Input/Output: [(50 13 48 91) 13]
Test Case: 268 | Input/Output: [(48 80 5 14) 5]
Test Case: 269 | Input/Output: [(39 37 72 75) 37]
Test Case: 270 | Input/Output: [(68 46 94 87) 46]
Test Case: 271 | Input/Output: [(73 38 29 26) 26]
Test Case: 272 | Input/Output: [(57 19 26 52) 19]
Test Case: 273 | Input/Output: [(9 63 21 17) 9]
Test Case: 274 | Input/Output: [(16 85 48 84) 16]
Test Case: 275 | Input/Output: [(78 10 90 13) 10]
Test Case: 276 | Input/Output: [(74 34 31 38) 31]
Test Case: 277 | Input/Output: [(59 80 42 97) 42]
Test Case: 278 | Input/Output: [(74 73 77 19) 19]
Test Case: 279 | Input/Output: [(65 25 3 27) 3]
Test Case: 280 | Input/Output: [(22 71 59 56) 22]
Test Case: 281 | Input/Output: [(74 36 99 80) 36]
Test Case: 282 | Input/Output: [(63 61 39 5) 5]
Test Case: 283 | Input/Output: [(87 55 75 7) 7]
Test Case: 284 | Input/Output: [(100 52 70 20) 20]
Test Case: 285 | Input/Output: [(12 95 58 31) 12]
Test Case: 286 | Input/Output: [(52 21 16 66) 16]
Test Case: 287 | Input/Output: [(19 99 96 73) 19]
Test Case: 288 | Input/Output: [(94 71 40 75) 40]
Test Case: 289 | Input/Output: [(72 12 2 57) 2]
Test Case: 290 | Input/Output: [(34 44 91 17) 17]
Test Case: 291 | Input/Output: [(88 41 45 53) 41]
Test Case: 292 | Input/Output: [(12 45 18 0) 0]
Test Case: 293 | Input/Output: [(33 48 24 31) 24]
Test Case: 294 | Input/Output: [(90 14 29 58) 14]
Test Case: 295 | Input/Output: [(62 44 0 44) 0]
Test Case: 296 | Input/Output: [(86 15 33 38) 15]
Test Case: 297 | Input/Output: [(86 47 31 93) 31]
Test Case: 298 | Input/Output: [(89 37 76 70) 37]
Test Case: 299 | Input/Output: [(100 28 79 67) 28]
Test Case: 300 | Input/Output: [(33 4 83 56) 4]
Test Case: 301 | Input/Output: [(12 15 0 80) 0]
Test Case: 302 | Input/Output: [(40 7 80 70) 7]
Test Case: 303 | Input/Output: [(9 75 13 61) 9]
Test Case: 304 | Input/Output: [(50 33 91 97) 33]
Test Case: 305 | Input/Output: [(39 3 73 52) 3]
Test Case: 306 | Input/Output: [(99 49 42 56) 42]
Test Case: 307 | Input/Output: [(72 7 27 89) 7]
Test Case: 308 | Input/Output: [(79 49 83 57) 49]
Test Case: 309 | Input/Output: [(35 70 51 58) 35]
Test Case: 310 | Input/Output: [(80 16 84 48) 16]
Test Case: 311 | Input/Output: [(1 23 70 91) 1]
Test Case: 312 | Input/Output: [(36 91 38 89) 36]
Test Case: 313 | Input/Output: [(42 8 34 59) 8]
Test Case: 314 | Input/Output: [(77 58 28 20) 20]
Test Case: 315 | Input/Output: [(0 57 57 92) 0]
Test Case: 316 | Input/Output: [(56 23 75 59) 23]
Test Case: 317 | Input/Output: [(24 33 13 9) 9]
Test Case: 318 | Input/Output: [(5 15 99 21) 5]
Test Case: 319 | Input/Output: [(75 71 28 48) 28]
Test Case: 320 | Input/Output: [(63 43 7 28) 7]
Test Case: 321 | Input/Output: [(36 82 47 24) 24]
Test Case: 322 | Input/Output: [(65 57 5 37) 5]
Test Case: 323 | Input/Output: [(65 86 24 93) 24]
Test Case: 324 | Input/Output: [(34 29 35 44) 29]
Test Case: 325 | Input/Output: [(53 22 30 76) 22]
Test Case: 326 | Input/Output: [(71 15 32 91) 15]
Test Case: 327 | Input/Output: [(39 90 100 81) 39]
Test Case: 328 | Input/Output: [(86 100 97 79) 79]
Test Case: 329 | Input/Output: [(97 82 0 34) 0]
Test Case: 330 | Input/Output: [(17 91 100 21) 17]
Test Case: 331 | Input/Output: [(34 78 68 10) 10]
Test Case: 332 | Input/Output: [(75 73 89 38) 38]
Test Case: 333 | Input/Output: [(50 25 71 78) 25]
Test Case: 334 | Input/Output: [(55 91 52 65) 52]
Test Case: 335 | Input/Output: [(57 92 59 84) 57]
Test Case: 336 | Input/Output: [(56 19 47 98) 19]
Test Case: 337 | Input/Output: [(56 44 34 9) 9]
Test Case: 338 | Input/Output: [(76 66 55 26) 26]
Test Case: 339 | Input/Output: [(82 69 5 45) 5]
Test Case: 340 | Input/Output: [(24 65 29 58) 24]
Test Case: 341 | Input/Output: [(53 31 53 70) 31]
Test Case: 342 | Input/Output: [(0 97 100 73) 0]
Test Case: 343 | Input/Output: [(16 33 12 85) 12]
Test Case: 344 | Input/Output: [(96 33 89 93) 33]
Test Case: 345 | Input/Output: [(100 85 75 95) 75]
Test Case: 346 | Input/Output: [(1 100 69 32) 1]
Test Case: 347 | Input/Output: [(63 19 46 35) 19]
Test Case: 348 | Input/Output: [(15 25 7 44) 7]
Test Case: 349 | Input/Output: [(39 13 87 25) 13]
Test Case: 350 | Input/Output: [(35 61 62 81) 35]
Test Case: 351 | Input/Output: [(38 29 35 56) 29]
Test Case: 352 | Input/Output: [(11 57 47 87) 11]
Test Case: 353 | Input/Output: [(70 68 2 38) 2]
Test Case: 354 | Input/Output: [(86 91 45 10) 10]
Test Case: 355 | Input/Output: [(6 4 20 77) 4]
Test Case: 356 | Input/Output: [(10 43 90 57) 10]
Test Case: 357 | Input/Output: [(73 30 3 95) 3]
Test Case: 358 | Input/Output: [(99 89 16 61) 16]
Test Case: 359 | Input/Output: [(62 17 57 11) 11]
Test Case: 360 | Input/Output: [(80 99 45 8) 8]
Test Case: 361 | Input/Output: [(66 37 55 85) 37]
Test Case: 362 | Input/Output: [(50 50 40 58) 40]
Test Case: 363 | Input/Output: [(31 95 35 58) 31]
Test Case: 364 | Input/Output: [(58 79 17 53) 17]
Test Case: 365 | Input/Output: [(20 53 31 83) 20]
Test Case: 366 | Input/Output: [(29 46 3 72) 3]
Test Case: 367 | Input/Output: [(72 2 53 39) 2]
Test Case: 368 | Input/Output: [(74 28 69 23) 23]
Test Case: 369 | Input/Output: [(30 62 74 97) 30]
Test Case: 370 | Input/Output: [(65 1 69 54) 1]
Test Case: 371 | Input/Output: [(70 70 56 39) 39]
Test Case: 372 | Input/Output: [(26 53 75 88) 26]
Test Case: 373 | Input/Output: [(70 59 13 59) 13]
Test Case: 374 | Input/Output: [(90 27 78 6) 6]
Test Case: 375 | Input/Output: [(21 53 76 75) 21]
Test Case: 376 | Input/Output: [(93 76 29 28) 28]
Test Case: 377 | Input/Output: [(89 67 45 64) 45]
Test Case: 378 | Input/Output: [(46 83 21 73) 21]
Test Case: 379 | Input/Output: [(65 1 34 24) 1]
Test Case: 380 | Input/Output: [(77 3 85 84) 3]
Test Case: 381 | Input/Output: [(33 39 16 30) 16]
Test Case: 382 | Input/Output: [(2 15 33 32) 2]
Test Case: 383 | Input/Output: [(57 86 53 8) 8]
Test Case: 384 | Input/Output: [(65 3 12 71) 3]
Test Case: 385 | Input/Output: [(43 2 25 41) 2]
Test Case: 386 | Input/Output: [(0 6 69 15) 0]
Test Case: 387 | Input/Output: [(76 50 22 22) 22]
Test Case: 388 | Input/Output: [(21 10 23 100) 10]
Test Case: 389 | Input/Output: [(37 30 64 44) 30]
Test Case: 390 | Input/Output: [(10 52 93 37) 10]
Test Case: 391 | Input/Output: [(91 92 20 35) 20]
Test Case: 392 | Input/Output: [(85 9 4 27) 4]
Test Case: 393 | Input/Output: [(19 42 77 4) 4]
Test Case: 394 | Input/Output: [(27 22 10 74) 10]
Test Case: 395 | Input/Output: [(31 63 88 73) 31]
Test Case: 396 | Input/Output: [(48 83 71 18) 18]
Test Case: 397 | Input/Output: [(61 47 95 37) 37]
Test Case: 398 | Input/Output: [(63 86 39 43) 39]
Test Case: 399 | Input/Output: [(8 64 77 72) 8]
Test Case: 400 | Input/Output: [(14 -59 48 99) -59]
Test Case: 401 | Input/Output: [(-74 -11 69 94) -74]
Test Case: 402 | Input/Output: [(19 -11 -70 -93) -93]
Test Case: 403 | Input/Output: [(97 -96 3 -8) -96]
Test Case: 404 | Input/Output: [(-85 24 -74 -63) -85]
Test Case: 405 | Input/Output: [(-32 -57 63 59) -57]
Test Case: 406 | Input/Output: [(88 15 66 -28) -28]
Test Case: 407 | Input/Output: [(3 -64 73 90) -64]
Test Case: 408 | Input/Output: [(-69 -17 57 -84) -84]
Test Case: 409 | Input/Output: [(-24 -64 -98 -90) -98]
Test Case: 410 | Input/Output: [(-33 87 -69 -78) -78]
Test Case: 411 | Input/Output: [(5 42 -37 -68) -68]
Test Case: 412 | Input/Output: [(36 47 31 -39) -39]
Test Case: 413 | Input/Output: [(-58 -38 -14 21) -58]
Test Case: 414 | Input/Output: [(-72 58 -26 21) -72]
Test Case: 415 | Input/Output: [(-7 32 -96 -97) -97]
Test Case: 416 | Input/Output: [(-51 4 94 0) -51]
Test Case: 417 | Input/Output: [(98 -96 -3 -1) -96]
Test Case: 418 | Input/Output: [(-85 -80 63 62) -85]
Test Case: 419 | Input/Output: [(-36 -66 -68 3) -68]
Test Case: 420 | Input/Output: [(-78 -14 -69 -59) -78]
Test Case: 421 | Input/Output: [(-12 6 61 -68) -68]
Test Case: 422 | Input/Output: [(-6 -24 70 -88) -88]
Test Case: 423 | Input/Output: [(0 14 -72 -37) -72]
Test Case: 424 | Input/Output: [(-6 71 -55 85) -55]
Test Case: 425 | Input/Output: [(71 82 7 -45) -45]
Test Case: 426 | Input/Output: [(-64 -13 54 99) -64]
Test Case: 427 | Input/Output: [(82 -55 54 37) -55]
Test Case: 428 | Input/Output: [(80 -29 2 26) -29]
Test Case: 429 | Input/Output: [(-42 1 77 -48) -48]
Test Case: 430 | Input/Output: [(-94 36 -96 -77) -96]
Test Case: 431 | Input/Output: [(-52 -49 -93 -58) -93]
Test Case: 432 | Input/Output: [(65 6 -43 -64) -64]
Test Case: 433 | Input/Output: [(-19 -16 -31 80) -31]
Test Case: 434 | Input/Output: [(-43 68 -55 71) -55]
Test Case: 435 | Input/Output: [(37 -9 3 -29) -29]
Test Case: 436 | Input/Output: [(16 -86 56 -77) -86]
Test Case: 437 | Input/Output: [(100 4 -11 -22) -22]
Test Case: 438 | Input/Output: [(44 -41 -44 -65) -65]
Test Case: 439 | Input/Output: [(29 99 34 35) 29]
Test Case: 440 | Input/Output: [(-77 -43 23 72) -77]
Test Case: 441 | Input/Output: [(99 41 73 25) 25]
Test Case: 442 | Input/Output: [(-33 -45 -23 74) -45]
Test Case: 443 | Input/Output: [(75 22 -65 -84) -84]
Test Case: 444 | Input/Output: [(-67 63 91 4) -67]
Test Case: 445 | Input/Output: [(-92 44 52 74) -92]
Test Case: 446 | Input/Output: [(57 -56 -70 45) -70]
Test Case: 447 | Input/Output: [(81 -2 10 47) -2]
Test Case: 448 | Input/Output: [(28 82 1 -38) -38]
Test Case: 449 | Input/Output: [(75 -19 -20 35) -20]
Test Case: 450 | Input/Output: [(90 -98 19 90) -98]
Test Case: 451 | Input/Output: [(20 -8 -49 92) -49]
Test Case: 452 | Input/Output: [(39 -4 -25 54) -25]
Test Case: 453 | Input/Output: [(83 -46 -44 -24) -46]
Test Case: 454 | Input/Output: [(-82 -37 -24 -30) -82]
Test Case: 455 | Input/Output: [(58 100 -60 -5) -60]
Test Case: 456 | Input/Output: [(58 -95 61 83) -95]
Test Case: 457 | Input/Output: [(36 3 8 -12) -12]
Test Case: 458 | Input/Output: [(-88 -43 -34 1) -88]
Test Case: 459 | Input/Output: [(57 -10 6 24) -10]
Test Case: 460 | Input/Output: [(62 31 -96 70) -96]
Test Case: 461 | Input/Output: [(0 -70 -28 70) -70]
Test Case: 462 | Input/Output: [(-49 -44 28 -82) -82]
Test Case: 463 | Input/Output: [(-79 -79 53 -56) -79]
Test Case: 464 | Input/Output: [(42 79 -25 -52) -52]
Test Case: 465 | Input/Output: [(-86 43 -99 -32) -99]
Test Case: 466 | Input/Output: [(-30 86 59 -82) -82]
Test Case: 467 | Input/Output: [(90 -82 33 -24) -82]
Test Case: 468 | Input/Output: [(-63 -38 -69 84) -69]
Test Case: 469 | Input/Output: [(72 39 -33 -31) -33]
Test Case: 470 | Input/Output: [(-92 -78 55 -31) -92]
Test Case: 471 | Input/Output: [(88 65 52 49) 49]
Test Case: 472 | Input/Output: [(66 -63 84 -73) -73]
Test Case: 473 | Input/Output: [(63 71 -51 27) -51]
Test Case: 474 | Input/Output: [(13 58 75 87) 13]
Test Case: 475 | Input/Output: [(-55 -79 95 86) -79]
Test Case: 476 | Input/Output: [(-4 29 41 -12) -12]
Test Case: 477 | Input/Output: [(77 47 -3 -63) -63]
Test Case: 478 | Input/Output: [(33 -35 -65 55) -65]
Test Case: 479 | Input/Output: [(55 -44 -61 5) -61]
Test Case: 480 | Input/Output: [(-26 -46 52 -16) -46]
Test Case: 481 | Input/Output: [(-49 73 -45 -21) -49]
Test Case: 482 | Input/Output: [(76 17 3 71) 3]
Test Case: 483 | Input/Output: [(14 -40 -93 -37) -93]
Test Case: 484 | Input/Output: [(-100 -6 -82 47) -100]
Test Case: 485 | Input/Output: [(19 -97 97 82) -97]
Test Case: 486 | Input/Output: [(10 -83 -7 -55) -83]
Test Case: 487 | Input/Output: [(83 30 -42 29) -42]
Test Case: 488 | Input/Output: [(54 -54 24 81) -54]
Test Case: 489 | Input/Output: [(-34 80 84 -38) -38]
Test Case: 490 | Input/Output: [(-69 -20 84 75) -69]
Test Case: 491 | Input/Output: [(34 -3 -40 62) -40]
Test Case: 492 | Input/Output: [(-21 -16 57 -95) -95]
Test Case: 493 | Input/Output: [(62 -99 -33 -88) -99]
Test Case: 494 | Input/Output: [(-85 -94 -96 -78) -96]
Test Case: 495 | Input/Output: [(23 96 -25 -73) -73]
Test Case: 496 | Input/Output: [(19 21 -37 31) -37]
Test Case: 497 | Input/Output: [(42 47 65 -20) -20]
Test Case: 498 | Input/Output: [(49 36 84 53) 36]
Test Case: 499 | Input/Output: [(-21 8 -88 51) -88]
Test Case: 500 | Input/Output: [(89 8 89 -93) -93]
Test Case: 501 | Input/Output: [(90 61 -68 21) -68]
Test Case: 502 | Input/Output: [(-12 7 96 52) -12]
Test Case: 503 | Input/Output: [(-53 73 -70 41) -70]
Test Case: 504 | Input/Output: [(-100 -27 60 -14) -100]
Test Case: 505 | Input/Output: [(-25 -65 -10 -73) -73]
Test Case: 506 | Input/Output: [(68 38 12 -65) -65]
Test Case: 507 | Input/Output: [(-86 58 -46 -27) -86]
Test Case: 508 | Input/Output: [(73 5 22 96) 5]
Test Case: 509 | Input/Output: [(17 -42 12 68) -42]
Test Case: 510 | Input/Output: [(-8 45 -12 -13) -13]
Test Case: 511 | Input/Output: [(87 57 89 -64) -64]
Test Case: 512 | Input/Output: [(40 -11 -38 -76) -76]
Test Case: 513 | Input/Output: [(43 -98 51 1) -98]
Test Case: 514 | Input/Output: [(-76 19 96 -55) -76]
Test Case: 515 | Input/Output: [(70 93 92 -87) -87]
Test Case: 516 | Input/Output: [(-37 -60 -61 -97) -97]
Test Case: 517 | Input/Output: [(-65 -3 -85 99) -85]
Test Case: 518 | Input/Output: [(-27 74 -57 36) -57]
Test Case: 519 | Input/Output: [(-40 92 -1 -48) -48]
Test Case: 520 | Input/Output: [(31 40 -86 59) -86]
Test Case: 521 | Input/Output: [(55 -7 92 96) -7]
Test Case: 522 | Input/Output: [(-22 -7 -14 -42) -42]
Test Case: 523 | Input/Output: [(-52 -83 2 -13) -83]
Test Case: 524 | Input/Output: [(97 -41 -75 -30) -75]
Test Case: 525 | Input/Output: [(52 -38 -60 71) -60]
Test Case: 526 | Input/Output: [(21 -33 43 -90) -90]
Test Case: 527 | Input/Output: [(99 -94 -63 -19) -94]
Test Case: 528 | Input/Output: [(-3 -81 7 -85) -85]
Test Case: 529 | Input/Output: [(74 -62 88 59) -62]
Test Case: 530 | Input/Output: [(75 76 65 -11) -11]
Test Case: 531 | Input/Output: [(-51 -68 17 -68) -68]
Test Case: 532 | Input/Output: [(-25 85 72 11) -25]
Test Case: 533 | Input/Output: [(82 -40 2 61) -40]
Test Case: 534 | Input/Output: [(21 36 -54 30) -54]
Test Case: 535 | Input/Output: [(-13 -71 -69 36) -71]
Test Case: 536 | Input/Output: [(12 -85 53 31) -85]
Test Case: 537 | Input/Output: [(-1 -29 72 50) -29]
Test Case: 538 | Input/Output: [(74 -20 -34 -67) -67]
Test Case: 539 | Input/Output: [(-32 76 53 -4) -32]
Test Case: 540 | Input/Output: [(-71 -56 -85 -99) -99]
Test Case: 541 | Input/Output: [(-32 -38 -96 -31) -96]
Test Case: 542 | Input/Output: [(-60 -42 2 29) -60]
Test Case: 543 | Input/Output: [(-8 -75 23 -62) -75]
Test Case: 544 | Input/Output: [(-65 72 93 -33) -65]
Test Case: 545 | Input/Output: [(99 76 -54 76) -54]
Test Case: 546 | Input/Output: [(19 -65 -96 49) -96]
Test Case: 547 | Input/Output: [(47 -69 81 88) -69]
Test Case: 548 | Input/Output: [(89 -8 -19 39) -19]
Test Case: 549 | Input/Output: [(44 -84 -68 -9) -84]
Test Case: 550 | Input/Output: [(33 70 -66 17) -66]
Test Case: 551 | Input/Output: [(-19 -7 -93 10) -93]
Test Case: 552 | Input/Output: [(7 13 -72 29) -72]
Test Case: 553 | Input/Output: [(-59 6 -44 78) -59]
Test Case: 554 | Input/Output: [(-12 57 -62 51) -62]
Test Case: 555 | Input/Output: [(-88 -8 -45 -50) -88]
Test Case: 556 | Input/Output: [(-10 -20 -46 58) -46]
Test Case: 557 | Input/Output: [(66 -57 -7 -73) -73]
Test Case: 558 | Input/Output: [(-5 100 14 65) -5]
Test Case: 559 | Input/Output: [(-96 35 -46 -85) -96]
Test Case: 560 | Input/Output: [(-74 -37 -84 100) -84]
Test Case: 561 | Input/Output: [(-56 -45 91 9) -56]
Test Case: 562 | Input/Output: [(17 -21 -1 16) -21]
Test Case: 563 | Input/Output: [(-6 30 -66 6) -66]
Test Case: 564 | Input/Output: [(-56 -55 72 27) -56]
Test Case: 565 | Input/Output: [(42 -19 68 72) -19]
Test Case: 566 | Input/Output: [(-55 -86 82 -17) -86]
Test Case: 567 | Input/Output: [(-7 85 61 -88) -88]
Test Case: 568 | Input/Output: [(-25 20 98 22) -25]
Test Case: 569 | Input/Output: [(77 -76 -98 14) -98]
Test Case: 570 | Input/Output: [(17 -55 45 -40) -55]
Test Case: 571 | Input/Output: [(-91 -45 -79 93) -91]
Test Case: 572 | Input/Output: [(-26 -89 35 18) -89]
Test Case: 573 | Input/Output: [(43 89 42 -17) -17]
Test Case: 574 | Input/Output: [(-69 11 -44 -47) -69]
Test Case: 575 | Input/Output: [(59 56 -4 -50) -50]
Test Case: 576 | Input/Output: [(-20 -56 -46 41) -56]
Test Case: 577 | Input/Output: [(35 -89 18 75) -89]
Test Case: 578 | Input/Output: [(-74 13 -45 59) -74]
Test Case: 579 | Input/Output: [(-3 -17 -20 -3) -20]
Test Case: 580 | Input/Output: [(-51 76 22 -12) -51]
Test Case: 581 | Input/Output: [(-38 -32 -56 12) -56]
Test Case: 582 | Input/Output: [(71 78 -46 -48) -48]
Test Case: 583 | Input/Output: [(-1 -2 72 68) -2]
Test Case: 584 | Input/Output: [(-81 11 -34 -42) -81]
Test Case: 585 | Input/Output: [(-61 97 68 -69) -69]
Test Case: 586 | Input/Output: [(53 75 -42 15) -42]
Test Case: 587 | Input/Output: [(-57 16 -59 67) -59]
Test Case: 588 | Input/Output: [(65 -82 45 -70) -82]
Test Case: 589 | Input/Output: [(82 -85 -91 28) -91]
Test Case: 590 | Input/Output: [(-32 -62 51 56) -62]
Test Case: 591 | Input/Output: [(-92 68 -6 50) -92]
Test Case: 592 | Input/Output: [(60 16 -1 94) -1]
Test Case: 593 | Input/Output: [(28 -17 20 -100) -100]
Test Case: 594 | Input/Output: [(57 -4 -54 -60) -60]
Test Case: 595 | Input/Output: [(41 -52 35 40) -52]
Test Case: 596 | Input/Output: [(59 67 -30 32) -30]
Test Case: 597 | Input/Output: [(62 -75 -38 3) -75]
Test Case: 598 | Input/Output: [(-85 95 -46 50) -85]
Test Case: 599 | Input/Output: [(-48 83 -100 5) -100]
Test Case: 600 | Input/Output: [(-35 86 31 60) -35]
Test Case: 601 | Input/Output: [(-15 -51 -42 60) -51]
Test Case: 602 | Input/Output: [(94 -90 -22 -70) -90]
Test Case: 603 | Input/Output: [(-33 -91 76 92) -91]
Test Case: 604 | Input/Output: [(-77 70 -92 -88) -92]
Test Case: 605 | Input/Output: [(-79 -81 19 -70) -81]
Test Case: 606 | Input/Output: [(-42 77 54 69) -42]
Test Case: 607 | Input/Output: [(3 -93 -87 16) -93]
Test Case: 608 | Input/Output: [(20 -93 -83 54) -93]
Test Case: 609 | Input/Output: [(1 -43 89 5) -43]
Test Case: 610 | Input/Output: [(-15 79 -16 44) -16]
Test Case: 611 | Input/Output: [(-32 -83 83 81) -83]
Test Case: 612 | Input/Output: [(-38 -94 -64 86) -94]
Test Case: 613 | Input/Output: [(18 97 -55 63) -55]
Test Case: 614 | Input/Output: [(-11 -33 -3 9) -33]
Test Case: 615 | Input/Output: [(-76 95 -54 58) -76]
Test Case: 616 | Input/Output: [(-71 -93 35 67) -93]
Test Case: 617 | Input/Output: [(55 66 48 -73) -73]
Test Case: 618 | Input/Output: [(-41 -18 -95 17) -95]
Test Case: 619 | Input/Output: [(38 -94 -70 -33) -94]
Test Case: 620 | Input/Output: [(71 -13 81 -19) -19]
Test Case: 621 | Input/Output: [(-83 -43 -53 -14) -83]
Test Case: 622 | Input/Output: [(-26 -19 -76 58) -76]
Test Case: 623 | Input/Output: [(62 78 83 94) 62]
Test Case: 624 | Input/Output: [(89 97 -41 83) -41]
Test Case: 625 | Input/Output: [(-85 55 -32 -99) -99]
Test Case: 626 | Input/Output: [(1 35 -50 -12) -50]
Test Case: 627 | Input/Output: [(-11 -20 -23 -80) -80]
Test Case: 628 | Input/Output: [(-73 43 60 35) -73]
Test Case: 629 | Input/Output: [(-33 8 43 -73) -73]
Test Case: 630 | Input/Output: [(-94 -63 -82 -48) -94]
Test Case: 631 | Input/Output: [(-64 40 58 -5) -64]
Test Case: 632 | Input/Output: [(-16 -40 34 56) -40]
Test Case: 633 | Input/Output: [(22 92 61 35) 22]
Test Case: 634 | Input/Output: [(-77 -5 -73 -69) -77]
Test Case: 635 | Input/Output: [(-21 53 -88 23) -88]
Test Case: 636 | Input/Output: [(-76 -93 99 16) -93]
Test Case: 637 | Input/Output: [(46 -65 67 49) -65]
Test Case: 638 | Input/Output: [(-60 61 3 7) -60]
Test Case: 639 | Input/Output: [(94 -69 100 78) -69]
Test Case: 640 | Input/Output: [(-20 32 90 -73) -73]
Test Case: 641 | Input/Output: [(-23 27 -98 87) -98]
Test Case: 642 | Input/Output: [(-9 -38 100 19) -38]
Test Case: 643 | Input/Output: [(-27 -8 -30 -45) -45]
Test Case: 644 | Input/Output: [(66 -48 -89 -15) -89]
Test Case: 645 | Input/Output: [(20 30 -11 -30) -30]
Test Case: 646 | Input/Output: [(-89 -22 90 13) -89]
Test Case: 647 | Input/Output: [(10 -80 48 -75) -80]
Test Case: 648 | Input/Output: [(11 2 62 55) 2]
Test Case: 649 | Input/Output: [(-13 77 -44 -70) -70]
Test Case: 650 | Input/Output: [(-18 72 51 46) -18]
Test Case: 651 | Input/Output: [(48 94 42 -2) -2]
Test Case: 652 | Input/Output: [(0 51 -57 -60) -60]
Test Case: 653 | Input/Output: [(-9 88 -99 37) -99]
Test Case: 654 | Input/Output: [(8 -70 -77 87) -77]
Test Case: 655 | Input/Output: [(-39 25 51 62) -39]
Test Case: 656 | Input/Output: [(-92 82 -17 25) -92]
Test Case: 657 | Input/Output: [(-15 -24 87 -26) -26]
Test Case: 658 | Input/Output: [(78 62 -84 -38) -84]
Test Case: 659 | Input/Output: [(60 -72 -87 18) -87]
Test Case: 660 | Input/Output: [(-60 -43 -40 90) -60]
Test Case: 661 | Input/Output: [(-10 -33 16 -6) -33]
Test Case: 662 | Input/Output: [(0 -7 -66 -26) -66]
Test Case: 663 | Input/Output: [(56 -32 -64 49) -64]
Test Case: 664 | Input/Output: [(89 100 -58 -83) -83]
Test Case: 665 | Input/Output: [(93 52 -33 -22) -33]
Test Case: 666 | Input/Output: [(-78 89 -28 23) -78]
Test Case: 667 | Input/Output: [(22 -30 61 81) -30]
Test Case: 668 | Input/Output: [(6 -49 -18 76) -49]
Test Case: 669 | Input/Output: [(-37 -69 88 -31) -69]
Test Case: 670 | Input/Output: [(-51 26 -3 80) -51]
Test Case: 671 | Input/Output: [(-8 76 -3 21) -8]
Test Case: 672 | Input/Output: [(-62 -40 54 -57) -62]
Test Case: 673 | Input/Output: [(-22 -100 -98 16) -100]
Test Case: 674 | Input/Output: [(-58 -71 74 -82) -82]
Test Case: 675 | Input/Output: [(-10 -81 -87 53) -87]
Test Case: 676 | Input/Output: [(-97 -80 22 1) -97]
Test Case: 677 | Input/Output: [(12 92 82 -61) -61]
Test Case: 678 | Input/Output: [(26 86 46 14) 14]
Test Case: 679 | Input/Output: [(-60 -53 18 -74) -74]
Test Case: 680 | Input/Output: [(-95 27 62 36) -95]
Test Case: 681 | Input/Output: [(-49 2 -49 73) -49]
Test Case: 682 | Input/Output: [(98 -51 68 -100) -100]
Test Case: 683 | Input/Output: [(27 72 89 -57) -57]
Test Case: 684 | Input/Output: [(-51 -61 -65 4) -65]
Test Case: 685 | Input/Output: [(-29 60 -69 -42) -69]
Test Case: 686 | Input/Output: [(64 59 75 81) 59]
Test Case: 687 | Input/Output: [(-52 18 -67 -25) -67]
Test Case: 688 | Input/Output: [(-26 -24 82 -90) -90]
Test Case: 689 | Input/Output: [(13 34 72 72) 13]
Test Case: 690 | Input/Output: [(17 81 8 39) 8]
Test Case: 691 | Input/Output: [(-45 20 64 -19) -45]
Test Case: 692 | Input/Output: [(38 55 6 -89) -89]
Test Case: 693 | Input/Output: [(-84 -80 -15 95) -84]
Test Case: 694 | Input/Output: [(53 64 28 46) 28]
Test Case: 695 | Input/Output: [(-44 48 76 -8) -44]
Test Case: 696 | Input/Output: [(5 86 -87 30) -87]
Test Case: 697 | Input/Output: [(-65 -90 -84 -74) -90]
Test Case: 698 | Input/Output: [(18 54 -100 39) -100]
Test Case: 699 | Input/Output: [(-30 -79 -19 -61) -79]
Test Case: 700 | Input/Output: [(-3 84 20 -82) -82]
Test Case: 701 | Input/Output: [(-33 -90 -68 -72) -90]
Test Case: 702 | Input/Output: [(-36 97 -38 -47) -47]
Test Case: 703 | Input/Output: [(-94 45 80 86) -94]
Test Case: 704 | Input/Output: [(-48 19 -13 -56) -56]
Test Case: 705 | Input/Output: [(-74 -95 -70 16) -95]
Test Case: 706 | Input/Output: [(92 84 90 -72) -72]
Test Case: 707 | Input/Output: [(98 -31 -46 10) -46]
Test Case: 708 | Input/Output: [(35 -58 65 95) -58]
Test Case: 709 | Input/Output: [(-48 73 27 -4) -48]
Test Case: 710 | Input/Output: [(-28 -66 -70 81) -70]
Test Case: 711 | Input/Output: [(-64 29 -51 -96) -96]
Test Case: 712 | Input/Output: [(-91 37 20 78) -91]
Test Case: 713 | Input/Output: [(94 80 47 -4) -4]
Test Case: 714 | Input/Output: [(-89 -82 44 -12) -89]
Test Case: 715 | Input/Output: [(45 -16 45 -33) -33]
Test Case: 716 | Input/Output: [(99 51 82 48) 48]
Test Case: 717 | Input/Output: [(-78 55 -17 36) -78]
Test Case: 718 | Input/Output: [(-50 -26 4 0) -50]
Test Case: 719 | Input/Output: [(58 -13 64 -6) -13]
Test Case: 720 | Input/Output: [(69 82 -27 26) -27]
Test Case: 721 | Input/Output: [(-41 -3 93 2) -41]
Test Case: 722 | Input/Output: [(13 55 34 -94) -94]
Test Case: 723 | Input/Output: [(-3 3 11 91) -3]
Test Case: 724 | Input/Output: [(-11 8 58 6) -11]
Test Case: 725 | Input/Output: [(4 43 17 -53) -53]
Test Case: 726 | Input/Output: [(47 9 0 14) 0]
Test Case: 727 | Input/Output: [(-37 -75 15 -71) -75]
Test Case: 728 | Input/Output: [(95 -40 -69 77) -69]
Test Case: 729 | Input/Output: [(17 -40 -30 62) -40]
Test Case: 730 | Input/Output: [(57 -10 -97 -53) -97]
Test Case: 731 | Input/Output: [(36 -100 -61 -1) -100]
Test Case: 732 | Input/Output: [(20 -54 -32 44) -54]
Test Case: 733 | Input/Output: [(34 84 98 9) 9]
Test Case: 734 | Input/Output: [(-95 17 -73 36) -95]
Test Case: 735 | Input/Output: [(20 49 10 88) 10]
Test Case: 736 | Input/Output: [(7 21 -73 91) -73]
Test Case: 737 | Input/Output: [(-95 -44 34 -71) -95]
Test Case: 738 | Input/Output: [(-41 -71 93 52) -71]
Test Case: 739 | Input/Output: [(11 48 6 89) 6]
Test Case: 740 | Input/Output: [(-15 -83 -96 -81) -96]
Test Case: 741 | Input/Output: [(-50 -70 50 41) -70]
Test Case: 742 | Input/Output: [(-87 -13 50 39) -87]
Test Case: 743 | Input/Output: [(21 32 100 75) 21]
Test Case: 744 | Input/Output: [(90 96 20 -1) -1]
Test Case: 745 | Input/Output: [(-28 61 -8 -59) -59]
Test Case: 746 | Input/Output: [(22 87 53 -21) -21]
Test Case: 747 | Input/Output: [(-36 77 -81 49) -81]
Test Case: 748 | Input/Output: [(-58 -67 -50 88) -67]
Test Case: 749 | Input/Output: [(11 -80 84 43) -80]
Test Case: 750 | Input/Output: [(-57 -62 2 46) -62]
Test Case: 751 | Input/Output: [(53 -65 92 -55) -65]
Test Case: 752 | Input/Output: [(-43 54 46 -25) -43]
Test Case: 753 | Input/Output: [(88 -45 -88 30) -88]
Test Case: 754 | Input/Output: [(47 -99 -75 -72) -99]
Test Case: 755 | Input/Output: [(-66 -41 -30 89) -66]
Test Case: 756 | Input/Output: [(94 -98 81 96) -98]
Test Case: 757 | Input/Output: [(-47 -1 -95 -60) -95]
Test Case: 758 | Input/Output: [(-59 -9 -23 -25) -59]
Test Case: 759 | Input/Output: [(55 -91 -2 69) -91]
Test Case: 760 | Input/Output: [(26 64 -6 93) -6]
Test Case: 761 | Input/Output: [(-49 -26 -44 -19) -49]
Test Case: 762 | Input/Output: [(60 54 -60 -40) -60]
Test Case: 763 | Input/Output: [(-17 15 23 -71) -71]
Test Case: 764 | Input/Output: [(20 -24 37 -89) -89]
Test Case: 765 | Input/Output: [(61 -19 31 53) -19]
Test Case: 766 | Input/Output: [(-90 59 82 92) -90]
Test Case: 767 | Input/Output: [(-3 -90 -40 -80) -90]
Test Case: 768 | Input/Output: [(43 16 -57 -17) -57]
Test Case: 769 | Input/Output: [(6 -18 50 63) -18]
Test Case: 770 | Input/Output: [(67 -25 -42 93) -42]
Test Case: 771 | Input/Output: [(-63 -34 33 -31) -63]
Test Case: 772 | Input/Output: [(57 68 87 -83) -83]
Test Case: 773 | Input/Output: [(-72 -70 -40 29) -72]
Test Case: 774 | Input/Output: [(5 33 68 50) 5]
Test Case: 775 | Input/Output: [(76 82 -39 -89) -89]
Test Case: 776 | Input/Output: [(78 -6 24 -24) -24]
Test Case: 777 | Input/Output: [(-38 17 -7 -73) -73]
Test Case: 778 | Input/Output: [(16 -39 88 -18) -39]
Test Case: 779 | Input/Output: [(-82 -12 27 -43) -82]
Test Case: 780 | Input/Output: [(-22 -98 17 100) -98]
Test Case: 781 | Input/Output: [(-20 33 72 88) -20]
Test Case: 782 | Input/Output: [(-12 61 -53 35) -53]
Test Case: 783 | Input/Output: [(93 -27 -39 24) -39]
Test Case: 784 | Input/Output: [(67 -85 -18 -46) -85]
Test Case: 785 | Input/Output: [(49 -71 50 -2) -71]
Test Case: 786 | Input/Output: [(-88 22 57 -66) -88]
Test Case: 787 | Input/Output: [(31 -41 -80 70) -80]
Test Case: 788 | Input/Output: [(-58 61 10 38) -58]
Test Case: 789 | Input/Output: [(-15 -81 37 83) -81]
Test Case: 790 | Input/Output: [(36 -76 -19 -100) -100]
Test Case: 791 | Input/Output: [(-26 12 73 86) -26]
Test Case: 792 | Input/Output: [(-57 6 50 -78) -78]
Test Case: 793 | Input/Output: [(95 5 68 -82) -82]
Test Case: 794 | Input/Output: [(41 89 -29 29) -29]
Test Case: 795 | Input/Output: [(66 54 21 -44) -44]
Test Case: 796 | Input/Output: [(-9 -42 78 26) -42]
Test Case: 797 | Input/Output: [(-100 52 44 70) -100]
Test Case: 798 | Input/Output: [(69 61 -92 50) -92]
Test Case: 799 | Input/Output: [(-93 -53 72 -9) -93]
Test Case: 800 | Input/Output: [(-59 14 91 68) -59]
Test Case: 801 | Input/Output: [(91 76 -72 85) -72]
Test Case: 802 | Input/Output: [(91 -15 85 -90) -90]
Test Case: 803 | Input/Output: [(-34 -94 -60 -22) -94]
Test Case: 804 | Input/Output: [(-10 12 56 -79) -79]
Test Case: 805 | Input/Output: [(95 92 59 -67) -67]
Test Case: 806 | Input/Output: [(14 9 -36 73) -36]
Test Case: 807 | Input/Output: [(-9 -33 14 -59) -59]
Test Case: 808 | Input/Output: [(-7 -6 -55 19) -55]
Test Case: 809 | Input/Output: [(60 27 -92 -51) -92]
Test Case: 810 | Input/Output: [(-20 22 -1 61) -20]
Test Case: 811 | Input/Output: [(-68 -12 62 24) -68]
Test Case: 812 | Input/Output: [(43 97 -20 -7) -20]
Test Case: 813 | Input/Output: [(38 35 63 -13) -13]
Test Case: 814 | Input/Output: [(94 18 -60 -16) -60]
Test Case: 815 | Input/Output: [(19 -44 14 81) -44]
Test Case: 816 | Input/Output: [(-61 -21 -64 -72) -72]
Test Case: 817 | Input/Output: [(91 29 -94 27) -94]
Test Case: 818 | Input/Output: [(20 -66 -53 -85) -85]
Test Case: 819 | Input/Output: [(-34 21 -35 -35) -35]
Test Case: 820 | Input/Output: [(97 -79 72 -69) -79]
Test Case: 821 | Input/Output: [(15 -67 70 -60) -67]
Test Case: 822 | Input/Output: [(7 -98 -90 65) -98]
Test Case: 823 | Input/Output: [(-48 -29 -46 60) -48]
Test Case: 824 | Input/Output: [(-65 48 -13 28) -65]
Test Case: 825 | Input/Output: [(52 -61 21 89) -61]
Test Case: 826 | Input/Output: [(42 -45 34 -36) -45]
Test Case: 827 | Input/Output: [(-84 -75 -16 -61) -84]
Test Case: 828 | Input/Output: [(65 31 41 17) 17]
Test Case: 829 | Input/Output: [(-35 52 -76 72) -76]
Test Case: 830 | Input/Output: [(18 81 -48 -60) -60]
Test Case: 831 | Input/Output: [(49 66 -96 79) -96]
Test Case: 832 | Input/Output: [(-20 -16 -97 78) -97]
Test Case: 833 | Input/Output: [(58 4 33 53) 4]
Test Case: 834 | Input/Output: [(-28 72 -18 68) -28]
Test Case: 835 | Input/Output: [(90 95 78 68) 68]
Test Case: 836 | Input/Output: [(71 -30 -19 17) -30]
Test Case: 837 | Input/Output: [(71 72 100 -25) -25]
Test Case: 838 | Input/Output: [(-21 -40 75 67) -40]
Test Case: 839 | Input/Output: [(82 6 -58 58) -58]
Test Case: 840 | Input/Output: [(21 -19 -91 -47) -91]
Test Case: 841 | Input/Output: [(59 -39 -16 12) -39]
Test Case: 842 | Input/Output: [(43 48 97 65) 43]
Test Case: 843 | Input/Output: [(33 -91 61 53) -91]
Test Case: 844 | Input/Output: [(-20 90 50 43) -20]
Test Case: 845 | Input/Output: [(-23 73 -33 -47) -47]
Test Case: 846 | Input/Output: [(84 -76 89 -80) -80]
Test Case: 847 | Input/Output: [(97 -67 29 -71) -71]
Test Case: 848 | Input/Output: [(-7 2 25 61) -7]
Test Case: 849 | Input/Output: [(-85 -66 -15 13) -85]
Test Case: 850 | Input/Output: [(42 44 34 88) 34]
Test Case: 851 | Input/Output: [(31 91 -96 54) -96]
Test Case: 852 | Input/Output: [(-89 -82 44 17) -89]
Test Case: 853 | Input/Output: [(29 75 -48 79) -48]
Test Case: 854 | Input/Output: [(-49 29 46 55) -49]
Test Case: 855 | Input/Output: [(-35 -21 84 -95) -95]
Test Case: 856 | Input/Output: [(-87 93 -57 -55) -87]
Test Case: 857 | Input/Output: [(-14 -78 70 0) -78]
Test Case: 858 | Input/Output: [(95 -53 52 -82) -82]
Test Case: 859 | Input/Output: [(-9 37 60 66) -9]
Test Case: 860 | Input/Output: [(75 60 -28 16) -28]
Test Case: 861 | Input/Output: [(25 -34 90 42) -34]
Test Case: 862 | Input/Output: [(-54 63 85 -37) -54]
Test Case: 863 | Input/Output: [(-73 -8 48 -30) -73]
Test Case: 864 | Input/Output: [(-79 -23 71 -21) -79]
Test Case: 865 | Input/Output: [(37 76 5 -69) -69]
Test Case: 866 | Input/Output: [(69 -38 0 41) -38]
Test Case: 867 | Input/Output: [(49 -2 -84 69) -84]
Test Case: 868 | Input/Output: [(-48 6 52 -89) -89]
Test Case: 869 | Input/Output: [(-20 49 -51 91) -51]
Test Case: 870 | Input/Output: [(35 51 13 -22) -22]
Test Case: 871 | Input/Output: [(76 -7 -17 -11) -17]
Test Case: 872 | Input/Output: [(-3 -10 -78 -82) -82]
Test Case: 873 | Input/Output: [(22 83 43 93) 22]
Test Case: 874 | Input/Output: [(-49 51 -30 47) -49]
Test Case: 875 | Input/Output: [(-68 17 -87 -13) -87]
Test Case: 876 | Input/Output: [(25 46 -7 -71) -71]
Test Case: 877 | Input/Output: [(38 98 -97 46) -97]
Test Case: 878 | Input/Output: [(-15 -27 67 -26) -27]
Test Case: 879 | Input/Output: [(58 -7 -96 -6) -96]
Test Case: 880 | Input/Output: [(-68 -29 -9 -41) -68]
Test Case: 881 | Input/Output: [(21 63 -34 -26) -34]
Test Case: 882 | Input/Output: [(39 23 87 -40) -40]
Test Case: 883 | Input/Output: [(51 -19 34 95) -19]
Test Case: 884 | Input/Output: [(39 -23 -42 -22) -42]
Test Case: 885 | Input/Output: [(13 15 75 -74) -74]
Test Case: 886 | Input/Output: [(-23 -79 -30 -74) -79]
Test Case: 887 | Input/Output: [(26 38 2 49) 2]
Test Case: 888 | Input/Output: [(-15 10 22 49) -15]
Test Case: 889 | Input/Output: [(-72 -43 -51 -80) -80]
Test Case: 890 | Input/Output: [(-73 -50 -51 88) -73]
Test Case: 891 | Input/Output: [(84 33 64 -90) -90]
Test Case: 892 | Input/Output: [(95 -19 1 -3) -19]
Test Case: 893 | Input/Output: [(47 35 -52 76) -52]
Test Case: 894 | Input/Output: [(-32 69 86 36) -32]
Test Case: 895 | Input/Output: [(88 82 65 -24) -24]
Test Case: 896 | Input/Output: [(-45 -85 41 50) -85]
Test Case: 897 | Input/Output: [(-96 10 -17 -100) -100]
Test Case: 898 | Input/Output: [(-85 32 -55 -28) -85]
Test Case: 899 | Input/Output: [(-86 0 -5 30) -86]
Test Case: 900 | Input/Output: [(32 -96 -84 -87) -96]
Test Case: 901 | Input/Output: [(42 -17 16 54) -17]
Test Case: 902 | Input/Output: [(53 -91 9 -24) -91]
Test Case: 903 | Input/Output: [(31 -97 37 -24) -97]
Test Case: 904 | Input/Output: [(-58 -29 63 -18) -58]
Test Case: 905 | Input/Output: [(-27 38 -40 -80) -80]
Test Case: 906 | Input/Output: [(16 -8 -75 100) -75]
Test Case: 907 | Input/Output: [(-50 -14 5 -79) -79]
Test Case: 908 | Input/Output: [(31 -73 67 13) -73]
Test Case: 909 | Input/Output: [(12 -99 35 -82) -99]
Test Case: 910 | Input/Output: [(11 38 -22 12) -22]
Test Case: 911 | Input/Output: [(-56 -72 -100 10) -100]
Test Case: 912 | Input/Output: [(-87 -86 -40 -1) -87]
Test Case: 913 | Input/Output: [(85 -97 -6 49) -97]
Test Case: 914 | Input/Output: [(-8 26 100 -49) -49]
Test Case: 915 | Input/Output: [(-77 38 -80 -21) -80]
Test Case: 916 | Input/Output: [(-13 -73 96 -44) -73]
Test Case: 917 | Input/Output: [(53 -68 95 -59) -68]
Test Case: 918 | Input/Output: [(18 -48 -77 -34) -77]
Test Case: 919 | Input/Output: [(-68 73 48 -40) -68]
Test Case: 920 | Input/Output: [(16 51 -7 51) -7]
Test Case: 921 | Input/Output: [(-99 -40 30 76) -99]
Test Case: 922 | Input/Output: [(87 6 -82 72) -82]
Test Case: 923 | Input/Output: [(28 -57 -20 22) -57]
Test Case: 924 | Input/Output: [(6 94 71 6) 6]
Test Case: 925 | Input/Output: [(99 -17 30 54) -17]
Test Case: 926 | Input/Output: [(-64 -90 -91 82) -91]
Test Case: 927 | Input/Output: [(88 -89 -51 -76) -89]
Test Case: 928 | Input/Output: [(-25 27 56 84) -25]
Test Case: 929 | Input/Output: [(-17 33 -37 -1) -37]
Test Case: 930 | Input/Output: [(-13 85 -79 -43) -79]
Test Case: 931 | Input/Output: [(-55 -85 98 -12) -85]
Test Case: 932 | Input/Output: [(99 -57 23 -91) -91]
Test Case: 933 | Input/Output: [(-8 -68 73 -25) -68]
Test Case: 934 | Input/Output: [(76 18 41 60) 18]
Test Case: 935 | Input/Output: [(4 -79 15 36) -79]
Test Case: 936 | Input/Output: [(78 -82 -38 69) -82]
Test Case: 937 | Input/Output: [(0 -99 -67 78) -99]
Test Case: 938 | Input/Output: [(60 77 -29 -59) -59]
Test Case: 939 | Input/Output: [(93 -28 99 52) -28]
Test Case: 940 | Input/Output: [(-95 -1 7 -74) -95]
Test Case: 941 | Input/Output: [(-60 5 -72 -34) -72]
Test Case: 942 | Input/Output: [(-36 13 -48 -78) -78]
Test Case: 943 | Input/Output: [(-70 -98 86 9) -98]
Test Case: 944 | Input/Output: [(-94 -81 29 61) -94]
Test Case: 945 | Input/Output: [(-45 78 -9 -58) -58]
Test Case: 946 | Input/Output: [(98 87 -18 25) -18]
Test Case: 947 | Input/Output: [(70 -50 -12 2) -50]
Test Case: 948 | Input/Output: [(-52 -13 -97 33) -97]
Test Case: 949 | Input/Output: [(-13 14 32 29) -13]
Test Case: 950 | Input/Output: [(10 95 -15 57) -15]
Test Case: 951 | Input/Output: [(40 63 -62 97) -62]
Test Case: 952 | Input/Output: [(26 -81 22 -44) -81]
Test Case: 953 | Input/Output: [(24 -88 7 23) -88]
Test Case: 954 | Input/Output: [(44 78 95 -38) -38]
Test Case: 955 | Input/Output: [(53 12 -47 20) -47]
Test Case: 956 | Input/Output: [(-5 -26 -71 70) -71]
Test Case: 957 | Input/Output: [(-84 57 100 7) -84]
Test Case: 958 | Input/Output: [(90 10 23 59) 10]
Test Case: 959 | Input/Output: [(15 -10 55 -97) -97]
Test Case: 960 | Input/Output: [(-1 35 56 95) -1]
Test Case: 961 | Input/Output: [(34 23 -60 -98) -98]
Test Case: 962 | Input/Output: [(-63 2 -84 27) -84]
Test Case: 963 | Input/Output: [(-35 25 -61 84) -61]
Test Case: 964 | Input/Output: [(-52 -92 68 -59) -92]
Test Case: 965 | Input/Output: [(37 -39 -74 14) -74]
Test Case: 966 | Input/Output: [(-31 -41 -57 -91) -91]
Test Case: 967 | Input/Output: [(-95 91 33 -92) -95]
Test Case: 968 | Input/Output: [(-44 42 23 -35) -44]
Test Case: 969 | Input/Output: [(-73 -49 98 74) -73]
Test Case: 970 | Input/Output: [(-69 -20 -86 -88) -88]
Test Case: 971 | Input/Output: [(-76 21 -76 48) -76]
Test Case: 972 | Input/Output: [(-83 -85 39 -21) -85]
Test Case: 973 | Input/Output: [(35 58 -22 -16) -22]
Test Case: 974 | Input/Output: [(0 -92 97 90) -92]
Test Case: 975 | Input/Output: [(-66 -88 43 -62) -88]
Test Case: 976 | Input/Output: [(-61 -10 -78 12) -78]
Test Case: 977 | Input/Output: [(47 -52 -96 -76) -96]
Test Case: 978 | Input/Output: [(100 64 -9 -11) -11]
Test Case: 979 | Input/Output: [(91 91 -31 59) -31]
Test Case: 980 | Input/Output: [(-2 98 31 49) -2]
Test Case: 981 | Input/Output: [(94 -78 90 17) -78]
Test Case: 982 | Input/Output: [(-59 64 -7 3) -59]
Test Case: 983 | Input/Output: [(41 24 -14 100) -14]
Test Case: 984 | Input/Output: [(56 89 46 15) 15]
Test Case: 985 | Input/Output: [(-19 -47 -29 -32) -47]
Test Case: 986 | Input/Output: [(6 76 96 -56) -56]
Test Case: 987 | Input/Output: [(75 -61 -38 -24) -61]
Test Case: 988 | Input/Output: [(71 -81 -6 50) -81]
Test Case: 989 | Input/Output: [(-42 -13 -66 33) -66]
Test Case: 990 | Input/Output: [(-9 -15 -30 65) -30]
Test Case: 991 | Input/Output: [(35 100 -90 -64) -90]
Test Case: 992 | Input/Output: [(-60 -75 -69 29) -75]
Test Case: 993 | Input/Output: [(-14 -38 -25 82) -38]
Test Case: 994 | Input/Output: [(-45 87 76 53) -45]
Test Case: 995 | Input/Output: [(99 -64 -77 -44) -77]
Test Case: 996 | Input/Output: [(-24 -40 -74 11) -74]
Test Case: 997 | Input/Output: [(23 78 67 22) 22]
Test Case: 998 | Input/Output: [(89 4 15 70) 4]
Test Case: 999 | Input/Output: [(-7 98 33 42) -7]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 119 -26 -14 -31 92 -69 39 4 -36 95 9 49 70 12 -93 -31
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-16 -91 -91 -91] -91] [[-17 -15 -17 -17] -17] [[-91 -91 -3 -91] -91] [[89 89 32 89] 32] [[72 72 -95 72] -95] [[-10 65 -10 -10] -10] [[5 -33 -33 -33] -33] [[-18 -18 -18 -26] -26] [[-39 -39 -33 -39] -39] [[-78 -78 -78 -41] -78] [(-70 -70 -70 -70) -70] [(5 5 5 5) 5] [(10 10 10 10) 10] [(81 81 81 81) 81] [(56 56 56 56) 56] [(15 59 11 0) 0] [(73 88 1 25) 1] [(18 26 4 86) 4] [(47 83 21 97) 21] [(94 40 95 19) 19] [(57 50 25 85) 25] [(55 51 16 2) 2] [(82 0 18 92) 0] [(15 49 30 37) 15] [(41 12 91 43) 12] [(78 63 47 46) 46] [(19 65 39 99) 19] [(51 92 86 60) 51] [(40 66 82 12) 12] [(94 98 64 74) 64] [(24 5 32 29) 5] [(57 66 58 47) 47] [(0 40 42 68) 0] [(54 65 68 10) 10] [(44 86 53 17) 17] [(77 26 -78 -35) -78] [(-78 6 -36 -75) -78] [(33 25 -33 31) -33] [(22 -8 -44 76) -44] [(83 48 85 86) 48] [(75 12 36 17) 12] [(50 16 -84 -53) -84] [(73 -32 -7 -17) -32] [(24 4 -18 82) -18] [(-51 73 -42 73) -51] [(-8 95 33 -46) -46] [(59 -95 -10 -40) -95] [(56 93 9 81) 9] [(40 81 -37 26) -37] [(42 -83 63 -45) -83] [(81 -15 34 -17) -17] [(-27 -57 -59 47) -59] [(89 20 24 48) 20] [(-51 -90 -8 -89) -90] [(-31 -1 -1 -23) -31] [(-28 88 53 -88) -88] [(11 53 61 43) 11] [(-62 -73 92 91) -73] [(74 34 34 88) 34] [(-26 -91 14 -47) -91] [(46 19 -74 44) -74] [(-1 -29 -20 -41) -41] [(-23 -22 -53 97) -53] [(-47 9 47 21) -47] [(-26 14 -3 95) -26] [(-22 -75 -70 -4) -75] [(-56 -51 35 70) -56] [(-69 -27 29 -15) -69] [(-70 -13 22 -36) -70] [(-48 -48 50 -85) -85] [(32 -54 -11 -59) -59] [(85 -35 16 85) -35] [(36 -79 -61 0) -79] [(81 -39 41 -18) -39] [(-96 41 24 38) -96] [(-83 59 -87 -38) -87] [(-45 62 -24 -9) -45] [(-40 39 49 27) -40] [(-52 -54 -27 -10) -54] [(-75 37 97 -100) -100] [(73 6 18 25) 6] [(-19 -74 22 1) -74] [(-51 5 67 -52) -52] [(-88 -73 23 16) -88] [(68 -25 44 -19) -25] [(47 93 -23 73) -23] [(-36 -98 85 14) -98] [(-32 -93 -84 -51) -93] [(-85 47 -54 22) -85] [(88 31 -44 -33) -44] [(25 -28 95 11) -28] [(-96 20 -4 92) -96] [(-85 -24 -67 0) -85] [(80 -12 1 45) -12] [(65 73 -88 1) -88])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 86                 
Correct output: 21                  | Program output: 97                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 85                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 92                 
Correct output: 15                  | Program output: 37                 
Correct output: 12                  | Program output: 43                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 99                 
Correct output: 51                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 29                 
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 68                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -75                
Correct output: -33                 | Program output: 31                 
Correct output: -44                 | Program output: 76                 
Correct output: 48                  | Program output: 86                 
Correct output: 12                  | Program output: 17                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -17                
Correct output: -18                 | Program output: 82                 
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -40                
Correct output: 9                   | Program output: 81                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: 47                 
Correct output: 20                  | Program output: 48                 
Correct output: -90                 | Program output: -89                
Correct output: -31                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 43                 
Correct output: -73                 | Program output: 91                 
Correct output: 34                  | Program output: 88                 
Correct output: -91                 | Program output: -47                
Correct output: -74                 | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: 97                 
Correct output: -47                 | Program output: 21                 
Correct output: -26                 | Program output: 95                 
Correct output: -75                 | Program output: -4                 
Correct output: -56                 | Program output: 70                 
Correct output: -69                 | Program output: -15                
Correct output: -70                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -39                 | Program output: -18                
Correct output: -96                 | Program output: 38                 
Correct output: -87                 | Program output: -38                
Correct output: -45                 | Program output: -9                 
Correct output: -40                 | Program output: 27                 
Correct output: -54                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 25                 
Correct output: -74                 | Program output: 1                  
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: 16                 
Correct output: -25                 | Program output: -19                
Correct output: -23                 | Program output: 73                 
Correct output: -98                 | Program output: 14                 
Correct output: -93                 | Program output: -51                
Correct output: -85                 | Program output: 22                 
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: 11                 
Correct output: -96                 | Program output: 92                 
Correct output: -85                 | Program output: 0                  
Correct output: -12                 | Program output: 45                 
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction 72} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Lexicase best program: (exec_do*while (72 in3 print_integer))
Lexicase best errors: [0 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 6
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction 72} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Zero cases best program: (exec_do*while (72 in3 print_integer))
Zero cases best errors: [0 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 6
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 1 1 2 2 5 2 2 11)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 2 1 1 2 2 5 2 2 11)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*range} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lt})
Best program: (exec_y_when_autoconstructing (boolean_yankdup exec_y (integer_gt integer_dup_items exec_y (exec_swap (exec_y (exec_stackdepth) integer_eq exec_eq integer_rot) (in4 exec_if (boolean_not print_integer exec_do*range ()) (integer_gte) boolean_flush exec_while (exec_s_when_autoconstructing (integer_lt) () ()))))))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 22
Size: 36
Percent parens: 0.389
--- Population Statistics ---
Average total errors in population: 9.97
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.999 0.999 0.998 0.998 0.995 0.998 0.998 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.624
Average program size in population (points): 69.653
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 472582
--- Timings ---
Current time: 1559583307849 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.0%
Fitness Testing:      1.9 seconds, 69.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup})
Lexicase best program: (in1 exec_if (boolean_dup_items exec_do*times (exec_pop (boolean_dup boolean_dup boolean_invert_second_then_and boolean_invert_second_then_and integer_shove boolean_or integer_flush integer_add) integer_min exec_do*times (exec_dup_times (integer_lte in1 integer_fromboolean boolean_invert_first_then_and in2) print_integer in3 integer_sub integer_yankdup) boolean_pop boolean_or boolean_and) exec_dup ()) ())
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 37
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup})
Zero cases best program: (in1 exec_if (boolean_dup_items exec_do*times (exec_pop (boolean_dup boolean_dup boolean_invert_second_then_and boolean_invert_second_then_and integer_shove boolean_or integer_flush integer_add) integer_min exec_do*times (exec_dup_times (integer_lte in1 integer_fromboolean boolean_invert_first_then_and in2) print_integer in3 integer_sub integer_yankdup) boolean_pop boolean_or boolean_and) exec_dup ()) ())
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 37
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 79 97 586 79 215 898 215 898 79)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (79 79 97 586 79 215 898 215 898 79)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction tagged_356} {:close 1, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_446} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Best program: (in1 exec_if (boolean_dup_items exec_do*times (exec_pop (boolean_dup boolean_dup boolean_invert_second_then_and boolean_invert_second_then_and integer_shove boolean_or integer_flush integer_add) integer_min exec_do*times (exec_dup_times (integer_lte in1 integer_fromboolean boolean_invert_first_then_and in2) print_integer in3 integer_sub integer_yankdup) boolean_pop boolean_or boolean_and) exec_dup (boolean_dup_times boolean_eq integer_gt integer_yank exec_noop) tagged_356 in3) (exec_dup (exec_dup (integer_lte integer_shove in2 integer_mod) boolean_shove exec_flush integer_stackdepth exec_when () print_boolean) exec_flush boolean_empty) boolean_empty exec_y (integer_gt exec_shove (in3 boolean_flush integer_min exec_eq boolean_yankdup) integer_fromboolean boolean_dup_times integer_lte) boolean_xor boolean_invert_first_then_and exec_stackdepth in4 integer_pop tag_integer_446 integer_min tagged_792 in3 in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ())
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 81
Size: 103
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.775
Median total errors in population: 7
Error averages by case: (0.921 0.921 0.903 0.414 0.921 0.785 0.102 0.785 0.102 0.921)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.856
Average program size in population (points): 54.945
Average percent parens in population: 0.317
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 903084
--- Timings ---
Current time: 1559583310540 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.4 seconds, 41.2%
Fitness Testing:      2.5 seconds, 43.2%
Report:               0.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: 5                  
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 57                 
Correct output: 2                   | Program output: 55                 
Correct output: 0                   | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 77                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 33                 
Correct output: -44                 | Program output: 22                 
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 75                 
Correct output: -84                 | Program output: 50                 
Correct output: -32                 | Program output: 73                 
Correct output: -18                 | Program output: 24                 
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: 59                 
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 81                 
Correct output: -59                 | Program output: -27                
Correct output: 20                  | Program output: 89                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 74                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: 46                 
Correct output: -41                 | Program output: -1                 
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -22                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: 32                 
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 36                 
Correct output: -39                 | Program output: 81                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 73                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 68                 
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 88                 
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 80                 
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_yank integer_shove in1 print_integer exec_shove (exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty) exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) (exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty boolean_dup_times boolean_shove) integer_fromboolean integer_swap boolean_not boolean_yankdup) (exec_flush integer_stackdepth exec_when (boolean_eq) exec_flush boolean_empty boolean_frominteger) (boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) boolean_or boolean_yank) tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_792 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ())
Lexicase best errors: [1 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 115
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_yank integer_shove in1 print_integer exec_shove (exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty) exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) (exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty boolean_dup_times boolean_shove) integer_fromboolean integer_swap boolean_not boolean_yankdup) (exec_flush integer_stackdepth exec_when (boolean_eq) exec_flush boolean_empty boolean_frominteger) (boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) boolean_or boolean_yank) tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_792 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ())
Zero cases best errors: [1 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 115
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 245 246 659 245 658 245 661 1 1)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (0 245 246 659 245 658 245 661 1 1)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth})
Best program: (exec_yank integer_shove in1 print_integer in4 exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) integer_stackdepth)))) ()) () ())
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 7.039
Median total errors in population: 7
Error averages by case: (1.0 0.755 0.754 0.341 0.755 0.342 0.755 0.339 0.999 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.617
Average program size in population (points): 78.466
Average percent parens in population: 0.249
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9875
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1453829
--- Timings ---
Current time: 1559583313709 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 50.8%
Fitness Testing:      3.2 seconds, 35.0%
Report:               1.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_894} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 2, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_810} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_446} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc})
Lexicase best program: (integer_dup integer_empty exec_eq boolean_or integer_dec in2 integer_stackdepth integer_dup_times print_integer exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc exec_do*count (exec_swap (integer_empty) (exec_k_when_autoconstructing (exec_empty boolean_empty integer_yank) (integer_yank) boolean_or integer_mult) boolean_dup_items boolean_empty exec_stackdepth) exec_y () exec_flush integer_max exec_s () (exec_do*while () tagged_894 exec_pop (integer_mod) boolean_shove integer_swap) (integer_dup boolean_swap exec_when () in2)) (integer_inc) exec_if (exec_do*times (integer_lt boolean_invert_second_then_and exec_stackdepth exec_k (exec_do*times (integer_mod boolean_empty exec_y (integer_gt tag_integer_810 in3 boolean_flush integer_min exec_eq boolean_yankdup) integer_fromboolean boolean_dup_times integer_lte) boolean_xor boolean_invert_first_then_and exec_stackdepth in4) () integer_pop tag_integer_446 integer_min exec_empty exec_s_when_autoconstructing () (print_boolean boolean_invert_first_then_and boolean_xor integer_inc) ())) ()))
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 105
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_894} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 2, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_integer_810} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_446} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc})
Zero cases best program: (integer_dup integer_empty exec_eq boolean_or integer_dec in2 integer_stackdepth integer_dup_times print_integer exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc exec_do*count (exec_swap (integer_empty) (exec_k_when_autoconstructing (exec_empty boolean_empty integer_yank) (integer_yank) boolean_or integer_mult) boolean_dup_items boolean_empty exec_stackdepth) exec_y () exec_flush integer_max exec_s () (exec_do*while () tagged_894 exec_pop (integer_mod) boolean_shove integer_swap) (integer_dup boolean_swap exec_when () in2)) (integer_inc) exec_if (exec_do*times (integer_lt boolean_invert_second_then_and exec_stackdepth exec_k (exec_do*times (integer_mod boolean_empty exec_y (integer_gt tag_integer_810 in3 boolean_flush integer_min exec_eq boolean_yankdup) integer_fromboolean boolean_dup_times integer_lte) boolean_xor boolean_invert_first_then_and exec_stackdepth in4) () integer_pop tag_integer_446 integer_min exec_empty exec_s_when_autoconstructing () (print_boolean boolean_invert_first_then_and boolean_xor integer_inc) ())) ()))
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 105
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 373 228 187 373 373 1000 227 1000 227)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (225 373 228 187 373 373 0 227 0 227)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (integer_gt integer_sub in2 integer_empty integer_shove boolean_pop exec_do*while () in2 exec_noop print_integer exec_while (exec_y (boolean_xor)))
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.787
Median total errors in population: 7
Error averages by case: (0.775 0.627 0.772 0.813 0.627 0.627 1.0 0.773 1.0 0.773)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 70.493
Average program size in population (points): 95.545
Average percent parens in population: 0.263
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.1155
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1870045
--- Timings ---
Current time: 1559583316157 milliseconds
Total Time:          11.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.3 seconds, 54.7%
Fitness Testing:      3.7 seconds, 32.0%
Report:               1.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -33                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 95                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 18                 
Correct output: 15                  | Program output: 30                 
Correct output: 12                  | Program output: 91                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 39                 
Correct output: 51                  | Program output: 86                 
Correct output: 12                  | Program output: 82                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 32                 
Correct output: 47                  | Program output: 58                 
Correct output: 0                   | Program output: 42                 
Correct output: 10                  | Program output: 68                 
Correct output: 17                  | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 85                 
Correct output: 12                  | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -42                
Correct output: -46                 | Program output: 33                 
Correct output: -95                 | Program output: -10                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: 63                 
Correct output: -17                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 24                 
Correct output: -90                 | Program output: -8                 
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 53                 
Correct output: 11                  | Program output: 61                 
Correct output: -73                 | Program output: 92                 
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: 14                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 47                 
Correct output: -26                 | Program output: -3                 
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: 35                 
Correct output: -69                 | Program output: 29                 
Correct output: -70                 | Program output: 22                 
Correct output: -85                 | Program output: 50                 
Correct output: -59                 | Program output: -11                
Correct output: -35                 | Program output: 16                 
Correct output: -79                 | Program output: -61                
Correct output: -39                 | Program output: 41                 
Correct output: -96                 | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -24                
Correct output: -40                 | Program output: 49                 
Correct output: -54                 | Program output: -27                
Correct output: -100                | Program output: 97                 
Correct output: 6                   | Program output: 18                 
Correct output: -74                 | Program output: 22                 
Correct output: -52                 | Program output: 67                 
Correct output: -88                 | Program output: 23                 
Correct output: -25                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 85                 
Correct output: -93                 | Program output: -84                
Correct output: -85                 | Program output: -54                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -4                 
Correct output: -85                 | Program output: -67                
Correct output: -12                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_pop exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_792 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ()))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 118
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_pop exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_792 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ()))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 118
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (464 67 463 1000 531 401 1000 67 1000 1000)
Population mean number of elite cases: 5.99
Count of perfect (error zero) individuals by case: (464 67 463 0 531 401 0 67 0 0)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (boolean_eq boolean_xor integer_max boolean_not integer_fromboolean tagged_792 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ()))
Errors: [1 0 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 86
Size: 118
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 8.007
Median total errors in population: 7
Error averages by case: (0.536 0.933 0.537 1.0 0.469 0.599 1.0 0.933 1.0 1.0)
Error minima by case: (0 0 0 1 0 0 1 0 1 1)
Average genome size in population (length): 60.132
Average program size in population (points): 81.041
Average percent parens in population: 0.258
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.744
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2314802
--- Timings ---
Current time: 1559583319257 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 58.7%
Fitness Testing:      4.2 seconds, 28.8%
Report:               1.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_894} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_dup exec_yank exec_eq boolean_or integer_dec in2 integer_stackdepth integer_dup_times print_integer exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc exec_do*count (exec_swap (integer_empty) (exec_k_when_autoconstructing (exec_empty exec_do*times (integer_yank) integer_yank) (boolean_or integer_mult) boolean_dup_items exec_while (exec_stackdepth) exec_y () exec_flush integer_max exec_s () (exec_do*while () tagged_894 exec_pop (exec_yank)) ()))) ()))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.339
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 1, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 0, :instruction tagged_894} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_dup exec_yank exec_eq boolean_or integer_dec in2 integer_stackdepth integer_dup_times print_integer exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc exec_do*count (exec_swap (integer_empty) (exec_k_when_autoconstructing (exec_empty exec_do*times (integer_yank) integer_yank) (boolean_or integer_mult) boolean_dup_items exec_while (exec_stackdepth) exec_y () exec_flush integer_max exec_s () (exec_do*while () tagged_894 exec_pop (exec_yank)) ()))) ()))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.339
--- Lexicase Population Statistics ---
Count of elite individuals by case: (665 4 307 354 355 312 356 1000 1 356)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (665 4 307 354 355 312 356 0 1 356)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction tag_boolean_444} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_flush} {:close 2, :instruction tag_exec_657} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_2} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -27})
Best program: (integer_dup exec_yank exec_eq boolean_or integer_dec in2 integer_stackdepth integer_dup_times print_integer exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () exec_k_when_autoconstructing (integer_inc exec_do*count (exec_swap (integer_empty) (exec_k_when_autoconstructing (exec_empty boolean_empty boolean_invert_second_then_and) (integer_yank) boolean_empty integer_max exec_k (exec_flush exec_eq exec_pop () exec_dup_times () integer_max integer_rot exec_dup () boolean_rot) (print_newline exec_rot () (exec_dup (tag_boolean_444) print_integer) (integer_mod in4) boolean_pop exec_dup_items exec_pop () exec_eq integer_sub exec_while (in3 integer_lte boolean_pop boolean_flush) exec_y_when_autoconstructing (exec_do*count (integer_lte boolean_flush)) tag_exec_657 ()) integer_flush tagged_2 in1 boolean_invert_first_then_and -27))) ()))
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 87
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.29
Median total errors in population: 7
Error averages by case: (0.335 0.996 0.693 0.646 0.645 0.688 0.644 1.0 0.999 0.644)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 69.41
Average program size in population (points): 94.634
Average percent parens in population: 0.264
Minimum age in population: 5.0
Maximum age in population: 9.0
Average age in population: 6.884125
Median age in population: 6.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2767597
--- Timings ---
Current time: 1559583321984 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 60.5%
Fitness Testing:      4.7 seconds, 27.1%
Report:               2.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -33                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 95                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 18                 
Correct output: 15                  | Program output: 30                 
Correct output: 12                  | Program output: 91                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 39                 
Correct output: 51                  | Program output: 86                 
Correct output: 12                  | Program output: 82                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 32                 
Correct output: 47                  | Program output: 58                 
Correct output: 0                   | Program output: 42                 
Correct output: 10                  | Program output: 68                 
Correct output: 17                  | Program output: 53                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -36                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 85                 
Correct output: 12                  | Program output: 36                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -7                 
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -42                
Correct output: -46                 | Program output: 33                 
Correct output: -95                 | Program output: -10                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: 63                 
Correct output: -17                 | Program output: 34                 
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 24                 
Correct output: -90                 | Program output: -8                 
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 53                 
Correct output: 11                  | Program output: 61                 
Correct output: -73                 | Program output: 92                 
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: 14                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -20                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: 47                 
Correct output: -26                 | Program output: -3                 
Correct output: -75                 | Program output: -70                
Correct output: -56                 | Program output: 35                 
Correct output: -69                 | Program output: 29                 
Correct output: -70                 | Program output: 22                 
Correct output: -85                 | Program output: 50                 
Correct output: -59                 | Program output: -11                
Correct output: -35                 | Program output: 16                 
Correct output: -79                 | Program output: -61                
Correct output: -39                 | Program output: 41                 
Correct output: -96                 | Program output: 24                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -24                
Correct output: -40                 | Program output: 49                 
Correct output: -54                 | Program output: -27                
Correct output: -100                | Program output: 97                 
Correct output: 6                   | Program output: 18                 
Correct output: -74                 | Program output: 22                 
Correct output: -52                 | Program output: 67                 
Correct output: -88                 | Program output: 23                 
Correct output: -25                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: 85                 
Correct output: -93                 | Program output: -84                
Correct output: -85                 | Program output: -54                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: 95                 
Correct output: -96                 | Program output: -4                 
Correct output: -85                 | Program output: -67                
Correct output: -12                 | Program output: 1                  
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_717} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_717 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ()))
Lexicase best errors: [1 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_717} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_717 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ()))
Zero cases best errors: [1 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 105 98 105 425 105 1 105 425 105)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (1 105 98 105 425 105 1 105 425 105)
Population mean number of perfect (error zero) cases: 1.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_792} {:close 2, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup boolean_xor integer_max boolean_not integer_fromboolean tagged_792 in3) () in3 exec_s (exec_if (boolean_pop exec_rot (boolean_pop integer_lt exec_do*times (boolean_yankdup) boolean_not print_boolean) () ()) ()) () ()))
Errors: [1 0 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 86
Size: 118
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 8.525
Median total errors in population: 8
Error averages by case: (0.999 0.895 0.902 0.895 0.575 0.895 0.999 0.895 0.575 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.126
Average program size in population (points): 86.332
Average percent parens in population: 0.255
Minimum age in population: 6.0
Maximum age in population: 10.34375
Average age in population: 8.45646875
Median age in population: 8.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3228534
--- Timings ---
Current time: 1559583324825 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 61.9%
Fitness Testing:      5.2 seconds, 25.8%
Report:               2.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 86                 
Correct output: 21                  | Program output: 97                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 85                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 92                 
Correct output: 15                  | Program output: 37                 
Correct output: 12                  | Program output: 43                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 99                 
Correct output: 51                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 29                 
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 68                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -75                
Correct output: -33                 | Program output: 31                 
Correct output: -44                 | Program output: 76                 
Correct output: 48                  | Program output: 86                 
Correct output: 12                  | Program output: 17                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -17                
Correct output: -18                 | Program output: 82                 
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -40                
Correct output: 9                   | Program output: 81                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: 47                 
Correct output: 20                  | Program output: 48                 
Correct output: -90                 | Program output: -89                
Correct output: -31                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 43                 
Correct output: -73                 | Program output: 91                 
Correct output: 34                  | Program output: 88                 
Correct output: -91                 | Program output: -47                
Correct output: -74                 | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: 97                 
Correct output: -47                 | Program output: 21                 
Correct output: -26                 | Program output: 95                 
Correct output: -75                 | Program output: -4                 
Correct output: -56                 | Program output: 70                 
Correct output: -69                 | Program output: -15                
Correct output: -70                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -39                 | Program output: -18                
Correct output: -96                 | Program output: 38                 
Correct output: -87                 | Program output: -38                
Correct output: -45                 | Program output: -9                 
Correct output: -40                 | Program output: 27                 
Correct output: -54                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 25                 
Correct output: -74                 | Program output: 1                  
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: 16                 
Correct output: -25                 | Program output: -19                
Correct output: -23                 | Program output: 73                 
Correct output: -98                 | Program output: 14                 
Correct output: -93                 | Program output: -51                
Correct output: -85                 | Program output: 22                 
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: 11                 
Correct output: -96                 | Program output: 92                 
Correct output: -85                 | Program output: 0                  
Correct output: -12                 | Program output: 45                 
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_446} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc})
Lexicase best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup exec_eq boolean_yankdup) (integer_fromboolean boolean_dup_times integer_lte) boolean_xor integer_empty exec_stackdepth in4) integer_pop tag_integer_446 integer_min exec_empty exec_s_when_autoconstructing () (print_boolean boolean_invert_first_then_and boolean_xor integer_inc) ())
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 108
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_446} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc})
Zero cases best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean exec_k () (boolean_eq) boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) (integer_fromboolean integer_swap boolean_not boolean_yankdup) exec_flush integer_stackdepth exec_when () print_boolean) (exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup exec_eq boolean_yankdup) (integer_fromboolean boolean_dup_times integer_lte) boolean_xor integer_empty exec_stackdepth in4) integer_pop tag_integer_446 integer_min exec_empty exec_s_when_autoconstructing () (print_boolean boolean_invert_first_then_and boolean_xor integer_inc) ())
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 108
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (55 154 55 241 417 208 655 210 56 450)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (55 154 55 241 417 208 655 210 56 450)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 2, :instruction in2} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_when} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_integer_269} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction in4} {:close 0, :instruction integer_pop} {:close 0, :instruction tag_integer_446} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_inc})
Best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean integer_shove in2 exec_empty) boolean_shove integer_swap) integer_dup boolean_swap boolean_or) in2) () integer_inc) (exec_if (exec_do*times (integer_lt boolean_invert_second_then_and exec_stackdepth exec_k (exec_do*times (integer_mod boolean_dup integer_flush boolean_empty boolean_dup_times) integer_dup_times) (boolean_dup_items boolean_eq) exec_noop exec_do*times (integer_div integer_dup exec_noop) boolean_xor integer_empty integer_inc boolean_shove) integer_fromboolean integer_swap boolean_not boolean_yankdup) (exec_flush integer_stackdepth exec_when () print_boolean) exec_flush boolean_empty) (boolean_frominteger) boolean_stackdepth integer_rot integer_max exec_yankdup integer_rot) (boolean_or boolean_yank) (tag_integer_269 exec_eq exec_k_when_autoconstructing (integer_yankdup exec_eq boolean_yankdup) (integer_fromboolean boolean_dup_times integer_lte) boolean_xor boolean_invert_first_then_and exec_stackdepth in4) integer_pop tag_integer_446 integer_min exec_empty exec_s_when_autoconstructing () (print_boolean boolean_invert_first_then_and boolean_xor integer_inc) ())
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 103
Size: 133
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.499
Median total errors in population: 7
Error averages by case: (0.945 0.846 0.945 0.759 0.583 0.792 0.345 0.79 0.944 0.55)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.374
Average program size in population (points): 87.796
Average percent parens in population: 0.292
Minimum age in population: 7.0
Maximum age in population: 11.9375
Average age in population: 10.022203125
Median age in population: 10.15625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3609327
--- Timings ---
Current time: 1559583328183 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 63.5%
Fitness Testing:      5.6 seconds, 24.3%
Report:               2.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: 5                  
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 57                 
Correct output: 2                   | Program output: 55                 
Correct output: 0                   | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 77                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 33                 
Correct output: -44                 | Program output: 22                 
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 75                 
Correct output: -84                 | Program output: 50                 
Correct output: -32                 | Program output: 73                 
Correct output: -18                 | Program output: 24                 
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: 59                 
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 81                 
Correct output: -59                 | Program output: -27                
Correct output: 20                  | Program output: 89                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 74                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: 46                 
Correct output: -41                 | Program output: -1                 
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -22                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: 32                 
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 36                 
Correct output: -39                 | Program output: 81                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 73                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 68                 
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 88                 
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 80                 
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1) (exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor))))) () ()) () ())
Lexicase best errors: [0 1 0 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.422
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1) (exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor))))) () ()) () ())
Zero cases best errors: [0 1 0 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.422
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 243 675 242 243 74 240 121 73 121)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (121 243 675 242 243 74 240 121 73 121)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) () ()) () ())
Errors: [0 1 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 26
Size: 45
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 7.847
Median total errors in population: 8
Error averages by case: (0.879 0.757 0.325 0.758 0.757 0.926 0.76 0.879 0.927 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.911
Average program size in population (points): 86.228
Average percent parens in population: 0.274
Minimum age in population: 8.5
Maximum age in population: 13.3359375
Average age in population: 11.5609140625
Median age in population: 11.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4021358
--- Timings ---
Current time: 1559583331225 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.9 seconds, 63.8%
Fitness Testing:      6.0 seconds, 22.8%
Report:               3.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 672
Test mean error for best: 0.67200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: 5                  
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 57                 
Correct output: 2                   | Program output: 55                 
Correct output: 0                   | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 77                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 33                 
Correct output: -44                 | Program output: 22                 
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 75                 
Correct output: -84                 | Program output: 50                 
Correct output: -32                 | Program output: 73                 
Correct output: -18                 | Program output: 24                 
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: 59                 
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 81                 
Correct output: -59                 | Program output: -27                
Correct output: 20                  | Program output: 89                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 74                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: 46                 
Correct output: -41                 | Program output: -1                 
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -22                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: 32                 
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 36                 
Correct output: -39                 | Program output: 81                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 73                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 68                 
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 88                 
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 80                 
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) () ()) () ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.422
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) () ()) () ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.422
--- Lexicase Population Statistics ---
Count of elite individuals by case: (51 288 286 300 735 586 285 51 51 110)
Population mean number of elite cases: 2.74
Count of perfect (error zero) individuals by case: (51 288 286 300 735 586 285 51 51 110)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot () (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) ()) () ())
Errors: [1 0 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 45
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 7.257
Median total errors in population: 7
Error averages by case: (0.949 0.712 0.714 0.7 0.265 0.414 0.715 0.949 0.949 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.41
Average program size in population (points): 68.547
Average percent parens in population: 0.314
Minimum age in population: 10.4375
Maximum age in population: 14.9765625
Average age in population: 13.037265625
Median age in population: 13.099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4411988
--- Timings ---
Current time: 1559583334189 milliseconds
Total Time:          29.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.2 seconds, 64.9%
Fitness Testing:      6.5 seconds, 21.9%
Report:               3.8 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_yank integer_shove exec_rot (in2) (exec_noop print_integer tagged_720 exec_noop integer_gte) (integer_rot integer_shove) exec_swap (integer_dec exec_s_when_autoconstructing () (integer_min print_boolean in2 integer_mod) (boolean_shove integer_swap) integer_dup) (boolean_swap exec_when () in2) integer_inc exec_if (exec_do*times ()) ())
Lexicase best errors: [0 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_yank integer_shove exec_rot (in2) (exec_noop print_integer tagged_720 exec_noop integer_gte) (integer_rot integer_shove) exec_swap (integer_dec exec_s_when_autoconstructing () (integer_min print_boolean in2 integer_mod) (boolean_shove integer_swap) integer_dup) (boolean_swap exec_when () in2) integer_inc exec_if (exec_do*times ()) ())
Zero cases best errors: [0 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 68 138 340 68 710 166 140 140 68)
Population mean number of elite cases: 1.98
Count of perfect (error zero) individuals by case: (140 68 138 340 68 710 166 140 140 68)
Population mean number of perfect (error zero) cases: 1.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (exec_yank integer_shove boolean_flush print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while ()) (in2) (exec_yank integer_shove exec_rot (boolean_rot integer_empty) (integer_shove boolean_pop exec_do*while (in2) exec_noop print_integer exec_while (exec_y (boolean_xor))) ())) () ())
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 42
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 8.022
Median total errors in population: 8
Error averages by case: (0.86 0.932 0.862 0.66 0.932 0.29 0.834 0.86 0.86 0.932)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.418
Average program size in population (points): 72.603
Average percent parens in population: 0.319
Minimum age in population: 11.4375
Maximum age in population: 16.4765625
Average age in population: 14.46383203125
Median age in population: 14.5361328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4781112
--- Timings ---
Current time: 1559583337016 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.3 seconds, 65.8%
Fitness Testing:      6.9 seconds, 21.3%
Report:               4.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: 5                  
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 57                 
Correct output: 2                   | Program output: 55                 
Correct output: 0                   | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 77                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 33                 
Correct output: -44                 | Program output: 22                 
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 75                 
Correct output: -84                 | Program output: 50                 
Correct output: -32                 | Program output: 73                 
Correct output: -18                 | Program output: 24                 
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: 59                 
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 81                 
Correct output: -59                 | Program output: -27                
Correct output: 20                  | Program output: 89                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 74                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: 46                 
Correct output: -41                 | Program output: -1                 
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -22                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: 32                 
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 36                 
Correct output: -39                 | Program output: 81                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 73                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 68                 
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 88                 
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 80                 
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () integer_pop) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) () ()) () ())
Lexicase best errors: [1 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.422
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yank integer_shove exec_rot (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () integer_pop) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) () ()) () ())
Zero cases best errors: [1 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.422
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 100 192 99 192 426 100 92 426 193)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (427 100 192 99 192 426 100 92 426 193)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (in1 exec_if (boolean_dup_items exec_do*times (exec_pop (boolean_dup boolean_dup boolean_invert_second_then_and boolean_invert_second_then_and integer_shove boolean_or boolean_and integer_add) integer_min exec_do*times (exec_dup_times (integer_lte in1 exec_noop print_integer integer_dup_items exec_y (boolean_xor))))) ())
Errors: [1 0 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.753
Median total errors in population: 7
Error averages by case: (0.573 0.9 0.808 0.901 0.808 0.574 0.9 0.908 0.574 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.655
Average program size in population (points): 68.129
Average percent parens in population: 0.281
Minimum age in population: 13.125
Maximum age in population: 17.71875
Average age in population: 15.9815322265625
Median age in population: 16.02587890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5194213
--- Timings ---
Current time: 1559583340352 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.6 seconds, 66.7%
Fitness Testing:      7.3 seconds, 20.7%
Report:               4.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: 5                  
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 94                 
Correct output: 25                  | Program output: 57                 
Correct output: 2                   | Program output: 55                 
Correct output: 0                   | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 41                 
Correct output: 46                  | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 24                 
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 77                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 33                 
Correct output: -44                 | Program output: 22                 
Correct output: 48                  | Program output: 83                 
Correct output: 12                  | Program output: 75                 
Correct output: -84                 | Program output: 50                 
Correct output: -32                 | Program output: 73                 
Correct output: -18                 | Program output: 24                 
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: 59                 
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 81                 
Correct output: -59                 | Program output: -27                
Correct output: 20                  | Program output: 89                 
Correct output: -90                 | Program output: -51                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -62                
Correct output: 34                  | Program output: 74                 
Correct output: -91                 | Program output: -26                
Correct output: -74                 | Program output: 46                 
Correct output: -41                 | Program output: -1                 
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -22                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: 32                 
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 36                 
Correct output: -39                 | Program output: 81                 
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -52                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 73                 
Correct output: -74                 | Program output: -19                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: 68                 
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -36                
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 88                 
Correct output: -28                 | Program output: 25                 
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: 80                 
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_697} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yank integer_shove integer_dup print_integer exec_shove () exec_rot (print_integer exec_shove () exec_dup () exec_when (tagged_697 exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ())) () ())
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.383
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction tagged_697} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yank integer_shove integer_dup print_integer exec_shove () exec_rot (print_integer exec_shove () exec_dup () exec_when (tagged_697 exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ())) () ())
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.383
--- Lexicase Population Statistics ---
Count of elite individuals by case: (832 519 311 304 303 215 311 216 311 311)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (832 519 311 304 303 215 311 216 311 311)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (in1 exec_if (boolean_dup_items exec_do*times (exec_pop (boolean_dup boolean_dup boolean_invert_second_then_and boolean_invert_second_then_and integer_shove integer_lte boolean_and integer_add) integer_min exec_do*times (exec_dup_times (integer_lte in1 exec_noop print_integer integer_stackdepth exec_y (boolean_xor))))) ())
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.367
Median total errors in population: 6
Error averages by case: (0.168 0.481 0.689 0.696 0.697 0.785 0.689 0.784 0.689 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.486
Average program size in population (points): 56.953
Average percent parens in population: 0.319
Minimum age in population: 14.859375
Maximum age in population: 19.26025390625
Average age in population: 17.4856796875
Median age in population: 17.5263671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5570178
--- Timings ---
Current time: 1559583343344 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.6 seconds, 66.6%
Fitness Testing:      7.8 seconds, 20.2%
Report:               5.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_gt integer_dec in2 integer_empty integer_shove boolean_pop exec_do*while () in2 exec_noop print_integer exec_while (exec_y (boolean_xor)))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_gt integer_dec in2 integer_empty integer_shove boolean_pop exec_do*while () in2 exec_noop print_integer exec_while (exec_y (boolean_xor)))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 4 265 266 266 267 844 265 266 355)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (266 4 265 266 266 267 844 265 266 355)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (exec_yank integer_shove boolean_or print_integer exec_s_when_autoconstructing (in1 integer_flush integer_rot) (exec_yank exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) ()) () ()) ())
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 26
Size: 43
Percent parens: 0.395
--- Population Statistics ---
Average total errors in population: 6.936
Median total errors in population: 8
Error averages by case: (0.734 0.996 0.735 0.734 0.734 0.733 0.156 0.735 0.734 0.645)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.892
Average program size in population (points): 52.837
Average percent parens in population: 0.331
Minimum age in population: 16.615234375
Maximum age in population: 21.1708984375
Average age in population: 18.92715112304688
Median age in population: 18.97314453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5942292
--- Timings ---
Current time: 1559583345978 milliseconds
Total Time:          41.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.6 seconds, 66.7%
Fitness Testing:      8.2 seconds, 19.7%
Report:               5.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yank integer_shove boolean_empty print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) ()) () ())
Lexicase best errors: [1 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 54
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yank integer_shove boolean_empty print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () in2) (exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () exec_yank integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor)))) ()) ()) () ())
Zero cases best errors: [1 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 54
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (698 120 1000 698 120 1000 1000 120 698 1000)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (698 120 0 698 120 0 0 120 698 0)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (integer_gt integer_dec in2 integer_empty integer_shove boolean_pop exec_do*while () integer_shove exec_rot (print_integer integer_empty) (integer_shove boolean_pop exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor))))
Errors: [0 1 1 0 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.546
Median total errors in population: 7
Error averages by case: (0.302 0.88 1.0 0.302 0.88 1.0 1.0 0.88 0.302 1.0)
Error minima by case: (0 0 1 0 0 1 1 0 0 1)
Average genome size in population (length): 28.389
Average program size in population (points): 40.759
Average percent parens in population: 0.306
Minimum age in population: 17.615234375
Maximum age in population: 22.3082275390625
Average age in population: 20.44059851074219
Median age in population: 20.50384521484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6304319
--- Timings ---
Current time: 1559583348795 milliseconds
Total Time:          44.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 67.4%
Fitness Testing:      8.6 seconds, 19.4%
Report:               5.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_eq integer_shove exec_dup (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_pop exec_do*while () in2) (exec_noop) (boolean_pop exec_while (exec_y (boolean_xor)))) () ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.419
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_eq integer_shove exec_dup (print_integer exec_shove () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (boolean_invert_second_then_and boolean_pop exec_do*while () in2) (exec_noop) (boolean_pop exec_while (exec_y (boolean_xor)))) () ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.419
--- Lexicase Population Statistics ---
Count of elite individuals by case: (472 1000 1000 1 472 1000 470 473 435 908)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (472 0 0 1 472 0 470 473 435 908)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_720} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop})
Best program: (integer_gt integer_dec in2 integer_shove exec_rot (print_integer exec_shove () exec_dup () exec_y_when_autoconstructing (exec_empty exec_when (integer_add integer_dec exec_dup_times (boolean_shove tagged_720 exec_noop integer_gte integer_rot integer_shove) exec_swap (integer_dec integer_add) (integer_min print_boolean boolean_empty boolean_dup_times)) integer_dup_times) boolean_dup_items boolean_eq) (exec_noop) ())
Errors: [0 1 1 1 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 6.769
Median total errors in population: 8
Error averages by case: (0.528 1.0 1.0 0.999 0.528 1.0 0.53 0.527 0.565 0.092)
Error minima by case: (0 1 1 0 0 1 0 0 0 0)
Average genome size in population (length): 27.671
Average program size in population (points): 42.669
Average percent parens in population: 0.347
Minimum age in population: 19.1015625
Maximum age in population: 23.73291015625
Average age in population: 21.90792077636719
Median age in population: 21.988037109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6676974
--- Timings ---
Current time: 1559583350981 milliseconds
Total Time:          46.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.4 seconds, 67.6%
Fitness Testing:      9.0 seconds, 19.4%
Report:               5.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 86                 
Correct output: 21                  | Program output: 97                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 85                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 92                 
Correct output: 15                  | Program output: 37                 
Correct output: 12                  | Program output: 43                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 99                 
Correct output: 51                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 29                 
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 68                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -75                
Correct output: -33                 | Program output: 31                 
Correct output: -44                 | Program output: 76                 
Correct output: 48                  | Program output: 86                 
Correct output: 12                  | Program output: 17                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -17                
Correct output: -18                 | Program output: 82                 
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -40                
Correct output: 9                   | Program output: 81                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: 47                 
Correct output: 20                  | Program output: 48                 
Correct output: -90                 | Program output: -89                
Correct output: -31                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 43                 
Correct output: -73                 | Program output: 91                 
Correct output: 34                  | Program output: 88                 
Correct output: -91                 | Program output: -47                
Correct output: -74                 | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: 97                 
Correct output: -47                 | Program output: 21                 
Correct output: -26                 | Program output: 95                 
Correct output: -75                 | Program output: -4                 
Correct output: -56                 | Program output: 70                 
Correct output: -69                 | Program output: -15                
Correct output: -70                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -39                 | Program output: -18                
Correct output: -96                 | Program output: 38                 
Correct output: -87                 | Program output: -38                
Correct output: -45                 | Program output: -9                 
Correct output: -40                 | Program output: 27                 
Correct output: -54                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 25                 
Correct output: -74                 | Program output: 1                  
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: 16                 
Correct output: -25                 | Program output: -19                
Correct output: -23                 | Program output: 73                 
Correct output: -98                 | Program output: 14                 
Correct output: -93                 | Program output: -51                
Correct output: -85                 | Program output: 22                 
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: 11                 
Correct output: -96                 | Program output: 92                 
Correct output: -85                 | Program output: 0                  
Correct output: -12                 | Program output: 45                 
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (exec_yank integer_shove boolean_empty print_integer exec_shove () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush exec_do*range () exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) () ())
Lexicase best errors: [1 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (exec_yank integer_shove boolean_empty print_integer exec_shove () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 integer_flush exec_do*range () exec_do*while () in2) (exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) () ())
Zero cases best errors: [1 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 6 613 296 6 612 302 1000 914 613)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (296 6 613 296 6 612 302 0 914 613)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (boolean_eq in4 exec_rot (print_integer exec_shove () exec_stackdepth) (boolean_empty exec_rot (exec_s_when_autoconstructing (exec_yank boolean_pop exec_do*while () exec_s_when_autoconstructing () (exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) () ()) () ()) ())
Errors: [0 1 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 35
Percent parens: 0.486
--- Population Statistics ---
Average total errors in population: 6.342
Median total errors in population: 6
Error averages by case: (0.704 0.994 0.387 0.704 0.994 0.388 0.698 1.0 0.086 0.387)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 23.389
Average program size in population (points): 35.904
Average percent parens in population: 0.352
Minimum age in population: 20.1015625
Maximum age in population: 25.29962158203125
Average age in population: 23.59426754760742
Median age in population: 23.57015991210938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6983823
--- Timings ---
Current time: 1559583353211 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.1 seconds, 67.9%
Fitness Testing:      9.4 seconds, 19.2%
Report:               6.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -15                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: 65                 
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 88                 
Correct output: 4                   | Program output: 26                 
Correct output: 21                  | Program output: 83                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 65                 
Correct output: 51                  | Program output: 92                 
Correct output: 12                  | Program output: 66                 
Correct output: 64                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 66                 
Correct output: 0                   | Program output: 40                 
Correct output: 10                  | Program output: 65                 
Correct output: 17                  | Program output: 86                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: 6                  
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: 95                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 93                 
Correct output: -37                 | Program output: 81                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -1                 
Correct output: -88                 | Program output: 88                 
Correct output: 11                  | Program output: 53                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -22                
Correct output: -47                 | Program output: 9                  
Correct output: -26                 | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -51                
Correct output: -69                 | Program output: -27                
Correct output: -70                 | Program output: -13                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: 41                 
Correct output: -87                 | Program output: 59                 
Correct output: -45                 | Program output: 62                 
Correct output: -40                 | Program output: 39                 
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: 37                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: 5                  
Correct output: -88                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 93                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 47                 
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: 20                 
Correct output: -85                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 73                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_gt integer_dec in2 integer_mod print_integer boolean_pop exec_do*while () integer_eq exec_when () print_integer exec_while (exec_y (boolean_xor)))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_gt integer_dec in2 integer_mod print_integer boolean_pop exec_do*while () integer_eq exec_when () print_integer exec_while (exec_y (boolean_xor)))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (337 908 272 336 336 272 1000 337 300 609)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (337 908 272 336 336 272 0 337 300 609)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (integer_gt integer_sub in2 exec_do*while () integer_shove boolean_pop exec_do*while () in2 exec_noop print_integer exec_while (exec_y (boolean_xor)))
Errors: [0 0 1 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.293
Median total errors in population: 6
Error averages by case: (0.663 0.092 0.728 0.664 0.664 0.728 1.0 0.663 0.7 0.391)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 22.126
Average program size in population (points): 35.696
Average percent parens in population: 0.377
Minimum age in population: 22.0380859375
Maximum age in population: 27.18975830078125
Average age in population: 25.21756669616699
Median age in population: 25.29541015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7240104
--- Timings ---
Current time: 1559583355745 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.2 seconds, 68.6%
Fitness Testing:      9.7 seconds, 18.9%
Report:               6.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -41                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 86                 
Correct output: 21                  | Program output: 97                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 85                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 92                 
Correct output: 15                  | Program output: 37                 
Correct output: 12                  | Program output: 43                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 99                 
Correct output: 51                  | Program output: 60                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 29                 
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 68                 
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -75                
Correct output: -33                 | Program output: 31                 
Correct output: -44                 | Program output: 76                 
Correct output: 48                  | Program output: 86                 
Correct output: 12                  | Program output: 17                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -17                
Correct output: -18                 | Program output: 82                 
Correct output: -51                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -40                
Correct output: 9                   | Program output: 81                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: 47                 
Correct output: 20                  | Program output: 48                 
Correct output: -90                 | Program output: -89                
Correct output: -31                 | Program output: -23                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 43                 
Correct output: -73                 | Program output: 91                 
Correct output: 34                  | Program output: 88                 
Correct output: -91                 | Program output: -47                
Correct output: -74                 | Program output: 44                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: 97                 
Correct output: -47                 | Program output: 21                 
Correct output: -26                 | Program output: 95                 
Correct output: -75                 | Program output: -4                 
Correct output: -56                 | Program output: 70                 
Correct output: -69                 | Program output: -15                
Correct output: -70                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: 85                 
Correct output: -79                 | Program output: 0                  
Correct output: -39                 | Program output: -18                
Correct output: -96                 | Program output: 38                 
Correct output: -87                 | Program output: -38                
Correct output: -45                 | Program output: -9                 
Correct output: -40                 | Program output: 27                 
Correct output: -54                 | Program output: -10                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 25                 
Correct output: -74                 | Program output: 1                  
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: 16                 
Correct output: -25                 | Program output: -19                
Correct output: -23                 | Program output: 73                 
Correct output: -98                 | Program output: 14                 
Correct output: -93                 | Program output: -51                
Correct output: -85                 | Program output: 22                 
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: 11                 
Correct output: -96                 | Program output: 92                 
Correct output: -85                 | Program output: 0                  
Correct output: -12                 | Program output: 45                 
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_eq in4 exec_rot (print_integer exec_shove () exec_stackdepth) (boolean_empty exec_rot (exec_s_when_autoconstructing (exec_yank boolean_pop exec_do*while () exec_s_when_autoconstructing () (exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) () ()) () ()) ())
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 35
Percent parens: 0.486
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_eq in4 exec_rot (print_integer exec_shove () exec_stackdepth) (boolean_empty exec_rot (exec_s_when_autoconstructing (exec_yank boolean_pop exec_do*while () exec_s_when_autoconstructing () (exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) () ()) () ()) ())
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 35
Percent parens: 0.486
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 109 1 1 109 546 1 260 260 109)
Population mean number of elite cases: 1.50
Count of perfect (error zero) individuals by case: (109 109 1 1 109 546 1 260 260 109)
Population mean number of perfect (error zero) cases: 1.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (integer_dup integer_mult in4 exec_rot (print_integer exec_shove () exec_stackdepth) (boolean_empty exec_rot (exec_s_when_autoconstructing (exec_yank boolean_pop exec_do*while () exec_s_when_autoconstructing () (exec_noop exec_dup (exec_while (exec_y (boolean_xor)))) ()) () ()) () ()) ())
Errors: [0 0 1 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 37
Percent parens: 0.486
--- Population Statistics ---
Average total errors in population: 8.495
Median total errors in population: 9
Error averages by case: (0.891 0.891 0.999 0.999 0.891 0.454 0.999 0.74 0.74 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.451
Average program size in population (points): 35.623
Average percent parens in population: 0.337
Minimum age in population: 23.4375
Maximum age in population: 28.50052642822266
Average age in population: 26.65267385101318
Median age in population: 26.70597839355469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7543395
--- Timings ---
Current time: 1559583358479 milliseconds
Total Time:          54.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.4 seconds, 69.2%
Fitness Testing:     10.0 seconds, 18.6%
Report:               6.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times tagged_682 exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) exec_noop print_integer exec_while (exec_y (boolean_xor)))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times tagged_682 exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) exec_noop print_integer exec_while (exec_y (boolean_xor)))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (131 372 287 373 232 228 232 887 231 241)
Population mean number of elite cases: 3.21
Count of perfect (error zero) individuals by case: (131 372 287 373 232 228 232 887 231 241)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (boolean_eq integer_shove exec_rot (print_integer boolean_eq integer_shove exec_rot (print_integer exec_shove () exec_dup () exec_dup () boolean_empty exec_rot (exec_s_when_autoconstructing (in1 exec_do*while () exec_yank) (exec_yank exec_s_when_autoconstructing (in1 integer_shove boolean_pop exec_do*while () integer_lt) (in1 integer_fromboolean boolean_invert_first_then_and in2) (boolean_pop exec_do*while () integer_min) exec_noop print_integer exec_while (exec_y (boolean_xor))) ()) () ()) () ()) () ())
Errors: [0 1 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 60
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.786
Median total errors in population: 7
Error averages by case: (0.869 0.628 0.713 0.627 0.768 0.772 0.768 0.113 0.769 0.759)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.444
Average program size in population (points): 38.473
Average percent parens in population: 0.416
Minimum age in population: 26.07260131835938
Maximum age in population: 30.18125152587891
Average age in population: 28.78824510192871
Median age in population: 28.91170310974121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.359
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.353
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7790213
--- Timings ---
Current time: 1559583361225 milliseconds
Total Time:          56.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 69.8%
Fitness Testing:     10.3 seconds, 18.2%
Report:               6.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 15                 
Correct output: 1                   | Program output: 73                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 51                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 63                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 94                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: 16                 
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 40                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: 31                 
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 65                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times tagged_682 exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) exec_noop print_integer exec_while (exec_y (boolean_xor)))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times tagged_682 exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) exec_noop print_integer exec_while (exec_y (boolean_xor)))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (354 442 929 442 901 442 807 808 105 354)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (354 442 929 442 901 442 807 808 105 354)
Population mean number of perfect (error zero) cases: 5.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_682} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor})
Best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times tagged_682 exec_swap (boolean_eq) (exec_eq integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) exec_noop print_integer exec_while (exec_y (boolean_xor)))
Errors: [1 0 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.416
Median total errors in population: 4
Error averages by case: (0.646 0.558 0.071 0.558 0.099 0.558 0.193 0.192 0.895 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.054
Average program size in population (points): 30.804
Average percent parens in population: 0.315
Minimum age in population: 28.27286529541016
Maximum age in population: 31.98633575439453
Average age in population: 30.04040089225769
Median age in population: 30.09719085693359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 290
Syntactic diversity (% unique Push programs):	 0.313
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8003607
--- Timings ---
Current time: 1559583363788 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.7 seconds, 70.3%
Fitness Testing:     10.6 seconds, 17.8%
Report:               6.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 89                 
Correct output: -95                 | Program output: 72                 
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -26                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 25                 
Correct output: 4                   | Program output: 18                 
Correct output: 21                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 12                 
Correct output: 64                  | Program output: 74                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 47                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 10                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -35                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 25                 
Correct output: -44                 | Program output: -8                 
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -53                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: 4                  
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 56                 
Correct output: -37                 | Program output: 26                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -17                
Correct output: -59                 | Program output: -57                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 19                 
Correct output: -41                 | Program output: -41                
Correct output: -53                 | Program output: -23                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -83                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -100               
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: 47                 
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -33                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: 1                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times in4 integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min exec_noop print_integer exec_while (exec_if (boolean_xor) ()))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times in4 integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min exec_noop print_integer exec_while (exec_if (boolean_xor) ()))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 943 108 339 108 806 806 481 339 481)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (108 943 108 339 108 806 806 481 339 481)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor})
Best program: (integer_dup exec_yank exec_eq boolean_or integer_shove in2 integer_stackdepth integer_dup_times in4 integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min exec_noop print_integer exec_while (exec_if (boolean_xor) ()))
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.481
Median total errors in population: 5
Error averages by case: (0.892 0.057 0.892 0.661 0.892 0.194 0.194 0.519 0.661 0.519)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.153
Average program size in population (points): 30.799
Average percent parens in population: 0.311
Minimum age in population: 29.61098480224609
Maximum age in population: 33.58280563354492
Average age in population: 31.5243621301651
Median age in population: 31.59719085693359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8213887
--- Timings ---
Current time: 1559583366251 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 70.8%
Fitness Testing:     10.8 seconds, 17.6%
Report:               7.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (526 897 368 526 932 521 365 521 526 929)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (526 897 368 526 932 521 365 521 526 929)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_xor})
Best program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 20
Size: 30
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.889
Median total errors in population: 2
Error averages by case: (0.474 0.103 0.632 0.474 0.068 0.479 0.635 0.479 0.474 0.071)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.945
Average program size in population (points): 27.553
Average percent parens in population: 0.278
Minimum age in population: 32.286865234375
Maximum age in population: 34.41171455383301
Average age in population: 33.54264922428131
Median age in population: 33.41171455383301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 401
Genome diversity (% unique genomes):	 0.29
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 415
Syntactic diversity (% unique Push programs):	 0.27
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8405171
--- Timings ---
Current time: 1559583368581 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 71.2%
Fitness Testing:     11.1 seconds, 17.3%
Report:               7.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 22
Successful program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 30


Auto-simplifying with starting size: 30
step: 0
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 500
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 1000
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 1500
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 2000
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 2500
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 3000
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 3500
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 4000
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 4500
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

step: 5000
program: (boolean_eq in3 exec_rot (integer_shove in2 integer_stackdepth integer_dup_times boolean_dup_items integer_min exec_y_when_autoconstructing () in1 exec_do*while () boolean_pop exec_do*while () integer_min) (exec_noop print_integer exec_while (exec_if (boolean_xor) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 30

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 202
Test mean error for best: 0.20200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: -95                 | Program output: -95                
Correct output: -10                 | Program output: -10                
Correct output: -33                 | Program output: -33                
Correct output: -26                 | Program output: -18                
Correct output: -39                 | Program output: -39                
Correct output: -78                 | Program output: -78                
Correct output: -70                 | Program output: -70                
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 81                  | Program output: 81                 
Correct output: 56                  | Program output: 56                 
Correct output: 0                   | Program output: 11                 
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 40                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 47                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 12                  | Program output: 40                 
Correct output: 64                  | Program output: 64                 
Correct output: 5                   | Program output: 5                  
Correct output: 47                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 10                  | Program output: 54                 
Correct output: 17                  | Program output: 44                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: -33                
Correct output: -44                 | Program output: -44                
Correct output: 48                  | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: -84                 | Program output: -84                
Correct output: -32                 | Program output: -32                
Correct output: -18                 | Program output: -18                
Correct output: -51                 | Program output: -51                
Correct output: -46                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: 9                   | Program output: 9                  
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: -15                
Correct output: -59                 | Program output: -59                
Correct output: 20                  | Program output: 20                 
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -88                 | Program output: -28                
Correct output: 11                  | Program output: 11                 
Correct output: -73                 | Program output: -73                
Correct output: 34                  | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -29                
Correct output: -53                 | Program output: -53                
Correct output: -47                 | Program output: -47                
Correct output: -26                 | Program output: -26                
Correct output: -75                 | Program output: -75                
Correct output: -56                 | Program output: -56                
Correct output: -69                 | Program output: -69                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -48                
Correct output: -59                 | Program output: -54                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -39                 | Program output: -39                
Correct output: -96                 | Program output: -96                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -54                 | Program output: -54                
Correct output: -100                | Program output: -75                
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -52                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -23                 | Program output: -23                
Correct output: -98                 | Program output: -98                
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -44                 | Program output: -44                
Correct output: -28                 | Program output: -28                
Correct output: -96                 | Program output: -96                
Correct output: -85                 | Program output: -85                
Correct output: -12                 | Program output: -12                
Correct output: -88                 | Program output: -88                
;;******************************
