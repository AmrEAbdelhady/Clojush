Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[83 -8 -8 -8] -8] [[12 12 -2 12] -2] [[15 15 15 81] 15] [[35 -44 35 35] -44] [[-16 -16 -87 -16] -87] [[85 -46 85 85] -46] [[56 56 84 56] 56] [[63 63 63 7] 7] [[-29 -29 46 -29] -29] [[35 35 35 -60] -60] [(-4 -4 -4 -4) -4] [(61 61 61 61) 61] [(74 74 74 74) 74] [(14 14 14 14) 14] [(94 94 94 94) 94] [(27 78 43 61) 27] [(44 56 65 48) 44] [(93 57 56 42) 42] [(4 47 77 35) 4] [(34 21 72 64) 21] [(37 93 100 87) 37] [(38 35 72 98) 35] [(88 26 52 78) 26] [(16 67 82 50) 16] [(70 55 36 78) 36] [(75 67 67 24) 24] [(100 48 58 57) 48] [(19 61 0 92) 0] [(2 29 54 87) 2] [(60 100 96 70) 60] [(95 94 47 50) 47] [(78 43 85 10) 10] [(30 84 21 68) 21] [(89 14 76 46) 14] [(96 73 92 19) 19] [(83 24 -11 15) -11] [(90 -12 -37 43) -37] [(-55 93 -68 4) -68] [(88 32 -94 35) -94] [(39 62 23 -89) -89] [(51 17 -44 0) -44] [(40 36 -45 -38) -45] [(-100 23 52 88) -100] [(97 72 -71 22) -71] [(-41 44 48 -26) -41] [(-52 22 -68 -54) -68] [(-29 -87 7 93) -87] [(20 51 36 -97) -97] [(5 77 3 0) 0] [(69 93 37 98) 37] [(31 10 -12 -53) -53] [(-46 42 84 -51) -51] [(-16 -93 -20 12) -93] [(73 -53 -36 -19) -53] [(37 13 13 -49) -49] [(-52 -31 69 55) -52] [(-53 -13 2 -51) -53] [(90 -13 42 -94) -94] [(39 -8 -33 -77) -77] [(13 -13 -81 28) -81] [(-64 -8 -76 41) -76] [(-88 97 83 -34) -88] [(-58 55 61 -36) -58] [(44 20 -32 32) -32] [(92 -4 70 -13) -13] [(-51 -85 -65 45) -85] [(-69 40 -2 43) -69] [(70 -34 -90 51) -90] [(83 38 19 23) 19] [(69 -91 -24 0) -91] [(-18 73 28 4) -18] [(-20 -78 -34 11) -78] [(-48 -19 29 -9) -48] [(-89 -79 -63 86) -89] [(37 50 -36 -90) -90] [(69 -34 -28 9) -34] [(97 20 -17 52) -17] [(-60 -18 -70 -42) -70] [(-96 -51 -32 32) -96] [(-82 35 -48 -78) -82] [(-87 63 -49 76) -87] [(94 88 77 100) 77] [(-65 -45 -27 -1) -65] [(43 68 -94 63) -94] [(-1 -78 -79 13) -79] [(-24 -95 -51 29) -95] [(92 41 -100 -37) -100] [(-14 -31 -13 21) -31] [(69 1 -13 21) -13] [(75 32 -99 58) -99] [(-88 11 -21 -42) -88] [(-40 28 100 -47) -47] [(-61 -93 -24 21) -93] [(70 -64 50 -63) -64] [(6 3 -3 24) -3])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[83 -8 -8 -8] -8]
Train Case:   6 | Input/Output: [[12 12 -2 12] -2]
Train Case:   7 | Input/Output: [[15 15 15 81] 15]
Train Case:   8 | Input/Output: [[35 -44 35 35] -44]
Train Case:   9 | Input/Output: [[-16 -16 -87 -16] -87]
Train Case:  10 | Input/Output: [[85 -46 85 85] -46]
Train Case:  11 | Input/Output: [[56 56 84 56] 56]
Train Case:  12 | Input/Output: [[63 63 63 7] 7]
Train Case:  13 | Input/Output: [[-29 -29 46 -29] -29]
Train Case:  14 | Input/Output: [[35 35 35 -60] -60]
Train Case:  15 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  16 | Input/Output: [(61 61 61 61) 61]
Train Case:  17 | Input/Output: [(74 74 74 74) 74]
Train Case:  18 | Input/Output: [(14 14 14 14) 14]
Train Case:  19 | Input/Output: [(94 94 94 94) 94]
Train Case:  20 | Input/Output: [(27 78 43 61) 27]
Train Case:  21 | Input/Output: [(44 56 65 48) 44]
Train Case:  22 | Input/Output: [(93 57 56 42) 42]
Train Case:  23 | Input/Output: [(4 47 77 35) 4]
Train Case:  24 | Input/Output: [(34 21 72 64) 21]
Train Case:  25 | Input/Output: [(37 93 100 87) 37]
Train Case:  26 | Input/Output: [(38 35 72 98) 35]
Train Case:  27 | Input/Output: [(88 26 52 78) 26]
Train Case:  28 | Input/Output: [(16 67 82 50) 16]
Train Case:  29 | Input/Output: [(70 55 36 78) 36]
Train Case:  30 | Input/Output: [(75 67 67 24) 24]
Train Case:  31 | Input/Output: [(100 48 58 57) 48]
Train Case:  32 | Input/Output: [(19 61 0 92) 0]
Train Case:  33 | Input/Output: [(2 29 54 87) 2]
Train Case:  34 | Input/Output: [(60 100 96 70) 60]
Train Case:  35 | Input/Output: [(95 94 47 50) 47]
Train Case:  36 | Input/Output: [(78 43 85 10) 10]
Train Case:  37 | Input/Output: [(30 84 21 68) 21]
Train Case:  38 | Input/Output: [(89 14 76 46) 14]
Train Case:  39 | Input/Output: [(96 73 92 19) 19]
Train Case:  40 | Input/Output: [(83 24 -11 15) -11]
Train Case:  41 | Input/Output: [(90 -12 -37 43) -37]
Train Case:  42 | Input/Output: [(-55 93 -68 4) -68]
Train Case:  43 | Input/Output: [(88 32 -94 35) -94]
Train Case:  44 | Input/Output: [(39 62 23 -89) -89]
Train Case:  45 | Input/Output: [(51 17 -44 0) -44]
Train Case:  46 | Input/Output: [(40 36 -45 -38) -45]
Train Case:  47 | Input/Output: [(-100 23 52 88) -100]
Train Case:  48 | Input/Output: [(97 72 -71 22) -71]
Train Case:  49 | Input/Output: [(-41 44 48 -26) -41]
Train Case:  50 | Input/Output: [(-52 22 -68 -54) -68]
Train Case:  51 | Input/Output: [(-29 -87 7 93) -87]
Train Case:  52 | Input/Output: [(20 51 36 -97) -97]
Train Case:  53 | Input/Output: [(5 77 3 0) 0]
Train Case:  54 | Input/Output: [(69 93 37 98) 37]
Train Case:  55 | Input/Output: [(31 10 -12 -53) -53]
Train Case:  56 | Input/Output: [(-46 42 84 -51) -51]
Train Case:  57 | Input/Output: [(-16 -93 -20 12) -93]
Train Case:  58 | Input/Output: [(73 -53 -36 -19) -53]
Train Case:  59 | Input/Output: [(37 13 13 -49) -49]
Train Case:  60 | Input/Output: [(-52 -31 69 55) -52]
Train Case:  61 | Input/Output: [(-53 -13 2 -51) -53]
Train Case:  62 | Input/Output: [(90 -13 42 -94) -94]
Train Case:  63 | Input/Output: [(39 -8 -33 -77) -77]
Train Case:  64 | Input/Output: [(13 -13 -81 28) -81]
Train Case:  65 | Input/Output: [(-64 -8 -76 41) -76]
Train Case:  66 | Input/Output: [(-88 97 83 -34) -88]
Train Case:  67 | Input/Output: [(-58 55 61 -36) -58]
Train Case:  68 | Input/Output: [(44 20 -32 32) -32]
Train Case:  69 | Input/Output: [(92 -4 70 -13) -13]
Train Case:  70 | Input/Output: [(-51 -85 -65 45) -85]
Train Case:  71 | Input/Output: [(-69 40 -2 43) -69]
Train Case:  72 | Input/Output: [(70 -34 -90 51) -90]
Train Case:  73 | Input/Output: [(83 38 19 23) 19]
Train Case:  74 | Input/Output: [(69 -91 -24 0) -91]
Train Case:  75 | Input/Output: [(-18 73 28 4) -18]
Train Case:  76 | Input/Output: [(-20 -78 -34 11) -78]
Train Case:  77 | Input/Output: [(-48 -19 29 -9) -48]
Train Case:  78 | Input/Output: [(-89 -79 -63 86) -89]
Train Case:  79 | Input/Output: [(37 50 -36 -90) -90]
Train Case:  80 | Input/Output: [(69 -34 -28 9) -34]
Train Case:  81 | Input/Output: [(97 20 -17 52) -17]
Train Case:  82 | Input/Output: [(-60 -18 -70 -42) -70]
Train Case:  83 | Input/Output: [(-96 -51 -32 32) -96]
Train Case:  84 | Input/Output: [(-82 35 -48 -78) -82]
Train Case:  85 | Input/Output: [(-87 63 -49 76) -87]
Train Case:  86 | Input/Output: [(94 88 77 100) 77]
Train Case:  87 | Input/Output: [(-65 -45 -27 -1) -65]
Train Case:  88 | Input/Output: [(43 68 -94 63) -94]
Train Case:  89 | Input/Output: [(-1 -78 -79 13) -79]
Train Case:  90 | Input/Output: [(-24 -95 -51 29) -95]
Train Case:  91 | Input/Output: [(92 41 -100 -37) -100]
Train Case:  92 | Input/Output: [(-14 -31 -13 21) -31]
Train Case:  93 | Input/Output: [(69 1 -13 21) -13]
Train Case:  94 | Input/Output: [(75 32 -99 58) -99]
Train Case:  95 | Input/Output: [(-88 11 -21 -42) -88]
Train Case:  96 | Input/Output: [(-40 28 100 -47) -47]
Train Case:  97 | Input/Output: [(-61 -93 -24 21) -93]
Train Case:  98 | Input/Output: [(70 -64 50 -63) -64]
Train Case:  99 | Input/Output: [(6 3 -3 24) -3]
Test Case:   0 | Input/Output: [[-47 -47 -47 67] -47]
Test Case:   1 | Input/Output: [[-91 80 -91 -91] -91]
Test Case:   2 | Input/Output: [[13 13 -83 13] -83]
Test Case:   3 | Input/Output: [[91 62 91 91] 62]
Test Case:   4 | Input/Output: [[3 -74 -74 -74] -74]
Test Case:   5 | Input/Output: [[53 53 9 53] 9]
Test Case:   6 | Input/Output: [[-37 -37 81 -37] -37]
Test Case:   7 | Input/Output: [[82 -64 82 82] -64]
Test Case:   8 | Input/Output: [[-19 -19 -19 45] -19]
Test Case:   9 | Input/Output: [[21 -41 21 21] -41]
Test Case:  10 | Input/Output: [[-92 -53 -92 -92] -92]
Test Case:  11 | Input/Output: [[80 -77 -77 -77] -77]
Test Case:  12 | Input/Output: [[-85 -17 -17 -17] -85]
Test Case:  13 | Input/Output: [[45 45 69 45] 45]
Test Case:  14 | Input/Output: [[-75 -75 -75 78] -75]
Test Case:  15 | Input/Output: [[-22 69 -22 -22] -22]
Test Case:  16 | Input/Output: [[24 24 2 24] 2]
Test Case:  17 | Input/Output: [[-28 49 -28 -28] -28]
Test Case:  18 | Input/Output: [[7 7 7 -11] -11]
Test Case:  19 | Input/Output: [[17 17 97 17] 17]
Test Case:  20 | Input/Output: [[41 41 41 45] 41]
Test Case:  21 | Input/Output: [[59 59 59 -56] -56]
Test Case:  22 | Input/Output: [[-82 -82 -82 51] -82]
Test Case:  23 | Input/Output: [[-85 62 -85 -85] -85]
Test Case:  24 | Input/Output: [[76 -16 -16 -16] -16]
Test Case:  25 | Input/Output: [[82 91 82 82] 82]
Test Case:  26 | Input/Output: [[14 14 48 14] 14]
Test Case:  27 | Input/Output: [[-18 78 78 78] -18]
Test Case:  28 | Input/Output: [[76 -31 76 76] -31]
Test Case:  29 | Input/Output: [[75 75 75 38] 38]
Test Case:  30 | Input/Output: [[8 8 8 29] 8]
Test Case:  31 | Input/Output: [[29 -41 29 29] -41]
Test Case:  32 | Input/Output: [[-43 20 20 20] -43]
Test Case:  33 | Input/Output: [[-86 -86 14 -86] -86]
Test Case:  34 | Input/Output: [[-69 -69 -69 -83] -83]
Test Case:  35 | Input/Output: [[-66 -66 51 -66] -66]
Test Case:  36 | Input/Output: [[-76 40 40 40] -76]
Test Case:  37 | Input/Output: [[-93 8 -93 -93] -93]
Test Case:  38 | Input/Output: [[-74 -74 -74 66] -74]
Test Case:  39 | Input/Output: [[-74 -74 -84 -74] -84]
Test Case:  40 | Input/Output: [[100 8 100 100] 8]
Test Case:  41 | Input/Output: [[69 69 69 -15] -15]
Test Case:  42 | Input/Output: [[47 47 47 -87] -87]
Test Case:  43 | Input/Output: [[69 69 68 69] 68]
Test Case:  44 | Input/Output: [[-92 81 81 81] -92]
Test Case:  45 | Input/Output: [[91 91 -19 91] -19]
Test Case:  46 | Input/Output: [[8 8 8 -100] -100]
Test Case:  47 | Input/Output: [[63 67 63 63] 63]
Test Case:  48 | Input/Output: [[72 -59 72 72] -59]
Test Case:  49 | Input/Output: [[80 -12 80 80] -12]
Test Case:  50 | Input/Output: [[75 75 75 -49] -49]
Test Case:  51 | Input/Output: [[-13 36 -13 -13] -13]
Test Case:  52 | Input/Output: [[14 14 -23 14] -23]
Test Case:  53 | Input/Output: [[-21 -21 -83 -21] -83]
Test Case:  54 | Input/Output: [[-12 64 64 64] -12]
Test Case:  55 | Input/Output: [[52 52 52 -93] -93]
Test Case:  56 | Input/Output: [[47 47 47 52] 47]
Test Case:  57 | Input/Output: [[-87 6 -87 -87] -87]
Test Case:  58 | Input/Output: [[92 35 92 92] 35]
Test Case:  59 | Input/Output: [[-65 -65 -65 87] -65]
Test Case:  60 | Input/Output: [[54 17 54 54] 17]
Test Case:  61 | Input/Output: [[53 53 53 -72] -72]
Test Case:  62 | Input/Output: [[44 44 44 56] 44]
Test Case:  63 | Input/Output: [[15 28 15 15] 15]
Test Case:  64 | Input/Output: [[53 53 -29 53] -29]
Test Case:  65 | Input/Output: [[-67 55 -67 -67] -67]
Test Case:  66 | Input/Output: [[-25 -86 -25 -25] -86]
Test Case:  67 | Input/Output: [[75 -97 -97 -97] -97]
Test Case:  68 | Input/Output: [[-63 -23 -23 -23] -63]
Test Case:  69 | Input/Output: [[-49 2 -49 -49] -49]
Test Case:  70 | Input/Output: [[27 71 71 71] 27]
Test Case:  71 | Input/Output: [[72 72 72 65] 65]
Test Case:  72 | Input/Output: [[88 -8 -8 -8] -8]
Test Case:  73 | Input/Output: [[100 -35 -35 -35] -35]
Test Case:  74 | Input/Output: [[79 79 79 84] 79]
Test Case:  75 | Input/Output: [[68 68 68 28] 28]
Test Case:  76 | Input/Output: [[-60 83 83 83] -60]
Test Case:  77 | Input/Output: [[-86 -86 -55 -86] -86]
Test Case:  78 | Input/Output: [[-51 -87 -87 -87] -87]
Test Case:  79 | Input/Output: [[-9 49 49 49] -9]
Test Case:  80 | Input/Output: [[93 93 -39 93] -39]
Test Case:  81 | Input/Output: [[-70 -70 -70 -45] -70]
Test Case:  82 | Input/Output: [[-26 -26 -26 88] -26]
Test Case:  83 | Input/Output: [[-41 9 -41 -41] -41]
Test Case:  84 | Input/Output: [[-96 -96 -16 -96] -96]
Test Case:  85 | Input/Output: [[41 41 41 -38] -38]
Test Case:  86 | Input/Output: [[-90 -90 -90 -86] -90]
Test Case:  87 | Input/Output: [[-79 -79 -79 -16] -79]
Test Case:  88 | Input/Output: [[49 49 -15 49] -15]
Test Case:  89 | Input/Output: [[-64 63 -64 -64] -64]
Test Case:  90 | Input/Output: [[34 34 -80 34] -80]
Test Case:  91 | Input/Output: [[-70 -66 -70 -70] -70]
Test Case:  92 | Input/Output: [[-61 15 15 15] -61]
Test Case:  93 | Input/Output: [[-2 -85 -2 -2] -85]
Test Case:  94 | Input/Output: [[31 -5 31 31] -5]
Test Case:  95 | Input/Output: [[-26 -26 -26 -89] -89]
Test Case:  96 | Input/Output: [[-73 -51 -73 -73] -73]
Test Case:  97 | Input/Output: [[-90 -90 -62 -90] -90]
Test Case:  98 | Input/Output: [[29 29 29 -83] -83]
Test Case:  99 | Input/Output: [[15 15 3 15] 3]
Test Case: 100 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 101 | Input/Output: [(89 89 89 89) 89]
Test Case: 102 | Input/Output: [(41 41 41 41) 41]
Test Case: 103 | Input/Output: [(76 76 76 76) 76]
Test Case: 104 | Input/Output: [(93 93 93 93) 93]
Test Case: 105 | Input/Output: [(83 83 83 83) 83]
Test Case: 106 | Input/Output: [(21 21 21 21) 21]
Test Case: 107 | Input/Output: [(70 70 70 70) 70]
Test Case: 108 | Input/Output: [(59 59 59 59) 59]
Test Case: 109 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 110 | Input/Output: [(85 85 85 85) 85]
Test Case: 111 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 112 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 113 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 114 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 115 | Input/Output: [(51 51 51 51) 51]
Test Case: 116 | Input/Output: [(9 9 9 9) 9]
Test Case: 117 | Input/Output: [(96 96 96 96) 96]
Test Case: 118 | Input/Output: [(67 67 67 67) 67]
Test Case: 119 | Input/Output: [(47 47 47 47) 47]
Test Case: 120 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 121 | Input/Output: [(57 57 57 57) 57]
Test Case: 122 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 123 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 124 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 125 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 126 | Input/Output: [(43 43 43 43) 43]
Test Case: 127 | Input/Output: [(52 52 52 52) 52]
Test Case: 128 | Input/Output: [(14 14 14 14) 14]
Test Case: 129 | Input/Output: [(47 47 47 47) 47]
Test Case: 130 | Input/Output: [(88 88 88 88) 88]
Test Case: 131 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 132 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 133 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 134 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 135 | Input/Output: [(29 29 29 29) 29]
Test Case: 136 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 137 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 138 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 139 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 140 | Input/Output: [(66 66 66 66) 66]
Test Case: 141 | Input/Output: [(67 67 67 67) 67]
Test Case: 142 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 143 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 144 | Input/Output: [(25 25 25 25) 25]
Test Case: 145 | Input/Output: [(5 5 5 5) 5]
Test Case: 146 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 147 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 148 | Input/Output: [(61 61 61 61) 61]
Test Case: 149 | Input/Output: [(62 62 62 62) 62]
Test Case: 150 | Input/Output: [(36 36 36 36) 36]
Test Case: 151 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 152 | Input/Output: [(0 0 0 0) 0]
Test Case: 153 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 154 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 155 | Input/Output: [(83 83 83 83) 83]
Test Case: 156 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 157 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 158 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 159 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 160 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 161 | Input/Output: [(85 85 85 85) 85]
Test Case: 162 | Input/Output: [(44 44 44 44) 44]
Test Case: 163 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 164 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 165 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 166 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 167 | Input/Output: [(12 12 12 12) 12]
Test Case: 168 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 169 | Input/Output: [(70 70 70 70) 70]
Test Case: 170 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 171 | Input/Output: [(28 28 28 28) 28]
Test Case: 172 | Input/Output: [(88 88 88 88) 88]
Test Case: 173 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 174 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 175 | Input/Output: [(27 27 27 27) 27]
Test Case: 176 | Input/Output: [(98 98 98 98) 98]
Test Case: 177 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 178 | Input/Output: [(92 92 92 92) 92]
Test Case: 179 | Input/Output: [(5 5 5 5) 5]
Test Case: 180 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 181 | Input/Output: [(33 33 33 33) 33]
Test Case: 182 | Input/Output: [(90 90 90 90) 90]
Test Case: 183 | Input/Output: [(98 98 98 98) 98]
Test Case: 184 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 185 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 186 | Input/Output: [(64 64 64 64) 64]
Test Case: 187 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 188 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 189 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 190 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 191 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 192 | Input/Output: [(73 73 73 73) 73]
Test Case: 193 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 194 | Input/Output: [(89 89 89 89) 89]
Test Case: 195 | Input/Output: [(78 78 78 78) 78]
Test Case: 196 | Input/Output: [(20 20 20 20) 20]
Test Case: 197 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 198 | Input/Output: [(37 37 37 37) 37]
Test Case: 199 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 200 | Input/Output: [(84 79 38 7) 7]
Test Case: 201 | Input/Output: [(22 13 20 44) 13]
Test Case: 202 | Input/Output: [(45 91 46 76) 45]
Test Case: 203 | Input/Output: [(28 7 28 74) 7]
Test Case: 204 | Input/Output: [(27 0 68 34) 0]
Test Case: 205 | Input/Output: [(61 37 94 6) 6]
Test Case: 206 | Input/Output: [(60 75 92 31) 31]
Test Case: 207 | Input/Output: [(1 31 65 53) 1]
Test Case: 208 | Input/Output: [(95 24 53 65) 24]
Test Case: 209 | Input/Output: [(79 13 11 18) 11]
Test Case: 210 | Input/Output: [(49 8 46 13) 8]
Test Case: 211 | Input/Output: [(63 94 12 58) 12]
Test Case: 212 | Input/Output: [(26 34 96 29) 26]
Test Case: 213 | Input/Output: [(37 77 30 25) 25]
Test Case: 214 | Input/Output: [(3 55 42 77) 3]
Test Case: 215 | Input/Output: [(72 68 89 51) 51]
Test Case: 216 | Input/Output: [(8 23 85 25) 8]
Test Case: 217 | Input/Output: [(96 90 63 84) 63]
Test Case: 218 | Input/Output: [(74 95 24 63) 24]
Test Case: 219 | Input/Output: [(61 44 26 28) 26]
Test Case: 220 | Input/Output: [(34 89 27 15) 15]
Test Case: 221 | Input/Output: [(95 43 82 40) 40]
Test Case: 222 | Input/Output: [(50 41 92 54) 41]
Test Case: 223 | Input/Output: [(30 37 73 21) 21]
Test Case: 224 | Input/Output: [(15 71 79 75) 15]
Test Case: 225 | Input/Output: [(29 47 24 91) 24]
Test Case: 226 | Input/Output: [(44 39 25 12) 12]
Test Case: 227 | Input/Output: [(70 10 2 22) 2]
Test Case: 228 | Input/Output: [(15 30 83 100) 15]
Test Case: 229 | Input/Output: [(18 50 93 6) 6]
Test Case: 230 | Input/Output: [(80 19 67 51) 19]
Test Case: 231 | Input/Output: [(6 97 87 71) 6]
Test Case: 232 | Input/Output: [(8 78 68 88) 8]
Test Case: 233 | Input/Output: [(45 9 8 73) 8]
Test Case: 234 | Input/Output: [(7 68 21 18) 7]
Test Case: 235 | Input/Output: [(6 33 53 34) 6]
Test Case: 236 | Input/Output: [(57 59 61 37) 37]
Test Case: 237 | Input/Output: [(24 54 57 28) 24]
Test Case: 238 | Input/Output: [(16 46 71 26) 16]
Test Case: 239 | Input/Output: [(38 95 98 69) 38]
Test Case: 240 | Input/Output: [(34 92 65 45) 34]
Test Case: 241 | Input/Output: [(98 2 67 79) 2]
Test Case: 242 | Input/Output: [(35 60 94 31) 31]
Test Case: 243 | Input/Output: [(95 91 97 28) 28]
Test Case: 244 | Input/Output: [(17 52 36 47) 17]
Test Case: 245 | Input/Output: [(69 58 64 59) 58]
Test Case: 246 | Input/Output: [(99 81 67 18) 18]
Test Case: 247 | Input/Output: [(42 63 12 71) 12]
Test Case: 248 | Input/Output: [(26 77 61 98) 26]
Test Case: 249 | Input/Output: [(38 64 48 94) 38]
Test Case: 250 | Input/Output: [(70 24 18 52) 18]
Test Case: 251 | Input/Output: [(25 18 78 23) 18]
Test Case: 252 | Input/Output: [(17 65 93 27) 17]
Test Case: 253 | Input/Output: [(28 56 31 99) 28]
Test Case: 254 | Input/Output: [(87 67 99 97) 67]
Test Case: 255 | Input/Output: [(78 69 67 57) 57]
Test Case: 256 | Input/Output: [(77 29 24 70) 24]
Test Case: 257 | Input/Output: [(90 82 77 4) 4]
Test Case: 258 | Input/Output: [(61 76 68 63) 61]
Test Case: 259 | Input/Output: [(41 37 37 42) 37]
Test Case: 260 | Input/Output: [(72 7 32 37) 7]
Test Case: 261 | Input/Output: [(3 43 32 11) 3]
Test Case: 262 | Input/Output: [(92 99 86 22) 22]
Test Case: 263 | Input/Output: [(35 13 55 8) 8]
Test Case: 264 | Input/Output: [(6 37 0 36) 0]
Test Case: 265 | Input/Output: [(70 15 78 36) 15]
Test Case: 266 | Input/Output: [(96 11 18 62) 11]
Test Case: 267 | Input/Output: [(95 84 42 25) 25]
Test Case: 268 | Input/Output: [(11 79 39 98) 11]
Test Case: 269 | Input/Output: [(74 64 39 13) 13]
Test Case: 270 | Input/Output: [(96 76 84 3) 3]
Test Case: 271 | Input/Output: [(81 36 25 67) 25]
Test Case: 272 | Input/Output: [(65 60 22 52) 22]
Test Case: 273 | Input/Output: [(50 39 11 32) 11]
Test Case: 274 | Input/Output: [(86 2 28 40) 2]
Test Case: 275 | Input/Output: [(9 65 46 7) 7]
Test Case: 276 | Input/Output: [(35 64 98 40) 35]
Test Case: 277 | Input/Output: [(38 43 79 84) 38]
Test Case: 278 | Input/Output: [(54 99 22 30) 22]
Test Case: 279 | Input/Output: [(77 13 76 62) 13]
Test Case: 280 | Input/Output: [(69 53 73 81) 53]
Test Case: 281 | Input/Output: [(72 54 42 92) 42]
Test Case: 282 | Input/Output: [(87 100 40 18) 18]
Test Case: 283 | Input/Output: [(2 32 85 90) 2]
Test Case: 284 | Input/Output: [(38 1 69 4) 1]
Test Case: 285 | Input/Output: [(4 73 11 22) 4]
Test Case: 286 | Input/Output: [(41 32 62 77) 32]
Test Case: 287 | Input/Output: [(24 82 14 77) 14]
Test Case: 288 | Input/Output: [(28 4 50 13) 4]
Test Case: 289 | Input/Output: [(50 87 8 58) 8]
Test Case: 290 | Input/Output: [(21 20 81 26) 20]
Test Case: 291 | Input/Output: [(66 98 65 35) 35]
Test Case: 292 | Input/Output: [(83 57 6 51) 6]
Test Case: 293 | Input/Output: [(45 17 79 50) 17]
Test Case: 294 | Input/Output: [(58 4 25 77) 4]
Test Case: 295 | Input/Output: [(47 84 84 63) 47]
Test Case: 296 | Input/Output: [(30 6 1 12) 1]
Test Case: 297 | Input/Output: [(50 41 99 58) 41]
Test Case: 298 | Input/Output: [(7 32 73 59) 7]
Test Case: 299 | Input/Output: [(97 91 71 72) 71]
Test Case: 300 | Input/Output: [(24 55 35 89) 24]
Test Case: 301 | Input/Output: [(63 15 76 93) 15]
Test Case: 302 | Input/Output: [(91 25 88 91) 25]
Test Case: 303 | Input/Output: [(40 5 60 93) 5]
Test Case: 304 | Input/Output: [(36 99 26 47) 26]
Test Case: 305 | Input/Output: [(42 77 89 72) 42]
Test Case: 306 | Input/Output: [(96 85 61 33) 33]
Test Case: 307 | Input/Output: [(32 62 67 3) 3]
Test Case: 308 | Input/Output: [(40 41 41 59) 40]
Test Case: 309 | Input/Output: [(51 72 8 8) 8]
Test Case: 310 | Input/Output: [(50 92 39 60) 39]
Test Case: 311 | Input/Output: [(0 8 40 22) 0]
Test Case: 312 | Input/Output: [(48 86 11 67) 11]
Test Case: 313 | Input/Output: [(45 24 84 30) 24]
Test Case: 314 | Input/Output: [(62 4 65 48) 4]
Test Case: 315 | Input/Output: [(89 55 93 75) 55]
Test Case: 316 | Input/Output: [(60 7 33 83) 7]
Test Case: 317 | Input/Output: [(5 85 37 12) 5]
Test Case: 318 | Input/Output: [(16 30 8 47) 8]
Test Case: 319 | Input/Output: [(36 34 6 40) 6]
Test Case: 320 | Input/Output: [(42 60 41 81) 41]
Test Case: 321 | Input/Output: [(90 46 79 61) 46]
Test Case: 322 | Input/Output: [(3 43 3 94) 3]
Test Case: 323 | Input/Output: [(74 88 39 57) 39]
Test Case: 324 | Input/Output: [(14 3 97 45) 3]
Test Case: 325 | Input/Output: [(85 27 4 20) 4]
Test Case: 326 | Input/Output: [(19 90 93 92) 19]
Test Case: 327 | Input/Output: [(80 58 1 83) 1]
Test Case: 328 | Input/Output: [(80 41 58 82) 41]
Test Case: 329 | Input/Output: [(87 80 97 37) 37]
Test Case: 330 | Input/Output: [(59 100 20 70) 20]
Test Case: 331 | Input/Output: [(95 99 5 35) 5]
Test Case: 332 | Input/Output: [(88 67 31 60) 31]
Test Case: 333 | Input/Output: [(25 87 2 84) 2]
Test Case: 334 | Input/Output: [(6 1 18 11) 1]
Test Case: 335 | Input/Output: [(93 61 25 22) 22]
Test Case: 336 | Input/Output: [(90 27 87 0) 0]
Test Case: 337 | Input/Output: [(70 57 31 81) 31]
Test Case: 338 | Input/Output: [(45 42 23 22) 22]
Test Case: 339 | Input/Output: [(38 38 30 35) 30]
Test Case: 340 | Input/Output: [(34 3 29 44) 3]
Test Case: 341 | Input/Output: [(83 86 74 15) 15]
Test Case: 342 | Input/Output: [(72 67 76 27) 27]
Test Case: 343 | Input/Output: [(20 71 82 78) 20]
Test Case: 344 | Input/Output: [(10 18 10 58) 10]
Test Case: 345 | Input/Output: [(93 74 30 50) 30]
Test Case: 346 | Input/Output: [(58 82 28 43) 28]
Test Case: 347 | Input/Output: [(20 35 15 37) 15]
Test Case: 348 | Input/Output: [(10 0 16 94) 0]
Test Case: 349 | Input/Output: [(4 88 66 9) 4]
Test Case: 350 | Input/Output: [(82 42 86 97) 42]
Test Case: 351 | Input/Output: [(29 5 22 10) 5]
Test Case: 352 | Input/Output: [(66 41 65 9) 9]
Test Case: 353 | Input/Output: [(7 27 74 48) 7]
Test Case: 354 | Input/Output: [(86 5 6 83) 5]
Test Case: 355 | Input/Output: [(50 74 31 63) 31]
Test Case: 356 | Input/Output: [(76 35 35 8) 8]
Test Case: 357 | Input/Output: [(38 76 64 42) 38]
Test Case: 358 | Input/Output: [(66 18 44 10) 10]
Test Case: 359 | Input/Output: [(2 88 88 44) 2]
Test Case: 360 | Input/Output: [(10 87 78 22) 10]
Test Case: 361 | Input/Output: [(75 65 63 62) 62]
Test Case: 362 | Input/Output: [(88 27 29 71) 27]
Test Case: 363 | Input/Output: [(24 30 59 37) 24]
Test Case: 364 | Input/Output: [(15 74 4 2) 2]
Test Case: 365 | Input/Output: [(85 86 8 39) 8]
Test Case: 366 | Input/Output: [(67 100 71 90) 67]
Test Case: 367 | Input/Output: [(89 14 18 92) 14]
Test Case: 368 | Input/Output: [(82 5 34 54) 5]
Test Case: 369 | Input/Output: [(90 64 15 97) 15]
Test Case: 370 | Input/Output: [(39 67 42 13) 13]
Test Case: 371 | Input/Output: [(38 5 88 54) 5]
Test Case: 372 | Input/Output: [(52 71 18 17) 17]
Test Case: 373 | Input/Output: [(5 15 91 85) 5]
Test Case: 374 | Input/Output: [(69 80 25 60) 25]
Test Case: 375 | Input/Output: [(85 82 58 7) 7]
Test Case: 376 | Input/Output: [(98 8 5 72) 5]
Test Case: 377 | Input/Output: [(33 80 90 76) 33]
Test Case: 378 | Input/Output: [(37 51 63 28) 28]
Test Case: 379 | Input/Output: [(35 43 79 100) 35]
Test Case: 380 | Input/Output: [(30 6 66 44) 6]
Test Case: 381 | Input/Output: [(96 31 33 41) 31]
Test Case: 382 | Input/Output: [(64 98 79 79) 64]
Test Case: 383 | Input/Output: [(95 1 46 54) 1]
Test Case: 384 | Input/Output: [(39 4 52 46) 4]
Test Case: 385 | Input/Output: [(69 31 91 57) 31]
Test Case: 386 | Input/Output: [(67 33 30 60) 30]
Test Case: 387 | Input/Output: [(32 52 97 85) 32]
Test Case: 388 | Input/Output: [(94 77 28 10) 10]
Test Case: 389 | Input/Output: [(75 70 39 58) 39]
Test Case: 390 | Input/Output: [(53 43 77 69) 43]
Test Case: 391 | Input/Output: [(50 2 98 26) 2]
Test Case: 392 | Input/Output: [(0 75 36 91) 0]
Test Case: 393 | Input/Output: [(71 4 30 75) 4]
Test Case: 394 | Input/Output: [(59 32 74 78) 32]
Test Case: 395 | Input/Output: [(46 46 5 42) 5]
Test Case: 396 | Input/Output: [(37 97 12 63) 12]
Test Case: 397 | Input/Output: [(67 5 29 51) 5]
Test Case: 398 | Input/Output: [(58 94 46 3) 3]
Test Case: 399 | Input/Output: [(85 79 0 29) 0]
Test Case: 400 | Input/Output: [(-81 -12 -54 -21) -81]
Test Case: 401 | Input/Output: [(12 13 27 -37) -37]
Test Case: 402 | Input/Output: [(10 97 -98 44) -98]
Test Case: 403 | Input/Output: [(86 15 68 88) 15]
Test Case: 404 | Input/Output: [(44 65 -68 -46) -68]
Test Case: 405 | Input/Output: [(11 -65 63 42) -65]
Test Case: 406 | Input/Output: [(99 -52 59 97) -52]
Test Case: 407 | Input/Output: [(-52 -97 -77 4) -97]
Test Case: 408 | Input/Output: [(-48 31 -35 -98) -98]
Test Case: 409 | Input/Output: [(-55 11 -27 93) -55]
Test Case: 410 | Input/Output: [(99 10 80 -20) -20]
Test Case: 411 | Input/Output: [(78 -60 65 8) -60]
Test Case: 412 | Input/Output: [(56 47 -18 70) -18]
Test Case: 413 | Input/Output: [(8 -67 18 19) -67]
Test Case: 414 | Input/Output: [(-7 98 -87 -7) -87]
Test Case: 415 | Input/Output: [(40 -89 74 15) -89]
Test Case: 416 | Input/Output: [(-94 1 22 -72) -94]
Test Case: 417 | Input/Output: [(84 28 38 53) 28]
Test Case: 418 | Input/Output: [(-47 -66 93 75) -66]
Test Case: 419 | Input/Output: [(20 -30 -34 -29) -34]
Test Case: 420 | Input/Output: [(-36 51 7 94) -36]
Test Case: 421 | Input/Output: [(-58 -80 45 -85) -85]
Test Case: 422 | Input/Output: [(84 -44 9 -67) -67]
Test Case: 423 | Input/Output: [(61 39 2 -8) -8]
Test Case: 424 | Input/Output: [(60 47 -2 82) -2]
Test Case: 425 | Input/Output: [(37 -56 -21 -44) -56]
Test Case: 426 | Input/Output: [(63 86 67 -96) -96]
Test Case: 427 | Input/Output: [(-72 0 -16 -90) -90]
Test Case: 428 | Input/Output: [(-44 27 23 -100) -100]
Test Case: 429 | Input/Output: [(-26 76 10 66) -26]
Test Case: 430 | Input/Output: [(-57 -14 -92 24) -92]
Test Case: 431 | Input/Output: [(-42 50 70 93) -42]
Test Case: 432 | Input/Output: [(97 10 0 -34) -34]
Test Case: 433 | Input/Output: [(45 -30 6 44) -30]
Test Case: 434 | Input/Output: [(65 -26 -95 -78) -95]
Test Case: 435 | Input/Output: [(44 -77 34 -88) -88]
Test Case: 436 | Input/Output: [(21 76 90 -20) -20]
Test Case: 437 | Input/Output: [(-59 65 -95 7) -95]
Test Case: 438 | Input/Output: [(-20 7 -95 -92) -95]
Test Case: 439 | Input/Output: [(-13 35 -92 -31) -92]
Test Case: 440 | Input/Output: [(68 18 16 56) 16]
Test Case: 441 | Input/Output: [(10 70 100 -70) -70]
Test Case: 442 | Input/Output: [(-38 13 91 -97) -97]
Test Case: 443 | Input/Output: [(95 99 -90 24) -90]
Test Case: 444 | Input/Output: [(-52 65 65 51) -52]
Test Case: 445 | Input/Output: [(86 -31 -14 -22) -31]
Test Case: 446 | Input/Output: [(-100 0 67 -59) -100]
Test Case: 447 | Input/Output: [(19 -90 70 -50) -90]
Test Case: 448 | Input/Output: [(38 -70 -16 4) -70]
Test Case: 449 | Input/Output: [(-71 -10 -87 -45) -87]
Test Case: 450 | Input/Output: [(64 38 17 81) 17]
Test Case: 451 | Input/Output: [(25 -83 32 52) -83]
Test Case: 452 | Input/Output: [(-52 18 -87 -6) -87]
Test Case: 453 | Input/Output: [(11 14 -31 -5) -31]
Test Case: 454 | Input/Output: [(-31 -59 -41 -79) -79]
Test Case: 455 | Input/Output: [(25 56 44 -87) -87]
Test Case: 456 | Input/Output: [(70 -8 75 -49) -49]
Test Case: 457 | Input/Output: [(-8 86 -28 -2) -28]
Test Case: 458 | Input/Output: [(29 75 72 57) 29]
Test Case: 459 | Input/Output: [(-5 95 -92 -67) -92]
Test Case: 460 | Input/Output: [(-43 -23 80 86) -43]
Test Case: 461 | Input/Output: [(27 -29 -3 73) -29]
Test Case: 462 | Input/Output: [(81 -62 66 53) -62]
Test Case: 463 | Input/Output: [(-47 -60 -6 -62) -62]
Test Case: 464 | Input/Output: [(28 -64 44 -29) -64]
Test Case: 465 | Input/Output: [(-42 1 -66 -57) -66]
Test Case: 466 | Input/Output: [(-74 75 -88 -29) -88]
Test Case: 467 | Input/Output: [(-61 -33 70 33) -61]
Test Case: 468 | Input/Output: [(16 27 -70 81) -70]
Test Case: 469 | Input/Output: [(-8 31 56 62) -8]
Test Case: 470 | Input/Output: [(-65 81 28 -93) -93]
Test Case: 471 | Input/Output: [(-51 -19 17 30) -51]
Test Case: 472 | Input/Output: [(-20 -40 -30 21) -40]
Test Case: 473 | Input/Output: [(64 79 10 64) 10]
Test Case: 474 | Input/Output: [(63 100 -56 69) -56]
Test Case: 475 | Input/Output: [(-13 11 -100 35) -100]
Test Case: 476 | Input/Output: [(72 -86 1 3) -86]
Test Case: 477 | Input/Output: [(96 -60 62 -8) -60]
Test Case: 478 | Input/Output: [(55 -78 -89 -29) -89]
Test Case: 479 | Input/Output: [(-64 -30 -52 -40) -64]
Test Case: 480 | Input/Output: [(-71 85 -43 -36) -71]
Test Case: 481 | Input/Output: [(25 44 57 22) 22]
Test Case: 482 | Input/Output: [(-63 -92 79 90) -92]
Test Case: 483 | Input/Output: [(-58 -11 -11 -43) -58]
Test Case: 484 | Input/Output: [(-1 72 25 38) -1]
Test Case: 485 | Input/Output: [(-92 14 35 -45) -92]
Test Case: 486 | Input/Output: [(-27 -83 12 -91) -91]
Test Case: 487 | Input/Output: [(91 14 -36 -15) -36]
Test Case: 488 | Input/Output: [(79 50 27 61) 27]
Test Case: 489 | Input/Output: [(-47 44 75 56) -47]
Test Case: 490 | Input/Output: [(-69 77 91 78) -69]
Test Case: 491 | Input/Output: [(3 -62 -61 -66) -66]
Test Case: 492 | Input/Output: [(65 15 88 96) 15]
Test Case: 493 | Input/Output: [(50 37 36 60) 36]
Test Case: 494 | Input/Output: [(11 90 84 20) 11]
Test Case: 495 | Input/Output: [(95 23 -6 -62) -62]
Test Case: 496 | Input/Output: [(62 -28 -16 13) -28]
Test Case: 497 | Input/Output: [(-65 -48 -68 -76) -76]
Test Case: 498 | Input/Output: [(68 -12 96 -67) -67]
Test Case: 499 | Input/Output: [(87 95 -68 66) -68]
Test Case: 500 | Input/Output: [(-61 45 64 -39) -61]
Test Case: 501 | Input/Output: [(-85 12 -5 -28) -85]
Test Case: 502 | Input/Output: [(-76 7 -27 -81) -81]
Test Case: 503 | Input/Output: [(-11 39 -60 -98) -98]
Test Case: 504 | Input/Output: [(-81 65 79 -95) -95]
Test Case: 505 | Input/Output: [(-54 -22 -45 -80) -80]
Test Case: 506 | Input/Output: [(-65 71 -43 -17) -65]
Test Case: 507 | Input/Output: [(-13 0 -41 91) -41]
Test Case: 508 | Input/Output: [(52 98 -62 -80) -80]
Test Case: 509 | Input/Output: [(-77 95 63 -73) -77]
Test Case: 510 | Input/Output: [(-90 -18 -94 89) -94]
Test Case: 511 | Input/Output: [(-16 48 26 -21) -21]
Test Case: 512 | Input/Output: [(-11 -31 -64 -16) -64]
Test Case: 513 | Input/Output: [(-4 92 -28 35) -28]
Test Case: 514 | Input/Output: [(-20 30 -72 -65) -72]
Test Case: 515 | Input/Output: [(40 -31 -53 -72) -72]
Test Case: 516 | Input/Output: [(-22 -75 -12 6) -75]
Test Case: 517 | Input/Output: [(15 39 38 -98) -98]
Test Case: 518 | Input/Output: [(79 40 3 45) 3]
Test Case: 519 | Input/Output: [(13 92 64 29) 13]
Test Case: 520 | Input/Output: [(-1 -95 -30 -89) -95]
Test Case: 521 | Input/Output: [(-64 -77 -3 97) -77]
Test Case: 522 | Input/Output: [(81 -58 17 18) -58]
Test Case: 523 | Input/Output: [(17 66 44 66) 17]
Test Case: 524 | Input/Output: [(-30 -3 21 -18) -30]
Test Case: 525 | Input/Output: [(-96 -19 34 56) -96]
Test Case: 526 | Input/Output: [(22 79 96 -7) -7]
Test Case: 527 | Input/Output: [(5 73 -70 -85) -85]
Test Case: 528 | Input/Output: [(-36 50 81 -15) -36]
Test Case: 529 | Input/Output: [(44 -50 39 -31) -50]
Test Case: 530 | Input/Output: [(58 69 32 58) 32]
Test Case: 531 | Input/Output: [(-94 -42 57 52) -94]
Test Case: 532 | Input/Output: [(-59 32 -40 -63) -63]
Test Case: 533 | Input/Output: [(-28 -49 -31 -6) -49]
Test Case: 534 | Input/Output: [(-32 76 62 -10) -32]
Test Case: 535 | Input/Output: [(-57 58 -63 90) -63]
Test Case: 536 | Input/Output: [(-92 -86 44 47) -92]
Test Case: 537 | Input/Output: [(97 78 91 29) 29]
Test Case: 538 | Input/Output: [(-17 64 -69 -32) -69]
Test Case: 539 | Input/Output: [(58 30 47 -50) -50]
Test Case: 540 | Input/Output: [(65 -37 90 -24) -37]
Test Case: 541 | Input/Output: [(94 33 67 -90) -90]
Test Case: 542 | Input/Output: [(72 91 14 -50) -50]
Test Case: 543 | Input/Output: [(-80 3 -98 18) -98]
Test Case: 544 | Input/Output: [(-88 16 -87 43) -88]
Test Case: 545 | Input/Output: [(-72 -86 49 98) -86]
Test Case: 546 | Input/Output: [(-71 33 -61 42) -71]
Test Case: 547 | Input/Output: [(-81 -3 85 75) -81]
Test Case: 548 | Input/Output: [(10 -37 31 11) -37]
Test Case: 549 | Input/Output: [(-83 -33 -9 31) -83]
Test Case: 550 | Input/Output: [(12 -86 22 34) -86]
Test Case: 551 | Input/Output: [(-32 -40 -7 34) -40]
Test Case: 552 | Input/Output: [(-11 -3 -11 27) -11]
Test Case: 553 | Input/Output: [(-44 -75 16 25) -75]
Test Case: 554 | Input/Output: [(71 -52 93 -88) -88]
Test Case: 555 | Input/Output: [(19 -60 -95 50) -95]
Test Case: 556 | Input/Output: [(-5 -56 65 -99) -99]
Test Case: 557 | Input/Output: [(-58 -50 -77 55) -77]
Test Case: 558 | Input/Output: [(-6 -58 40 80) -58]
Test Case: 559 | Input/Output: [(53 -95 -93 -5) -95]
Test Case: 560 | Input/Output: [(39 30 -60 57) -60]
Test Case: 561 | Input/Output: [(13 51 -82 58) -82]
Test Case: 562 | Input/Output: [(18 29 27 -62) -62]
Test Case: 563 | Input/Output: [(90 -41 26 -78) -78]
Test Case: 564 | Input/Output: [(80 -1 -36 -46) -46]
Test Case: 565 | Input/Output: [(-49 48 45 -36) -49]
Test Case: 566 | Input/Output: [(-2 94 -80 -16) -80]
Test Case: 567 | Input/Output: [(-40 -100 27 -92) -100]
Test Case: 568 | Input/Output: [(54 74 -97 27) -97]
Test Case: 569 | Input/Output: [(78 78 62 -21) -21]
Test Case: 570 | Input/Output: [(-83 32 -91 -24) -91]
Test Case: 571 | Input/Output: [(44 61 54 -2) -2]
Test Case: 572 | Input/Output: [(-78 66 -1 7) -78]
Test Case: 573 | Input/Output: [(-49 11 76 -55) -55]
Test Case: 574 | Input/Output: [(93 -5 -94 100) -94]
Test Case: 575 | Input/Output: [(-49 34 -68 -88) -88]
Test Case: 576 | Input/Output: [(-74 -38 7 86) -74]
Test Case: 577 | Input/Output: [(19 -57 19 11) -57]
Test Case: 578 | Input/Output: [(16 -18 60 -44) -44]
Test Case: 579 | Input/Output: [(46 83 -35 83) -35]
Test Case: 580 | Input/Output: [(-15 -5 -33 67) -33]
Test Case: 581 | Input/Output: [(-12 -44 38 -92) -92]
Test Case: 582 | Input/Output: [(66 86 29 -47) -47]
Test Case: 583 | Input/Output: [(-81 69 -35 -26) -81]
Test Case: 584 | Input/Output: [(-80 -46 -65 -60) -80]
Test Case: 585 | Input/Output: [(94 52 -79 -50) -79]
Test Case: 586 | Input/Output: [(14 -75 -47 -44) -75]
Test Case: 587 | Input/Output: [(-98 -41 11 -85) -98]
Test Case: 588 | Input/Output: [(-17 -7 -63 44) -63]
Test Case: 589 | Input/Output: [(-53 -9 64 -69) -69]
Test Case: 590 | Input/Output: [(9 91 -34 -35) -35]
Test Case: 591 | Input/Output: [(-61 -32 -50 71) -61]
Test Case: 592 | Input/Output: [(54 60 -24 49) -24]
Test Case: 593 | Input/Output: [(87 95 -84 52) -84]
Test Case: 594 | Input/Output: [(88 29 41 -68) -68]
Test Case: 595 | Input/Output: [(3 -92 -22 45) -92]
Test Case: 596 | Input/Output: [(-1 -81 81 97) -81]
Test Case: 597 | Input/Output: [(-47 59 -25 -6) -47]
Test Case: 598 | Input/Output: [(62 24 100 92) 24]
Test Case: 599 | Input/Output: [(30 -94 13 37) -94]
Test Case: 600 | Input/Output: [(-80 -7 -41 -23) -80]
Test Case: 601 | Input/Output: [(16 45 11 -27) -27]
Test Case: 602 | Input/Output: [(-49 -82 -20 -36) -82]
Test Case: 603 | Input/Output: [(-22 63 -2 50) -22]
Test Case: 604 | Input/Output: [(28 -16 69 86) -16]
Test Case: 605 | Input/Output: [(21 -80 51 87) -80]
Test Case: 606 | Input/Output: [(42 90 -74 33) -74]
Test Case: 607 | Input/Output: [(-89 -18 67 85) -89]
Test Case: 608 | Input/Output: [(76 76 80 -88) -88]
Test Case: 609 | Input/Output: [(-15 49 -75 54) -75]
Test Case: 610 | Input/Output: [(25 71 -14 -98) -98]
Test Case: 611 | Input/Output: [(58 52 -21 95) -21]
Test Case: 612 | Input/Output: [(32 -48 -11 -70) -70]
Test Case: 613 | Input/Output: [(-58 43 12 -39) -58]
Test Case: 614 | Input/Output: [(-99 -31 -30 -23) -99]
Test Case: 615 | Input/Output: [(13 25 -10 -46) -46]
Test Case: 616 | Input/Output: [(-18 -33 -6 1) -33]
Test Case: 617 | Input/Output: [(-95 -14 -3 -1) -95]
Test Case: 618 | Input/Output: [(-97 -31 -14 94) -97]
Test Case: 619 | Input/Output: [(-56 6 75 34) -56]
Test Case: 620 | Input/Output: [(-98 61 -15 -83) -98]
Test Case: 621 | Input/Output: [(66 54 57 0) 0]
Test Case: 622 | Input/Output: [(68 38 20 17) 17]
Test Case: 623 | Input/Output: [(89 87 -19 -45) -45]
Test Case: 624 | Input/Output: [(-8 -94 26 64) -94]
Test Case: 625 | Input/Output: [(-47 89 85 22) -47]
Test Case: 626 | Input/Output: [(-54 -12 60 -71) -71]
Test Case: 627 | Input/Output: [(-85 48 -33 66) -85]
Test Case: 628 | Input/Output: [(25 -2 90 -51) -51]
Test Case: 629 | Input/Output: [(-83 24 -19 -29) -83]
Test Case: 630 | Input/Output: [(41 37 -39 24) -39]
Test Case: 631 | Input/Output: [(74 38 70 -66) -66]
Test Case: 632 | Input/Output: [(-10 -34 100 41) -34]
Test Case: 633 | Input/Output: [(-35 76 19 -2) -35]
Test Case: 634 | Input/Output: [(-74 -13 -75 -94) -94]
Test Case: 635 | Input/Output: [(9 -45 56 5) -45]
Test Case: 636 | Input/Output: [(46 39 58 -94) -94]
Test Case: 637 | Input/Output: [(-41 -41 -60 -94) -94]
Test Case: 638 | Input/Output: [(-39 81 15 -39) -39]
Test Case: 639 | Input/Output: [(72 -96 51 49) -96]
Test Case: 640 | Input/Output: [(39 -10 48 -43) -43]
Test Case: 641 | Input/Output: [(88 -14 -17 55) -17]
Test Case: 642 | Input/Output: [(-82 51 -61 -12) -82]
Test Case: 643 | Input/Output: [(65 -74 -95 -97) -97]
Test Case: 644 | Input/Output: [(-47 -47 -61 -45) -61]
Test Case: 645 | Input/Output: [(19 58 -14 -80) -80]
Test Case: 646 | Input/Output: [(37 -91 -56 46) -91]
Test Case: 647 | Input/Output: [(-82 -91 -83 -58) -91]
Test Case: 648 | Input/Output: [(38 -91 -78 87) -91]
Test Case: 649 | Input/Output: [(49 -76 -1 -28) -76]
Test Case: 650 | Input/Output: [(-56 -84 86 74) -84]
Test Case: 651 | Input/Output: [(-63 -30 -40 38) -63]
Test Case: 652 | Input/Output: [(-57 45 -65 63) -65]
Test Case: 653 | Input/Output: [(43 9 -73 -53) -73]
Test Case: 654 | Input/Output: [(92 61 -18 -47) -47]
Test Case: 655 | Input/Output: [(-45 73 60 -3) -45]
Test Case: 656 | Input/Output: [(95 -94 2 -81) -94]
Test Case: 657 | Input/Output: [(-72 -4 -73 -18) -73]
Test Case: 658 | Input/Output: [(1 -2 -95 31) -95]
Test Case: 659 | Input/Output: [(51 60 -52 83) -52]
Test Case: 660 | Input/Output: [(-33 -80 77 -93) -93]
Test Case: 661 | Input/Output: [(-30 4 95 28) -30]
Test Case: 662 | Input/Output: [(-72 21 97 45) -72]
Test Case: 663 | Input/Output: [(-60 -9 -74 -34) -74]
Test Case: 664 | Input/Output: [(24 49 75 -33) -33]
Test Case: 665 | Input/Output: [(-97 -28 -18 69) -97]
Test Case: 666 | Input/Output: [(-95 -34 -54 33) -95]
Test Case: 667 | Input/Output: [(39 -16 -41 2) -41]
Test Case: 668 | Input/Output: [(15 -44 36 78) -44]
Test Case: 669 | Input/Output: [(-86 99 -28 -79) -86]
Test Case: 670 | Input/Output: [(-43 -69 -84 56) -84]
Test Case: 671 | Input/Output: [(-27 40 -93 37) -93]
Test Case: 672 | Input/Output: [(-89 7 37 -93) -93]
Test Case: 673 | Input/Output: [(-38 16 -48 39) -48]
Test Case: 674 | Input/Output: [(96 67 20 30) 20]
Test Case: 675 | Input/Output: [(66 32 55 34) 32]
Test Case: 676 | Input/Output: [(-44 51 -37 24) -44]
Test Case: 677 | Input/Output: [(-80 -88 4 -13) -88]
Test Case: 678 | Input/Output: [(7 -94 59 71) -94]
Test Case: 679 | Input/Output: [(17 39 66 -66) -66]
Test Case: 680 | Input/Output: [(-49 25 91 71) -49]
Test Case: 681 | Input/Output: [(3 -69 -40 -69) -69]
Test Case: 682 | Input/Output: [(24 24 24 21) 21]
Test Case: 683 | Input/Output: [(-81 -52 -3 -27) -81]
Test Case: 684 | Input/Output: [(-20 -28 72 -10) -28]
Test Case: 685 | Input/Output: [(39 14 26 55) 14]
Test Case: 686 | Input/Output: [(-50 -1 18 82) -50]
Test Case: 687 | Input/Output: [(37 -19 76 -47) -47]
Test Case: 688 | Input/Output: [(-86 -31 20 -92) -92]
Test Case: 689 | Input/Output: [(38 29 -64 60) -64]
Test Case: 690 | Input/Output: [(-81 -68 -23 93) -81]
Test Case: 691 | Input/Output: [(30 66 86 -54) -54]
Test Case: 692 | Input/Output: [(59 -77 -12 94) -77]
Test Case: 693 | Input/Output: [(41 31 50 97) 31]
Test Case: 694 | Input/Output: [(22 -31 70 17) -31]
Test Case: 695 | Input/Output: [(-14 -58 10 -57) -58]
Test Case: 696 | Input/Output: [(28 22 37 34) 22]
Test Case: 697 | Input/Output: [(-97 94 27 5) -97]
Test Case: 698 | Input/Output: [(-79 -54 -84 7) -84]
Test Case: 699 | Input/Output: [(18 3 70 -68) -68]
Test Case: 700 | Input/Output: [(-97 9 34 71) -97]
Test Case: 701 | Input/Output: [(52 -5 56 -88) -88]
Test Case: 702 | Input/Output: [(98 -67 67 82) -67]
Test Case: 703 | Input/Output: [(76 65 59 -75) -75]
Test Case: 704 | Input/Output: [(27 -36 -43 15) -43]
Test Case: 705 | Input/Output: [(-54 99 82 -100) -100]
Test Case: 706 | Input/Output: [(75 62 -20 -35) -35]
Test Case: 707 | Input/Output: [(84 -12 -98 76) -98]
Test Case: 708 | Input/Output: [(-50 88 67 -65) -65]
Test Case: 709 | Input/Output: [(88 94 -33 46) -33]
Test Case: 710 | Input/Output: [(-99 57 1 -85) -99]
Test Case: 711 | Input/Output: [(-65 20 -87 -7) -87]
Test Case: 712 | Input/Output: [(88 15 -71 29) -71]
Test Case: 713 | Input/Output: [(-66 55 -43 -86) -86]
Test Case: 714 | Input/Output: [(22 -1 -95 80) -95]
Test Case: 715 | Input/Output: [(15 81 95 82) 15]
Test Case: 716 | Input/Output: [(4 68 -26 -17) -26]
Test Case: 717 | Input/Output: [(75 -89 74 -86) -89]
Test Case: 718 | Input/Output: [(17 34 5 -31) -31]
Test Case: 719 | Input/Output: [(80 52 -69 -42) -69]
Test Case: 720 | Input/Output: [(-91 76 -98 -37) -98]
Test Case: 721 | Input/Output: [(88 11 75 43) 11]
Test Case: 722 | Input/Output: [(-75 -41 -54 -93) -93]
Test Case: 723 | Input/Output: [(-52 47 -71 74) -71]
Test Case: 724 | Input/Output: [(14 91 57 -8) -8]
Test Case: 725 | Input/Output: [(-35 -20 28 -8) -35]
Test Case: 726 | Input/Output: [(4 2 90 79) 2]
Test Case: 727 | Input/Output: [(-66 -53 -30 63) -66]
Test Case: 728 | Input/Output: [(-39 30 87 67) -39]
Test Case: 729 | Input/Output: [(10 -9 -86 38) -86]
Test Case: 730 | Input/Output: [(-36 -76 -40 85) -76]
Test Case: 731 | Input/Output: [(-40 -98 49 4) -98]
Test Case: 732 | Input/Output: [(-90 29 -80 21) -90]
Test Case: 733 | Input/Output: [(58 37 17 46) 17]
Test Case: 734 | Input/Output: [(100 8 -1 59) -1]
Test Case: 735 | Input/Output: [(72 23 -35 -50) -50]
Test Case: 736 | Input/Output: [(-70 -25 -34 91) -70]
Test Case: 737 | Input/Output: [(-7 9 -85 -91) -91]
Test Case: 738 | Input/Output: [(92 -81 59 68) -81]
Test Case: 739 | Input/Output: [(-22 20 -9 -65) -65]
Test Case: 740 | Input/Output: [(-91 37 81 -64) -91]
Test Case: 741 | Input/Output: [(100 -77 98 83) -77]
Test Case: 742 | Input/Output: [(99 47 35 31) 31]
Test Case: 743 | Input/Output: [(-74 49 96 19) -74]
Test Case: 744 | Input/Output: [(-73 56 -28 58) -73]
Test Case: 745 | Input/Output: [(-78 -6 -31 -37) -78]
Test Case: 746 | Input/Output: [(89 92 -18 -82) -82]
Test Case: 747 | Input/Output: [(-2 95 39 52) -2]
Test Case: 748 | Input/Output: [(-74 -93 31 1) -93]
Test Case: 749 | Input/Output: [(89 82 -89 53) -89]
Test Case: 750 | Input/Output: [(87 -89 -79 -72) -89]
Test Case: 751 | Input/Output: [(-57 85 63 -76) -76]
Test Case: 752 | Input/Output: [(-27 51 -5 -46) -46]
Test Case: 753 | Input/Output: [(58 -28 -85 -14) -85]
Test Case: 754 | Input/Output: [(-91 46 64 99) -91]
Test Case: 755 | Input/Output: [(-82 10 57 -90) -90]
Test Case: 756 | Input/Output: [(2 -71 -100 46) -100]
Test Case: 757 | Input/Output: [(49 -9 -94 -65) -94]
Test Case: 758 | Input/Output: [(74 -68 16 100) -68]
Test Case: 759 | Input/Output: [(77 3 73 -31) -31]
Test Case: 760 | Input/Output: [(6 -81 74 -58) -81]
Test Case: 761 | Input/Output: [(-76 -52 53 58) -76]
Test Case: 762 | Input/Output: [(89 -74 24 -14) -74]
Test Case: 763 | Input/Output: [(96 83 -58 -85) -85]
Test Case: 764 | Input/Output: [(-49 -60 15 98) -60]
Test Case: 765 | Input/Output: [(-44 -33 -11 89) -44]
Test Case: 766 | Input/Output: [(86 48 -33 -28) -33]
Test Case: 767 | Input/Output: [(92 -24 -14 -1) -24]
Test Case: 768 | Input/Output: [(-99 71 -21 -56) -99]
Test Case: 769 | Input/Output: [(21 -57 31 61) -57]
Test Case: 770 | Input/Output: [(-92 40 -4 93) -92]
Test Case: 771 | Input/Output: [(82 10 -43 9) -43]
Test Case: 772 | Input/Output: [(43 93 -100 -95) -100]
Test Case: 773 | Input/Output: [(-9 45 -77 7) -77]
Test Case: 774 | Input/Output: [(55 -93 44 65) -93]
Test Case: 775 | Input/Output: [(22 14 29 21) 14]
Test Case: 776 | Input/Output: [(-26 70 -55 29) -55]
Test Case: 777 | Input/Output: [(33 -20 17 -97) -97]
Test Case: 778 | Input/Output: [(47 -79 42 -70) -79]
Test Case: 779 | Input/Output: [(-49 0 -64 64) -64]
Test Case: 780 | Input/Output: [(-86 -20 -63 39) -86]
Test Case: 781 | Input/Output: [(22 28 1 -28) -28]
Test Case: 782 | Input/Output: [(3 -97 52 -44) -97]
Test Case: 783 | Input/Output: [(83 43 34 -32) -32]
Test Case: 784 | Input/Output: [(-72 93 -16 -55) -72]
Test Case: 785 | Input/Output: [(50 -50 69 -83) -83]
Test Case: 786 | Input/Output: [(19 -36 9 100) -36]
Test Case: 787 | Input/Output: [(-6 91 66 -18) -18]
Test Case: 788 | Input/Output: [(-35 28 73 -69) -69]
Test Case: 789 | Input/Output: [(37 8 -18 39) -18]
Test Case: 790 | Input/Output: [(-93 91 -58 41) -93]
Test Case: 791 | Input/Output: [(18 -61 90 -62) -62]
Test Case: 792 | Input/Output: [(-8 -49 96 -49) -49]
Test Case: 793 | Input/Output: [(-2 -9 -23 -83) -83]
Test Case: 794 | Input/Output: [(60 -43 -59 51) -59]
Test Case: 795 | Input/Output: [(-86 -86 12 -58) -86]
Test Case: 796 | Input/Output: [(65 -72 70 41) -72]
Test Case: 797 | Input/Output: [(16 -16 -36 79) -36]
Test Case: 798 | Input/Output: [(55 -98 48 -45) -98]
Test Case: 799 | Input/Output: [(-48 91 -23 -63) -63]
Test Case: 800 | Input/Output: [(-59 -36 -81 -77) -81]
Test Case: 801 | Input/Output: [(32 35 -27 60) -27]
Test Case: 802 | Input/Output: [(33 -35 -2 -69) -69]
Test Case: 803 | Input/Output: [(-98 25 -63 86) -98]
Test Case: 804 | Input/Output: [(-25 38 -23 -22) -25]
Test Case: 805 | Input/Output: [(89 26 67 82) 26]
Test Case: 806 | Input/Output: [(60 -17 -97 -94) -97]
Test Case: 807 | Input/Output: [(-17 0 -24 98) -24]
Test Case: 808 | Input/Output: [(-22 8 6 91) -22]
Test Case: 809 | Input/Output: [(-13 -31 26 -76) -76]
Test Case: 810 | Input/Output: [(22 -27 -100 48) -100]
Test Case: 811 | Input/Output: [(-41 -99 9 -94) -99]
Test Case: 812 | Input/Output: [(-93 -29 -28 -86) -93]
Test Case: 813 | Input/Output: [(-8 -26 -54 23) -54]
Test Case: 814 | Input/Output: [(13 -19 26 -3) -19]
Test Case: 815 | Input/Output: [(90 -27 -41 -20) -41]
Test Case: 816 | Input/Output: [(-29 5 99 -94) -94]
Test Case: 817 | Input/Output: [(43 68 -40 69) -40]
Test Case: 818 | Input/Output: [(-8 42 61 26) -8]
Test Case: 819 | Input/Output: [(16 -93 26 17) -93]
Test Case: 820 | Input/Output: [(-88 -32 -12 -35) -88]
Test Case: 821 | Input/Output: [(-79 27 75 4) -79]
Test Case: 822 | Input/Output: [(-21 22 74 98) -21]
Test Case: 823 | Input/Output: [(-98 5 -22 -42) -98]
Test Case: 824 | Input/Output: [(-68 -24 -72 23) -72]
Test Case: 825 | Input/Output: [(44 77 48 63) 44]
Test Case: 826 | Input/Output: [(-96 27 19 -2) -96]
Test Case: 827 | Input/Output: [(-17 -7 72 69) -17]
Test Case: 828 | Input/Output: [(-70 90 66 -40) -70]
Test Case: 829 | Input/Output: [(-41 -24 -43 1) -43]
Test Case: 830 | Input/Output: [(-21 -33 11 33) -33]
Test Case: 831 | Input/Output: [(62 16 2 71) 2]
Test Case: 832 | Input/Output: [(35 33 2 1) 1]
Test Case: 833 | Input/Output: [(91 -72 -11 87) -72]
Test Case: 834 | Input/Output: [(-53 49 10 91) -53]
Test Case: 835 | Input/Output: [(34 97 43 100) 34]
Test Case: 836 | Input/Output: [(-30 52 3 -95) -95]
Test Case: 837 | Input/Output: [(52 -4 86 -91) -91]
Test Case: 838 | Input/Output: [(68 95 82 -25) -25]
Test Case: 839 | Input/Output: [(98 -89 -87 12) -89]
Test Case: 840 | Input/Output: [(62 -18 -21 83) -21]
Test Case: 841 | Input/Output: [(100 -32 1 9) -32]
Test Case: 842 | Input/Output: [(83 91 0 -69) -69]
Test Case: 843 | Input/Output: [(63 -91 -61 56) -91]
Test Case: 844 | Input/Output: [(34 -71 -97 -79) -97]
Test Case: 845 | Input/Output: [(-12 -21 -7 -37) -37]
Test Case: 846 | Input/Output: [(51 5 79 10) 5]
Test Case: 847 | Input/Output: [(95 91 90 -52) -52]
Test Case: 848 | Input/Output: [(-66 -19 -87 40) -87]
Test Case: 849 | Input/Output: [(-41 -35 37 44) -41]
Test Case: 850 | Input/Output: [(46 24 -70 77) -70]
Test Case: 851 | Input/Output: [(-58 -5 -44 -68) -68]
Test Case: 852 | Input/Output: [(21 -6 -16 -12) -16]
Test Case: 853 | Input/Output: [(-69 -2 13 4) -69]
Test Case: 854 | Input/Output: [(42 -87 -17 -22) -87]
Test Case: 855 | Input/Output: [(3 -38 -60 -84) -84]
Test Case: 856 | Input/Output: [(55 -55 63 -41) -55]
Test Case: 857 | Input/Output: [(-87 -31 36 -60) -87]
Test Case: 858 | Input/Output: [(-54 -49 -72 -56) -72]
Test Case: 859 | Input/Output: [(96 -80 48 -7) -80]
Test Case: 860 | Input/Output: [(-3 69 -26 38) -26]
Test Case: 861 | Input/Output: [(11 4 79 -57) -57]
Test Case: 862 | Input/Output: [(-56 37 27 0) -56]
Test Case: 863 | Input/Output: [(-79 38 65 -93) -93]
Test Case: 864 | Input/Output: [(60 64 11 -100) -100]
Test Case: 865 | Input/Output: [(-19 96 -37 47) -37]
Test Case: 866 | Input/Output: [(21 -82 -66 -37) -82]
Test Case: 867 | Input/Output: [(64 89 -43 61) -43]
Test Case: 868 | Input/Output: [(69 -85 -8 -42) -85]
Test Case: 869 | Input/Output: [(-80 24 -44 -90) -90]
Test Case: 870 | Input/Output: [(-35 -15 -46 28) -46]
Test Case: 871 | Input/Output: [(-32 -13 23 31) -32]
Test Case: 872 | Input/Output: [(-79 45 26 -10) -79]
Test Case: 873 | Input/Output: [(-38 -40 -2 -99) -99]
Test Case: 874 | Input/Output: [(-82 -70 -83 -68) -83]
Test Case: 875 | Input/Output: [(-15 -31 83 58) -31]
Test Case: 876 | Input/Output: [(-25 5 44 -59) -59]
Test Case: 877 | Input/Output: [(-21 74 61 -94) -94]
Test Case: 878 | Input/Output: [(-72 8 -61 -67) -72]
Test Case: 879 | Input/Output: [(72 -1 69 2) -1]
Test Case: 880 | Input/Output: [(-56 24 27 47) -56]
Test Case: 881 | Input/Output: [(-63 -94 2 27) -94]
Test Case: 882 | Input/Output: [(44 39 -93 -17) -93]
Test Case: 883 | Input/Output: [(-49 -30 -21 46) -49]
Test Case: 884 | Input/Output: [(13 -70 -8 90) -70]
Test Case: 885 | Input/Output: [(55 -86 -11 22) -86]
Test Case: 886 | Input/Output: [(33 43 59 53) 33]
Test Case: 887 | Input/Output: [(-79 96 -41 -79) -79]
Test Case: 888 | Input/Output: [(42 75 72 64) 42]
Test Case: 889 | Input/Output: [(-42 -79 -70 32) -79]
Test Case: 890 | Input/Output: [(-83 18 -39 -98) -98]
Test Case: 891 | Input/Output: [(-20 33 12 52) -20]
Test Case: 892 | Input/Output: [(-34 -68 -31 50) -68]
Test Case: 893 | Input/Output: [(89 90 8 -66) -66]
Test Case: 894 | Input/Output: [(-65 37 -71 -79) -79]
Test Case: 895 | Input/Output: [(69 -15 3 15) -15]
Test Case: 896 | Input/Output: [(80 -17 26 -29) -29]
Test Case: 897 | Input/Output: [(-45 18 59 -82) -82]
Test Case: 898 | Input/Output: [(-91 -76 100 -87) -91]
Test Case: 899 | Input/Output: [(-68 85 -37 24) -68]
Test Case: 900 | Input/Output: [(-56 97 91 63) -56]
Test Case: 901 | Input/Output: [(87 54 46 -33) -33]
Test Case: 902 | Input/Output: [(-71 55 -66 21) -71]
Test Case: 903 | Input/Output: [(-50 80 -53 -30) -53]
Test Case: 904 | Input/Output: [(-17 0 9 -58) -58]
Test Case: 905 | Input/Output: [(-57 -96 -7 84) -96]
Test Case: 906 | Input/Output: [(-95 71 -1 72) -95]
Test Case: 907 | Input/Output: [(83 92 -74 7) -74]
Test Case: 908 | Input/Output: [(-6 -72 -12 13) -72]
Test Case: 909 | Input/Output: [(-61 40 -97 -67) -97]
Test Case: 910 | Input/Output: [(73 -70 -29 -8) -70]
Test Case: 911 | Input/Output: [(-47 -68 -53 39) -68]
Test Case: 912 | Input/Output: [(51 21 -36 82) -36]
Test Case: 913 | Input/Output: [(52 -84 -67 -67) -84]
Test Case: 914 | Input/Output: [(76 20 -86 44) -86]
Test Case: 915 | Input/Output: [(-11 -78 62 -78) -78]
Test Case: 916 | Input/Output: [(10 -74 20 -95) -95]
Test Case: 917 | Input/Output: [(26 -12 -83 49) -83]
Test Case: 918 | Input/Output: [(50 3 -39 18) -39]
Test Case: 919 | Input/Output: [(-36 99 24 -13) -36]
Test Case: 920 | Input/Output: [(-38 -99 42 57) -99]
Test Case: 921 | Input/Output: [(16 59 -95 19) -95]
Test Case: 922 | Input/Output: [(41 48 -47 -77) -77]
Test Case: 923 | Input/Output: [(-27 29 -100 -97) -100]
Test Case: 924 | Input/Output: [(-82 -19 71 -94) -94]
Test Case: 925 | Input/Output: [(-16 86 13 -51) -51]
Test Case: 926 | Input/Output: [(3 -42 -74 59) -74]
Test Case: 927 | Input/Output: [(-28 42 -26 48) -28]
Test Case: 928 | Input/Output: [(-82 -76 -27 -32) -82]
Test Case: 929 | Input/Output: [(1 -61 74 -62) -62]
Test Case: 930 | Input/Output: [(-65 80 54 -2) -65]
Test Case: 931 | Input/Output: [(-22 51 -48 -33) -48]
Test Case: 932 | Input/Output: [(-85 -59 19 -63) -85]
Test Case: 933 | Input/Output: [(100 11 59 -60) -60]
Test Case: 934 | Input/Output: [(39 -13 18 70) -13]
Test Case: 935 | Input/Output: [(11 3 -51 24) -51]
Test Case: 936 | Input/Output: [(53 91 5 60) 5]
Test Case: 937 | Input/Output: [(93 -85 34 -35) -85]
Test Case: 938 | Input/Output: [(20 46 43 -44) -44]
Test Case: 939 | Input/Output: [(51 -51 -5 -3) -51]
Test Case: 940 | Input/Output: [(-68 51 23 -52) -68]
Test Case: 941 | Input/Output: [(-67 91 -35 -53) -67]
Test Case: 942 | Input/Output: [(82 84 54 7) 7]
Test Case: 943 | Input/Output: [(18 -22 -81 7) -81]
Test Case: 944 | Input/Output: [(-16 -84 76 66) -84]
Test Case: 945 | Input/Output: [(-46 48 20 -7) -46]
Test Case: 946 | Input/Output: [(-17 100 67 -73) -73]
Test Case: 947 | Input/Output: [(59 40 -89 -1) -89]
Test Case: 948 | Input/Output: [(27 27 1 59) 1]
Test Case: 949 | Input/Output: [(85 -95 -49 -43) -95]
Test Case: 950 | Input/Output: [(12 -19 -42 20) -42]
Test Case: 951 | Input/Output: [(-48 66 -91 -52) -91]
Test Case: 952 | Input/Output: [(39 99 -13 88) -13]
Test Case: 953 | Input/Output: [(-83 83 -75 7) -83]
Test Case: 954 | Input/Output: [(-1 -14 -74 -83) -83]
Test Case: 955 | Input/Output: [(85 -3 4 35) -3]
Test Case: 956 | Input/Output: [(60 -16 19 -58) -58]
Test Case: 957 | Input/Output: [(-40 3 -31 -23) -40]
Test Case: 958 | Input/Output: [(-43 53 -79 -80) -80]
Test Case: 959 | Input/Output: [(25 -2 -39 -89) -89]
Test Case: 960 | Input/Output: [(-8 -53 91 75) -53]
Test Case: 961 | Input/Output: [(-94 -8 14 65) -94]
Test Case: 962 | Input/Output: [(-14 10 8 -58) -58]
Test Case: 963 | Input/Output: [(-26 25 57 97) -26]
Test Case: 964 | Input/Output: [(88 29 94 -36) -36]
Test Case: 965 | Input/Output: [(22 -88 -74 -65) -88]
Test Case: 966 | Input/Output: [(39 -18 97 -49) -49]
Test Case: 967 | Input/Output: [(-43 -37 47 -67) -67]
Test Case: 968 | Input/Output: [(94 -38 53 13) -38]
Test Case: 969 | Input/Output: [(67 62 -35 99) -35]
Test Case: 970 | Input/Output: [(-47 73 96 57) -47]
Test Case: 971 | Input/Output: [(53 -90 82 -84) -90]
Test Case: 972 | Input/Output: [(-35 91 -62 -11) -62]
Test Case: 973 | Input/Output: [(82 -5 -78 50) -78]
Test Case: 974 | Input/Output: [(44 -8 -79 -45) -79]
Test Case: 975 | Input/Output: [(50 -78 23 -50) -78]
Test Case: 976 | Input/Output: [(-86 -85 -66 34) -86]
Test Case: 977 | Input/Output: [(80 38 -21 -38) -38]
Test Case: 978 | Input/Output: [(-17 50 34 -65) -65]
Test Case: 979 | Input/Output: [(-25 -90 -25 74) -90]
Test Case: 980 | Input/Output: [(27 39 91 -18) -18]
Test Case: 981 | Input/Output: [(53 81 -1 60) -1]
Test Case: 982 | Input/Output: [(-65 67 -56 23) -65]
Test Case: 983 | Input/Output: [(69 90 -67 -55) -67]
Test Case: 984 | Input/Output: [(73 -69 -34 57) -69]
Test Case: 985 | Input/Output: [(-21 36 35 19) -21]
Test Case: 986 | Input/Output: [(100 -94 -54 41) -94]
Test Case: 987 | Input/Output: [(-72 38 -62 -72) -72]
Test Case: 988 | Input/Output: [(29 -4 9 -49) -49]
Test Case: 989 | Input/Output: [(89 17 -44 3) -44]
Test Case: 990 | Input/Output: [(61 33 27 30) 27]
Test Case: 991 | Input/Output: [(-58 53 16 -8) -58]
Test Case: 992 | Input/Output: [(25 91 50 30) 25]
Test Case: 993 | Input/Output: [(21 25 35 92) 21]
Test Case: 994 | Input/Output: [(-38 -96 35 -24) -96]
Test Case: 995 | Input/Output: [(52 -41 -49 46) -49]
Test Case: 996 | Input/Output: [(16 8 67 33) 8]
Test Case: 997 | Input/Output: [(33 53 -95 57) -95]
Test Case: 998 | Input/Output: [(-34 -34 -74 -7) -74]
Test Case: 999 | Input/Output: [(-82 50 -90 59) -90]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -104 76 116 27 -61 -83 99 21 43 -106 73 99 37 65 -127 -32
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[83 -8 -8 -8] -8] [[12 12 -2 12] -2] [[15 15 15 81] 15] [[35 -44 35 35] -44] [[-16 -16 -87 -16] -87] [[85 -46 85 85] -46] [[56 56 84 56] 56] [[63 63 63 7] 7] [[-29 -29 46 -29] -29] [[35 35 35 -60] -60] [(-4 -4 -4 -4) -4] [(61 61 61 61) 61] [(74 74 74 74) 74] [(14 14 14 14) 14] [(94 94 94 94) 94] [(27 78 43 61) 27] [(44 56 65 48) 44] [(93 57 56 42) 42] [(4 47 77 35) 4] [(34 21 72 64) 21] [(37 93 100 87) 37] [(38 35 72 98) 35] [(88 26 52 78) 26] [(16 67 82 50) 16] [(70 55 36 78) 36] [(75 67 67 24) 24] [(100 48 58 57) 48] [(19 61 0 92) 0] [(2 29 54 87) 2] [(60 100 96 70) 60] [(95 94 47 50) 47] [(78 43 85 10) 10] [(30 84 21 68) 21] [(89 14 76 46) 14] [(96 73 92 19) 19] [(83 24 -11 15) -11] [(90 -12 -37 43) -37] [(-55 93 -68 4) -68] [(88 32 -94 35) -94] [(39 62 23 -89) -89] [(51 17 -44 0) -44] [(40 36 -45 -38) -45] [(-100 23 52 88) -100] [(97 72 -71 22) -71] [(-41 44 48 -26) -41] [(-52 22 -68 -54) -68] [(-29 -87 7 93) -87] [(20 51 36 -97) -97] [(5 77 3 0) 0] [(69 93 37 98) 37] [(31 10 -12 -53) -53] [(-46 42 84 -51) -51] [(-16 -93 -20 12) -93] [(73 -53 -36 -19) -53] [(37 13 13 -49) -49] [(-52 -31 69 55) -52] [(-53 -13 2 -51) -53] [(90 -13 42 -94) -94] [(39 -8 -33 -77) -77] [(13 -13 -81 28) -81] [(-64 -8 -76 41) -76] [(-88 97 83 -34) -88] [(-58 55 61 -36) -58] [(44 20 -32 32) -32] [(92 -4 70 -13) -13] [(-51 -85 -65 45) -85] [(-69 40 -2 43) -69] [(70 -34 -90 51) -90] [(83 38 19 23) 19] [(69 -91 -24 0) -91] [(-18 73 28 4) -18] [(-20 -78 -34 11) -78] [(-48 -19 29 -9) -48] [(-89 -79 -63 86) -89] [(37 50 -36 -90) -90] [(69 -34 -28 9) -34] [(97 20 -17 52) -17] [(-60 -18 -70 -42) -70] [(-96 -51 -32 32) -96] [(-82 35 -48 -78) -82] [(-87 63 -49 76) -87] [(94 88 77 100) 77] [(-65 -45 -27 -1) -65] [(43 68 -94 63) -94] [(-1 -78 -79 13) -79] [(-24 -95 -51 29) -95] [(92 41 -100 -37) -100] [(-14 -31 -13 21) -31] [(69 1 -13 21) -13] [(75 32 -99 58) -99] [(-88 11 -21 -42) -88] [(-40 28 100 -47) -47] [(-61 -93 -24 21) -93] [(70 -64 50 -63) -64] [(6 3 -3 24) -3])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: 12                 
Correct output: 15                  | Program output: 81                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -16                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 61                 
Correct output: 44                  | Program output: 48                 
Correct output: 42                  | Program output: 42                 
Correct output: 4                   | Program output: 35                 
Correct output: 21                  | Program output: 64                 
Correct output: 37                  | Program output: 87                 
Correct output: 35                  | Program output:                    
Correct output: 26                  | Program output: 78                 
Correct output: 16                  | Program output: 50                 
Correct output: 36                  | Program output: 78                 
Correct output: 24                  | Program output: 24                 
Correct output: 48                  | Program output: 57                 
Correct output: 0                   | Program output: 92                 
Correct output: 2                   | Program output: 87                 
Correct output: 60                  | Program output: 70                 
Correct output: 47                  | Program output: 50                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 68                 
Correct output: 14                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: -11                 | Program output: 15                 
Correct output: -37                 | Program output: 43                 
Correct output: -68                 | Program output: 4                  
Correct output: -94                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 0                  
Correct output: -45                 | Program output: -38                
Correct output: -100                | Program output: 88                 
Correct output: -71                 | Program output: 22                 
Correct output: -41                 | Program output: -26                
Correct output: -68                 | Program output: -54                
Correct output: -87                 | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output:                    
Correct output: -53                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: 12                 
Correct output: -53                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -52                 | Program output: 55                 
Correct output: -53                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 28                 
Correct output: -76                 | Program output: 41                 
Correct output: -88                 | Program output: -34                
Correct output: -58                 | Program output: -36                
Correct output: -32                 | Program output: 32                 
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: 45                 
Correct output: -69                 | Program output: 43                 
Correct output: -90                 | Program output: 51                 
Correct output: 19                  | Program output: 23                 
Correct output: -91                 | Program output: 0                  
Correct output: -18                 | Program output: 4                  
Correct output: -78                 | Program output: 11                 
Correct output: -48                 | Program output: -9                 
Correct output: -89                 | Program output: 86                 
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 9                  
Correct output: -17                 | Program output: 52                 
Correct output: -70                 | Program output: -42                
Correct output: -96                 | Program output: 32                 
Correct output: -82                 | Program output: -78                
Correct output: -87                 | Program output: 76                 
Correct output: 77                  | Program output:                    
Correct output: -65                 | Program output: -1                 
Correct output: -94                 | Program output: 63                 
Correct output: -79                 | Program output: 13                 
Correct output: -95                 | Program output: 29                 
Correct output: -100                | Program output: -37                
Correct output: -31                 | Program output: 21                 
Correct output: -13                 | Program output: 21                 
Correct output: -99                 | Program output: 58                 
Correct output: -88                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: 21                 
Correct output: -64                 | Program output: -63                
Correct output: -3                  | Program output: 24                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_lte exec_do*while (boolean_frominteger exec_if (boolean_invert_first_then_and exec_yank in4 print_integer exec_stackdepth) (exec_empty boolean_swap in1 boolean_frominteger exec_swap (boolean_rot) (integer_sub) exec_dup_items integer_dup_times exec_dup_items exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_lte exec_do*while (boolean_frominteger exec_if (boolean_invert_first_then_and exec_yank in4 print_integer exec_stackdepth) (exec_empty boolean_swap in1 boolean_frominteger exec_swap (boolean_rot) (integer_sub) exec_dup_items integer_dup_times exec_dup_items exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 2 3 3 2 2 3 8 5)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 3 2 3 3 2 2 3 8 5)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_699} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (boolean_invert_first_then_and in4 exec_dup_times (boolean_dup_items) integer_flush integer_shove in4 boolean_not print_integer exec_while (integer_sub) integer_gte boolean_swap boolean_not exec_stackdepth exec_k () (integer_gte) exec_k_when_autoconstructing () (integer_yank in2 integer_swap exec_dup (boolean_invert_second_then_and) in1 boolean_dup_items tagged_699 boolean_not boolean_invert_first_then_and))
Errors: [0 1 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.998 0.997 0.997 0.998 0.998 0.997 0.992 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.241
Average program size in population (points): 68.938
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475649
--- Timings ---
Current time: 1559583195763 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 29.9%
Fitness Testing:      1.7 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 84                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: 46                 
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 43                 
Correct output: 44                  | Program output: 65                 
Correct output: 42                  | Program output: 56                 
Correct output: 4                   | Program output: 77                 
Correct output: 21                  | Program output: 72                 
Correct output: 37                  | Program output: 100                
Correct output: 35                  | Program output: 72                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 82                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 67                 
Correct output: 48                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 54                 
Correct output: 60                  | Program output: 96                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 76                 
Correct output: 19                  | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 23                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 36                 
Correct output: 0                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -12                
Correct output: -51                 | Program output: 84                 
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: 13                 
Correct output: -52                 | Program output: 69                 
Correct output: -53                 | Program output: 2                  
Correct output: -94                 | Program output: 42                 
Correct output: -77                 | Program output: -33                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: 83                 
Correct output: -58                 | Program output: 61                 
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: 70                 
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: 28                 
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: 29                 
Correct output: -89                 | Program output: -63                
Correct output: -90                 | Program output: -36                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -32                
Correct output: -82                 | Program output: -48                
Correct output: -87                 | Program output: -49                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -13                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -21                
Correct output: -47                 | Program output: 100                
Correct output: -93                 | Program output: -24                
Correct output: -64                 | Program output: 50                 
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Lexicase best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (integer_eq exec_do*times ())))) () ()))
Lexicase best errors: [1 1 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Zero cases best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (integer_eq exec_do*times ())))) () ()))
Zero cases best errors: [1 1 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 129 478 1000 275 1000 1000 1000 273)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (0 0 129 478 0 275 0 0 0 273)
Population mean number of perfect (error zero) cases: 1.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 51} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_exec} {:close 1, :instruction exec_while} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 1, :instruction in3} {:close 0, :instruction 63} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth})
Best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) print_integer print_integer integer_shove boolean_yankdup boolean_invert_second_then_and boolean_dup_times boolean_pop integer_dup boolean_not integer_stackdepth exec_if (exec_flush in1 in2 integer_mult exec_do*range (boolean_eq boolean_dup_times exec_eq boolean_and exec_shove (exec_s_when_autoconstructing () () () exec_k (exec_swap (integer_yankdup exec_pop (exec_s (boolean_dup_items integer_mod integer_shove print_newline integer_flush 51 integer_max boolean_dup_items) (integer_yank exec_eq exec_s (boolean_dup_items boolean_empty print_exec (exec_while () integer_swap) integer_gt integer_dec exec_empty in3) (63 integer_gt integer_max exec_yankdup) (boolean_eq boolean_eq integer_dup exec_if (integer_gt integer_shove) (exec_eq) boolean_yank integer_yank) exec_k_when_autoconstructing () (exec_yank boolean_or boolean_stackdepth)) ())) ()) ()))) ())
Errors: [1 1 1 1 1 0 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 71
Size: 98
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 8.845
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.871 0.522 1.0 0.725 1.0 1.0 1.0 0.727)
Error minima by case: (1 1 0 0 1 0 1 1 1 0)
Average genome size in population (length): 38.313
Average program size in population (points): 51.129
Average percent parens in population: 0.251
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1183181
--- Timings ---
Current time: 1559583198409 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.3 seconds, 42.4%
Fitness Testing:      2.6 seconds, 47.0%
Report:               0.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 84                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: 46                 
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 43                 
Correct output: 44                  | Program output: 65                 
Correct output: 42                  | Program output: 56                 
Correct output: 4                   | Program output: 77                 
Correct output: 21                  | Program output: 72                 
Correct output: 37                  | Program output: 100                
Correct output: 35                  | Program output: 72                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 82                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 67                 
Correct output: 48                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 54                 
Correct output: 60                  | Program output: 96                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 76                 
Correct output: 19                  | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 23                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 36                 
Correct output: 0                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -12                
Correct output: -51                 | Program output: 84                 
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: 13                 
Correct output: -52                 | Program output: 69                 
Correct output: -53                 | Program output: 2                  
Correct output: -94                 | Program output: 42                 
Correct output: -77                 | Program output: -33                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: 83                 
Correct output: -58                 | Program output: 61                 
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: 70                 
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: 28                 
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: 29                 
Correct output: -89                 | Program output: -63                
Correct output: -90                 | Program output: -36                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -32                
Correct output: -82                 | Program output: -48                
Correct output: -87                 | Program output: -49                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -13                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -21                
Correct output: -47                 | Program output: 100                
Correct output: -93                 | Program output: -24                
Correct output: -64                 | Program output: 50                 
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction -28} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_413} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction -9} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 51} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_pop boolean_shove boolean_xor integer_dec -28 boolean_not boolean_rot integer_min tagged_413 exec_noop boolean_xor exec_shove (boolean_dup integer_eq) exec_do*range (exec_if (integer_div print_boolean) (integer_dec) -9 boolean_eq boolean_dup_times exec_eq boolean_and exec_shove (exec_s_when_autoconstructing () () () exec_k (exec_swap (integer_yankdup exec_pop (exec_s (boolean_dup_items integer_mod integer_shove print_newline integer_flush 51 integer_max boolean_dup_items) (integer_yank exec_eq in4) (boolean_xor integer_lt) integer_add boolean_rot) integer_gt boolean_and integer_flush) (exec_while (integer_gt exec_empty exec_do*while () integer_min) boolean_eq exec_do*count (in3 print_integer integer_gte)) boolean_eq integer_mult exec_shove () integer_rot) (integer_dec exec_swap (integer_swap integer_sub exec_empty) ()))))
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction -28} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_413} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction integer_div} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction -9} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 51} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_pop boolean_shove boolean_xor integer_dec -28 boolean_not boolean_rot integer_min tagged_413 exec_noop boolean_xor exec_shove (boolean_dup integer_eq) exec_do*range (exec_if (integer_div print_boolean) (integer_dec) -9 boolean_eq boolean_dup_times exec_eq boolean_and exec_shove (exec_s_when_autoconstructing () () () exec_k (exec_swap (integer_yankdup exec_pop (exec_s (boolean_dup_items integer_mod integer_shove print_newline integer_flush 51 integer_max boolean_dup_items) (integer_yank exec_eq in4) (boolean_xor integer_lt) integer_add boolean_rot) integer_gt boolean_and integer_flush) (exec_while (integer_gt exec_empty exec_do*while () integer_min) boolean_eq exec_do*count (in3 print_integer integer_gte)) boolean_eq integer_mult exec_shove () integer_rot) (integer_dec exec_swap (integer_swap integer_sub exec_empty) ()))))
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (31 415 402 18 1000 1 1 1000 404 403)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (31 415 402 18 0 1 1 0 404 403)
Population mean number of perfect (error zero) cases: 1.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (integer_eq exec_do*times ())))) () ()))
Errors: [1 0 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 8.325
Median total errors in population: 10
Error averages by case: (0.969 0.585 0.598 0.982 1.0 0.999 0.999 1.0 0.596 0.597)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 52.178
Average program size in population (points): 68.627
Average percent parens in population: 0.235
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.207
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 250
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1954754
--- Timings ---
Current time: 1559583202388 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 51.3%
Fitness Testing:      3.6 seconds, 40.0%
Report:               0.7 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 83                 
Correct output: -2                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -16                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 44                  | Program output: 44                 
Correct output: 42                  | Program output: 93                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 34                 
Correct output: 37                  | Program output: 37                 
Correct output: 35                  | Program output: 38                 
Correct output: 26                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 36                  | Program output: 70                 
Correct output: 24                  | Program output: 75                 
Correct output: 48                  | Program output: 100                
Correct output: 0                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 60                  | Program output: 60                 
Correct output: 47                  | Program output: 95                 
Correct output: 10                  | Program output: 78                 
Correct output: 21                  | Program output: 30                 
Correct output: 14                  | Program output: 89                 
Correct output: 19                  | Program output: 96                 
Correct output: -11                 | Program output: 83                 
Correct output: -37                 | Program output: 90                 
Correct output: -68                 | Program output: -55                
Correct output: -94                 | Program output: 88                 
Correct output: -89                 | Program output: 39                 
Correct output: -44                 | Program output: 51                 
Correct output: -45                 | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 97                 
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -52                
Correct output: -87                 | Program output: -29                
Correct output: -97                 | Program output: 20                 
Correct output: 0                   | Program output: 5                  
Correct output: 37                  | Program output: 69                 
Correct output: -53                 | Program output: 31                 
Correct output: -51                 | Program output: -46                
Correct output: -93                 | Program output: -16                
Correct output: -53                 | Program output: 73                 
Correct output: -49                 | Program output: 37                 
Correct output: -52                 | Program output: -52                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 90                 
Correct output: -77                 | Program output: 39                 
Correct output: -81                 | Program output: 13                 
Correct output: -76                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 44                 
Correct output: -13                 | Program output: 92                 
Correct output: -85                 | Program output: -51                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: 70                 
Correct output: 19                  | Program output: 83                 
Correct output: -91                 | Program output: 69                 
Correct output: -18                 | Program output: -18                
Correct output: -78                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 37                 
Correct output: -34                 | Program output: 69                 
Correct output: -17                 | Program output: 97                 
Correct output: -70                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: 77                  | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: 43                 
Correct output: -79                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -100                | Program output: 92                 
Correct output: -31                 | Program output: -14                
Correct output: -13                 | Program output: 69                 
Correct output: -99                 | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -40                
Correct output: -93                 | Program output: -61                
Correct output: -64                 | Program output: 70                 
Correct output: -3                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_y_when_autoconstructing})
Lexicase best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (exec_y_when_autoconstructing ())))))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_y_when_autoconstructing})
Zero cases best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (exec_y_when_autoconstructing ())))))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 435 435 832 162 8 173 8 22 434)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (8 435 435 832 162 8 173 8 22 434)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_y_when_autoconstructing})
Best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (exec_y_when_autoconstructing ())))))
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 62
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.483
Median total errors in population: 7
Error averages by case: (0.992 0.565 0.565 0.168 0.838 0.992 0.827 0.992 0.978 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.796
Average program size in population (points): 69.147
Average percent parens in population: 0.215
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.825
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2486318
--- Timings ---
Current time: 1559583205343 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 53.4%
Fitness Testing:      4.3 seconds, 35.2%
Report:               1.3 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: -44                
Correct output: -87                 | Program output: -16                
Correct output: -46                 | Program output: -46                
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 78                 
Correct output: 44                  | Program output: 56                 
Correct output: 42                  | Program output: 57                 
Correct output: 4                   | Program output: 47                 
Correct output: 21                  | Program output: 21                 
Correct output: 37                  | Program output: 93                 
Correct output: 35                  | Program output: 35                 
Correct output: 26                  | Program output: 26                 
Correct output: 16                  | Program output: 67                 
Correct output: 36                  | Program output: 55                 
Correct output: 24                  | Program output: 67                 
Correct output: 48                  | Program output: 48                 
Correct output: 0                   | Program output: 61                 
Correct output: 2                   | Program output: 29                 
Correct output: 60                  | Program output: 100                
Correct output: 47                  | Program output: 94                 
Correct output: 10                  | Program output: 43                 
Correct output: 21                  | Program output: 84                 
Correct output: 14                  | Program output: 14                 
Correct output: 19                  | Program output: 73                 
Correct output: -11                 | Program output: 24                 
Correct output: -37                 | Program output: -12                
Correct output: -68                 | Program output: 93                 
Correct output: -94                 | Program output: 32                 
Correct output: -89                 | Program output: 62                 
Correct output: -44                 | Program output: 17                 
Correct output: -45                 | Program output: 36                 
Correct output: -100                | Program output: 23                 
Correct output: -71                 | Program output: 72                 
Correct output: -41                 | Program output: 44                 
Correct output: -68                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: 51                 
Correct output: 0                   | Program output: 77                 
Correct output: 37                  | Program output: 93                 
Correct output: -53                 | Program output: 10                 
Correct output: -51                 | Program output: 42                 
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: -53                
Correct output: -49                 | Program output: 13                 
Correct output: -52                 | Program output: -31                
Correct output: -53                 | Program output: -13                
Correct output: -94                 | Program output: -13                
Correct output: -77                 | Program output: -8                 
Correct output: -81                 | Program output: -13                
Correct output: -76                 | Program output: -8                 
Correct output: -88                 | Program output: 97                 
Correct output: -58                 | Program output: 55                 
Correct output: -32                 | Program output: 20                 
Correct output: -13                 | Program output: -4                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 40                 
Correct output: -90                 | Program output: -34                
Correct output: 19                  | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -18                 | Program output: 73                 
Correct output: -78                 | Program output: -78                
Correct output: -48                 | Program output: -19                
Correct output: -89                 | Program output: -79                
Correct output: -90                 | Program output: 50                 
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: 20                 
Correct output: -70                 | Program output: -18                
Correct output: -96                 | Program output: -51                
Correct output: -82                 | Program output: 35                 
Correct output: -87                 | Program output: 63                 
Correct output: 77                  | Program output: 88                 
Correct output: -65                 | Program output: -45                
Correct output: -94                 | Program output: 68                 
Correct output: -79                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: 41                 
Correct output: -31                 | Program output: -31                
Correct output: -13                 | Program output: 1                  
Correct output: -99                 | Program output: 32                 
Correct output: -88                 | Program output: 11                 
Correct output: -47                 | Program output: 28                 
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -3                  | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_invert_first_then_and exec_dup_times (exec_do*times (exec_shove (integer_yankdup exec_dup_items boolean_invert_second_then_and in4 integer_dec integer_gte exec_stackdepth boolean_stackdepth) boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) integer_dup_times print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop integer_fromboolean integer_pop exec_when (exec_do*while (integer_yank) integer_yank) boolean_yank) exec_s (integer_min integer_dup boolean_flush boolean_stackdepth integer_gt) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_invert_first_then_and exec_dup_times (exec_do*times (exec_shove (integer_yankdup exec_dup_items boolean_invert_second_then_and in4 integer_dec integer_gte exec_stackdepth boolean_stackdepth) boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) integer_dup_times print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop integer_fromboolean integer_pop exec_when (exec_do*while (integer_yank) integer_yank) boolean_yank) exec_s (integer_min integer_dup boolean_flush boolean_stackdepth integer_gt) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 114 103 355 103 284 516 116 622 286)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (116 114 103 355 103 284 516 116 622 286)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Best program: (boolean_invert_first_then_and print_integer exec_dup_times (exec_do*times (exec_shove (integer_yankdup exec_dup_items boolean_invert_second_then_and in4) integer_dec) integer_gte exec_stackdepth boolean_stackdepth) boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2 integer_dup_times print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop integer_fromboolean integer_pop exec_when (exec_do*while (integer_yank) integer_yank) boolean_yank exec_s (integer_min integer_dup boolean_flush boolean_stackdepth integer_gt) () ())
Errors: [0 0 1 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.385
Median total errors in population: 7
Error averages by case: (0.884 0.886 0.897 0.645 0.897 0.716 0.484 0.884 0.378 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.273
Average program size in population (points): 65.441
Average percent parens in population: 0.228
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.316375
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3110541
--- Timings ---
Current time: 1559583208180 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.3 seconds, 55.0%
Fitness Testing:      4.9 seconds, 32.3%
Report:               1.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 84                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: 46                 
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 43                 
Correct output: 44                  | Program output: 65                 
Correct output: 42                  | Program output: 56                 
Correct output: 4                   | Program output: 77                 
Correct output: 21                  | Program output: 72                 
Correct output: 37                  | Program output: 100                
Correct output: 35                  | Program output: 72                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 82                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 67                 
Correct output: 48                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 54                 
Correct output: 60                  | Program output: 96                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 76                 
Correct output: 19                  | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 23                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 36                 
Correct output: 0                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -12                
Correct output: -51                 | Program output: 84                 
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: 13                 
Correct output: -52                 | Program output: 69                 
Correct output: -53                 | Program output: 2                  
Correct output: -94                 | Program output: 42                 
Correct output: -77                 | Program output: -33                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: 83                 
Correct output: -58                 | Program output: 61                 
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: 70                 
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: 28                 
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: 29                 
Correct output: -89                 | Program output: -63                
Correct output: -90                 | Program output: -36                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -32                
Correct output: -82                 | Program output: -48                
Correct output: -87                 | Program output: -49                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -13                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -21                
Correct output: -47                 | Program output: 100                
Correct output: -93                 | Program output: -24                
Correct output: -64                 | Program output: 50                 
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Lexicase best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing () exec_dup (exec_dup (integer_eq exec_do*times ()))))) () ()))
Lexicase best errors: [1 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Zero cases best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing () exec_dup (exec_dup (integer_eq exec_do*times ()))))) () ()))
Zero cases best errors: [1 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 180 137 314 227 225 224 224 11 142)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (180 180 137 314 227 225 224 224 11 142)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mod})
Best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while () boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove) exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (integer_eq integer_mod))) () ())
Errors: [1 1 1 1 0 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 8.136
Median total errors in population: 7
Error averages by case: (0.82 0.82 0.863 0.686 0.773 0.775 0.776 0.776 0.989 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.053
Average program size in population (points): 62.39
Average percent parens in population: 0.209
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.772
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3698268
--- Timings ---
Current time: 1559583211138 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.2 seconds, 56.6%
Fitness Testing:      5.6 seconds, 31.0%
Report:               2.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 83                 
Correct output: -2                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -16                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 44                  | Program output: 44                 
Correct output: 42                  | Program output: 93                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 34                 
Correct output: 37                  | Program output: 37                 
Correct output: 35                  | Program output: 38                 
Correct output: 26                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 36                  | Program output: 70                 
Correct output: 24                  | Program output: 75                 
Correct output: 48                  | Program output: 100                
Correct output: 0                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 60                  | Program output: 60                 
Correct output: 47                  | Program output: 95                 
Correct output: 10                  | Program output: 78                 
Correct output: 21                  | Program output: 30                 
Correct output: 14                  | Program output: 89                 
Correct output: 19                  | Program output: 96                 
Correct output: -11                 | Program output: 83                 
Correct output: -37                 | Program output: 90                 
Correct output: -68                 | Program output: -55                
Correct output: -94                 | Program output: 88                 
Correct output: -89                 | Program output: 39                 
Correct output: -44                 | Program output: 51                 
Correct output: -45                 | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 97                 
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -52                
Correct output: -87                 | Program output: -29                
Correct output: -97                 | Program output: 20                 
Correct output: 0                   | Program output: 5                  
Correct output: 37                  | Program output: 69                 
Correct output: -53                 | Program output: 31                 
Correct output: -51                 | Program output: -46                
Correct output: -93                 | Program output: -16                
Correct output: -53                 | Program output: 73                 
Correct output: -49                 | Program output: 37                 
Correct output: -52                 | Program output: -52                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 90                 
Correct output: -77                 | Program output: 39                 
Correct output: -81                 | Program output: 13                 
Correct output: -76                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 44                 
Correct output: -13                 | Program output: 92                 
Correct output: -85                 | Program output: -51                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: 70                 
Correct output: 19                  | Program output: 83                 
Correct output: -91                 | Program output: 69                 
Correct output: -18                 | Program output: -18                
Correct output: -78                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 37                 
Correct output: -34                 | Program output: 69                 
Correct output: -17                 | Program output: 97                 
Correct output: -70                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: 77                  | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: 43                 
Correct output: -79                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -100                | Program output: 92                 
Correct output: -31                 | Program output: -14                
Correct output: -13                 | Program output: 69                 
Correct output: -99                 | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -40                
Correct output: -93                 | Program output: -61                
Correct output: -64                 | Program output: 70                 
Correct output: -3                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Lexicase best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) integer_dup_times print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop integer_fromboolean integer_pop exec_when (exec_do*while (integer_yank) exec_k () (integer_gt exec_s (integer_min integer_dup boolean_flush boolean_stackdepth integer_gt) () ()))) ()))
Lexicase best errors: [1 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Zero cases best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) integer_dup_times print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop integer_fromboolean integer_pop exec_when (exec_do*while (integer_yank) exec_k () (integer_gt exec_s (integer_min integer_dup boolean_flush boolean_stackdepth integer_gt) () ()))) ()))
Zero cases best errors: [1 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 288 307 352 225 349 349 349 225 701)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (1 288 307 352 225 349 349 349 225 701)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty})
Best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 in2 boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (in4) boolean_xor integer_lt)) integer_add boolean_rot integer_gt boolean_and integer_flush exec_while (integer_gt exec_empty))
Errors: [1 1 0 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 58
Size: 71
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 6.854
Median total errors in population: 6
Error averages by case: (0.999 0.712 0.693 0.648 0.775 0.651 0.651 0.651 0.775 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.76
Average program size in population (points): 64.117
Average percent parens in population: 0.221
Minimum age in population: 7.0
Maximum age in population: 10.875
Average age in population: 9.24365625
Median age in population: 9.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4369360
--- Timings ---
Current time: 1559583214446 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.1 seconds, 57.3%
Fitness Testing:      6.4 seconds, 30.3%
Report:               2.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 84                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: 46                 
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 43                 
Correct output: 44                  | Program output: 65                 
Correct output: 42                  | Program output: 56                 
Correct output: 4                   | Program output: 77                 
Correct output: 21                  | Program output: 72                 
Correct output: 37                  | Program output: 100                
Correct output: 35                  | Program output: 72                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 82                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 67                 
Correct output: 48                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 54                 
Correct output: 60                  | Program output: 96                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 76                 
Correct output: 19                  | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: 23                 
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: 48                 
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 36                 
Correct output: 0                   | Program output: 3                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -12                
Correct output: -51                 | Program output: 84                 
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: 13                 
Correct output: -52                 | Program output: 69                 
Correct output: -53                 | Program output: 2                  
Correct output: -94                 | Program output: 42                 
Correct output: -77                 | Program output: -33                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: 83                 
Correct output: -58                 | Program output: 61                 
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: 70                 
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: 28                 
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: 29                 
Correct output: -89                 | Program output: -63                
Correct output: -90                 | Program output: -36                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -32                
Correct output: -82                 | Program output: -48                
Correct output: -87                 | Program output: -49                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -13                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -21                
Correct output: -47                 | Program output: 100                
Correct output: -93                 | Program output: -24                
Correct output: -64                 | Program output: 50                 
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Lexicase best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_dup in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_y_when_autoconstructing (integer_eq exec_do*times ())))) () ()))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*times})
Zero cases best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_dup in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_y_when_autoconstructing (integer_eq exec_do*times ())))) () ()))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 298 298 603 297 297 233 96 222 233)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (201 298 298 603 297 297 233 96 222 233)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction tagged_113} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -42} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing})
Best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while (boolean_rot exec_s_when_autoconstructing (exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (tagged_113 exec_eq integer_div integer_empty boolean_rot exec_do*while () exec_flush)) (boolean_and integer_swap boolean_or in4 integer_empty boolean_shove integer_dup exec_when (integer_dec -42 print_boolean print_integer print_integer boolean_pop) integer_add integer_dup_times integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()))) () ()))
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.222
Median total errors in population: 8
Error averages by case: (0.799 0.702 0.702 0.397 0.703 0.703 0.767 0.904 0.778 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.41
Average program size in population (points): 63.7
Average percent parens in population: 0.205
Minimum age in population: 8.0
Maximum age in population: 12.546875
Average age in population: 10.925546875
Median age in population: 11.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4962505
--- Timings ---
Current time: 1559583217483 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.9 seconds, 57.4%
Fitness Testing:      7.0 seconds, 28.9%
Report:               3.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -16                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 84                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 43                 
Correct output: 44                  | Program output: 65                 
Correct output: 42                  | Program output: 56                 
Correct output: 4                   | Program output: 77                 
Correct output: 21                  | Program output: 72                 
Correct output: 37                  | Program output: 100                
Correct output: 35                  | Program output: 72                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 82                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 67                 
Correct output: 48                  | Program output: 58                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 54                 
Correct output: 60                  | Program output: 96                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 76                 
Correct output: 19                  | Program output: 92                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: 0                  
Correct output: -45                 | Program output: -38                
Correct output: -100                | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: -26                
Correct output: -68                 | Program output: -54                
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -19                
Correct output: -49                 | Program output: -49                
Correct output: -52                 | Program output: 69                 
Correct output: -53                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -34                
Correct output: -58                 | Program output: -36                
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: 0                  
Correct output: -18                 | Program output: 28                 
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: -9                 
Correct output: -89                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -42                
Correct output: -96                 | Program output: -32                
Correct output: -82                 | Program output: -78                
Correct output: -87                 | Program output: -49                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -1                 
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -37                
Correct output: -31                 | Program output: -13                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -24                
Correct output: -64                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_dup_times exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) (integer_swap print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup boolean_yank exec_s (integer_min integer_dup boolean_and boolean_stackdepth integer_gt) () ()))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_dup_times exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) (integer_swap print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup boolean_yank exec_s (integer_min integer_dup boolean_and boolean_stackdepth integer_gt) () ()))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (406 348 854 101 409 100 16 252 406 253)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (406 348 854 101 409 100 16 252 406 253)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_dup_times exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2) (integer_swap print_integer exec_eq integer_fromboolean integer_eq boolean_yankdup boolean_yank exec_s (integer_min integer_dup boolean_and boolean_stackdepth integer_gt) () ()))
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.855
Median total errors in population: 6
Error averages by case: (0.594 0.652 0.146 0.899 0.591 0.9 0.984 0.748 0.594 0.747)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.985
Average program size in population (points): 63.284
Average percent parens in population: 0.206
Minimum age in population: 9.375
Maximum age in population: 14.390625
Average age in population: 12.4469453125
Median age in population: 12.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5462834
--- Timings ---
Current time: 1559583220369 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.0 seconds, 58.4%
Fitness Testing:      7.5 seconds, 27.3%
Report:               3.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: 83                 
Correct output: -2                  | Program output: 12                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -16                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 63                 
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: 35                 
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 44                  | Program output: 44                 
Correct output: 42                  | Program output: 93                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 34                 
Correct output: 37                  | Program output: 37                 
Correct output: 35                  | Program output: 38                 
Correct output: 26                  | Program output: 88                 
Correct output: 16                  | Program output: 16                 
Correct output: 36                  | Program output: 70                 
Correct output: 24                  | Program output: 75                 
Correct output: 48                  | Program output: 100                
Correct output: 0                   | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 60                  | Program output: 60                 
Correct output: 47                  | Program output: 95                 
Correct output: 10                  | Program output: 78                 
Correct output: 21                  | Program output: 30                 
Correct output: 14                  | Program output: 89                 
Correct output: 19                  | Program output: 96                 
Correct output: -11                 | Program output: 83                 
Correct output: -37                 | Program output: 90                 
Correct output: -68                 | Program output: -55                
Correct output: -94                 | Program output: 88                 
Correct output: -89                 | Program output: 39                 
Correct output: -44                 | Program output: 51                 
Correct output: -45                 | Program output: 40                 
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: 97                 
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -52                
Correct output: -87                 | Program output: -29                
Correct output: -97                 | Program output: 20                 
Correct output: 0                   | Program output: 5                  
Correct output: 37                  | Program output: 69                 
Correct output: -53                 | Program output: 31                 
Correct output: -51                 | Program output: -46                
Correct output: -93                 | Program output: -16                
Correct output: -53                 | Program output: 73                 
Correct output: -49                 | Program output: 37                 
Correct output: -52                 | Program output: -52                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: 90                 
Correct output: -77                 | Program output: 39                 
Correct output: -81                 | Program output: 13                 
Correct output: -76                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 44                 
Correct output: -13                 | Program output: 92                 
Correct output: -85                 | Program output: -51                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: 70                 
Correct output: 19                  | Program output: 83                 
Correct output: -91                 | Program output: 69                 
Correct output: -18                 | Program output: -18                
Correct output: -78                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: 37                 
Correct output: -34                 | Program output: 69                 
Correct output: -17                 | Program output: 97                 
Correct output: -70                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: 77                  | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: 43                 
Correct output: -79                 | Program output: -1                 
Correct output: -95                 | Program output: -24                
Correct output: -100                | Program output: 92                 
Correct output: -31                 | Program output: -14                
Correct output: -13                 | Program output: 69                 
Correct output: -99                 | Program output: 75                 
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -40                
Correct output: -93                 | Program output: -61                
Correct output: -64                 | Program output: 70                 
Correct output: -3                  | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -76} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (integer_gte integer_dec integer_gte exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush) (integer_fromboolean integer_pop in4 boolean_and) (boolean_empty boolean_stackdepth) -76 integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2 integer_dup_times integer_dup_times exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte integer_swap exec_noop integer_rot boolean_flush tagged_319 integer_lte integer_lte in4 boolean_xor integer_lt integer_add boolean_rot integer_gt boolean_and integer_flush exec_swap (integer_gt boolean_dup_times) ())
Lexicase best errors: [0 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction -76} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (integer_gte integer_dec integer_gte exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush) (integer_fromboolean integer_pop in4 boolean_and) (boolean_empty boolean_stackdepth) -76 integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (boolean_and) (boolean_empty integer_lte) in2 integer_dup_times integer_dup_times exec_eq integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte integer_swap exec_noop integer_rot boolean_flush tagged_319 integer_lte integer_lte in4 boolean_xor integer_lt integer_add boolean_rot integer_gt boolean_and integer_flush exec_swap (integer_gt boolean_dup_times) ())
Zero cases best errors: [0 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 437 441 5 210 10 847 201 457 11)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (202 437 441 5 210 10 847 201 457 11)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 2, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction -43} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_y_when_autoconstructing})
Best program: (print_boolean exec_yank boolean_yank exec_stackdepth exec_empty in3 exec_do*while () boolean_rot in1 exec_s (print_integer exec_noop) (boolean_flush integer_lt exec_k () (boolean_dup_times exec_eq) integer_div integer_empty boolean_rot exec_do*while () exec_flush) () boolean_and integer_swap boolean_or in4 integer_empty boolean_shove exec_noop exec_when (integer_dec -43 print_boolean print_integer print_integer boolean_pop) integer_add in4 integer_div exec_y_when_autoconstructing (integer_dup_items integer_fromboolean in1 exec_dup_items exec_y_when_autoconstructing ()) exec_dup (exec_dup (exec_y_when_autoconstructing ())))
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 62
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.179
Median total errors in population: 7
Error averages by case: (0.798 0.563 0.559 0.995 0.79 0.99 0.153 0.799 0.543 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.66
Average program size in population (points): 56.879
Average percent parens in population: 0.199
Minimum age in population: 10.375
Maximum age in population: 15.8359375
Average age in population: 14.1023515625
Median age in population: 14.0859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.006
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5955292
--- Timings ---
Current time: 1559583222941 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.8 seconds, 59.4%
Fitness Testing:      8.0 seconds, 26.5%
Report:               4.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 43                 
Correct output: 44                  | Program output: 48                 
Correct output: 42                  | Program output: 42                 
Correct output: 4                   | Program output: 35                 
Correct output: 21                  | Program output: 64                 
Correct output: 37                  | Program output: 87                 
Correct output: 35                  | Program output: 72                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 50                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 24                 
Correct output: 48                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 54                 
Correct output: 60                  | Program output: 70                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: -26                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: -49                
Correct output: -52                 | Program output: 55                 
Correct output: -53                 | Program output: -51                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -34                
Correct output: -58                 | Program output: -36                
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -2                 
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: 4                  
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: -9                 
Correct output: -89                 | Program output: -63                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -32                
Correct output: -82                 | Program output: -78                
Correct output: -87                 | Program output: -49                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -27                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -13                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -42                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -24                
Correct output: -64                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_dec) exec_noop integer_rot boolean_flush tagged_319) (integer_lte integer_lte in4) boolean_xor)
Lexicase best errors: [0 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_dec) exec_noop integer_rot boolean_flush tagged_319) (integer_lte integer_lte in4) boolean_xor)
Zero cases best errors: [0 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (888 173 317 377 136 316 175 690 219 173)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (888 173 317 377 136 316 175 690 219 173)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor})
Best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_dec) exec_noop integer_rot boolean_flush tagged_319) (integer_eq integer_lte in4) boolean_xor)
Errors: [0 1 0 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.536
Median total errors in population: 7
Error averages by case: (0.112 0.827 0.683 0.623 0.864 0.684 0.825 0.31 0.781 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.433
Average program size in population (points): 55.966
Average percent parens in population: 0.187
Minimum age in population: 12.0
Maximum age in population: 17.580078125
Average age in population: 15.825552734375
Median age in population: 15.8740234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6504784
--- Timings ---
Current time: 1559583225523 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 60.3%
Fitness Testing:      8.5 seconds, 26.0%
Report:               4.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 44                  | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 34                 
Correct output: 37                  | Program output: 37                 
Correct output: 35                  | Program output: 38                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 16                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 24                 
Correct output: 48                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 60                  | Program output: 60                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: -49                
Correct output: -52                 | Program output: -52                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: -18                
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -14                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -61                
Correct output: -64                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 57
Percent parens: 0.228
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 57
Percent parens: 0.228
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 716 25 199 199 25 528 25 386 386)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (226 716 25 199 199 25 528 25 386 386)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 1, :instruction tagged_319} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction boolean_xor})
Best program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 57
Percent parens: 0.228
--- Population Statistics ---
Average total errors in population: 7.285
Median total errors in population: 6
Error averages by case: (0.774 0.284 0.975 0.801 0.801 0.975 0.472 0.975 0.614 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.205
Average program size in population (points): 51.725
Average percent parens in population: 0.186
Minimum age in population: 15.16015625
Maximum age in population: 19.255859375
Average age in population: 17.2760771484375
Median age in population: 17.3583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7007539
--- Timings ---
Current time: 1559583228125 milliseconds
Total Time:          35.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.4 seconds, 61.0%
Fitness Testing:      9.0 seconds, 25.5%
Report:               4.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 57


Auto-simplifying with starting size: 57
step: 0
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 500
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1000
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1500
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2000
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2500
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3000
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3500
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4000
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4500
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 5000
program: (integer_gte exec_when (integer_yank boolean_pop integer_eq exec_do*while () in3) exec_stackdepth integer_eq exec_do*while () in3 exec_stackdepth boolean_stackdepth boolean_pop integer_min exec_s_when_autoconstructing (boolean_flush integer_inc integer_pop in4) (integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_min exec_s_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup exec_noop in1 integer_swap print_integer integer_lte) () (integer_rot boolean_flush tagged_319) integer_lte integer_lte in4) (boolean_xor) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 205
Test mean error for best: 0.20500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -8                  | Program output: -8                 
Correct output: -2                  | Program output: -2                 
Correct output: 15                  | Program output: 15                 
Correct output: -44                 | Program output: 35                 
Correct output: -87                 | Program output: -87                
Correct output: -46                 | Program output: 85                 
Correct output: 56                  | Program output: 56                 
Correct output: 7                   | Program output: 7                  
Correct output: -29                 | Program output: -29                
Correct output: -60                 | Program output: -60                
Correct output: -4                  | Program output: -4                 
Correct output: 61                  | Program output: 61                 
Correct output: 74                  | Program output: 74                 
Correct output: 14                  | Program output: 14                 
Correct output: 94                  | Program output: 94                 
Correct output: 27                  | Program output: 27                 
Correct output: 44                  | Program output: 44                 
Correct output: 42                  | Program output: 42                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 34                 
Correct output: 37                  | Program output: 37                 
Correct output: 35                  | Program output: 38                 
Correct output: 26                  | Program output: 52                 
Correct output: 16                  | Program output: 16                 
Correct output: 36                  | Program output: 36                 
Correct output: 24                  | Program output: 24                 
Correct output: 48                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 60                  | Program output: 60                 
Correct output: 47                  | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 14                  | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -37                 | Program output: -37                
Correct output: -68                 | Program output: -68                
Correct output: -94                 | Program output: -94                
Correct output: -89                 | Program output: -89                
Correct output: -44                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -100                | Program output: -100               
Correct output: -71                 | Program output: -71                
Correct output: -41                 | Program output: -41                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -29                
Correct output: -97                 | Program output: -97                
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 37                 
Correct output: -53                 | Program output: -53                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -20                
Correct output: -53                 | Program output: -36                
Correct output: -49                 | Program output: -49                
Correct output: -52                 | Program output: -52                
Correct output: -53                 | Program output: -53                
Correct output: -94                 | Program output: -94                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -76                 | Program output: -76                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: -13                 | Program output: -13                
Correct output: -85                 | Program output: -65                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: 19                  | Program output: 19                 
Correct output: -91                 | Program output: -24                
Correct output: -18                 | Program output: -18                
Correct output: -78                 | Program output: -34                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -28                
Correct output: -17                 | Program output: -17                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -87                
Correct output: 77                  | Program output: 77                 
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -95                 | Program output: -51                
Correct output: -100                | Program output: -100               
Correct output: -31                 | Program output: -14                
Correct output: -13                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -61                
Correct output: -64                 | Program output: -63                
Correct output: -3                  | Program output: -3                 
;;******************************
