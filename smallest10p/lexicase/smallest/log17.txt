Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[28 92 92 92] 28] [[48 48 48 -40] -40] [[96 96 96 -41] -41] [[25 25 -83 25] -83] [[83 83 63 83] 63] [[-88 -88 11 -88] -88] [[8 8 8 -19] -19] [[15 15 15 15] 15] [[83 83 83 -83] -83] [[-88 -88 -88 13] -88] [(58 58 58 58) 58] [(-31 -31 -31 -31) -31] [(56 56 56 56) 56] [(-81 -81 -81 -81) -81] [(74 74 74 74) 74] [(13 47 12 49) 12] [(94 88 83 75) 75] [(90 25 81 25) 25] [(66 30 7 83) 7] [(22 91 79 45) 22] [(97 93 89 16) 16] [(28 42 76 2) 2] [(45 23 83 41) 23] [(51 90 35 29) 29] [(83 77 72 20) 20] [(84 41 6 21) 6] [(12 26 66 84) 12] [(37 49 24 29) 24] [(32 72 34 69) 32] [(43 34 56 74) 34] [(46 61 20 78) 20] [(55 32 15 43) 15] [(81 98 80 59) 59] [(9 36 15 91) 9] [(62 28 5 16) 5] [(-46 -72 -18 -10) -72] [(44 -99 3 -54) -99] [(-56 -88 54 23) -88] [(-23 -58 -67 -43) -67] [(55 33 20 62) 20] [(2 39 30 -87) -87] [(-21 5 98 100) -21] [(12 -34 65 -53) -53] [(-74 -92 -42 79) -92] [(-92 -76 -21 23) -92] [(-64 -78 36 -19) -78] [(-51 -15 98 -92) -92] [(44 -34 -59 -64) -64] [(85 -61 -25 77) -61] [(-4 48 -36 -62) -62] [(80 6 58 -44) -44] [(40 -77 74 -94) -94] [(-72 -47 77 -7) -72] [(41 41 -51 40) -51] [(-38 -21 -8 -93) -93] [(-50 -57 -13 85) -57] [(-80 0 -61 14) -80] [(-55 29 -20 -81) -81] [(-33 -55 -11 87) -55] [(45 -27 9 -65) -65] [(75 -28 37 -11) -28] [(20 79 40 -51) -51] [(-55 1 93 12) -55] [(-36 -77 -52 -72) -77] [(-83 -72 28 -74) -83] [(20 -56 -28 -30) -56] [(58 41 -52 -49) -52] [(-58 -88 -18 -100) -100] [(-40 -31 -64 -11) -64] [(7 -80 19 18) -80] [(52 -35 -100 80) -100] [(-5 -56 63 -82) -82] [(-78 -10 81 65) -78] [(54 80 32 -7) -7] [(-11 -48 -52 63) -52] [(-5 5 -88 73) -88] [(0 -53 -39 43) -53] [(66 -21 -19 -71) -71] [(17 97 -53 34) -53] [(83 79 -47 -80) -80] [(19 -33 -84 -93) -93] [(77 48 32 24) 24] [(-48 97 20 1) -48] [(-95 96 43 53) -95] [(-86 -41 24 -28) -86] [(-39 -16 59 -25) -39] [(54 59 -55 78) -55] [(4 -11 -73 -61) -73] [(-62 43 -12 -86) -86] [(-39 -36 45 11) -39] [(-98 78 -13 53) -98] [(85 96 72 66) 66] [(41 76 -90 22) -90] [(-72 40 -28 -79) -79] [(33 -100 23 28) -100])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[28 92 92 92] 28]
Train Case:   6 | Input/Output: [[48 48 48 -40] -40]
Train Case:   7 | Input/Output: [[96 96 96 -41] -41]
Train Case:   8 | Input/Output: [[25 25 -83 25] -83]
Train Case:   9 | Input/Output: [[83 83 63 83] 63]
Train Case:  10 | Input/Output: [[-88 -88 11 -88] -88]
Train Case:  11 | Input/Output: [[8 8 8 -19] -19]
Train Case:  12 | Input/Output: [[15 15 15 15] 15]
Train Case:  13 | Input/Output: [[83 83 83 -83] -83]
Train Case:  14 | Input/Output: [[-88 -88 -88 13] -88]
Train Case:  15 | Input/Output: [(58 58 58 58) 58]
Train Case:  16 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  17 | Input/Output: [(56 56 56 56) 56]
Train Case:  18 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  19 | Input/Output: [(74 74 74 74) 74]
Train Case:  20 | Input/Output: [(13 47 12 49) 12]
Train Case:  21 | Input/Output: [(94 88 83 75) 75]
Train Case:  22 | Input/Output: [(90 25 81 25) 25]
Train Case:  23 | Input/Output: [(66 30 7 83) 7]
Train Case:  24 | Input/Output: [(22 91 79 45) 22]
Train Case:  25 | Input/Output: [(97 93 89 16) 16]
Train Case:  26 | Input/Output: [(28 42 76 2) 2]
Train Case:  27 | Input/Output: [(45 23 83 41) 23]
Train Case:  28 | Input/Output: [(51 90 35 29) 29]
Train Case:  29 | Input/Output: [(83 77 72 20) 20]
Train Case:  30 | Input/Output: [(84 41 6 21) 6]
Train Case:  31 | Input/Output: [(12 26 66 84) 12]
Train Case:  32 | Input/Output: [(37 49 24 29) 24]
Train Case:  33 | Input/Output: [(32 72 34 69) 32]
Train Case:  34 | Input/Output: [(43 34 56 74) 34]
Train Case:  35 | Input/Output: [(46 61 20 78) 20]
Train Case:  36 | Input/Output: [(55 32 15 43) 15]
Train Case:  37 | Input/Output: [(81 98 80 59) 59]
Train Case:  38 | Input/Output: [(9 36 15 91) 9]
Train Case:  39 | Input/Output: [(62 28 5 16) 5]
Train Case:  40 | Input/Output: [(-46 -72 -18 -10) -72]
Train Case:  41 | Input/Output: [(44 -99 3 -54) -99]
Train Case:  42 | Input/Output: [(-56 -88 54 23) -88]
Train Case:  43 | Input/Output: [(-23 -58 -67 -43) -67]
Train Case:  44 | Input/Output: [(55 33 20 62) 20]
Train Case:  45 | Input/Output: [(2 39 30 -87) -87]
Train Case:  46 | Input/Output: [(-21 5 98 100) -21]
Train Case:  47 | Input/Output: [(12 -34 65 -53) -53]
Train Case:  48 | Input/Output: [(-74 -92 -42 79) -92]
Train Case:  49 | Input/Output: [(-92 -76 -21 23) -92]
Train Case:  50 | Input/Output: [(-64 -78 36 -19) -78]
Train Case:  51 | Input/Output: [(-51 -15 98 -92) -92]
Train Case:  52 | Input/Output: [(44 -34 -59 -64) -64]
Train Case:  53 | Input/Output: [(85 -61 -25 77) -61]
Train Case:  54 | Input/Output: [(-4 48 -36 -62) -62]
Train Case:  55 | Input/Output: [(80 6 58 -44) -44]
Train Case:  56 | Input/Output: [(40 -77 74 -94) -94]
Train Case:  57 | Input/Output: [(-72 -47 77 -7) -72]
Train Case:  58 | Input/Output: [(41 41 -51 40) -51]
Train Case:  59 | Input/Output: [(-38 -21 -8 -93) -93]
Train Case:  60 | Input/Output: [(-50 -57 -13 85) -57]
Train Case:  61 | Input/Output: [(-80 0 -61 14) -80]
Train Case:  62 | Input/Output: [(-55 29 -20 -81) -81]
Train Case:  63 | Input/Output: [(-33 -55 -11 87) -55]
Train Case:  64 | Input/Output: [(45 -27 9 -65) -65]
Train Case:  65 | Input/Output: [(75 -28 37 -11) -28]
Train Case:  66 | Input/Output: [(20 79 40 -51) -51]
Train Case:  67 | Input/Output: [(-55 1 93 12) -55]
Train Case:  68 | Input/Output: [(-36 -77 -52 -72) -77]
Train Case:  69 | Input/Output: [(-83 -72 28 -74) -83]
Train Case:  70 | Input/Output: [(20 -56 -28 -30) -56]
Train Case:  71 | Input/Output: [(58 41 -52 -49) -52]
Train Case:  72 | Input/Output: [(-58 -88 -18 -100) -100]
Train Case:  73 | Input/Output: [(-40 -31 -64 -11) -64]
Train Case:  74 | Input/Output: [(7 -80 19 18) -80]
Train Case:  75 | Input/Output: [(52 -35 -100 80) -100]
Train Case:  76 | Input/Output: [(-5 -56 63 -82) -82]
Train Case:  77 | Input/Output: [(-78 -10 81 65) -78]
Train Case:  78 | Input/Output: [(54 80 32 -7) -7]
Train Case:  79 | Input/Output: [(-11 -48 -52 63) -52]
Train Case:  80 | Input/Output: [(-5 5 -88 73) -88]
Train Case:  81 | Input/Output: [(0 -53 -39 43) -53]
Train Case:  82 | Input/Output: [(66 -21 -19 -71) -71]
Train Case:  83 | Input/Output: [(17 97 -53 34) -53]
Train Case:  84 | Input/Output: [(83 79 -47 -80) -80]
Train Case:  85 | Input/Output: [(19 -33 -84 -93) -93]
Train Case:  86 | Input/Output: [(77 48 32 24) 24]
Train Case:  87 | Input/Output: [(-48 97 20 1) -48]
Train Case:  88 | Input/Output: [(-95 96 43 53) -95]
Train Case:  89 | Input/Output: [(-86 -41 24 -28) -86]
Train Case:  90 | Input/Output: [(-39 -16 59 -25) -39]
Train Case:  91 | Input/Output: [(54 59 -55 78) -55]
Train Case:  92 | Input/Output: [(4 -11 -73 -61) -73]
Train Case:  93 | Input/Output: [(-62 43 -12 -86) -86]
Train Case:  94 | Input/Output: [(-39 -36 45 11) -39]
Train Case:  95 | Input/Output: [(-98 78 -13 53) -98]
Train Case:  96 | Input/Output: [(85 96 72 66) 66]
Train Case:  97 | Input/Output: [(41 76 -90 22) -90]
Train Case:  98 | Input/Output: [(-72 40 -28 -79) -79]
Train Case:  99 | Input/Output: [(33 -100 23 28) -100]
Test Case:   0 | Input/Output: [[5 -90 -90 -90] -90]
Test Case:   1 | Input/Output: [[-86 -46 -46 -46] -86]
Test Case:   2 | Input/Output: [[84 84 -95 84] -95]
Test Case:   3 | Input/Output: [[-75 -75 -75 55] -75]
Test Case:   4 | Input/Output: [[87 87 87 -52] -52]
Test Case:   5 | Input/Output: [[15 15 15 -78] -78]
Test Case:   6 | Input/Output: [[61 61 -46 61] -46]
Test Case:   7 | Input/Output: [[40 40 40 -27] -27]
Test Case:   8 | Input/Output: [[34 82 34 34] 34]
Test Case:   9 | Input/Output: [[100 100 78 100] 78]
Test Case:  10 | Input/Output: [[-35 94 94 94] -35]
Test Case:  11 | Input/Output: [[-59 -59 65 -59] -59]
Test Case:  12 | Input/Output: [[16 16 16 -95] -95]
Test Case:  13 | Input/Output: [[61 51 61 61] 51]
Test Case:  14 | Input/Output: [[-8 64 64 64] -8]
Test Case:  15 | Input/Output: [[-39 -39 -93 -39] -93]
Test Case:  16 | Input/Output: [[64 36 64 64] 36]
Test Case:  17 | Input/Output: [[47 78 78 78] 47]
Test Case:  18 | Input/Output: [[-18 22 -18 -18] -18]
Test Case:  19 | Input/Output: [[-94 -94 -94 -86] -94]
Test Case:  20 | Input/Output: [[10 70 10 10] 10]
Test Case:  21 | Input/Output: [[62 -88 -88 -88] -88]
Test Case:  22 | Input/Output: [[83 83 -38 83] -38]
Test Case:  23 | Input/Output: [[12 44 44 44] 12]
Test Case:  24 | Input/Output: [[33 -67 33 33] -67]
Test Case:  25 | Input/Output: [[13 13 13 98] 13]
Test Case:  26 | Input/Output: [[43 43 43 63] 43]
Test Case:  27 | Input/Output: [[-81 -81 -81 -21] -81]
Test Case:  28 | Input/Output: [[13 13 66 13] 13]
Test Case:  29 | Input/Output: [[74 37 74 74] 37]
Test Case:  30 | Input/Output: [[84 -22 84 84] -22]
Test Case:  31 | Input/Output: [[94 -68 -68 -68] -68]
Test Case:  32 | Input/Output: [[18 88 18 18] 18]
Test Case:  33 | Input/Output: [[-45 -27 -27 -27] -45]
Test Case:  34 | Input/Output: [[-93 75 75 75] -93]
Test Case:  35 | Input/Output: [[-65 -65 -44 -65] -65]
Test Case:  36 | Input/Output: [[-17 -17 6 -17] -17]
Test Case:  37 | Input/Output: [[-6 -32 -32 -32] -32]
Test Case:  38 | Input/Output: [[95 95 61 95] 61]
Test Case:  39 | Input/Output: [[97 97 -1 97] -1]
Test Case:  40 | Input/Output: [[23 23 -71 23] -71]
Test Case:  41 | Input/Output: [[-19 -19 54 -19] -19]
Test Case:  42 | Input/Output: [[44 44 44 -77] -77]
Test Case:  43 | Input/Output: [[85 -79 -79 -79] -79]
Test Case:  44 | Input/Output: [[49 60 49 49] 49]
Test Case:  45 | Input/Output: [[65 59 59 59] 59]
Test Case:  46 | Input/Output: [[-15 -15 -14 -15] -15]
Test Case:  47 | Input/Output: [[-51 -51 -51 -42] -51]
Test Case:  48 | Input/Output: [[-17 46 -17 -17] -17]
Test Case:  49 | Input/Output: [[-14 -14 60 -14] -14]
Test Case:  50 | Input/Output: [[-65 40 40 40] -65]
Test Case:  51 | Input/Output: [[-96 -96 -96 -9] -96]
Test Case:  52 | Input/Output: [[47 47 47 20] 20]
Test Case:  53 | Input/Output: [[-32 78 78 78] -32]
Test Case:  54 | Input/Output: [[-62 -29 -29 -29] -62]
Test Case:  55 | Input/Output: [[14 14 -22 14] -22]
Test Case:  56 | Input/Output: [[31 -21 31 31] -21]
Test Case:  57 | Input/Output: [[72 72 72 59] 59]
Test Case:  58 | Input/Output: [[30 -69 30 30] -69]
Test Case:  59 | Input/Output: [[-18 1 1 1] -18]
Test Case:  60 | Input/Output: [[-50 -50 14 -50] -50]
Test Case:  61 | Input/Output: [[-45 55 -45 -45] -45]
Test Case:  62 | Input/Output: [[88 -47 -47 -47] -47]
Test Case:  63 | Input/Output: [[-31 -31 -82 -31] -82]
Test Case:  64 | Input/Output: [[77 23 77 77] 23]
Test Case:  65 | Input/Output: [[-8 -8 -8 83] -8]
Test Case:  66 | Input/Output: [[-20 -22 -20 -20] -22]
Test Case:  67 | Input/Output: [[78 78 -48 78] -48]
Test Case:  68 | Input/Output: [[94 -69 -69 -69] -69]
Test Case:  69 | Input/Output: [[36 32 36 36] 32]
Test Case:  70 | Input/Output: [[75 72 75 75] 72]
Test Case:  71 | Input/Output: [[-26 -96 -96 -96] -96]
Test Case:  72 | Input/Output: [[15 15 36 15] 15]
Test Case:  73 | Input/Output: [[-5 -5 35 -5] -5]
Test Case:  74 | Input/Output: [[60 -49 60 60] -49]
Test Case:  75 | Input/Output: [[-14 44 -14 -14] -14]
Test Case:  76 | Input/Output: [[-46 -46 89 -46] -46]
Test Case:  77 | Input/Output: [[-79 -18 -18 -18] -79]
Test Case:  78 | Input/Output: [[-46 -43 -46 -46] -46]
Test Case:  79 | Input/Output: [[-20 100 -20 -20] -20]
Test Case:  80 | Input/Output: [[-18 -18 -27 -18] -27]
Test Case:  81 | Input/Output: [[-76 13 -76 -76] -76]
Test Case:  82 | Input/Output: [[41 41 41 59] 41]
Test Case:  83 | Input/Output: [[79 59 79 79] 59]
Test Case:  84 | Input/Output: [[49 49 58 49] 49]
Test Case:  85 | Input/Output: [[27 27 -36 27] -36]
Test Case:  86 | Input/Output: [[-62 14 14 14] -62]
Test Case:  87 | Input/Output: [[-88 78 -88 -88] -88]
Test Case:  88 | Input/Output: [[-60 -60 -60 -8] -60]
Test Case:  89 | Input/Output: [[29 29 -91 29] -91]
Test Case:  90 | Input/Output: [[-5 -25 -25 -25] -25]
Test Case:  91 | Input/Output: [[22 -32 -32 -32] -32]
Test Case:  92 | Input/Output: [[-35 -35 -35 -82] -82]
Test Case:  93 | Input/Output: [[98 56 56 56] 56]
Test Case:  94 | Input/Output: [[45 45 45 97] 45]
Test Case:  95 | Input/Output: [[75 75 75 17] 17]
Test Case:  96 | Input/Output: [[71 71 -52 71] -52]
Test Case:  97 | Input/Output: [[-99 -84 -99 -99] -99]
Test Case:  98 | Input/Output: [[17 17 17 -1] -1]
Test Case:  99 | Input/Output: [[-99 -99 -35 -99] -99]
Test Case: 100 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 101 | Input/Output: [(4 4 4 4) 4]
Test Case: 102 | Input/Output: [(21 21 21 21) 21]
Test Case: 103 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 104 | Input/Output: [(46 46 46 46) 46]
Test Case: 105 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 106 | Input/Output: [(98 98 98 98) 98]
Test Case: 107 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 108 | Input/Output: [(24 24 24 24) 24]
Test Case: 109 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 110 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 111 | Input/Output: [(71 71 71 71) 71]
Test Case: 112 | Input/Output: [(53 53 53 53) 53]
Test Case: 113 | Input/Output: [(7 7 7 7) 7]
Test Case: 114 | Input/Output: [(32 32 32 32) 32]
Test Case: 115 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 116 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 117 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 118 | Input/Output: [(60 60 60 60) 60]
Test Case: 119 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 120 | Input/Output: [(64 64 64 64) 64]
Test Case: 121 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 122 | Input/Output: [(83 83 83 83) 83]
Test Case: 123 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 124 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 125 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 126 | Input/Output: [(27 27 27 27) 27]
Test Case: 127 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 128 | Input/Output: [(59 59 59 59) 59]
Test Case: 129 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 130 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 131 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 132 | Input/Output: [(90 90 90 90) 90]
Test Case: 133 | Input/Output: [(16 16 16 16) 16]
Test Case: 134 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 135 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 136 | Input/Output: [(53 53 53 53) 53]
Test Case: 137 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 138 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 139 | Input/Output: [(9 9 9 9) 9]
Test Case: 140 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 141 | Input/Output: [(58 58 58 58) 58]
Test Case: 142 | Input/Output: [(82 82 82 82) 82]
Test Case: 143 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 144 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 145 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 146 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 147 | Input/Output: [(27 27 27 27) 27]
Test Case: 148 | Input/Output: [(55 55 55 55) 55]
Test Case: 149 | Input/Output: [(89 89 89 89) 89]
Test Case: 150 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 151 | Input/Output: [(48 48 48 48) 48]
Test Case: 152 | Input/Output: [(60 60 60 60) 60]
Test Case: 153 | Input/Output: [(80 80 80 80) 80]
Test Case: 154 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 155 | Input/Output: [(18 18 18 18) 18]
Test Case: 156 | Input/Output: [(93 93 93 93) 93]
Test Case: 157 | Input/Output: [(86 86 86 86) 86]
Test Case: 158 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 159 | Input/Output: [(30 30 30 30) 30]
Test Case: 160 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 161 | Input/Output: [(87 87 87 87) 87]
Test Case: 162 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 163 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 164 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 165 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 166 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 167 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 168 | Input/Output: [(52 52 52 52) 52]
Test Case: 169 | Input/Output: [(50 50 50 50) 50]
Test Case: 170 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 171 | Input/Output: [(84 84 84 84) 84]
Test Case: 172 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 173 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 174 | Input/Output: [(56 56 56 56) 56]
Test Case: 175 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 176 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 177 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 178 | Input/Output: [(78 78 78 78) 78]
Test Case: 179 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 180 | Input/Output: [(84 84 84 84) 84]
Test Case: 181 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 182 | Input/Output: [(74 74 74 74) 74]
Test Case: 183 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 184 | Input/Output: [(85 85 85 85) 85]
Test Case: 185 | Input/Output: [(75 75 75 75) 75]
Test Case: 186 | Input/Output: [(82 82 82 82) 82]
Test Case: 187 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 188 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 189 | Input/Output: [(9 9 9 9) 9]
Test Case: 190 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 191 | Input/Output: [(92 92 92 92) 92]
Test Case: 192 | Input/Output: [(44 44 44 44) 44]
Test Case: 193 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 194 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 195 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 196 | Input/Output: [(59 59 59 59) 59]
Test Case: 197 | Input/Output: [(86 86 86 86) 86]
Test Case: 198 | Input/Output: [(43 43 43 43) 43]
Test Case: 199 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 200 | Input/Output: [(73 1 97 2) 1]
Test Case: 201 | Input/Output: [(78 41 6 39) 6]
Test Case: 202 | Input/Output: [(99 38 86 63) 38]
Test Case: 203 | Input/Output: [(1 70 20 91) 1]
Test Case: 204 | Input/Output: [(49 45 21 2) 2]
Test Case: 205 | Input/Output: [(15 34 31 28) 15]
Test Case: 206 | Input/Output: [(66 39 63 7) 7]
Test Case: 207 | Input/Output: [(68 12 75 39) 12]
Test Case: 208 | Input/Output: [(39 27 60 83) 27]
Test Case: 209 | Input/Output: [(60 16 59 87) 16]
Test Case: 210 | Input/Output: [(66 65 97 3) 3]
Test Case: 211 | Input/Output: [(23 95 30 1) 1]
Test Case: 212 | Input/Output: [(17 57 50 29) 17]
Test Case: 213 | Input/Output: [(20 24 34 89) 20]
Test Case: 214 | Input/Output: [(99 77 91 57) 57]
Test Case: 215 | Input/Output: [(25 26 17 8) 8]
Test Case: 216 | Input/Output: [(99 1 22 36) 1]
Test Case: 217 | Input/Output: [(56 9 44 25) 9]
Test Case: 218 | Input/Output: [(55 38 39 95) 38]
Test Case: 219 | Input/Output: [(24 93 92 29) 24]
Test Case: 220 | Input/Output: [(88 34 64 36) 34]
Test Case: 221 | Input/Output: [(38 7 57 2) 2]
Test Case: 222 | Input/Output: [(97 22 68 38) 22]
Test Case: 223 | Input/Output: [(5 42 16 38) 5]
Test Case: 224 | Input/Output: [(46 71 66 23) 23]
Test Case: 225 | Input/Output: [(90 85 61 85) 61]
Test Case: 226 | Input/Output: [(77 42 37 15) 15]
Test Case: 227 | Input/Output: [(92 93 10 27) 10]
Test Case: 228 | Input/Output: [(11 27 43 57) 11]
Test Case: 229 | Input/Output: [(22 64 42 85) 22]
Test Case: 230 | Input/Output: [(22 69 27 10) 10]
Test Case: 231 | Input/Output: [(73 52 58 54) 52]
Test Case: 232 | Input/Output: [(95 43 91 4) 4]
Test Case: 233 | Input/Output: [(16 38 94 21) 16]
Test Case: 234 | Input/Output: [(26 12 58 99) 12]
Test Case: 235 | Input/Output: [(70 57 16 77) 16]
Test Case: 236 | Input/Output: [(59 98 35 64) 35]
Test Case: 237 | Input/Output: [(3 35 25 27) 3]
Test Case: 238 | Input/Output: [(11 72 34 90) 11]
Test Case: 239 | Input/Output: [(14 9 79 23) 9]
Test Case: 240 | Input/Output: [(88 64 17 94) 17]
Test Case: 241 | Input/Output: [(65 73 20 83) 20]
Test Case: 242 | Input/Output: [(59 41 52 8) 8]
Test Case: 243 | Input/Output: [(62 32 19 95) 19]
Test Case: 244 | Input/Output: [(66 67 1 31) 1]
Test Case: 245 | Input/Output: [(88 37 90 15) 15]
Test Case: 246 | Input/Output: [(48 96 98 55) 48]
Test Case: 247 | Input/Output: [(77 9 80 92) 9]
Test Case: 248 | Input/Output: [(45 41 55 42) 41]
Test Case: 249 | Input/Output: [(45 7 81 98) 7]
Test Case: 250 | Input/Output: [(2 58 84 94) 2]
Test Case: 251 | Input/Output: [(47 31 90 76) 31]
Test Case: 252 | Input/Output: [(17 79 44 63) 17]
Test Case: 253 | Input/Output: [(64 35 71 64) 35]
Test Case: 254 | Input/Output: [(97 3 57 34) 3]
Test Case: 255 | Input/Output: [(9 8 87 7) 7]
Test Case: 256 | Input/Output: [(36 88 82 34) 34]
Test Case: 257 | Input/Output: [(38 85 15 16) 15]
Test Case: 258 | Input/Output: [(99 15 41 13) 13]
Test Case: 259 | Input/Output: [(91 20 86 59) 20]
Test Case: 260 | Input/Output: [(2 71 3 68) 2]
Test Case: 261 | Input/Output: [(81 46 72 37) 37]
Test Case: 262 | Input/Output: [(88 17 86 87) 17]
Test Case: 263 | Input/Output: [(84 84 61 6) 6]
Test Case: 264 | Input/Output: [(78 20 65 7) 7]
Test Case: 265 | Input/Output: [(25 10 80 50) 10]
Test Case: 266 | Input/Output: [(36 87 75 83) 36]
Test Case: 267 | Input/Output: [(15 32 19 43) 15]
Test Case: 268 | Input/Output: [(30 75 66 82) 30]
Test Case: 269 | Input/Output: [(48 38 68 12) 12]
Test Case: 270 | Input/Output: [(79 8 18 92) 8]
Test Case: 271 | Input/Output: [(67 97 47 46) 46]
Test Case: 272 | Input/Output: [(100 78 44 56) 44]
Test Case: 273 | Input/Output: [(41 77 39 68) 39]
Test Case: 274 | Input/Output: [(9 23 16 68) 9]
Test Case: 275 | Input/Output: [(50 6 29 50) 6]
Test Case: 276 | Input/Output: [(7 2 73 35) 2]
Test Case: 277 | Input/Output: [(9 89 1 16) 1]
Test Case: 278 | Input/Output: [(94 33 55 42) 33]
Test Case: 279 | Input/Output: [(46 84 71 60) 46]
Test Case: 280 | Input/Output: [(68 41 39 43) 39]
Test Case: 281 | Input/Output: [(11 0 1 60) 0]
Test Case: 282 | Input/Output: [(38 24 38 82) 24]
Test Case: 283 | Input/Output: [(35 95 50 43) 35]
Test Case: 284 | Input/Output: [(29 31 5 95) 5]
Test Case: 285 | Input/Output: [(73 97 85 50) 50]
Test Case: 286 | Input/Output: [(21 76 17 88) 17]
Test Case: 287 | Input/Output: [(68 19 19 64) 19]
Test Case: 288 | Input/Output: [(12 50 14 75) 12]
Test Case: 289 | Input/Output: [(21 92 79 30) 21]
Test Case: 290 | Input/Output: [(67 59 6 21) 6]
Test Case: 291 | Input/Output: [(24 83 35 57) 24]
Test Case: 292 | Input/Output: [(53 11 32 76) 11]
Test Case: 293 | Input/Output: [(88 31 86 22) 22]
Test Case: 294 | Input/Output: [(0 56 75 18) 0]
Test Case: 295 | Input/Output: [(33 89 8 44) 8]
Test Case: 296 | Input/Output: [(78 63 93 6) 6]
Test Case: 297 | Input/Output: [(77 82 2 82) 2]
Test Case: 298 | Input/Output: [(89 27 80 54) 27]
Test Case: 299 | Input/Output: [(45 83 1 22) 1]
Test Case: 300 | Input/Output: [(78 0 99 67) 0]
Test Case: 301 | Input/Output: [(44 34 68 68) 34]
Test Case: 302 | Input/Output: [(82 88 97 56) 56]
Test Case: 303 | Input/Output: [(58 77 84 92) 58]
Test Case: 304 | Input/Output: [(92 70 47 94) 47]
Test Case: 305 | Input/Output: [(89 93 92 66) 66]
Test Case: 306 | Input/Output: [(97 41 61 29) 29]
Test Case: 307 | Input/Output: [(5 98 85 7) 5]
Test Case: 308 | Input/Output: [(2 52 57 41) 2]
Test Case: 309 | Input/Output: [(4 61 75 37) 4]
Test Case: 310 | Input/Output: [(5 67 21 68) 5]
Test Case: 311 | Input/Output: [(52 87 65 64) 52]
Test Case: 312 | Input/Output: [(81 18 42 54) 18]
Test Case: 313 | Input/Output: [(63 42 88 49) 42]
Test Case: 314 | Input/Output: [(80 81 68 26) 26]
Test Case: 315 | Input/Output: [(97 1 74 80) 1]
Test Case: 316 | Input/Output: [(2 56 13 43) 2]
Test Case: 317 | Input/Output: [(63 15 95 56) 15]
Test Case: 318 | Input/Output: [(71 51 82 35) 35]
Test Case: 319 | Input/Output: [(80 88 67 33) 33]
Test Case: 320 | Input/Output: [(12 81 4 33) 4]
Test Case: 321 | Input/Output: [(19 60 59 8) 8]
Test Case: 322 | Input/Output: [(98 58 78 99) 58]
Test Case: 323 | Input/Output: [(24 33 24 66) 24]
Test Case: 324 | Input/Output: [(39 1 37 40) 1]
Test Case: 325 | Input/Output: [(35 94 20 83) 20]
Test Case: 326 | Input/Output: [(62 100 40 57) 40]
Test Case: 327 | Input/Output: [(87 52 57 85) 52]
Test Case: 328 | Input/Output: [(51 98 95 80) 51]
Test Case: 329 | Input/Output: [(56 66 74 10) 10]
Test Case: 330 | Input/Output: [(98 66 77 1) 1]
Test Case: 331 | Input/Output: [(58 7 95 41) 7]
Test Case: 332 | Input/Output: [(25 100 80 16) 16]
Test Case: 333 | Input/Output: [(62 61 6 75) 6]
Test Case: 334 | Input/Output: [(98 86 61 52) 52]
Test Case: 335 | Input/Output: [(92 30 41 84) 30]
Test Case: 336 | Input/Output: [(70 61 94 63) 61]
Test Case: 337 | Input/Output: [(24 76 86 76) 24]
Test Case: 338 | Input/Output: [(13 15 10 84) 10]
Test Case: 339 | Input/Output: [(6 45 19 33) 6]
Test Case: 340 | Input/Output: [(89 64 77 64) 64]
Test Case: 341 | Input/Output: [(8 24 23 49) 8]
Test Case: 342 | Input/Output: [(34 68 70 1) 1]
Test Case: 343 | Input/Output: [(31 26 83 28) 26]
Test Case: 344 | Input/Output: [(59 97 83 62) 59]
Test Case: 345 | Input/Output: [(13 27 34 55) 13]
Test Case: 346 | Input/Output: [(16 7 51 9) 7]
Test Case: 347 | Input/Output: [(47 29 96 18) 18]
Test Case: 348 | Input/Output: [(60 8 20 63) 8]
Test Case: 349 | Input/Output: [(4 78 67 89) 4]
Test Case: 350 | Input/Output: [(15 99 29 67) 15]
Test Case: 351 | Input/Output: [(76 86 73 45) 45]
Test Case: 352 | Input/Output: [(87 29 60 54) 29]
Test Case: 353 | Input/Output: [(70 42 58 21) 21]
Test Case: 354 | Input/Output: [(32 25 24 77) 24]
Test Case: 355 | Input/Output: [(38 60 62 57) 38]
Test Case: 356 | Input/Output: [(33 27 16 61) 16]
Test Case: 357 | Input/Output: [(3 34 54 0) 0]
Test Case: 358 | Input/Output: [(42 83 44 40) 40]
Test Case: 359 | Input/Output: [(92 42 82 99) 42]
Test Case: 360 | Input/Output: [(96 58 77 60) 58]
Test Case: 361 | Input/Output: [(4 9 4 5) 4]
Test Case: 362 | Input/Output: [(45 10 81 16) 10]
Test Case: 363 | Input/Output: [(54 77 72 31) 31]
Test Case: 364 | Input/Output: [(3 27 3 28) 3]
Test Case: 365 | Input/Output: [(31 23 52 24) 23]
Test Case: 366 | Input/Output: [(29 5 12 32) 5]
Test Case: 367 | Input/Output: [(89 34 10 54) 10]
Test Case: 368 | Input/Output: [(14 99 79 4) 4]
Test Case: 369 | Input/Output: [(55 49 12 77) 12]
Test Case: 370 | Input/Output: [(28 55 37 41) 28]
Test Case: 371 | Input/Output: [(37 97 47 90) 37]
Test Case: 372 | Input/Output: [(60 47 95 5) 5]
Test Case: 373 | Input/Output: [(64 6 40 20) 6]
Test Case: 374 | Input/Output: [(1 87 7 64) 1]
Test Case: 375 | Input/Output: [(81 92 65 88) 65]
Test Case: 376 | Input/Output: [(17 98 0 29) 0]
Test Case: 377 | Input/Output: [(98 89 94 56) 56]
Test Case: 378 | Input/Output: [(95 42 8 97) 8]
Test Case: 379 | Input/Output: [(49 22 47 3) 3]
Test Case: 380 | Input/Output: [(95 85 84 51) 51]
Test Case: 381 | Input/Output: [(12 37 71 1) 1]
Test Case: 382 | Input/Output: [(37 57 54 76) 37]
Test Case: 383 | Input/Output: [(41 33 23 81) 23]
Test Case: 384 | Input/Output: [(64 75 21 20) 20]
Test Case: 385 | Input/Output: [(14 71 1 5) 1]
Test Case: 386 | Input/Output: [(45 32 80 72) 32]
Test Case: 387 | Input/Output: [(50 37 50 80) 37]
Test Case: 388 | Input/Output: [(50 81 68 27) 27]
Test Case: 389 | Input/Output: [(77 80 80 9) 9]
Test Case: 390 | Input/Output: [(29 6 30 4) 4]
Test Case: 391 | Input/Output: [(84 59 2 24) 2]
Test Case: 392 | Input/Output: [(47 46 35 96) 35]
Test Case: 393 | Input/Output: [(7 76 96 29) 7]
Test Case: 394 | Input/Output: [(15 88 67 50) 15]
Test Case: 395 | Input/Output: [(89 77 24 79) 24]
Test Case: 396 | Input/Output: [(79 89 2 82) 2]
Test Case: 397 | Input/Output: [(9 82 77 32) 9]
Test Case: 398 | Input/Output: [(42 31 17 23) 17]
Test Case: 399 | Input/Output: [(5 40 43 66) 5]
Test Case: 400 | Input/Output: [(41 95 -74 60) -74]
Test Case: 401 | Input/Output: [(-33 -82 -1 12) -82]
Test Case: 402 | Input/Output: [(-34 -54 49 -92) -92]
Test Case: 403 | Input/Output: [(99 0 -30 14) -30]
Test Case: 404 | Input/Output: [(-18 58 80 61) -18]
Test Case: 405 | Input/Output: [(81 58 14 70) 14]
Test Case: 406 | Input/Output: [(-63 -11 -97 -100) -100]
Test Case: 407 | Input/Output: [(35 -98 23 8) -98]
Test Case: 408 | Input/Output: [(92 -88 -67 -34) -88]
Test Case: 409 | Input/Output: [(-67 -35 -9 68) -67]
Test Case: 410 | Input/Output: [(71 68 48 -82) -82]
Test Case: 411 | Input/Output: [(65 -24 3 -8) -24]
Test Case: 412 | Input/Output: [(58 93 32 65) 32]
Test Case: 413 | Input/Output: [(-56 68 -60 -44) -60]
Test Case: 414 | Input/Output: [(-78 -23 26 -62) -78]
Test Case: 415 | Input/Output: [(84 -37 -6 -50) -50]
Test Case: 416 | Input/Output: [(-45 -97 29 -20) -97]
Test Case: 417 | Input/Output: [(-23 -99 34 -31) -99]
Test Case: 418 | Input/Output: [(-33 -81 0 -96) -96]
Test Case: 419 | Input/Output: [(5 -90 46 -38) -90]
Test Case: 420 | Input/Output: [(-8 94 39 46) -8]
Test Case: 421 | Input/Output: [(69 26 -29 -92) -92]
Test Case: 422 | Input/Output: [(40 -14 93 81) -14]
Test Case: 423 | Input/Output: [(96 86 -87 -46) -87]
Test Case: 424 | Input/Output: [(-10 19 68 58) -10]
Test Case: 425 | Input/Output: [(12 64 -55 44) -55]
Test Case: 426 | Input/Output: [(-69 48 -27 -22) -69]
Test Case: 427 | Input/Output: [(7 92 35 -67) -67]
Test Case: 428 | Input/Output: [(80 -99 -26 54) -99]
Test Case: 429 | Input/Output: [(-84 34 53 -92) -92]
Test Case: 430 | Input/Output: [(57 55 69 82) 55]
Test Case: 431 | Input/Output: [(-38 -19 95 85) -38]
Test Case: 432 | Input/Output: [(50 49 -16 11) -16]
Test Case: 433 | Input/Output: [(-24 -27 -62 -78) -78]
Test Case: 434 | Input/Output: [(-52 69 -16 63) -52]
Test Case: 435 | Input/Output: [(40 99 -71 25) -71]
Test Case: 436 | Input/Output: [(87 65 -84 -10) -84]
Test Case: 437 | Input/Output: [(-3 -25 1 96) -25]
Test Case: 438 | Input/Output: [(-54 -92 -20 -44) -92]
Test Case: 439 | Input/Output: [(-77 41 100 -38) -77]
Test Case: 440 | Input/Output: [(-79 80 63 57) -79]
Test Case: 441 | Input/Output: [(-83 23 25 -41) -83]
Test Case: 442 | Input/Output: [(31 20 -24 -30) -30]
Test Case: 443 | Input/Output: [(33 49 -13 -14) -14]
Test Case: 444 | Input/Output: [(87 -62 -51 -65) -65]
Test Case: 445 | Input/Output: [(36 21 -23 -37) -37]
Test Case: 446 | Input/Output: [(-30 6 75 -53) -53]
Test Case: 447 | Input/Output: [(-31 -99 76 30) -99]
Test Case: 448 | Input/Output: [(22 -67 16 -47) -67]
Test Case: 449 | Input/Output: [(78 100 -91 7) -91]
Test Case: 450 | Input/Output: [(-24 7 -81 -87) -87]
Test Case: 451 | Input/Output: [(76 -89 22 -22) -89]
Test Case: 452 | Input/Output: [(-92 13 -63 -35) -92]
Test Case: 453 | Input/Output: [(-53 -45 -97 7) -97]
Test Case: 454 | Input/Output: [(-48 -75 25 -71) -75]
Test Case: 455 | Input/Output: [(77 52 60 48) 48]
Test Case: 456 | Input/Output: [(-84 -6 51 -60) -84]
Test Case: 457 | Input/Output: [(-6 16 33 -48) -48]
Test Case: 458 | Input/Output: [(-9 -100 79 -92) -100]
Test Case: 459 | Input/Output: [(-34 -59 32 -93) -93]
Test Case: 460 | Input/Output: [(-16 -39 1 -50) -50]
Test Case: 461 | Input/Output: [(-80 17 16 24) -80]
Test Case: 462 | Input/Output: [(41 33 -58 77) -58]
Test Case: 463 | Input/Output: [(-43 31 43 60) -43]
Test Case: 464 | Input/Output: [(69 29 -67 78) -67]
Test Case: 465 | Input/Output: [(-75 -67 17 -95) -95]
Test Case: 466 | Input/Output: [(-80 -8 -45 94) -80]
Test Case: 467 | Input/Output: [(-59 1 3 86) -59]
Test Case: 468 | Input/Output: [(88 84 -3 -44) -44]
Test Case: 469 | Input/Output: [(52 -37 -78 79) -78]
Test Case: 470 | Input/Output: [(34 -87 -82 12) -87]
Test Case: 471 | Input/Output: [(-76 -24 38 87) -76]
Test Case: 472 | Input/Output: [(46 68 -72 -49) -72]
Test Case: 473 | Input/Output: [(9 77 -68 -39) -68]
Test Case: 474 | Input/Output: [(39 -93 43 -15) -93]
Test Case: 475 | Input/Output: [(-62 20 -89 54) -89]
Test Case: 476 | Input/Output: [(-51 42 58 39) -51]
Test Case: 477 | Input/Output: [(-28 58 82 16) -28]
Test Case: 478 | Input/Output: [(40 79 -35 -78) -78]
Test Case: 479 | Input/Output: [(26 83 64 -71) -71]
Test Case: 480 | Input/Output: [(71 83 -37 92) -37]
Test Case: 481 | Input/Output: [(37 -53 72 -67) -67]
Test Case: 482 | Input/Output: [(55 -80 44 75) -80]
Test Case: 483 | Input/Output: [(-94 -67 -92 6) -94]
Test Case: 484 | Input/Output: [(90 -46 -95 45) -95]
Test Case: 485 | Input/Output: [(88 58 -70 60) -70]
Test Case: 486 | Input/Output: [(36 -84 -55 -57) -84]
Test Case: 487 | Input/Output: [(-23 -98 83 47) -98]
Test Case: 488 | Input/Output: [(-73 -13 82 -85) -85]
Test Case: 489 | Input/Output: [(63 -46 -73 -10) -73]
Test Case: 490 | Input/Output: [(-11 86 6 -47) -47]
Test Case: 491 | Input/Output: [(-6 -18 -28 79) -28]
Test Case: 492 | Input/Output: [(8 87 31 -82) -82]
Test Case: 493 | Input/Output: [(29 34 43 38) 29]
Test Case: 494 | Input/Output: [(-57 23 -44 -67) -67]
Test Case: 495 | Input/Output: [(-28 -20 75 -7) -28]
Test Case: 496 | Input/Output: [(43 39 17 89) 17]
Test Case: 497 | Input/Output: [(69 -13 33 -93) -93]
Test Case: 498 | Input/Output: [(23 -69 93 -2) -69]
Test Case: 499 | Input/Output: [(34 95 -84 -5) -84]
Test Case: 500 | Input/Output: [(-42 65 49 -6) -42]
Test Case: 501 | Input/Output: [(57 -39 -60 -98) -98]
Test Case: 502 | Input/Output: [(-36 -72 -70 -50) -72]
Test Case: 503 | Input/Output: [(-64 -3 -7 -64) -64]
Test Case: 504 | Input/Output: [(-32 32 68 77) -32]
Test Case: 505 | Input/Output: [(-45 -27 28 -29) -45]
Test Case: 506 | Input/Output: [(-58 15 80 -1) -58]
Test Case: 507 | Input/Output: [(-84 43 23 69) -84]
Test Case: 508 | Input/Output: [(-16 -1 -95 85) -95]
Test Case: 509 | Input/Output: [(-91 -25 -44 52) -91]
Test Case: 510 | Input/Output: [(53 97 84 -1) -1]
Test Case: 511 | Input/Output: [(54 -15 89 89) -15]
Test Case: 512 | Input/Output: [(-62 -18 -98 -39) -98]
Test Case: 513 | Input/Output: [(-78 66 -91 -73) -91]
Test Case: 514 | Input/Output: [(-13 -93 -51 91) -93]
Test Case: 515 | Input/Output: [(27 89 34 30) 27]
Test Case: 516 | Input/Output: [(-86 -91 -21 -48) -91]
Test Case: 517 | Input/Output: [(-97 -76 31 -40) -97]
Test Case: 518 | Input/Output: [(67 -76 -97 100) -97]
Test Case: 519 | Input/Output: [(4 6 -35 -68) -68]
Test Case: 520 | Input/Output: [(10 28 -6 -33) -33]
Test Case: 521 | Input/Output: [(-20 37 -16 -33) -33]
Test Case: 522 | Input/Output: [(79 -10 -44 -27) -44]
Test Case: 523 | Input/Output: [(-37 -32 26 -56) -56]
Test Case: 524 | Input/Output: [(14 -20 53 23) -20]
Test Case: 525 | Input/Output: [(30 4 1 -62) -62]
Test Case: 526 | Input/Output: [(81 96 48 85) 48]
Test Case: 527 | Input/Output: [(48 9 -47 59) -47]
Test Case: 528 | Input/Output: [(-94 40 -79 58) -94]
Test Case: 529 | Input/Output: [(80 -18 -14 60) -18]
Test Case: 530 | Input/Output: [(-4 96 15 -61) -61]
Test Case: 531 | Input/Output: [(-24 32 71 59) -24]
Test Case: 532 | Input/Output: [(-58 8 -12 37) -58]
Test Case: 533 | Input/Output: [(50 24 8 -97) -97]
Test Case: 534 | Input/Output: [(86 -8 -56 91) -56]
Test Case: 535 | Input/Output: [(-59 25 -46 83) -59]
Test Case: 536 | Input/Output: [(5 -71 53 -52) -71]
Test Case: 537 | Input/Output: [(-55 30 48 78) -55]
Test Case: 538 | Input/Output: [(-85 -73 46 64) -85]
Test Case: 539 | Input/Output: [(32 -20 -29 -63) -63]
Test Case: 540 | Input/Output: [(-54 -76 -86 51) -86]
Test Case: 541 | Input/Output: [(70 54 -13 33) -13]
Test Case: 542 | Input/Output: [(20 25 -4 -2) -4]
Test Case: 543 | Input/Output: [(-81 -13 50 -82) -82]
Test Case: 544 | Input/Output: [(14 79 -21 -84) -84]
Test Case: 545 | Input/Output: [(-57 96 4 6) -57]
Test Case: 546 | Input/Output: [(26 84 55 -56) -56]
Test Case: 547 | Input/Output: [(-16 67 -29 18) -29]
Test Case: 548 | Input/Output: [(28 64 1 9) 1]
Test Case: 549 | Input/Output: [(-85 -76 -1 -35) -85]
Test Case: 550 | Input/Output: [(-35 -19 79 -83) -83]
Test Case: 551 | Input/Output: [(86 38 -83 33) -83]
Test Case: 552 | Input/Output: [(-51 -7 37 -76) -76]
Test Case: 553 | Input/Output: [(34 -61 3 89) -61]
Test Case: 554 | Input/Output: [(44 -76 81 -70) -76]
Test Case: 555 | Input/Output: [(11 80 52 51) 11]
Test Case: 556 | Input/Output: [(85 97 -86 -22) -86]
Test Case: 557 | Input/Output: [(-26 65 4 28) -26]
Test Case: 558 | Input/Output: [(-73 26 -38 45) -73]
Test Case: 559 | Input/Output: [(-49 35 92 -87) -87]
Test Case: 560 | Input/Output: [(30 -21 -75 18) -75]
Test Case: 561 | Input/Output: [(-56 -25 92 6) -56]
Test Case: 562 | Input/Output: [(-98 -63 96 -28) -98]
Test Case: 563 | Input/Output: [(95 2 -97 53) -97]
Test Case: 564 | Input/Output: [(-69 -55 -63 -18) -69]
Test Case: 565 | Input/Output: [(59 -65 10 -24) -65]
Test Case: 566 | Input/Output: [(1 67 -38 22) -38]
Test Case: 567 | Input/Output: [(-16 89 96 68) -16]
Test Case: 568 | Input/Output: [(-80 -3 -17 29) -80]
Test Case: 569 | Input/Output: [(-1 78 -93 -34) -93]
Test Case: 570 | Input/Output: [(-81 95 -6 0) -81]
Test Case: 571 | Input/Output: [(-18 -28 -66 -59) -66]
Test Case: 572 | Input/Output: [(-37 89 -6 65) -37]
Test Case: 573 | Input/Output: [(13 85 5 57) 5]
Test Case: 574 | Input/Output: [(-21 34 -49 -76) -76]
Test Case: 575 | Input/Output: [(53 -21 -6 87) -21]
Test Case: 576 | Input/Output: [(-20 -60 -3 -34) -60]
Test Case: 577 | Input/Output: [(-76 -42 -43 66) -76]
Test Case: 578 | Input/Output: [(-25 0 49 -86) -86]
Test Case: 579 | Input/Output: [(-33 -36 94 59) -36]
Test Case: 580 | Input/Output: [(-38 -65 55 59) -65]
Test Case: 581 | Input/Output: [(-25 15 50 -5) -25]
Test Case: 582 | Input/Output: [(40 1 1 37) 1]
Test Case: 583 | Input/Output: [(-75 -70 52 -74) -75]
Test Case: 584 | Input/Output: [(-76 67 7 92) -76]
Test Case: 585 | Input/Output: [(-68 -64 85 -79) -79]
Test Case: 586 | Input/Output: [(95 6 -22 37) -22]
Test Case: 587 | Input/Output: [(-33 -47 73 -8) -47]
Test Case: 588 | Input/Output: [(-20 -10 -59 -84) -84]
Test Case: 589 | Input/Output: [(53 12 37 78) 12]
Test Case: 590 | Input/Output: [(-65 62 -92 -49) -92]
Test Case: 591 | Input/Output: [(60 -91 96 80) -91]
Test Case: 592 | Input/Output: [(-29 -58 -49 35) -58]
Test Case: 593 | Input/Output: [(-33 90 -8 -85) -85]
Test Case: 594 | Input/Output: [(5 -90 40 -10) -90]
Test Case: 595 | Input/Output: [(44 57 -34 -17) -34]
Test Case: 596 | Input/Output: [(91 -84 69 -68) -84]
Test Case: 597 | Input/Output: [(-60 -8 -35 58) -60]
Test Case: 598 | Input/Output: [(-42 -75 52 -42) -75]
Test Case: 599 | Input/Output: [(-82 -37 57 59) -82]
Test Case: 600 | Input/Output: [(-79 -36 45 -17) -79]
Test Case: 601 | Input/Output: [(93 34 100 -76) -76]
Test Case: 602 | Input/Output: [(-86 -46 40 -60) -86]
Test Case: 603 | Input/Output: [(83 14 -91 13) -91]
Test Case: 604 | Input/Output: [(25 -72 -38 -2) -72]
Test Case: 605 | Input/Output: [(-30 89 27 -53) -53]
Test Case: 606 | Input/Output: [(-29 73 -22 -68) -68]
Test Case: 607 | Input/Output: [(80 8 89 35) 8]
Test Case: 608 | Input/Output: [(-22 52 -14 18) -22]
Test Case: 609 | Input/Output: [(-20 -62 -86 -32) -86]
Test Case: 610 | Input/Output: [(-11 -21 51 -39) -39]
Test Case: 611 | Input/Output: [(55 -7 -28 97) -28]
Test Case: 612 | Input/Output: [(-85 -50 42 -4) -85]
Test Case: 613 | Input/Output: [(50 -53 -75 -45) -75]
Test Case: 614 | Input/Output: [(-31 33 98 81) -31]
Test Case: 615 | Input/Output: [(-62 -48 89 -45) -62]
Test Case: 616 | Input/Output: [(-20 -32 -91 82) -91]
Test Case: 617 | Input/Output: [(-47 -39 -56 21) -56]
Test Case: 618 | Input/Output: [(-5 57 -86 45) -86]
Test Case: 619 | Input/Output: [(-19 -22 44 7) -22]
Test Case: 620 | Input/Output: [(-98 85 -12 -59) -98]
Test Case: 621 | Input/Output: [(27 6 36 -87) -87]
Test Case: 622 | Input/Output: [(65 64 -9 5) -9]
Test Case: 623 | Input/Output: [(-88 -42 -14 28) -88]
Test Case: 624 | Input/Output: [(3 -62 -43 57) -62]
Test Case: 625 | Input/Output: [(-24 -55 43 90) -55]
Test Case: 626 | Input/Output: [(69 -21 -27 20) -27]
Test Case: 627 | Input/Output: [(61 -10 93 -13) -13]
Test Case: 628 | Input/Output: [(-92 5 96 87) -92]
Test Case: 629 | Input/Output: [(-29 -5 71 66) -29]
Test Case: 630 | Input/Output: [(57 -83 -39 49) -83]
Test Case: 631 | Input/Output: [(6 -24 86 0) -24]
Test Case: 632 | Input/Output: [(71 -86 17 31) -86]
Test Case: 633 | Input/Output: [(85 87 93 -92) -92]
Test Case: 634 | Input/Output: [(-29 94 -77 84) -77]
Test Case: 635 | Input/Output: [(0 97 25 -16) -16]
Test Case: 636 | Input/Output: [(-97 1 85 37) -97]
Test Case: 637 | Input/Output: [(11 6 51 -6) -6]
Test Case: 638 | Input/Output: [(-63 -9 -29 4) -63]
Test Case: 639 | Input/Output: [(64 36 -31 -35) -35]
Test Case: 640 | Input/Output: [(-94 -35 77 -30) -94]
Test Case: 641 | Input/Output: [(95 29 -29 98) -29]
Test Case: 642 | Input/Output: [(-39 29 49 28) -39]
Test Case: 643 | Input/Output: [(65 -51 -78 61) -78]
Test Case: 644 | Input/Output: [(-26 -20 -82 36) -82]
Test Case: 645 | Input/Output: [(-57 -51 87 47) -57]
Test Case: 646 | Input/Output: [(18 20 94 31) 18]
Test Case: 647 | Input/Output: [(-83 97 -95 -57) -95]
Test Case: 648 | Input/Output: [(-33 67 -9 90) -33]
Test Case: 649 | Input/Output: [(-53 -15 -81 -5) -81]
Test Case: 650 | Input/Output: [(-37 -84 -73 76) -84]
Test Case: 651 | Input/Output: [(94 14 20 -67) -67]
Test Case: 652 | Input/Output: [(57 -5 3 -64) -64]
Test Case: 653 | Input/Output: [(25 32 1 -84) -84]
Test Case: 654 | Input/Output: [(46 74 -61 11) -61]
Test Case: 655 | Input/Output: [(1 -25 -91 -64) -91]
Test Case: 656 | Input/Output: [(19 -54 -81 -3) -81]
Test Case: 657 | Input/Output: [(71 -39 -75 89) -75]
Test Case: 658 | Input/Output: [(-81 -33 94 83) -81]
Test Case: 659 | Input/Output: [(-54 21 1 39) -54]
Test Case: 660 | Input/Output: [(-6 -86 65 93) -86]
Test Case: 661 | Input/Output: [(56 15 -85 -52) -85]
Test Case: 662 | Input/Output: [(63 -40 -91 84) -91]
Test Case: 663 | Input/Output: [(78 99 99 -33) -33]
Test Case: 664 | Input/Output: [(-43 -96 58 -95) -96]
Test Case: 665 | Input/Output: [(51 59 -22 -13) -22]
Test Case: 666 | Input/Output: [(-4 96 -48 34) -48]
Test Case: 667 | Input/Output: [(94 -7 88 -40) -40]
Test Case: 668 | Input/Output: [(61 -13 -2 61) -13]
Test Case: 669 | Input/Output: [(51 -44 27 62) -44]
Test Case: 670 | Input/Output: [(-18 -14 24 -63) -63]
Test Case: 671 | Input/Output: [(76 -84 37 -11) -84]
Test Case: 672 | Input/Output: [(81 -90 -100 70) -100]
Test Case: 673 | Input/Output: [(44 21 58 7) 7]
Test Case: 674 | Input/Output: [(30 -59 -27 64) -59]
Test Case: 675 | Input/Output: [(82 -14 -40 27) -40]
Test Case: 676 | Input/Output: [(44 -33 -70 37) -70]
Test Case: 677 | Input/Output: [(-23 17 45 31) -23]
Test Case: 678 | Input/Output: [(86 6 -89 -8) -89]
Test Case: 679 | Input/Output: [(50 -86 4 75) -86]
Test Case: 680 | Input/Output: [(-15 18 -63 56) -63]
Test Case: 681 | Input/Output: [(-89 -81 -11 2) -89]
Test Case: 682 | Input/Output: [(-11 60 94 3) -11]
Test Case: 683 | Input/Output: [(66 -6 -99 -64) -99]
Test Case: 684 | Input/Output: [(-5 -48 -6 -89) -89]
Test Case: 685 | Input/Output: [(55 -52 62 56) -52]
Test Case: 686 | Input/Output: [(89 -85 6 -64) -85]
Test Case: 687 | Input/Output: [(-5 -27 44 81) -27]
Test Case: 688 | Input/Output: [(-4 18 -11 79) -11]
Test Case: 689 | Input/Output: [(-29 65 73 -45) -45]
Test Case: 690 | Input/Output: [(14 -15 77 -47) -47]
Test Case: 691 | Input/Output: [(45 47 82 47) 45]
Test Case: 692 | Input/Output: [(-93 66 63 40) -93]
Test Case: 693 | Input/Output: [(42 -74 -33 88) -74]
Test Case: 694 | Input/Output: [(40 -34 88 -44) -44]
Test Case: 695 | Input/Output: [(-47 -97 1 -60) -97]
Test Case: 696 | Input/Output: [(71 59 59 84) 59]
Test Case: 697 | Input/Output: [(77 -93 -25 22) -93]
Test Case: 698 | Input/Output: [(0 -83 94 -71) -83]
Test Case: 699 | Input/Output: [(-15 40 6 55) -15]
Test Case: 700 | Input/Output: [(-98 64 62 -97) -98]
Test Case: 701 | Input/Output: [(41 22 20 30) 20]
Test Case: 702 | Input/Output: [(-13 -51 -23 -86) -86]
Test Case: 703 | Input/Output: [(-22 -83 -81 -28) -83]
Test Case: 704 | Input/Output: [(-81 56 -86 38) -86]
Test Case: 705 | Input/Output: [(-78 76 -89 2) -89]
Test Case: 706 | Input/Output: [(21 -60 67 -76) -76]
Test Case: 707 | Input/Output: [(-32 68 38 54) -32]
Test Case: 708 | Input/Output: [(38 2 11 -68) -68]
Test Case: 709 | Input/Output: [(5 10 39 -7) -7]
Test Case: 710 | Input/Output: [(30 -21 15 67) -21]
Test Case: 711 | Input/Output: [(-88 54 47 -84) -88]
Test Case: 712 | Input/Output: [(89 -77 59 8) -77]
Test Case: 713 | Input/Output: [(0 66 61 -22) -22]
Test Case: 714 | Input/Output: [(89 46 29 61) 29]
Test Case: 715 | Input/Output: [(73 41 51 15) 15]
Test Case: 716 | Input/Output: [(46 -11 61 -40) -40]
Test Case: 717 | Input/Output: [(13 90 -78 43) -78]
Test Case: 718 | Input/Output: [(-55 82 -19 86) -55]
Test Case: 719 | Input/Output: [(1 66 -29 -93) -93]
Test Case: 720 | Input/Output: [(-28 -72 39 -25) -72]
Test Case: 721 | Input/Output: [(-44 -10 -14 46) -44]
Test Case: 722 | Input/Output: [(-23 95 -81 -25) -81]
Test Case: 723 | Input/Output: [(51 93 12 -31) -31]
Test Case: 724 | Input/Output: [(-22 73 83 43) -22]
Test Case: 725 | Input/Output: [(79 -42 72 -29) -42]
Test Case: 726 | Input/Output: [(-48 19 -42 -99) -99]
Test Case: 727 | Input/Output: [(37 68 26 -71) -71]
Test Case: 728 | Input/Output: [(-26 -39 -29 59) -39]
Test Case: 729 | Input/Output: [(26 -92 -47 -33) -92]
Test Case: 730 | Input/Output: [(82 24 21 68) 21]
Test Case: 731 | Input/Output: [(99 -3 -46 -52) -52]
Test Case: 732 | Input/Output: [(-86 -15 9 38) -86]
Test Case: 733 | Input/Output: [(-84 -34 -69 2) -84]
Test Case: 734 | Input/Output: [(18 -26 40 -77) -77]
Test Case: 735 | Input/Output: [(-98 -31 29 -21) -98]
Test Case: 736 | Input/Output: [(20 68 19 28) 19]
Test Case: 737 | Input/Output: [(-35 -14 52 -73) -73]
Test Case: 738 | Input/Output: [(-38 -69 31 71) -69]
Test Case: 739 | Input/Output: [(-82 -22 -90 65) -90]
Test Case: 740 | Input/Output: [(-37 67 90 69) -37]
Test Case: 741 | Input/Output: [(75 -46 26 75) -46]
Test Case: 742 | Input/Output: [(-80 26 -87 -73) -87]
Test Case: 743 | Input/Output: [(65 56 -26 -50) -50]
Test Case: 744 | Input/Output: [(-31 19 -9 70) -31]
Test Case: 745 | Input/Output: [(-54 60 -16 -6) -54]
Test Case: 746 | Input/Output: [(-96 -70 -80 9) -96]
Test Case: 747 | Input/Output: [(61 81 -75 46) -75]
Test Case: 748 | Input/Output: [(4 -58 -23 -41) -58]
Test Case: 749 | Input/Output: [(73 63 78 47) 47]
Test Case: 750 | Input/Output: [(54 -53 54 4) -53]
Test Case: 751 | Input/Output: [(95 -86 50 -57) -86]
Test Case: 752 | Input/Output: [(83 12 -54 -74) -74]
Test Case: 753 | Input/Output: [(91 25 -79 -3) -79]
Test Case: 754 | Input/Output: [(-68 1 74 -64) -68]
Test Case: 755 | Input/Output: [(85 -34 -15 -67) -67]
Test Case: 756 | Input/Output: [(26 94 54 -97) -97]
Test Case: 757 | Input/Output: [(-45 -4 1 77) -45]
Test Case: 758 | Input/Output: [(78 40 -67 -64) -67]
Test Case: 759 | Input/Output: [(32 80 -7 11) -7]
Test Case: 760 | Input/Output: [(44 -68 77 40) -68]
Test Case: 761 | Input/Output: [(68 67 27 13) 13]
Test Case: 762 | Input/Output: [(-21 -97 82 18) -97]
Test Case: 763 | Input/Output: [(-75 -18 1 9) -75]
Test Case: 764 | Input/Output: [(-65 -79 18 -52) -79]
Test Case: 765 | Input/Output: [(-20 48 -38 -9) -38]
Test Case: 766 | Input/Output: [(20 84 0 -5) -5]
Test Case: 767 | Input/Output: [(15 -27 71 -91) -91]
Test Case: 768 | Input/Output: [(91 -33 -64 6) -64]
Test Case: 769 | Input/Output: [(-60 90 -51 -72) -72]
Test Case: 770 | Input/Output: [(-65 1 10 -71) -71]
Test Case: 771 | Input/Output: [(83 -16 11 -53) -53]
Test Case: 772 | Input/Output: [(86 68 -42 -95) -95]
Test Case: 773 | Input/Output: [(-48 43 -80 -57) -80]
Test Case: 774 | Input/Output: [(72 -61 -42 23) -61]
Test Case: 775 | Input/Output: [(48 27 40 49) 27]
Test Case: 776 | Input/Output: [(35 -11 -39 13) -39]
Test Case: 777 | Input/Output: [(70 96 30 74) 30]
Test Case: 778 | Input/Output: [(-68 -41 65 -2) -68]
Test Case: 779 | Input/Output: [(-55 80 -73 89) -73]
Test Case: 780 | Input/Output: [(67 -95 -24 -11) -95]
Test Case: 781 | Input/Output: [(-36 57 65 -21) -36]
Test Case: 782 | Input/Output: [(-8 -10 -19 -56) -56]
Test Case: 783 | Input/Output: [(55 -10 72 -82) -82]
Test Case: 784 | Input/Output: [(5 -23 66 66) -23]
Test Case: 785 | Input/Output: [(33 68 -68 -77) -77]
Test Case: 786 | Input/Output: [(-17 74 7 57) -17]
Test Case: 787 | Input/Output: [(17 -61 -34 88) -61]
Test Case: 788 | Input/Output: [(-29 -5 -1 59) -29]
Test Case: 789 | Input/Output: [(-68 95 84 -57) -68]
Test Case: 790 | Input/Output: [(-38 79 -88 -31) -88]
Test Case: 791 | Input/Output: [(-56 -98 71 51) -98]
Test Case: 792 | Input/Output: [(91 3 -68 -43) -68]
Test Case: 793 | Input/Output: [(97 97 -89 -17) -89]
Test Case: 794 | Input/Output: [(74 -33 1 -15) -33]
Test Case: 795 | Input/Output: [(1 23 -7 -64) -64]
Test Case: 796 | Input/Output: [(23 55 14 -9) -9]
Test Case: 797 | Input/Output: [(86 -98 13 55) -98]
Test Case: 798 | Input/Output: [(-100 77 49 59) -100]
Test Case: 799 | Input/Output: [(93 -72 20 54) -72]
Test Case: 800 | Input/Output: [(28 -89 -40 -95) -95]
Test Case: 801 | Input/Output: [(-69 -61 -69 92) -69]
Test Case: 802 | Input/Output: [(99 96 17 83) 17]
Test Case: 803 | Input/Output: [(90 -65 3 4) -65]
Test Case: 804 | Input/Output: [(-40 94 -78 -96) -96]
Test Case: 805 | Input/Output: [(-52 -90 -36 -33) -90]
Test Case: 806 | Input/Output: [(69 -90 -90 92) -90]
Test Case: 807 | Input/Output: [(62 -100 -92 -16) -100]
Test Case: 808 | Input/Output: [(35 0 96 -2) -2]
Test Case: 809 | Input/Output: [(24 34 16 -61) -61]
Test Case: 810 | Input/Output: [(19 -67 -53 90) -67]
Test Case: 811 | Input/Output: [(-52 -22 28 60) -52]
Test Case: 812 | Input/Output: [(-89 3 -55 -63) -89]
Test Case: 813 | Input/Output: [(1 77 42 88) 1]
Test Case: 814 | Input/Output: [(-94 -8 -43 -3) -94]
Test Case: 815 | Input/Output: [(36 -10 -84 -81) -84]
Test Case: 816 | Input/Output: [(16 18 -33 86) -33]
Test Case: 817 | Input/Output: [(-99 -90 68 -30) -99]
Test Case: 818 | Input/Output: [(-65 53 31 -12) -65]
Test Case: 819 | Input/Output: [(99 82 -38 63) -38]
Test Case: 820 | Input/Output: [(-2 19 95 -4) -4]
Test Case: 821 | Input/Output: [(-92 63 -39 60) -92]
Test Case: 822 | Input/Output: [(0 -71 96 21) -71]
Test Case: 823 | Input/Output: [(-52 -43 -5 49) -52]
Test Case: 824 | Input/Output: [(-18 40 38 23) -18]
Test Case: 825 | Input/Output: [(-8 -8 -76 43) -76]
Test Case: 826 | Input/Output: [(-62 -68 -36 82) -68]
Test Case: 827 | Input/Output: [(-63 -43 -87 -49) -87]
Test Case: 828 | Input/Output: [(92 -3 40 85) -3]
Test Case: 829 | Input/Output: [(90 67 61 33) 33]
Test Case: 830 | Input/Output: [(76 83 -13 23) -13]
Test Case: 831 | Input/Output: [(-99 65 89 70) -99]
Test Case: 832 | Input/Output: [(60 -51 -71 -65) -71]
Test Case: 833 | Input/Output: [(-10 -3 79 5) -10]
Test Case: 834 | Input/Output: [(14 -39 -36 42) -39]
Test Case: 835 | Input/Output: [(14 76 -100 -20) -100]
Test Case: 836 | Input/Output: [(-50 54 -54 -66) -66]
Test Case: 837 | Input/Output: [(12 87 -58 28) -58]
Test Case: 838 | Input/Output: [(-74 36 73 36) -74]
Test Case: 839 | Input/Output: [(-30 -99 9 49) -99]
Test Case: 840 | Input/Output: [(-89 -34 -27 -74) -89]
Test Case: 841 | Input/Output: [(-81 -60 -77 5) -81]
Test Case: 842 | Input/Output: [(-59 42 -41 6) -59]
Test Case: 843 | Input/Output: [(-51 12 -99 -64) -99]
Test Case: 844 | Input/Output: [(-4 -74 -5 -99) -99]
Test Case: 845 | Input/Output: [(80 56 -42 64) -42]
Test Case: 846 | Input/Output: [(34 -40 8 -41) -41]
Test Case: 847 | Input/Output: [(-54 31 35 30) -54]
Test Case: 848 | Input/Output: [(35 -51 -93 68) -93]
Test Case: 849 | Input/Output: [(-83 -50 7 -86) -86]
Test Case: 850 | Input/Output: [(84 -60 72 -49) -60]
Test Case: 851 | Input/Output: [(82 -7 18 -94) -94]
Test Case: 852 | Input/Output: [(77 -64 25 -28) -64]
Test Case: 853 | Input/Output: [(89 -38 -85 17) -85]
Test Case: 854 | Input/Output: [(54 24 -89 -57) -89]
Test Case: 855 | Input/Output: [(-73 -54 -57 -62) -73]
Test Case: 856 | Input/Output: [(19 47 -11 -50) -50]
Test Case: 857 | Input/Output: [(-6 -49 -24 75) -49]
Test Case: 858 | Input/Output: [(-86 30 35 14) -86]
Test Case: 859 | Input/Output: [(15 56 94 -83) -83]
Test Case: 860 | Input/Output: [(-79 67 -23 79) -79]
Test Case: 861 | Input/Output: [(51 47 6 -38) -38]
Test Case: 862 | Input/Output: [(-77 40 19 57) -77]
Test Case: 863 | Input/Output: [(82 -27 -16 65) -27]
Test Case: 864 | Input/Output: [(64 0 -79 4) -79]
Test Case: 865 | Input/Output: [(15 -24 31 12) -24]
Test Case: 866 | Input/Output: [(34 -55 96 -12) -55]
Test Case: 867 | Input/Output: [(-23 9 -75 66) -75]
Test Case: 868 | Input/Output: [(-13 86 81 63) -13]
Test Case: 869 | Input/Output: [(65 78 56 -42) -42]
Test Case: 870 | Input/Output: [(-99 63 56 -42) -99]
Test Case: 871 | Input/Output: [(-10 5 -84 -25) -84]
Test Case: 872 | Input/Output: [(58 -5 -52 -33) -52]
Test Case: 873 | Input/Output: [(70 -22 57 63) -22]
Test Case: 874 | Input/Output: [(52 -44 -22 -37) -44]
Test Case: 875 | Input/Output: [(-48 -61 24 -99) -99]
Test Case: 876 | Input/Output: [(67 92 -89 41) -89]
Test Case: 877 | Input/Output: [(16 95 47 -68) -68]
Test Case: 878 | Input/Output: [(-16 -45 50 -44) -45]
Test Case: 879 | Input/Output: [(-18 -64 35 -82) -82]
Test Case: 880 | Input/Output: [(-80 40 -99 -37) -99]
Test Case: 881 | Input/Output: [(53 -77 66 5) -77]
Test Case: 882 | Input/Output: [(96 99 -31 75) -31]
Test Case: 883 | Input/Output: [(58 -39 50 -5) -39]
Test Case: 884 | Input/Output: [(-8 -56 22 -94) -94]
Test Case: 885 | Input/Output: [(63 75 -32 86) -32]
Test Case: 886 | Input/Output: [(50 41 -5 -6) -6]
Test Case: 887 | Input/Output: [(-76 -85 -97 6) -97]
Test Case: 888 | Input/Output: [(85 10 0 30) 0]
Test Case: 889 | Input/Output: [(-73 76 -18 -17) -73]
Test Case: 890 | Input/Output: [(17 89 -100 32) -100]
Test Case: 891 | Input/Output: [(-3 10 92 4) -3]
Test Case: 892 | Input/Output: [(22 5 32 51) 5]
Test Case: 893 | Input/Output: [(93 30 7 96) 7]
Test Case: 894 | Input/Output: [(93 56 -50 92) -50]
Test Case: 895 | Input/Output: [(74 35 -7 82) -7]
Test Case: 896 | Input/Output: [(33 59 -51 65) -51]
Test Case: 897 | Input/Output: [(50 56 41 -23) -23]
Test Case: 898 | Input/Output: [(-18 -35 57 -21) -35]
Test Case: 899 | Input/Output: [(-42 -99 23 33) -99]
Test Case: 900 | Input/Output: [(-55 -29 1 -87) -87]
Test Case: 901 | Input/Output: [(-46 49 -28 -22) -46]
Test Case: 902 | Input/Output: [(74 -49 -30 75) -49]
Test Case: 903 | Input/Output: [(-84 -19 87 38) -84]
Test Case: 904 | Input/Output: [(-45 31 90 -86) -86]
Test Case: 905 | Input/Output: [(-80 72 -51 -8) -80]
Test Case: 906 | Input/Output: [(57 -46 14 -99) -99]
Test Case: 907 | Input/Output: [(-46 -91 45 -62) -91]
Test Case: 908 | Input/Output: [(46 77 -17 1) -17]
Test Case: 909 | Input/Output: [(-74 -50 -12 -9) -74]
Test Case: 910 | Input/Output: [(59 4 78 49) 4]
Test Case: 911 | Input/Output: [(-2 6 -75 71) -75]
Test Case: 912 | Input/Output: [(49 78 97 -25) -25]
Test Case: 913 | Input/Output: [(-63 67 -84 -71) -84]
Test Case: 914 | Input/Output: [(2 -40 -79 85) -79]
Test Case: 915 | Input/Output: [(39 32 5 19) 5]
Test Case: 916 | Input/Output: [(73 -67 -94 43) -94]
Test Case: 917 | Input/Output: [(-54 100 -4 30) -54]
Test Case: 918 | Input/Output: [(72 100 46 -1) -1]
Test Case: 919 | Input/Output: [(-86 -96 88 -34) -96]
Test Case: 920 | Input/Output: [(85 -31 -2 -99) -99]
Test Case: 921 | Input/Output: [(-70 -87 -96 -92) -96]
Test Case: 922 | Input/Output: [(82 4 17 -88) -88]
Test Case: 923 | Input/Output: [(61 -15 17 25) -15]
Test Case: 924 | Input/Output: [(-80 60 45 0) -80]
Test Case: 925 | Input/Output: [(-98 86 60 34) -98]
Test Case: 926 | Input/Output: [(-96 -2 -74 16) -96]
Test Case: 927 | Input/Output: [(24 -100 17 24) -100]
Test Case: 928 | Input/Output: [(-25 -8 52 73) -25]
Test Case: 929 | Input/Output: [(78 20 -5 74) -5]
Test Case: 930 | Input/Output: [(-42 -95 57 -35) -95]
Test Case: 931 | Input/Output: [(-35 89 48 -61) -61]
Test Case: 932 | Input/Output: [(-96 -63 69 15) -96]
Test Case: 933 | Input/Output: [(72 -61 78 -36) -61]
Test Case: 934 | Input/Output: [(-60 -59 -68 -90) -90]
Test Case: 935 | Input/Output: [(-80 -36 -40 24) -80]
Test Case: 936 | Input/Output: [(-69 17 2 50) -69]
Test Case: 937 | Input/Output: [(-63 37 89 5) -63]
Test Case: 938 | Input/Output: [(-63 -70 31 53) -70]
Test Case: 939 | Input/Output: [(65 46 -66 -51) -66]
Test Case: 940 | Input/Output: [(38 -93 54 -58) -93]
Test Case: 941 | Input/Output: [(69 27 56 33) 27]
Test Case: 942 | Input/Output: [(-75 -15 -20 -85) -85]
Test Case: 943 | Input/Output: [(36 20 33 -61) -61]
Test Case: 944 | Input/Output: [(-47 44 -87 47) -87]
Test Case: 945 | Input/Output: [(-22 -55 33 -59) -59]
Test Case: 946 | Input/Output: [(66 9 -37 -100) -100]
Test Case: 947 | Input/Output: [(39 -10 70 8) -10]
Test Case: 948 | Input/Output: [(-6 -47 6 -86) -86]
Test Case: 949 | Input/Output: [(-20 -24 2 -14) -24]
Test Case: 950 | Input/Output: [(-9 -27 12 16) -27]
Test Case: 951 | Input/Output: [(98 -80 -15 -69) -80]
Test Case: 952 | Input/Output: [(-17 -61 17 -98) -98]
Test Case: 953 | Input/Output: [(65 27 67 -21) -21]
Test Case: 954 | Input/Output: [(58 -24 -64 8) -64]
Test Case: 955 | Input/Output: [(94 75 12 54) 12]
Test Case: 956 | Input/Output: [(-21 -18 -33 85) -33]
Test Case: 957 | Input/Output: [(88 36 -39 63) -39]
Test Case: 958 | Input/Output: [(82 -35 35 -78) -78]
Test Case: 959 | Input/Output: [(83 -42 75 -37) -42]
Test Case: 960 | Input/Output: [(11 59 -96 -17) -96]
Test Case: 961 | Input/Output: [(-31 39 11 35) -31]
Test Case: 962 | Input/Output: [(88 24 72 26) 24]
Test Case: 963 | Input/Output: [(87 39 100 15) 15]
Test Case: 964 | Input/Output: [(27 -82 18 -34) -82]
Test Case: 965 | Input/Output: [(-57 -74 23 99) -74]
Test Case: 966 | Input/Output: [(-10 -27 49 27) -27]
Test Case: 967 | Input/Output: [(63 -71 -50 33) -71]
Test Case: 968 | Input/Output: [(37 -56 -36 -85) -85]
Test Case: 969 | Input/Output: [(19 85 -96 22) -96]
Test Case: 970 | Input/Output: [(59 -28 -3 42) -28]
Test Case: 971 | Input/Output: [(-81 -10 77 -32) -81]
Test Case: 972 | Input/Output: [(48 -78 -78 -55) -78]
Test Case: 973 | Input/Output: [(-3 86 29 -33) -33]
Test Case: 974 | Input/Output: [(-94 -6 -67 49) -94]
Test Case: 975 | Input/Output: [(71 -67 75 -62) -67]
Test Case: 976 | Input/Output: [(-31 -38 2 -47) -47]
Test Case: 977 | Input/Output: [(83 -92 -41 -72) -92]
Test Case: 978 | Input/Output: [(-85 80 5 -2) -85]
Test Case: 979 | Input/Output: [(7 -85 95 -2) -85]
Test Case: 980 | Input/Output: [(-31 -79 -21 83) -79]
Test Case: 981 | Input/Output: [(19 64 91 51) 19]
Test Case: 982 | Input/Output: [(-55 89 7 7) -55]
Test Case: 983 | Input/Output: [(-81 -57 67 28) -81]
Test Case: 984 | Input/Output: [(-28 -48 89 39) -48]
Test Case: 985 | Input/Output: [(-42 -47 10 34) -47]
Test Case: 986 | Input/Output: [(33 -9 -98 -30) -98]
Test Case: 987 | Input/Output: [(-76 -49 -6 90) -76]
Test Case: 988 | Input/Output: [(47 71 -77 -70) -77]
Test Case: 989 | Input/Output: [(11 55 43 -95) -95]
Test Case: 990 | Input/Output: [(70 3 95 -29) -29]
Test Case: 991 | Input/Output: [(-89 -12 -17 -73) -89]
Test Case: 992 | Input/Output: [(-18 100 69 22) -18]
Test Case: 993 | Input/Output: [(-41 -41 -5 25) -41]
Test Case: 994 | Input/Output: [(-28 -14 95 13) -28]
Test Case: 995 | Input/Output: [(-82 -82 7 91) -82]
Test Case: 996 | Input/Output: [(62 79 86 -53) -53]
Test Case: 997 | Input/Output: [(57 -46 -93 18) -93]
Test Case: 998 | Input/Output: [(-2 -54 -37 31) -54]
Test Case: 999 | Input/Output: [(-52 48 -58 -93) -93]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 124 -26 -74 -91 84 100 103 -58 55 113 -15 -120 89 -125 -10 47
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[28 92 92 92] 28] [[48 48 48 -40] -40] [[96 96 96 -41] -41] [[25 25 -83 25] -83] [[83 83 63 83] 63] [[-88 -88 11 -88] -88] [[8 8 8 -19] -19] [[15 15 15 15] 15] [[83 83 83 -83] -83] [[-88 -88 -88 13] -88] [(58 58 58 58) 58] [(-31 -31 -31 -31) -31] [(56 56 56 56) 56] [(-81 -81 -81 -81) -81] [(74 74 74 74) 74] [(13 47 12 49) 12] [(94 88 83 75) 75] [(90 25 81 25) 25] [(66 30 7 83) 7] [(22 91 79 45) 22] [(97 93 89 16) 16] [(28 42 76 2) 2] [(45 23 83 41) 23] [(51 90 35 29) 29] [(83 77 72 20) 20] [(84 41 6 21) 6] [(12 26 66 84) 12] [(37 49 24 29) 24] [(32 72 34 69) 32] [(43 34 56 74) 34] [(46 61 20 78) 20] [(55 32 15 43) 15] [(81 98 80 59) 59] [(9 36 15 91) 9] [(62 28 5 16) 5] [(-46 -72 -18 -10) -72] [(44 -99 3 -54) -99] [(-56 -88 54 23) -88] [(-23 -58 -67 -43) -67] [(55 33 20 62) 20] [(2 39 30 -87) -87] [(-21 5 98 100) -21] [(12 -34 65 -53) -53] [(-74 -92 -42 79) -92] [(-92 -76 -21 23) -92] [(-64 -78 36 -19) -78] [(-51 -15 98 -92) -92] [(44 -34 -59 -64) -64] [(85 -61 -25 77) -61] [(-4 48 -36 -62) -62] [(80 6 58 -44) -44] [(40 -77 74 -94) -94] [(-72 -47 77 -7) -72] [(41 41 -51 40) -51] [(-38 -21 -8 -93) -93] [(-50 -57 -13 85) -57] [(-80 0 -61 14) -80] [(-55 29 -20 -81) -81] [(-33 -55 -11 87) -55] [(45 -27 9 -65) -65] [(75 -28 37 -11) -28] [(20 79 40 -51) -51] [(-55 1 93 12) -55] [(-36 -77 -52 -72) -77] [(-83 -72 28 -74) -83] [(20 -56 -28 -30) -56] [(58 41 -52 -49) -52] [(-58 -88 -18 -100) -100] [(-40 -31 -64 -11) -64] [(7 -80 19 18) -80] [(52 -35 -100 80) -100] [(-5 -56 63 -82) -82] [(-78 -10 81 65) -78] [(54 80 32 -7) -7] [(-11 -48 -52 63) -52] [(-5 5 -88 73) -88] [(0 -53 -39 43) -53] [(66 -21 -19 -71) -71] [(17 97 -53 34) -53] [(83 79 -47 -80) -80] [(19 -33 -84 -93) -93] [(77 48 32 24) 24] [(-48 97 20 1) -48] [(-95 96 43 53) -95] [(-86 -41 24 -28) -86] [(-39 -16 59 -25) -39] [(54 59 -55 78) -55] [(4 -11 -73 -61) -73] [(-62 43 -12 -86) -86] [(-39 -36 45 11) -39] [(-98 78 -13 53) -98] [(85 96 72 66) 66] [(41 76 -90 22) -90] [(-72 40 -28 -79) -79] [(33 -100 23 28) -100])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 28                  | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 25                 
Correct output: 63                  | Program output: 83                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 13                 
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 49                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 83                 
Correct output: 22                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 41                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 21                 
Correct output: 12                  | Program output: 84                 
Correct output: 24                  | Program output: 29                 
Correct output: 32                  | Program output: 69                 
Correct output: 34                  | Program output: 74                 
Correct output: 20                  | Program output: 78                 
Correct output: 15                  | Program output: 43                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 91                 
Correct output: 5                   | Program output: 16                 
Correct output: -72                 | Program output: -10                
Correct output: -99                 | Program output: -54                
Correct output: -88                 | Program output: 23                 
Correct output: -67                 | Program output: -43                
Correct output: 20                  | Program output: 62                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: 79                 
Correct output: -92                 | Program output: 23                 
Correct output: -78                 | Program output: -19                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: 77                 
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -7                 
Correct output: -51                 | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 85                 
Correct output: -80                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: 87                 
Correct output: -65                 | Program output: -65                
Correct output: -28                 | Program output: -11                
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: 12                 
Correct output: -77                 | Program output: -72                
Correct output: -83                 | Program output: -74                
Correct output: -56                 | Program output: -30                
Correct output: -52                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -64                 | Program output: -11                
Correct output: -80                 | Program output: 18                 
Correct output: -100                | Program output: 80                 
Correct output: -82                 | Program output: -82                
Correct output: -78                 | Program output: 65                 
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: 63                 
Correct output: -88                 | Program output: 73                 
Correct output: -53                 | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: 1                  
Correct output: -95                 | Program output: 53                 
Correct output: -86                 | Program output: -28                
Correct output: -39                 | Program output: -25                
Correct output: -55                 | Program output: 78                 
Correct output: -73                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 11                 
Correct output: -98                 | Program output: 53                 
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_857} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction 35} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap})
Lexicase best program: (exec_pop (integer_yank exec_shove (exec_yankdup in2 exec_yank print_integer) integer_mod exec_shove (in3 print_newline integer_mult integer_dup tagged_857) in3) integer_rot boolean_dup_items integer_gt integer_min exec_k (integer_sub boolean_not integer_div) (exec_stackdepth boolean_rot exec_do*count () integer_lte integer_dec) exec_do*range (boolean_and exec_rot (boolean_rot boolean_dup integer_mod) (in4 print_integer exec_while (boolean_dup boolean_and boolean_dup boolean_frominteger exec_s_when_autoconstructing (boolean_dup_items integer_dec integer_pop boolean_empty integer_inc 35 boolean_and exec_flush integer_gte exec_flush exec_pop (integer_swap integer_flush integer_add integer_rot exec_swap (boolean_eq boolean_frominteger exec_yank) (exec_pop (integer_gt) exec_empty integer_stackdepth boolean_or integer_inc print_newline boolean_swap))) () ())) ()))
Lexicase best errors: [1 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 88
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_857} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 2, :instruction integer_dec} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction 35} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap})
Zero cases best program: (exec_pop (integer_yank exec_shove (exec_yankdup in2 exec_yank print_integer) integer_mod exec_shove (in3 print_newline integer_mult integer_dup tagged_857) in3) integer_rot boolean_dup_items integer_gt integer_min exec_k (integer_sub boolean_not integer_div) (exec_stackdepth boolean_rot exec_do*count () integer_lte integer_dec) exec_do*range (boolean_and exec_rot (boolean_rot boolean_dup integer_mod) (in4 print_integer exec_while (boolean_dup boolean_and boolean_dup boolean_frominteger exec_s_when_autoconstructing (boolean_dup_items integer_dec integer_pop boolean_empty integer_inc 35 boolean_and exec_flush integer_gte exec_flush exec_pop (integer_swap integer_flush integer_add integer_rot exec_swap (boolean_eq boolean_frominteger exec_yank) (exec_pop (integer_gt) exec_empty integer_stackdepth boolean_or integer_inc print_newline boolean_swap))) () ())) ()))
Zero cases best errors: [1 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 88
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 9 4 3 8 3 6 8 8 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 9 4 3 8 3 6 8 8 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_eq})
Best program: (exec_k (integer_rot boolean_dup_times integer_sub exec_s_when_autoconstructing (integer_rot) (in4 integer_mult boolean_invert_second_then_and boolean_xor) (print_integer integer_shove boolean_dup boolean_dup integer_lte exec_when (boolean_empty boolean_swap exec_shove (exec_s_when_autoconstructing () (boolean_xor) (integer_eq))))) ())
Errors: [1 0 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 9.945
Median total errors in population: 10
Error averages by case: (0.997 0.991 0.996 0.997 0.992 0.997 0.994 0.992 0.992 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.066
Average program size in population (points): 68.926
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 482205
--- Timings ---
Current time: 1559582773784 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 27.1%
Fitness Testing:      1.8 seconds, 69.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: -40                 | Program output: 48                 
Correct output: -41                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: 83                 
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 83                 
Correct output: 25                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 89                 
Correct output: 2                   | Program output: 28                 
Correct output: 23                  | Program output: 45                 
Correct output: 29                  | Program output: 35                 
Correct output: 20                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 34                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 80                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -46                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: 2                  
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: 12                 
Correct output: -92                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -64                
Correct output: -92                 | Program output: -51                
Correct output: -64                 | Program output: -59                
Correct output: -61                 | Program output: -25                
Correct output: -62                 | Program output: -36                
Correct output: -44                 | Program output: 58                 
Correct output: -94                 | Program output: 40                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -38                
Correct output: -57                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -55                
Correct output: -55                 | Program output: -33                
Correct output: -65                 | Program output: 9                  
Correct output: -28                 | Program output: 37                 
Correct output: -51                 | Program output: 20                 
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -5                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: 32                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -39                
Correct output: -71                 | Program output: -19                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -47                
Correct output: -93                 | Program output: -84                
Correct output: 24                  | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: 66                  | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -72                
Correct output: -100                | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop})
Lexicase best program: (exec_while (exec_eq) integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec print_boolean) exec_do*times (integer_lt integer_fromboolean 47 integer_rot integer_div exec_yank) print_boolean integer_inc print_newline boolean_stackdepth integer_div integer_pop integer_dec integer_gt boolean_rot boolean_empty boolean_yankdup boolean_frominteger integer_eq boolean_rot integer_eq exec_noop) () ())))
Lexicase best errors: [0 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.155
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop})
Zero cases best program: (exec_while (exec_eq) integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec print_boolean) exec_do*times (integer_lt integer_fromboolean 47 integer_rot integer_div exec_yank) print_boolean integer_inc print_newline boolean_stackdepth integer_div integer_pop integer_dec integer_gt boolean_rot boolean_empty boolean_yankdup boolean_frominteger integer_eq boolean_rot integer_eq exec_noop) () ())))
Zero cases best errors: [0 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.155
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 326 326 96 318 228 177 827 92 92)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (227 326 326 96 318 228 177 827 92 92)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec print_boolean) exec_do*times (integer_lt integer_fromboolean 47 integer_rot integer_div exec_yank) print_boolean integer_inc print_newline boolean_stackdepth integer_div integer_pop integer_dec integer_gt boolean_rot boolean_empty boolean_yankdup boolean_frominteger integer_eq boolean_rot integer_eq exec_noop) () ())))
Errors: [0 1 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 58
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 7.291
Median total errors in population: 7
Error averages by case: (0.773 0.674 0.674 0.904 0.682 0.772 0.823 0.173 0.908 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.126
Average program size in population (points): 83.128
Average percent parens in population: 0.265
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.507
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1050446
--- Timings ---
Current time: 1559582776686 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 44.5%
Fitness Testing:      2.7 seconds, 47.1%
Report:               0.4 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: -40                 | Program output: 48                 
Correct output: -41                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: 83                 
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 83                 
Correct output: 25                  | Program output: 81                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 89                 
Correct output: 2                   | Program output: 28                 
Correct output: 23                  | Program output: 45                 
Correct output: 29                  | Program output: 35                 
Correct output: 20                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 34                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 80                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -46                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: 2                  
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: 12                 
Correct output: -92                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -64                
Correct output: -92                 | Program output: -51                
Correct output: -64                 | Program output: -59                
Correct output: -61                 | Program output: -25                
Correct output: -62                 | Program output: -36                
Correct output: -44                 | Program output: 58                 
Correct output: -94                 | Program output: 40                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -38                
Correct output: -57                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -55                
Correct output: -55                 | Program output: -33                
Correct output: -65                 | Program output: 9                  
Correct output: -28                 | Program output: 37                 
Correct output: -51                 | Program output: 20                 
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -5                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: 32                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -39                
Correct output: -71                 | Program output: -19                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -47                
Correct output: -93                 | Program output: -84                
Correct output: 24                  | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: 66                  | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -72                
Correct output: -100                | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_while (exec_eq) integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec boolean_and) exec_do*times (integer_lt integer_fromboolean)) () ())))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_while (exec_eq) integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec boolean_and) exec_do*times (integer_lt integer_fromboolean)) () ())))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 101 601 600 602 600 193 857 577 857)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (100 101 601 600 602 600 193 857 577 857)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec print_boolean) (exec_do*times (integer_lt integer_fromboolean 47 integer_rot integer_div exec_yank) print_boolean integer_inc print_newline boolean_stackdepth integer_div integer_pop integer_dec integer_gt boolean_rot boolean_empty boolean_yankdup boolean_frominteger integer_eq boolean_rot integer_eq exec_noop) ())))
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 54
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 4.912
Median total errors in population: 3
Error averages by case: (0.9 0.899 0.399 0.4 0.398 0.4 0.807 0.143 0.423 0.143)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.945
Average program size in population (points): 65.633
Average percent parens in population: 0.201
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.311
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 318
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 323
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1355712
--- Timings ---
Current time: 1559582779526 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.7 seconds, 54.8%
Fitness Testing:      3.1 seconds, 36.6%
Report:               0.6 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 92                 
Correct output: -40                 | Program output: 48                 
Correct output: -41                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: 8                  
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: 83                 
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 83                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 79                 
Correct output: 16                  | Program output: 89                 
Correct output: 2                   | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 35                 
Correct output: 20                  | Program output: 72                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 26                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 34                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 80                 
Correct output: 9                   | Program output: 15                 
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: 30                 
Correct output: -21                 | Program output: 5                  
Correct output: -53                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -76                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -15                
Correct output: -64                 | Program output: -59                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -36                
Correct output: -44                 | Program output: 6                  
Correct output: -94                 | Program output: -77                
Correct output: -72                 | Program output: -47                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -21                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -61                
Correct output: -81                 | Program output: -20                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -27                
Correct output: -28                 | Program output: -28                
Correct output: -51                 | Program output: 40                 
Correct output: -55                 | Program output: 1                  
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -72                
Correct output: -56                 | Program output: -56                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -88                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -56                
Correct output: -78                 | Program output: -10                
Correct output: -7                  | Program output: 32                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -47                
Correct output: -93                 | Program output: -84                
Correct output: 24                  | Program output: 32                 
Correct output: -48                 | Program output: 20                 
Correct output: -95                 | Program output: 43                 
Correct output: -86                 | Program output: -41                
Correct output: -39                 | Program output: -16                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -12                
Correct output: -39                 | Program output: -36                
Correct output: -98                 | Program output: -13                
Correct output: 66                  | Program output: 72                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -28                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_flush print_integer exec_swap () () boolean_dup in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop exec_yank) print_boolean integer_inc exec_y_when_autoconstructing (exec_shove (boolean_empty) exec_yankdup) integer_fromboolean exec_do*range (integer_eq integer_gt integer_yankdup integer_pop in2) integer_lte) (exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth) ())))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_flush print_integer exec_swap () () boolean_dup in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop exec_yank) print_boolean integer_inc exec_y_when_autoconstructing (exec_shove (boolean_empty) exec_yankdup) integer_fromboolean exec_do*range (integer_eq integer_gt integer_yankdup integer_pop in2) integer_lte) (exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth) ())))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 910 95 565 575 573 237 575 816 236)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (95 910 95 565 575 573 237 575 816 236)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (boolean_flush print_integer exec_swap () () boolean_dup in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_dup_times (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop exec_yank) print_boolean integer_inc exec_y_when_autoconstructing (exec_shove (boolean_empty) exec_yankdup) integer_fromboolean exec_do*range (integer_eq integer_gt integer_yankdup integer_pop in2) integer_lte) (exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth) ())))
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 60
Size: 75
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.323
Median total errors in population: 4
Error averages by case: (0.905 0.09 0.905 0.435 0.425 0.427 0.763 0.425 0.184 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.285
Average program size in population (points): 64.659
Average percent parens in population: 0.217
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.7895
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1699056
--- Timings ---
Current time: 1559582782210 milliseconds
Total Time:          11.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 59.5%
Fitness Testing:      3.6 seconds, 32.0%
Report:               0.9 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 41                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 66                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 34                 
Correct output: 34                  | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 15                 
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -46                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 98                 
Correct output: -53                 | Program output: 12                 
Correct output: -92                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -64                
Correct output: -92                 | Program output: -51                
Correct output: -64                 | Program output: -59                
Correct output: -61                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: 40                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -38                
Correct output: -57                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -33                
Correct output: -65                 | Program output: 9                  
Correct output: -28                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: 12                 
Correct output: -77                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -5                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -39                
Correct output: -71                 | Program output: -19                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: 1                  
Correct output: -95                 | Program output: 43                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -13                
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 416 416 251 416 248 2 878 237 2)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (202 416 416 251 416 248 2 878 237 2)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Errors: [0 1 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 6.932
Median total errors in population: 6
Error averages by case: (0.798 0.584 0.584 0.749 0.584 0.752 0.998 0.122 0.763 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.262
Average program size in population (points): 84.984
Average percent parens in population: 0.211
Minimum age in population: 4.5
Maximum age in population: 8.0
Average age in population: 6.065875
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2147526
--- Timings ---
Current time: 1559582785003 milliseconds
Total Time:          14.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 62.5%
Fitness Testing:      4.1 seconds, 29.0%
Report:               1.1 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 45                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 41                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 66                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 34                 
Correct output: 34                  | Program output: 56                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 15                 
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -46                
Correct output: -99                 | Program output: 3                  
Correct output: -88                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: 98                 
Correct output: -53                 | Program output: 12                 
Correct output: -92                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -64                
Correct output: -92                 | Program output: -51                
Correct output: -64                 | Program output: -59                
Correct output: -61                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: 40                 
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -38                
Correct output: -57                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -33                
Correct output: -65                 | Program output: 9                  
Correct output: -28                 | Program output: 37                 
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: 12                 
Correct output: -77                 | Program output: -52                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -28                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -58                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -5                 
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -39                
Correct output: -71                 | Program output: -19                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -84                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: 1                  
Correct output: -95                 | Program output: 43                 
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -13                
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (688 383 589 382 691 290 383 386 669 290)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (688 383 589 382 691 290 383 386 669 290)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 5.249
Median total errors in population: 5
Error averages by case: (0.312 0.617 0.411 0.618 0.309 0.71 0.617 0.614 0.331 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.056
Average program size in population (points): 73.27
Average percent parens in population: 0.194
Minimum age in population: 6.5
Maximum age in population: 8.875
Average age in population: 7.6135625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2572739
--- Timings ---
Current time: 1559582787571 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 64.2%
Fitness Testing:      4.5 seconds, 27.1%
Report:               1.3 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 25                 
Correct output: 63                  | Program output: 83                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 13                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 66                 
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 41                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 21                 
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 29                 
Correct output: 32                  | Program output: 32                 
Correct output: 34                  | Program output: 43                 
Correct output: 20                  | Program output: 46                 
Correct output: 15                  | Program output: 43                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 16                 
Correct output: -72                 | Program output: -46                
Correct output: -99                 | Program output: -54                
Correct output: -88                 | Program output: -56                
Correct output: -67                 | Program output: -43                
Correct output: 20                  | Program output: 55                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: 77                 
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -28                 | Program output: -11                
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -30                
Correct output: -52                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: -64                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -100                | Program output: 52                 
Correct output: -82                 | Program output: -82                
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: -11                
Correct output: -88                 | Program output: -5                 
Correct output: -53                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: 17                 
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: 54                 
Correct output: -73                 | Program output: -61                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction tagged_232} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (tagged_232 integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction tagged_232} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (tagged_232 integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 915 900 618 43 619 593 915 35 915)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (269 915 900 618 43 619 593 915 35 915)
Population mean number of perfect (error zero) cases: 5.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_330} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap tagged_330 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 4.178
Median total errors in population: 3
Error averages by case: (0.731 0.085 0.1 0.382 0.957 0.381 0.407 0.085 0.965 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.739
Average program size in population (points): 73.464
Average percent parens in population: 0.186
Minimum age in population: 7.5
Maximum age in population: 10.6875
Average age in population: 9.31740625
Median age in population: 9.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2819773
--- Timings ---
Current time: 1559582790059 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.6 seconds, 66.0%
Fitness Testing:      4.8 seconds, 25.1%
Report:               1.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 210
Test mean error for best: 0.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 41                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 34                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -46                
Correct output: -99                 | Program output: -54                
Correct output: -88                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -74                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -25                
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -50                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -33                
Correct output: -65                 | Program output: -65                
Correct output: -28                 | Program output: -11                
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -30                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: 7                  
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_330} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_while (exec_eq) integer_dup_items exec_dup () exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap tagged_330 integer_min integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) boolean_dup_items integer_yank in2 integer_lte exec_when (exec_when (in4 exec_do*while ()) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 75
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_330} {:close 0, :instruction integer_min} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_do*while} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_while (exec_eq) integer_dup_items exec_dup () exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap tagged_330 integer_min integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) boolean_dup_items integer_yank in2 integer_lte exec_when (exec_when (in4 exec_do*while ()) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 75
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (660 403 701 700 403 176 443 700 406 584)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (660 403 701 700 403 176 443 700 406 584)
Population mean number of perfect (error zero) cases: 5.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth) ())))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 68
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 4.824
Median total errors in population: 4
Error averages by case: (0.34 0.597 0.299 0.3 0.597 0.824 0.557 0.3 0.594 0.416)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.099
Average program size in population (points): 73.729
Average percent parens in population: 0.185
Minimum age in population: 9.0
Maximum age in population: 12.40625
Average age in population: 11.03896875
Median age in population: 11.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3080033
--- Timings ---
Current time: 1559582792520 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.5 seconds, 67.2%
Fitness Testing:      5.1 seconds, 23.7%
Report:               1.8 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -28                 | Program output: -28                
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min integer_min integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_inc exec_y_when_autoconstructing (exec_when (boolean_empty) exec_yankdup) integer_fromboolean exec_do*range (integer_eq integer_gt integer_yankdup integer_yankdup) boolean_dup_items) boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) (integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 86
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 in2 integer_yank exec_eq integer_dup_items in1 integer_swap in3 integer_min integer_min integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_inc exec_y_when_autoconstructing (exec_when (boolean_empty) exec_yankdup) integer_fromboolean exec_do*range (integer_eq integer_gt integer_yankdup integer_yankdup) boolean_dup_items) boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) (integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 86
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 740 272 743 743 767 272 272 684 766)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (631 740 272 743 743 767 272 272 684 766)
Population mean number of perfect (error zero) cases: 5.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction 16} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction 47} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup_items} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 2, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth})
Best program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 66
Size: 79
Percent parens: 0.165
--- Population Statistics ---
Average total errors in population: 4.11
Median total errors in population: 3
Error averages by case: (0.369 0.26 0.728 0.257 0.257 0.233 0.728 0.728 0.316 0.234)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.468
Average program size in population (points): 73.08
Average percent parens in population: 0.185
Minimum age in population: 11.125
Maximum age in population: 14.15625
Average age in population: 12.677265625
Median age in population: 12.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3486738
--- Timings ---
Current time: 1559582795185 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.4 seconds, 67.8%
Fitness Testing:      5.6 seconds, 23.1%
Report:               2.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 79


Auto-simplifying with starting size: 79
step: 0
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 500
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1000
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1500
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2000
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2500
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3000
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3500
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4000
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4500
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 5000
program: (exec_while (exec_eq) integer_dup_items in1 integer_add in4 in2 integer_yank exec_eq integer_dup_items in1 integer_swap boolean_swap integer_min in1 integer_swap in3 integer_min in2 integer_min print_integer exec_shove (integer_lte in4 exec_pop (integer_shove integer_lte integer_rot 16 boolean_frominteger exec_s_when_autoconstructing (integer_dup_items integer_yank integer_swap integer_dec exec_do*while (boolean_dup_items integer_dec print_boolean) exec_do*times (boolean_yankdup integer_fromboolean 47 integer_rot integer_pop boolean_or integer_dup integer_yankdup) boolean_dup_items) (boolean_empty integer_swap exec_y (exec_dup_items) exec_y ()) (boolean_dup_items integer_yank in2) integer_lte) exec_when (exec_when (in4 exec_yankdup)) boolean_dup boolean_dup_times boolean_dup_times integer_stackdepth))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 28                  | Program output: 28                 
Correct output: -40                 | Program output: -40                
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: 63                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -19                 | Program output: -19                
Correct output: 15                  | Program output: 15                 
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: 58                  | Program output: 58                 
Correct output: -31                 | Program output: -31                
Correct output: 56                  | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: 74                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 75                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 29                  | Program output: 29                 
Correct output: 20                  | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 32                  | Program output: 32                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: -72                 | Program output: -72                
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: -88                
Correct output: -67                 | Program output: -67                
Correct output: 20                  | Program output: 20                 
Correct output: -87                 | Program output: -87                
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -62                 | Program output: -62                
Correct output: -44                 | Program output: -44                
Correct output: -94                 | Program output: -94                
Correct output: -72                 | Program output: -72                
Correct output: -51                 | Program output: -51                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -55                 | Program output: -55                
Correct output: -65                 | Program output: -65                
Correct output: -28                 | Program output: -28                
Correct output: -51                 | Program output: -51                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -83                
Correct output: -56                 | Program output: -56                
Correct output: -52                 | Program output: -52                
Correct output: -100                | Program output: -100               
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -82                 | Program output: -82                
Correct output: -78                 | Program output: -78                
Correct output: -7                  | Program output: -7                 
Correct output: -52                 | Program output: -52                
Correct output: -88                 | Program output: -88                
Correct output: -53                 | Program output: -53                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -48                 | Program output: -48                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -98                 | Program output: -98                
Correct output: 66                  | Program output: 66                 
Correct output: -90                 | Program output: -90                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
;;******************************
