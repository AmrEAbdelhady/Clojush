Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 49 49 49] -5] [[-23 86 86 86] -23] [[-42 -42 -42 1] -42] [[2 2 2 -22] -22] [[-60 -67 -67 -67] -67] [[92 -72 92 92] -72] [[-40 -40 -40 19] -40] [[78 -97 -97 -97] -97] [[-6 -6 -6 -6] -6] [[95 95 -41 95] -41] [(49 49 49 49) 49] [(48 48 48 48) 48] [(-25 -25 -25 -25) -25] [(-2 -2 -2 -2) -2] [(58 58 58 58) 58] [(68 19 87 34) 19] [(42 9 69 39) 9] [(18 54 75 71) 18] [(62 72 23 61) 23] [(67 56 63 68) 56] [(90 53 5 21) 5] [(48 93 42 43) 42] [(78 78 53 12) 12] [(30 42 89 100) 30] [(90 10 44 10) 10] [(64 50 74 9) 9] [(57 29 92 7) 7] [(65 22 14 19) 14] [(25 28 6 32) 6] [(15 1 48 87) 1] [(35 77 83 34) 34] [(99 22 63 23) 22] [(45 19 84 87) 19] [(51 74 4 59) 4] [(40 44 91 96) 40] [(-44 -35 97 99) -44] [(0 51 65 -17) -17] [(-62 -10 -68 -24) -68] [(-95 -14 -34 84) -95] [(78 100 -81 -64) -81] [(-48 12 -88 41) -88] [(68 -56 35 -58) -58] [(70 84 -10 13) -10] [(-99 -1 -74 40) -99] [(-64 -27 -81 3) -81] [(78 1 33 93) 1] [(-8 42 -96 -62) -96] [(78 22 21 -13) -13] [(-56 67 -51 -49) -56] [(93 -58 22 5) -58] [(-59 91 70 82) -59] [(15 -96 -24 26) -96] [(-99 46 89 -88) -99] [(86 64 -92 -74) -92] [(63 77 64 42) 42] [(52 -64 65 28) -64] [(30 -22 43 -51) -51] [(-71 -59 -79 -47) -79] [(-49 -86 -28 35) -86] [(69 23 85 50) 23] [(21 1 -11 24) -11] [(-79 76 85 100) -79] [(-32 -83 -80 15) -83] [(88 96 -7 35) -7] [(55 -70 27 21) -70] [(-78 -68 31 44) -78] [(96 -4 -51 -18) -51] [(8 25 84 -5) -5] [(-11 -58 -45 -17) -58] [(-47 52 -75 27) -75] [(-40 -42 -52 -95) -95] [(14 41 -10 -63) -63] [(76 26 10 -85) -85] [(-1 20 -23 68) -23] [(-57 -81 -26 -37) -81] [(-71 19 -20 -19) -71] [(26 -84 -10 -70) -84] [(72 39 12 -5) -5] [(84 28 -61 -60) -61] [(-26 81 5 50) -26] [(-80 -14 25 22) -80] [(50 -32 21 33) -32] [(-79 -99 -16 69) -99] [(22 -13 80 -47) -47] [(96 67 23 19) 19] [(28 59 -19 -72) -72] [(-92 -12 82 64) -92] [(-8 27 -6 -28) -28] [(-42 57 52 -37) -42] [(-59 65 85 56) -59] [(62 34 59 -76) -76] [(56 -58 99 76) -58] [(-65 -77 -55 -87) -87] [(-74 -15 50 -64) -74] [(-47 -6 -18 -66) -66])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-5 49 49 49] -5]
Train Case:   6 | Input/Output: [[-23 86 86 86] -23]
Train Case:   7 | Input/Output: [[-42 -42 -42 1] -42]
Train Case:   8 | Input/Output: [[2 2 2 -22] -22]
Train Case:   9 | Input/Output: [[-60 -67 -67 -67] -67]
Train Case:  10 | Input/Output: [[92 -72 92 92] -72]
Train Case:  11 | Input/Output: [[-40 -40 -40 19] -40]
Train Case:  12 | Input/Output: [[78 -97 -97 -97] -97]
Train Case:  13 | Input/Output: [[-6 -6 -6 -6] -6]
Train Case:  14 | Input/Output: [[95 95 -41 95] -41]
Train Case:  15 | Input/Output: [(49 49 49 49) 49]
Train Case:  16 | Input/Output: [(48 48 48 48) 48]
Train Case:  17 | Input/Output: [(-25 -25 -25 -25) -25]
Train Case:  18 | Input/Output: [(-2 -2 -2 -2) -2]
Train Case:  19 | Input/Output: [(58 58 58 58) 58]
Train Case:  20 | Input/Output: [(68 19 87 34) 19]
Train Case:  21 | Input/Output: [(42 9 69 39) 9]
Train Case:  22 | Input/Output: [(18 54 75 71) 18]
Train Case:  23 | Input/Output: [(62 72 23 61) 23]
Train Case:  24 | Input/Output: [(67 56 63 68) 56]
Train Case:  25 | Input/Output: [(90 53 5 21) 5]
Train Case:  26 | Input/Output: [(48 93 42 43) 42]
Train Case:  27 | Input/Output: [(78 78 53 12) 12]
Train Case:  28 | Input/Output: [(30 42 89 100) 30]
Train Case:  29 | Input/Output: [(90 10 44 10) 10]
Train Case:  30 | Input/Output: [(64 50 74 9) 9]
Train Case:  31 | Input/Output: [(57 29 92 7) 7]
Train Case:  32 | Input/Output: [(65 22 14 19) 14]
Train Case:  33 | Input/Output: [(25 28 6 32) 6]
Train Case:  34 | Input/Output: [(15 1 48 87) 1]
Train Case:  35 | Input/Output: [(35 77 83 34) 34]
Train Case:  36 | Input/Output: [(99 22 63 23) 22]
Train Case:  37 | Input/Output: [(45 19 84 87) 19]
Train Case:  38 | Input/Output: [(51 74 4 59) 4]
Train Case:  39 | Input/Output: [(40 44 91 96) 40]
Train Case:  40 | Input/Output: [(-44 -35 97 99) -44]
Train Case:  41 | Input/Output: [(0 51 65 -17) -17]
Train Case:  42 | Input/Output: [(-62 -10 -68 -24) -68]
Train Case:  43 | Input/Output: [(-95 -14 -34 84) -95]
Train Case:  44 | Input/Output: [(78 100 -81 -64) -81]
Train Case:  45 | Input/Output: [(-48 12 -88 41) -88]
Train Case:  46 | Input/Output: [(68 -56 35 -58) -58]
Train Case:  47 | Input/Output: [(70 84 -10 13) -10]
Train Case:  48 | Input/Output: [(-99 -1 -74 40) -99]
Train Case:  49 | Input/Output: [(-64 -27 -81 3) -81]
Train Case:  50 | Input/Output: [(78 1 33 93) 1]
Train Case:  51 | Input/Output: [(-8 42 -96 -62) -96]
Train Case:  52 | Input/Output: [(78 22 21 -13) -13]
Train Case:  53 | Input/Output: [(-56 67 -51 -49) -56]
Train Case:  54 | Input/Output: [(93 -58 22 5) -58]
Train Case:  55 | Input/Output: [(-59 91 70 82) -59]
Train Case:  56 | Input/Output: [(15 -96 -24 26) -96]
Train Case:  57 | Input/Output: [(-99 46 89 -88) -99]
Train Case:  58 | Input/Output: [(86 64 -92 -74) -92]
Train Case:  59 | Input/Output: [(63 77 64 42) 42]
Train Case:  60 | Input/Output: [(52 -64 65 28) -64]
Train Case:  61 | Input/Output: [(30 -22 43 -51) -51]
Train Case:  62 | Input/Output: [(-71 -59 -79 -47) -79]
Train Case:  63 | Input/Output: [(-49 -86 -28 35) -86]
Train Case:  64 | Input/Output: [(69 23 85 50) 23]
Train Case:  65 | Input/Output: [(21 1 -11 24) -11]
Train Case:  66 | Input/Output: [(-79 76 85 100) -79]
Train Case:  67 | Input/Output: [(-32 -83 -80 15) -83]
Train Case:  68 | Input/Output: [(88 96 -7 35) -7]
Train Case:  69 | Input/Output: [(55 -70 27 21) -70]
Train Case:  70 | Input/Output: [(-78 -68 31 44) -78]
Train Case:  71 | Input/Output: [(96 -4 -51 -18) -51]
Train Case:  72 | Input/Output: [(8 25 84 -5) -5]
Train Case:  73 | Input/Output: [(-11 -58 -45 -17) -58]
Train Case:  74 | Input/Output: [(-47 52 -75 27) -75]
Train Case:  75 | Input/Output: [(-40 -42 -52 -95) -95]
Train Case:  76 | Input/Output: [(14 41 -10 -63) -63]
Train Case:  77 | Input/Output: [(76 26 10 -85) -85]
Train Case:  78 | Input/Output: [(-1 20 -23 68) -23]
Train Case:  79 | Input/Output: [(-57 -81 -26 -37) -81]
Train Case:  80 | Input/Output: [(-71 19 -20 -19) -71]
Train Case:  81 | Input/Output: [(26 -84 -10 -70) -84]
Train Case:  82 | Input/Output: [(72 39 12 -5) -5]
Train Case:  83 | Input/Output: [(84 28 -61 -60) -61]
Train Case:  84 | Input/Output: [(-26 81 5 50) -26]
Train Case:  85 | Input/Output: [(-80 -14 25 22) -80]
Train Case:  86 | Input/Output: [(50 -32 21 33) -32]
Train Case:  87 | Input/Output: [(-79 -99 -16 69) -99]
Train Case:  88 | Input/Output: [(22 -13 80 -47) -47]
Train Case:  89 | Input/Output: [(96 67 23 19) 19]
Train Case:  90 | Input/Output: [(28 59 -19 -72) -72]
Train Case:  91 | Input/Output: [(-92 -12 82 64) -92]
Train Case:  92 | Input/Output: [(-8 27 -6 -28) -28]
Train Case:  93 | Input/Output: [(-42 57 52 -37) -42]
Train Case:  94 | Input/Output: [(-59 65 85 56) -59]
Train Case:  95 | Input/Output: [(62 34 59 -76) -76]
Train Case:  96 | Input/Output: [(56 -58 99 76) -58]
Train Case:  97 | Input/Output: [(-65 -77 -55 -87) -87]
Train Case:  98 | Input/Output: [(-74 -15 50 -64) -74]
Train Case:  99 | Input/Output: [(-47 -6 -18 -66) -66]
Test Case:   0 | Input/Output: [[-20 -20 -20 20] -20]
Test Case:   1 | Input/Output: [[-83 -13 -83 -83] -83]
Test Case:   2 | Input/Output: [[8 8 8 -85] -85]
Test Case:   3 | Input/Output: [[60 -23 -23 -23] -23]
Test Case:   4 | Input/Output: [[-36 -36 87 -36] -36]
Test Case:   5 | Input/Output: [[-52 -52 -52 -90] -90]
Test Case:   6 | Input/Output: [[-66 -66 -66 -69] -69]
Test Case:   7 | Input/Output: [[-24 -24 -24 -38] -38]
Test Case:   8 | Input/Output: [[-72 -72 -72 -50] -72]
Test Case:   9 | Input/Output: [[-78 -78 -89 -78] -89]
Test Case:  10 | Input/Output: [[-76 67 -76 -76] -76]
Test Case:  11 | Input/Output: [[73 73 -88 73] -88]
Test Case:  12 | Input/Output: [[-71 -71 97 -71] -71]
Test Case:  13 | Input/Output: [[48 48 48 41] 41]
Test Case:  14 | Input/Output: [[5 5 -1 5] -1]
Test Case:  15 | Input/Output: [[3 3 44 3] 3]
Test Case:  16 | Input/Output: [[-44 -44 -44 -45] -45]
Test Case:  17 | Input/Output: [[-93 64 64 64] -93]
Test Case:  18 | Input/Output: [[48 48 -45 48] -45]
Test Case:  19 | Input/Output: [[-91 -69 -69 -69] -91]
Test Case:  20 | Input/Output: [[-30 -45 -45 -45] -45]
Test Case:  21 | Input/Output: [[-7 -47 -7 -7] -47]
Test Case:  22 | Input/Output: [[-72 -72 -72 -95] -95]
Test Case:  23 | Input/Output: [[-92 -92 -92 -87] -92]
Test Case:  24 | Input/Output: [[-36 -36 -88 -36] -88]
Test Case:  25 | Input/Output: [[58 49 58 58] 49]
Test Case:  26 | Input/Output: [[-43 -43 0 -43] -43]
Test Case:  27 | Input/Output: [[48 -75 48 48] -75]
Test Case:  28 | Input/Output: [[-76 9 -76 -76] -76]
Test Case:  29 | Input/Output: [[-31 -31 -76 -31] -76]
Test Case:  30 | Input/Output: [[15 15 15 -74] -74]
Test Case:  31 | Input/Output: [[-41 40 40 40] -41]
Test Case:  32 | Input/Output: [[-44 -44 -98 -44] -98]
Test Case:  33 | Input/Output: [[96 96 -61 96] -61]
Test Case:  34 | Input/Output: [[68 68 68 -57] -57]
Test Case:  35 | Input/Output: [[-67 6 -67 -67] -67]
Test Case:  36 | Input/Output: [[49 -17 -17 -17] -17]
Test Case:  37 | Input/Output: [[6 6 6 -2] -2]
Test Case:  38 | Input/Output: [[-32 -32 75 -32] -32]
Test Case:  39 | Input/Output: [[-61 -48 -48 -48] -61]
Test Case:  40 | Input/Output: [[-69 10 10 10] -69]
Test Case:  41 | Input/Output: [[-12 -66 -66 -66] -66]
Test Case:  42 | Input/Output: [[7 7 -88 7] -88]
Test Case:  43 | Input/Output: [[39 39 -21 39] -21]
Test Case:  44 | Input/Output: [[26 26 83 26] 26]
Test Case:  45 | Input/Output: [[68 68 -87 68] -87]
Test Case:  46 | Input/Output: [[59 -95 59 59] -95]
Test Case:  47 | Input/Output: [[-1 -1 -1 -80] -80]
Test Case:  48 | Input/Output: [[-48 -48 54 -48] -48]
Test Case:  49 | Input/Output: [[-27 -27 -27 -85] -85]
Test Case:  50 | Input/Output: [[41 41 -73 41] -73]
Test Case:  51 | Input/Output: [[62 62 68 62] 62]
Test Case:  52 | Input/Output: [[-5 -48 -5 -5] -48]
Test Case:  53 | Input/Output: [[8 66 66 66] 8]
Test Case:  54 | Input/Output: [[-3 -3 -33 -3] -33]
Test Case:  55 | Input/Output: [[-61 -76 -61 -61] -76]
Test Case:  56 | Input/Output: [[-86 24 24 24] -86]
Test Case:  57 | Input/Output: [[71 -64 71 71] -64]
Test Case:  58 | Input/Output: [[36 -35 36 36] -35]
Test Case:  59 | Input/Output: [[-42 -34 -34 -34] -42]
Test Case:  60 | Input/Output: [[98 37 98 98] 37]
Test Case:  61 | Input/Output: [[-44 -44 -65 -44] -65]
Test Case:  62 | Input/Output: [[59 59 59 -56] -56]
Test Case:  63 | Input/Output: [[21 -85 -85 -85] -85]
Test Case:  64 | Input/Output: [[63 32 32 32] 32]
Test Case:  65 | Input/Output: [[-66 -89 -89 -89] -89]
Test Case:  66 | Input/Output: [[34 96 34 34] 34]
Test Case:  67 | Input/Output: [[-49 -60 -60 -60] -60]
Test Case:  68 | Input/Output: [[49 49 -5 49] -5]
Test Case:  69 | Input/Output: [[0 25 25 25] 0]
Test Case:  70 | Input/Output: [[40 40 -16 40] -16]
Test Case:  71 | Input/Output: [[-8 39 -8 -8] -8]
Test Case:  72 | Input/Output: [[-31 -31 41 -31] -31]
Test Case:  73 | Input/Output: [[92 87 92 92] 87]
Test Case:  74 | Input/Output: [[71 71 -26 71] -26]
Test Case:  75 | Input/Output: [[26 26 -36 26] -36]
Test Case:  76 | Input/Output: [[87 87 -62 87] -62]
Test Case:  77 | Input/Output: [[-44 -44 -46 -44] -46]
Test Case:  78 | Input/Output: [[-55 -55 -18 -55] -55]
Test Case:  79 | Input/Output: [[-95 -95 -95 -17] -95]
Test Case:  80 | Input/Output: [[22 22 1 22] 1]
Test Case:  81 | Input/Output: [[-26 -100 -26 -26] -100]
Test Case:  82 | Input/Output: [[49 49 49 -81] -81]
Test Case:  83 | Input/Output: [[8 8 23 8] 8]
Test Case:  84 | Input/Output: [[-31 -54 -31 -31] -54]
Test Case:  85 | Input/Output: [[55 45 45 45] 45]
Test Case:  86 | Input/Output: [[11 -10 -10 -10] -10]
Test Case:  87 | Input/Output: [[74 -44 -44 -44] -44]
Test Case:  88 | Input/Output: [[-74 12 12 12] -74]
Test Case:  89 | Input/Output: [[32 -79 32 32] -79]
Test Case:  90 | Input/Output: [[21 67 67 67] 21]
Test Case:  91 | Input/Output: [[-14 -62 -14 -14] -62]
Test Case:  92 | Input/Output: [[51 35 51 51] 35]
Test Case:  93 | Input/Output: [[-83 -83 -83 -43] -83]
Test Case:  94 | Input/Output: [[30 67 30 30] 30]
Test Case:  95 | Input/Output: [[42 42 42 -40] -40]
Test Case:  96 | Input/Output: [[-35 -35 -52 -35] -52]
Test Case:  97 | Input/Output: [[-81 -81 3 -81] -81]
Test Case:  98 | Input/Output: [[32 32 32 65] 32]
Test Case:  99 | Input/Output: [[-16 -16 94 -16] -16]
Test Case: 100 | Input/Output: [(57 57 57 57) 57]
Test Case: 101 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 102 | Input/Output: [(12 12 12 12) 12]
Test Case: 103 | Input/Output: [(83 83 83 83) 83]
Test Case: 104 | Input/Output: [(17 17 17 17) 17]
Test Case: 105 | Input/Output: [(42 42 42 42) 42]
Test Case: 106 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 107 | Input/Output: [(76 76 76 76) 76]
Test Case: 108 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 109 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 110 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 111 | Input/Output: [(13 13 13 13) 13]
Test Case: 112 | Input/Output: [(81 81 81 81) 81]
Test Case: 113 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 114 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 115 | Input/Output: [(51 51 51 51) 51]
Test Case: 116 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 117 | Input/Output: [(30 30 30 30) 30]
Test Case: 118 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 119 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 120 | Input/Output: [(21 21 21 21) 21]
Test Case: 121 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 122 | Input/Output: [(35 35 35 35) 35]
Test Case: 123 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 124 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 125 | Input/Output: [(97 97 97 97) 97]
Test Case: 126 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 127 | Input/Output: [(1 1 1 1) 1]
Test Case: 128 | Input/Output: [(32 32 32 32) 32]
Test Case: 129 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 130 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 131 | Input/Output: [(27 27 27 27) 27]
Test Case: 132 | Input/Output: [(74 74 74 74) 74]
Test Case: 133 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 134 | Input/Output: [(81 81 81 81) 81]
Test Case: 135 | Input/Output: [(36 36 36 36) 36]
Test Case: 136 | Input/Output: [(45 45 45 45) 45]
Test Case: 137 | Input/Output: [(38 38 38 38) 38]
Test Case: 138 | Input/Output: [(94 94 94 94) 94]
Test Case: 139 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 140 | Input/Output: [(20 20 20 20) 20]
Test Case: 141 | Input/Output: [(9 9 9 9) 9]
Test Case: 142 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 143 | Input/Output: [(25 25 25 25) 25]
Test Case: 144 | Input/Output: [(8 8 8 8) 8]
Test Case: 145 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 146 | Input/Output: [(37 37 37 37) 37]
Test Case: 147 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 148 | Input/Output: [(99 99 99 99) 99]
Test Case: 149 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 150 | Input/Output: [(53 53 53 53) 53]
Test Case: 151 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 152 | Input/Output: [(7 7 7 7) 7]
Test Case: 153 | Input/Output: [(22 22 22 22) 22]
Test Case: 154 | Input/Output: [(39 39 39 39) 39]
Test Case: 155 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 156 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 157 | Input/Output: [(59 59 59 59) 59]
Test Case: 158 | Input/Output: [(55 55 55 55) 55]
Test Case: 159 | Input/Output: [(50 50 50 50) 50]
Test Case: 160 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 161 | Input/Output: [(62 62 62 62) 62]
Test Case: 162 | Input/Output: [(4 4 4 4) 4]
Test Case: 163 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 164 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 165 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 166 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 167 | Input/Output: [(3 3 3 3) 3]
Test Case: 168 | Input/Output: [(40 40 40 40) 40]
Test Case: 169 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 170 | Input/Output: [(92 92 92 92) 92]
Test Case: 171 | Input/Output: [(71 71 71 71) 71]
Test Case: 172 | Input/Output: [(49 49 49 49) 49]
Test Case: 173 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 174 | Input/Output: [(46 46 46 46) 46]
Test Case: 175 | Input/Output: [(92 92 92 92) 92]
Test Case: 176 | Input/Output: [(94 94 94 94) 94]
Test Case: 177 | Input/Output: [(98 98 98 98) 98]
Test Case: 178 | Input/Output: [(11 11 11 11) 11]
Test Case: 179 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 180 | Input/Output: [(85 85 85 85) 85]
Test Case: 181 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 182 | Input/Output: [(8 8 8 8) 8]
Test Case: 183 | Input/Output: [(8 8 8 8) 8]
Test Case: 184 | Input/Output: [(75 75 75 75) 75]
Test Case: 185 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 186 | Input/Output: [(10 10 10 10) 10]
Test Case: 187 | Input/Output: [(81 81 81 81) 81]
Test Case: 188 | Input/Output: [(0 0 0 0) 0]
Test Case: 189 | Input/Output: [(1 1 1 1) 1]
Test Case: 190 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 191 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 192 | Input/Output: [(84 84 84 84) 84]
Test Case: 193 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 194 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 195 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 196 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 197 | Input/Output: [(84 84 84 84) 84]
Test Case: 198 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 199 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 200 | Input/Output: [(68 34 50 31) 31]
Test Case: 201 | Input/Output: [(24 34 46 43) 24]
Test Case: 202 | Input/Output: [(99 12 38 52) 12]
Test Case: 203 | Input/Output: [(25 0 0 45) 0]
Test Case: 204 | Input/Output: [(23 2 70 33) 2]
Test Case: 205 | Input/Output: [(3 64 51 22) 3]
Test Case: 206 | Input/Output: [(17 15 6 53) 6]
Test Case: 207 | Input/Output: [(34 33 6 9) 6]
Test Case: 208 | Input/Output: [(67 61 24 11) 11]
Test Case: 209 | Input/Output: [(97 31 32 14) 14]
Test Case: 210 | Input/Output: [(61 53 41 85) 41]
Test Case: 211 | Input/Output: [(69 38 75 61) 38]
Test Case: 212 | Input/Output: [(13 80 62 71) 13]
Test Case: 213 | Input/Output: [(29 64 5 48) 5]
Test Case: 214 | Input/Output: [(76 60 27 79) 27]
Test Case: 215 | Input/Output: [(79 88 48 56) 48]
Test Case: 216 | Input/Output: [(55 55 67 78) 55]
Test Case: 217 | Input/Output: [(69 98 53 23) 23]
Test Case: 218 | Input/Output: [(94 71 14 44) 14]
Test Case: 219 | Input/Output: [(80 46 13 14) 13]
Test Case: 220 | Input/Output: [(29 97 85 72) 29]
Test Case: 221 | Input/Output: [(66 69 36 55) 36]
Test Case: 222 | Input/Output: [(38 31 14 34) 14]
Test Case: 223 | Input/Output: [(60 55 5 12) 5]
Test Case: 224 | Input/Output: [(26 31 23 63) 23]
Test Case: 225 | Input/Output: [(18 83 54 49) 18]
Test Case: 226 | Input/Output: [(53 66 66 65) 53]
Test Case: 227 | Input/Output: [(40 0 38 2) 0]
Test Case: 228 | Input/Output: [(40 19 28 17) 17]
Test Case: 229 | Input/Output: [(79 58 42 92) 42]
Test Case: 230 | Input/Output: [(84 28 4 31) 4]
Test Case: 231 | Input/Output: [(100 54 90 26) 26]
Test Case: 232 | Input/Output: [(48 95 87 58) 48]
Test Case: 233 | Input/Output: [(46 63 17 37) 17]
Test Case: 234 | Input/Output: [(1 48 50 84) 1]
Test Case: 235 | Input/Output: [(89 70 52 97) 52]
Test Case: 236 | Input/Output: [(7 69 16 33) 7]
Test Case: 237 | Input/Output: [(69 38 81 19) 19]
Test Case: 238 | Input/Output: [(70 74 92 83) 70]
Test Case: 239 | Input/Output: [(7 37 35 12) 7]
Test Case: 240 | Input/Output: [(7 94 37 2) 2]
Test Case: 241 | Input/Output: [(73 80 98 77) 73]
Test Case: 242 | Input/Output: [(19 74 8 91) 8]
Test Case: 243 | Input/Output: [(80 87 60 4) 4]
Test Case: 244 | Input/Output: [(89 60 55 78) 55]
Test Case: 245 | Input/Output: [(94 30 39 1) 1]
Test Case: 246 | Input/Output: [(34 11 24 29) 11]
Test Case: 247 | Input/Output: [(80 92 26 68) 26]
Test Case: 248 | Input/Output: [(1 62 95 56) 1]
Test Case: 249 | Input/Output: [(94 31 100 24) 24]
Test Case: 250 | Input/Output: [(37 30 7 47) 7]
Test Case: 251 | Input/Output: [(78 89 4 44) 4]
Test Case: 252 | Input/Output: [(30 89 30 48) 30]
Test Case: 253 | Input/Output: [(96 39 41 25) 25]
Test Case: 254 | Input/Output: [(66 85 72 23) 23]
Test Case: 255 | Input/Output: [(60 92 53 38) 38]
Test Case: 256 | Input/Output: [(45 17 80 34) 17]
Test Case: 257 | Input/Output: [(92 10 73 76) 10]
Test Case: 258 | Input/Output: [(57 12 4 95) 4]
Test Case: 259 | Input/Output: [(71 64 77 55) 55]
Test Case: 260 | Input/Output: [(57 24 18 79) 18]
Test Case: 261 | Input/Output: [(85 11 78 22) 11]
Test Case: 262 | Input/Output: [(55 75 82 78) 55]
Test Case: 263 | Input/Output: [(22 58 88 33) 22]
Test Case: 264 | Input/Output: [(96 9 76 50) 9]
Test Case: 265 | Input/Output: [(36 48 47 51) 36]
Test Case: 266 | Input/Output: [(13 10 41 72) 10]
Test Case: 267 | Input/Output: [(11 77 28 23) 11]
Test Case: 268 | Input/Output: [(28 57 42 61) 28]
Test Case: 269 | Input/Output: [(13 77 41 75) 13]
Test Case: 270 | Input/Output: [(23 46 74 75) 23]
Test Case: 271 | Input/Output: [(9 28 31 82) 9]
Test Case: 272 | Input/Output: [(19 74 16 37) 16]
Test Case: 273 | Input/Output: [(59 46 60 19) 19]
Test Case: 274 | Input/Output: [(93 38 81 31) 31]
Test Case: 275 | Input/Output: [(36 29 88 51) 29]
Test Case: 276 | Input/Output: [(47 62 44 85) 44]
Test Case: 277 | Input/Output: [(53 76 90 65) 53]
Test Case: 278 | Input/Output: [(22 67 21 21) 21]
Test Case: 279 | Input/Output: [(77 31 30 2) 2]
Test Case: 280 | Input/Output: [(71 99 83 7) 7]
Test Case: 281 | Input/Output: [(46 86 71 81) 46]
Test Case: 282 | Input/Output: [(97 18 99 68) 18]
Test Case: 283 | Input/Output: [(63 71 85 58) 58]
Test Case: 284 | Input/Output: [(80 88 28 47) 28]
Test Case: 285 | Input/Output: [(33 72 5 23) 5]
Test Case: 286 | Input/Output: [(60 61 67 7) 7]
Test Case: 287 | Input/Output: [(61 18 34 57) 18]
Test Case: 288 | Input/Output: [(18 84 63 25) 18]
Test Case: 289 | Input/Output: [(55 9 98 33) 9]
Test Case: 290 | Input/Output: [(81 40 5 71) 5]
Test Case: 291 | Input/Output: [(16 78 94 79) 16]
Test Case: 292 | Input/Output: [(79 83 61 9) 9]
Test Case: 293 | Input/Output: [(71 44 66 64) 44]
Test Case: 294 | Input/Output: [(15 79 18 64) 15]
Test Case: 295 | Input/Output: [(54 95 9 100) 9]
Test Case: 296 | Input/Output: [(92 34 33 46) 33]
Test Case: 297 | Input/Output: [(35 2 8 79) 2]
Test Case: 298 | Input/Output: [(6 26 100 73) 6]
Test Case: 299 | Input/Output: [(17 88 3 85) 3]
Test Case: 300 | Input/Output: [(81 64 60 18) 18]
Test Case: 301 | Input/Output: [(18 57 21 38) 18]
Test Case: 302 | Input/Output: [(93 87 73 84) 73]
Test Case: 303 | Input/Output: [(48 68 98 75) 48]
Test Case: 304 | Input/Output: [(19 92 78 70) 19]
Test Case: 305 | Input/Output: [(21 21 20 88) 20]
Test Case: 306 | Input/Output: [(94 32 89 0) 0]
Test Case: 307 | Input/Output: [(78 38 100 52) 38]
Test Case: 308 | Input/Output: [(45 37 86 24) 24]
Test Case: 309 | Input/Output: [(95 61 95 32) 32]
Test Case: 310 | Input/Output: [(73 43 11 24) 11]
Test Case: 311 | Input/Output: [(41 60 64 30) 30]
Test Case: 312 | Input/Output: [(55 10 93 79) 10]
Test Case: 313 | Input/Output: [(80 42 82 66) 42]
Test Case: 314 | Input/Output: [(64 2 3 11) 2]
Test Case: 315 | Input/Output: [(15 54 100 62) 15]
Test Case: 316 | Input/Output: [(33 84 81 45) 33]
Test Case: 317 | Input/Output: [(65 69 1 43) 1]
Test Case: 318 | Input/Output: [(72 29 47 3) 3]
Test Case: 319 | Input/Output: [(85 39 44 19) 19]
Test Case: 320 | Input/Output: [(12 93 98 86) 12]
Test Case: 321 | Input/Output: [(77 99 0 54) 0]
Test Case: 322 | Input/Output: [(59 59 35 49) 35]
Test Case: 323 | Input/Output: [(87 21 3 77) 3]
Test Case: 324 | Input/Output: [(25 95 14 80) 14]
Test Case: 325 | Input/Output: [(99 45 49 83) 45]
Test Case: 326 | Input/Output: [(65 13 99 1) 1]
Test Case: 327 | Input/Output: [(87 73 100 14) 14]
Test Case: 328 | Input/Output: [(61 50 9 90) 9]
Test Case: 329 | Input/Output: [(82 12 13 60) 12]
Test Case: 330 | Input/Output: [(90 29 71 3) 3]
Test Case: 331 | Input/Output: [(30 34 3 61) 3]
Test Case: 332 | Input/Output: [(19 57 73 7) 7]
Test Case: 333 | Input/Output: [(64 83 46 80) 46]
Test Case: 334 | Input/Output: [(54 11 59 15) 11]
Test Case: 335 | Input/Output: [(95 22 92 20) 20]
Test Case: 336 | Input/Output: [(52 44 52 16) 16]
Test Case: 337 | Input/Output: [(37 74 67 51) 37]
Test Case: 338 | Input/Output: [(77 20 24 68) 20]
Test Case: 339 | Input/Output: [(99 93 29 3) 3]
Test Case: 340 | Input/Output: [(78 78 70 70) 70]
Test Case: 341 | Input/Output: [(12 1 43 77) 1]
Test Case: 342 | Input/Output: [(70 58 96 41) 41]
Test Case: 343 | Input/Output: [(100 42 66 14) 14]
Test Case: 344 | Input/Output: [(6 76 30 46) 6]
Test Case: 345 | Input/Output: [(24 4 91 87) 4]
Test Case: 346 | Input/Output: [(80 29 55 30) 29]
Test Case: 347 | Input/Output: [(19 33 98 9) 9]
Test Case: 348 | Input/Output: [(24 69 76 97) 24]
Test Case: 349 | Input/Output: [(12 60 45 3) 3]
Test Case: 350 | Input/Output: [(26 20 81 49) 20]
Test Case: 351 | Input/Output: [(82 95 7 66) 7]
Test Case: 352 | Input/Output: [(76 78 4 94) 4]
Test Case: 353 | Input/Output: [(72 7 66 94) 7]
Test Case: 354 | Input/Output: [(90 90 26 81) 26]
Test Case: 355 | Input/Output: [(75 63 27 7) 7]
Test Case: 356 | Input/Output: [(53 7 88 5) 5]
Test Case: 357 | Input/Output: [(57 94 76 82) 57]
Test Case: 358 | Input/Output: [(26 62 19 51) 19]
Test Case: 359 | Input/Output: [(61 26 22 92) 22]
Test Case: 360 | Input/Output: [(5 98 11 38) 5]
Test Case: 361 | Input/Output: [(36 18 79 25) 18]
Test Case: 362 | Input/Output: [(0 65 82 52) 0]
Test Case: 363 | Input/Output: [(39 16 33 12) 12]
Test Case: 364 | Input/Output: [(100 12 73 56) 12]
Test Case: 365 | Input/Output: [(0 15 39 30) 0]
Test Case: 366 | Input/Output: [(53 42 54 75) 42]
Test Case: 367 | Input/Output: [(19 26 33 24) 19]
Test Case: 368 | Input/Output: [(50 40 56 17) 17]
Test Case: 369 | Input/Output: [(19 37 96 54) 19]
Test Case: 370 | Input/Output: [(57 46 28 58) 28]
Test Case: 371 | Input/Output: [(34 92 62 91) 34]
Test Case: 372 | Input/Output: [(98 46 66 9) 9]
Test Case: 373 | Input/Output: [(23 28 33 13) 13]
Test Case: 374 | Input/Output: [(4 90 18 73) 4]
Test Case: 375 | Input/Output: [(45 28 5 21) 5]
Test Case: 376 | Input/Output: [(87 66 25 33) 25]
Test Case: 377 | Input/Output: [(33 64 8 28) 8]
Test Case: 378 | Input/Output: [(27 72 87 78) 27]
Test Case: 379 | Input/Output: [(20 63 72 80) 20]
Test Case: 380 | Input/Output: [(71 62 92 5) 5]
Test Case: 381 | Input/Output: [(48 31 33 48) 31]
Test Case: 382 | Input/Output: [(89 64 31 50) 31]
Test Case: 383 | Input/Output: [(33 57 89 26) 26]
Test Case: 384 | Input/Output: [(26 6 100 76) 6]
Test Case: 385 | Input/Output: [(55 45 1 25) 1]
Test Case: 386 | Input/Output: [(31 0 63 2) 0]
Test Case: 387 | Input/Output: [(99 18 82 4) 4]
Test Case: 388 | Input/Output: [(45 95 65 68) 45]
Test Case: 389 | Input/Output: [(58 74 55 65) 55]
Test Case: 390 | Input/Output: [(69 69 7 40) 7]
Test Case: 391 | Input/Output: [(42 13 97 17) 13]
Test Case: 392 | Input/Output: [(42 57 64 51) 42]
Test Case: 393 | Input/Output: [(52 10 87 11) 10]
Test Case: 394 | Input/Output: [(45 50 26 98) 26]
Test Case: 395 | Input/Output: [(87 88 48 0) 0]
Test Case: 396 | Input/Output: [(74 62 9 55) 9]
Test Case: 397 | Input/Output: [(92 68 32 48) 32]
Test Case: 398 | Input/Output: [(49 60 14 29) 14]
Test Case: 399 | Input/Output: [(13 13 6 100) 6]
Test Case: 400 | Input/Output: [(-38 -72 14 -89) -89]
Test Case: 401 | Input/Output: [(-79 15 -28 2) -79]
Test Case: 402 | Input/Output: [(-42 51 11 34) -42]
Test Case: 403 | Input/Output: [(51 -16 7 -10) -16]
Test Case: 404 | Input/Output: [(-11 84 -16 58) -16]
Test Case: 405 | Input/Output: [(53 -11 8 -100) -100]
Test Case: 406 | Input/Output: [(-24 37 72 30) -24]
Test Case: 407 | Input/Output: [(33 -88 38 -70) -88]
Test Case: 408 | Input/Output: [(-9 27 58 76) -9]
Test Case: 409 | Input/Output: [(61 51 30 -57) -57]
Test Case: 410 | Input/Output: [(39 -81 -5 4) -81]
Test Case: 411 | Input/Output: [(41 -68 -46 -74) -74]
Test Case: 412 | Input/Output: [(-35 68 -64 34) -64]
Test Case: 413 | Input/Output: [(-67 80 -37 -28) -67]
Test Case: 414 | Input/Output: [(74 38 42 100) 38]
Test Case: 415 | Input/Output: [(29 -15 -11 -58) -58]
Test Case: 416 | Input/Output: [(27 56 59 86) 27]
Test Case: 417 | Input/Output: [(-25 93 66 90) -25]
Test Case: 418 | Input/Output: [(-41 -77 39 69) -77]
Test Case: 419 | Input/Output: [(16 57 83 -38) -38]
Test Case: 420 | Input/Output: [(36 80 68 16) 16]
Test Case: 421 | Input/Output: [(-58 7 33 -23) -58]
Test Case: 422 | Input/Output: [(65 -26 -35 -53) -53]
Test Case: 423 | Input/Output: [(19 69 70 -66) -66]
Test Case: 424 | Input/Output: [(-32 91 68 69) -32]
Test Case: 425 | Input/Output: [(1 -14 26 -2) -14]
Test Case: 426 | Input/Output: [(-18 66 -90 50) -90]
Test Case: 427 | Input/Output: [(40 -99 55 -10) -99]
Test Case: 428 | Input/Output: [(18 49 -70 20) -70]
Test Case: 429 | Input/Output: [(-65 89 11 49) -65]
Test Case: 430 | Input/Output: [(-72 9 9 -15) -72]
Test Case: 431 | Input/Output: [(87 -12 -38 73) -38]
Test Case: 432 | Input/Output: [(42 -72 24 13) -72]
Test Case: 433 | Input/Output: [(-45 16 4 54) -45]
Test Case: 434 | Input/Output: [(36 -49 63 4) -49]
Test Case: 435 | Input/Output: [(-65 -49 31 41) -65]
Test Case: 436 | Input/Output: [(84 38 -99 -72) -99]
Test Case: 437 | Input/Output: [(-91 83 -13 -82) -91]
Test Case: 438 | Input/Output: [(56 28 82 36) 28]
Test Case: 439 | Input/Output: [(67 -32 -32 -89) -89]
Test Case: 440 | Input/Output: [(-47 86 74 12) -47]
Test Case: 441 | Input/Output: [(-44 53 -66 -19) -66]
Test Case: 442 | Input/Output: [(74 -8 79 -1) -8]
Test Case: 443 | Input/Output: [(-21 78 -8 8) -21]
Test Case: 444 | Input/Output: [(22 3 -76 36) -76]
Test Case: 445 | Input/Output: [(-18 -79 -60 28) -79]
Test Case: 446 | Input/Output: [(-29 57 -70 -15) -70]
Test Case: 447 | Input/Output: [(8 26 -39 -16) -39]
Test Case: 448 | Input/Output: [(30 58 87 48) 30]
Test Case: 449 | Input/Output: [(-93 -16 -94 29) -94]
Test Case: 450 | Input/Output: [(-56 22 -52 -90) -90]
Test Case: 451 | Input/Output: [(40 -6 -81 30) -81]
Test Case: 452 | Input/Output: [(56 99 -33 22) -33]
Test Case: 453 | Input/Output: [(-82 69 -86 -70) -86]
Test Case: 454 | Input/Output: [(-60 -37 -79 -86) -86]
Test Case: 455 | Input/Output: [(66 70 -4 -25) -25]
Test Case: 456 | Input/Output: [(-50 -39 89 -50) -50]
Test Case: 457 | Input/Output: [(-86 44 8 -37) -86]
Test Case: 458 | Input/Output: [(91 -38 35 -61) -61]
Test Case: 459 | Input/Output: [(-6 -63 -79 -56) -79]
Test Case: 460 | Input/Output: [(-13 -84 77 2) -84]
Test Case: 461 | Input/Output: [(47 31 -76 72) -76]
Test Case: 462 | Input/Output: [(-64 -41 -93 14) -93]
Test Case: 463 | Input/Output: [(-85 -89 -11 100) -89]
Test Case: 464 | Input/Output: [(-19 -2 85 93) -19]
Test Case: 465 | Input/Output: [(28 -78 -13 -68) -78]
Test Case: 466 | Input/Output: [(-79 18 70 -13) -79]
Test Case: 467 | Input/Output: [(67 86 84 -72) -72]
Test Case: 468 | Input/Output: [(100 -15 -5 75) -15]
Test Case: 469 | Input/Output: [(74 -29 -8 -55) -55]
Test Case: 470 | Input/Output: [(-80 -62 -3 -37) -80]
Test Case: 471 | Input/Output: [(76 -43 14 71) -43]
Test Case: 472 | Input/Output: [(22 -75 85 24) -75]
Test Case: 473 | Input/Output: [(34 -85 75 -61) -85]
Test Case: 474 | Input/Output: [(23 -80 -86 20) -86]
Test Case: 475 | Input/Output: [(-71 31 31 28) -71]
Test Case: 476 | Input/Output: [(-82 41 -48 67) -82]
Test Case: 477 | Input/Output: [(-88 48 -25 27) -88]
Test Case: 478 | Input/Output: [(69 -56 73 97) -56]
Test Case: 479 | Input/Output: [(-73 -39 -46 -87) -87]
Test Case: 480 | Input/Output: [(-70 -8 -91 -38) -91]
Test Case: 481 | Input/Output: [(75 -22 49 93) -22]
Test Case: 482 | Input/Output: [(0 -74 -45 62) -74]
Test Case: 483 | Input/Output: [(-6 -43 -57 -25) -57]
Test Case: 484 | Input/Output: [(69 -56 -2 -93) -93]
Test Case: 485 | Input/Output: [(-76 58 -15 -1) -76]
Test Case: 486 | Input/Output: [(-67 98 -61 66) -67]
Test Case: 487 | Input/Output: [(-11 68 3 69) -11]
Test Case: 488 | Input/Output: [(-96 45 -78 -11) -96]
Test Case: 489 | Input/Output: [(-39 58 20 34) -39]
Test Case: 490 | Input/Output: [(26 0 -56 -49) -56]
Test Case: 491 | Input/Output: [(91 69 -63 53) -63]
Test Case: 492 | Input/Output: [(-9 72 98 49) -9]
Test Case: 493 | Input/Output: [(-44 -56 96 8) -56]
Test Case: 494 | Input/Output: [(-6 -42 -75 11) -75]
Test Case: 495 | Input/Output: [(92 82 62 -100) -100]
Test Case: 496 | Input/Output: [(-57 62 -16 -50) -57]
Test Case: 497 | Input/Output: [(7 28 50 -30) -30]
Test Case: 498 | Input/Output: [(97 -71 -26 -54) -71]
Test Case: 499 | Input/Output: [(-71 16 63 83) -71]
Test Case: 500 | Input/Output: [(100 22 26 46) 22]
Test Case: 501 | Input/Output: [(-29 10 7 -49) -49]
Test Case: 502 | Input/Output: [(6 -51 35 -84) -84]
Test Case: 503 | Input/Output: [(-78 12 -91 5) -91]
Test Case: 504 | Input/Output: [(-1 -98 -43 -97) -98]
Test Case: 505 | Input/Output: [(12 15 77 -94) -94]
Test Case: 506 | Input/Output: [(9 -88 99 -37) -88]
Test Case: 507 | Input/Output: [(-53 46 -27 -49) -53]
Test Case: 508 | Input/Output: [(88 100 9 22) 9]
Test Case: 509 | Input/Output: [(9 33 -69 2) -69]
Test Case: 510 | Input/Output: [(-41 59 -46 -29) -46]
Test Case: 511 | Input/Output: [(44 -13 -1 -49) -49]
Test Case: 512 | Input/Output: [(15 -40 29 -10) -40]
Test Case: 513 | Input/Output: [(-31 -34 50 -12) -34]
Test Case: 514 | Input/Output: [(-96 -80 89 -57) -96]
Test Case: 515 | Input/Output: [(-43 -69 -28 -69) -69]
Test Case: 516 | Input/Output: [(-76 -76 -80 -62) -80]
Test Case: 517 | Input/Output: [(-99 -25 -60 -73) -99]
Test Case: 518 | Input/Output: [(-22 -81 16 -48) -81]
Test Case: 519 | Input/Output: [(60 -53 -13 -63) -63]
Test Case: 520 | Input/Output: [(84 -59 -76 40) -76]
Test Case: 521 | Input/Output: [(-29 70 64 -26) -29]
Test Case: 522 | Input/Output: [(-86 8 36 -40) -86]
Test Case: 523 | Input/Output: [(17 83 -34 -69) -69]
Test Case: 524 | Input/Output: [(73 -11 54 -56) -56]
Test Case: 525 | Input/Output: [(-29 73 -66 -67) -67]
Test Case: 526 | Input/Output: [(-91 12 -41 -95) -95]
Test Case: 527 | Input/Output: [(-95 90 56 66) -95]
Test Case: 528 | Input/Output: [(72 15 36 94) 15]
Test Case: 529 | Input/Output: [(-62 -6 26 -6) -62]
Test Case: 530 | Input/Output: [(-7 -40 -19 -57) -57]
Test Case: 531 | Input/Output: [(22 -24 91 74) -24]
Test Case: 532 | Input/Output: [(73 97 79 -59) -59]
Test Case: 533 | Input/Output: [(-18 17 -53 100) -53]
Test Case: 534 | Input/Output: [(-25 -35 -76 82) -76]
Test Case: 535 | Input/Output: [(54 80 -98 -22) -98]
Test Case: 536 | Input/Output: [(-50 -23 96 40) -50]
Test Case: 537 | Input/Output: [(35 86 -94 73) -94]
Test Case: 538 | Input/Output: [(48 34 -9 55) -9]
Test Case: 539 | Input/Output: [(38 -46 -39 -6) -46]
Test Case: 540 | Input/Output: [(81 6 92 52) 6]
Test Case: 541 | Input/Output: [(-80 -94 -66 2) -94]
Test Case: 542 | Input/Output: [(-55 -16 23 -66) -66]
Test Case: 543 | Input/Output: [(64 50 88 -39) -39]
Test Case: 544 | Input/Output: [(-99 -71 31 38) -99]
Test Case: 545 | Input/Output: [(83 48 39 3) 3]
Test Case: 546 | Input/Output: [(-87 81 44 -70) -87]
Test Case: 547 | Input/Output: [(44 -86 76 77) -86]
Test Case: 548 | Input/Output: [(-84 36 -41 42) -84]
Test Case: 549 | Input/Output: [(-17 41 -66 88) -66]
Test Case: 550 | Input/Output: [(-78 -97 -22 -50) -97]
Test Case: 551 | Input/Output: [(-73 20 87 59) -73]
Test Case: 552 | Input/Output: [(64 2 -58 -30) -58]
Test Case: 553 | Input/Output: [(-79 -36 78 -83) -83]
Test Case: 554 | Input/Output: [(-63 -32 9 9) -63]
Test Case: 555 | Input/Output: [(60 -60 22 17) -60]
Test Case: 556 | Input/Output: [(31 45 38 40) 31]
Test Case: 557 | Input/Output: [(-86 43 -68 -55) -86]
Test Case: 558 | Input/Output: [(48 31 -69 28) -69]
Test Case: 559 | Input/Output: [(-97 42 -85 -100) -100]
Test Case: 560 | Input/Output: [(-34 -9 -43 48) -43]
Test Case: 561 | Input/Output: [(92 -74 -38 -30) -74]
Test Case: 562 | Input/Output: [(-97 -13 13 40) -97]
Test Case: 563 | Input/Output: [(-41 -58 -91 30) -91]
Test Case: 564 | Input/Output: [(-7 83 33 -65) -65]
Test Case: 565 | Input/Output: [(-6 14 17 -71) -71]
Test Case: 566 | Input/Output: [(26 -77 -31 57) -77]
Test Case: 567 | Input/Output: [(38 50 54 62) 38]
Test Case: 568 | Input/Output: [(13 30 78 -63) -63]
Test Case: 569 | Input/Output: [(71 69 96 -31) -31]
Test Case: 570 | Input/Output: [(97 -1 48 5) -1]
Test Case: 571 | Input/Output: [(-75 42 -1 -97) -97]
Test Case: 572 | Input/Output: [(-97 54 72 54) -97]
Test Case: 573 | Input/Output: [(44 92 54 23) 23]
Test Case: 574 | Input/Output: [(-56 54 -61 -67) -67]
Test Case: 575 | Input/Output: [(-22 5 -95 56) -95]
Test Case: 576 | Input/Output: [(16 -99 5 38) -99]
Test Case: 577 | Input/Output: [(59 21 -9 -1) -9]
Test Case: 578 | Input/Output: [(2 57 65 -27) -27]
Test Case: 579 | Input/Output: [(8 -84 15 52) -84]
Test Case: 580 | Input/Output: [(-79 -23 47 -28) -79]
Test Case: 581 | Input/Output: [(-59 -62 36 -49) -62]
Test Case: 582 | Input/Output: [(27 -69 84 64) -69]
Test Case: 583 | Input/Output: [(-8 89 58 -48) -48]
Test Case: 584 | Input/Output: [(75 -23 -100 -7) -100]
Test Case: 585 | Input/Output: [(69 -35 62 70) -35]
Test Case: 586 | Input/Output: [(72 -25 -7 -52) -52]
Test Case: 587 | Input/Output: [(-8 -3 86 -38) -38]
Test Case: 588 | Input/Output: [(-5 -83 -12 -56) -83]
Test Case: 589 | Input/Output: [(99 -8 -5 -87) -87]
Test Case: 590 | Input/Output: [(-51 42 45 94) -51]
Test Case: 591 | Input/Output: [(8 48 75 51) 8]
Test Case: 592 | Input/Output: [(16 5 39 99) 5]
Test Case: 593 | Input/Output: [(72 -38 24 -31) -38]
Test Case: 594 | Input/Output: [(-99 46 25 -77) -99]
Test Case: 595 | Input/Output: [(-8 94 46 -88) -88]
Test Case: 596 | Input/Output: [(26 80 -80 28) -80]
Test Case: 597 | Input/Output: [(57 -45 -55 55) -55]
Test Case: 598 | Input/Output: [(3 -86 -73 59) -86]
Test Case: 599 | Input/Output: [(24 -11 -43 58) -43]
Test Case: 600 | Input/Output: [(-90 67 -15 -89) -90]
Test Case: 601 | Input/Output: [(35 -99 -83 -33) -99]
Test Case: 602 | Input/Output: [(-14 -56 -92 96) -92]
Test Case: 603 | Input/Output: [(-69 -42 86 -51) -69]
Test Case: 604 | Input/Output: [(-92 -25 11 -24) -92]
Test Case: 605 | Input/Output: [(68 -25 -43 12) -43]
Test Case: 606 | Input/Output: [(27 -49 -10 18) -49]
Test Case: 607 | Input/Output: [(35 -76 -7 48) -76]
Test Case: 608 | Input/Output: [(-16 91 51 94) -16]
Test Case: 609 | Input/Output: [(-56 47 14 -20) -56]
Test Case: 610 | Input/Output: [(29 91 -87 -79) -87]
Test Case: 611 | Input/Output: [(73 -84 20 72) -84]
Test Case: 612 | Input/Output: [(67 96 10 48) 10]
Test Case: 613 | Input/Output: [(-52 -26 -12 4) -52]
Test Case: 614 | Input/Output: [(-35 88 3 19) -35]
Test Case: 615 | Input/Output: [(-35 48 44 -42) -42]
Test Case: 616 | Input/Output: [(-73 -83 -64 -16) -83]
Test Case: 617 | Input/Output: [(-7 1 86 -78) -78]
Test Case: 618 | Input/Output: [(16 -42 52 56) -42]
Test Case: 619 | Input/Output: [(-53 -37 -14 -6) -53]
Test Case: 620 | Input/Output: [(-92 -39 36 -78) -92]
Test Case: 621 | Input/Output: [(36 68 59 -27) -27]
Test Case: 622 | Input/Output: [(79 98 47 56) 47]
Test Case: 623 | Input/Output: [(83 36 -12 -10) -12]
Test Case: 624 | Input/Output: [(-54 31 -53 -54) -54]
Test Case: 625 | Input/Output: [(-65 30 10 -48) -65]
Test Case: 626 | Input/Output: [(-18 17 86 39) -18]
Test Case: 627 | Input/Output: [(94 77 -69 -94) -94]
Test Case: 628 | Input/Output: [(-80 -62 -9 -94) -94]
Test Case: 629 | Input/Output: [(43 -38 -87 67) -87]
Test Case: 630 | Input/Output: [(-54 -91 89 79) -91]
Test Case: 631 | Input/Output: [(48 -13 77 5) -13]
Test Case: 632 | Input/Output: [(43 6 34 84) 6]
Test Case: 633 | Input/Output: [(71 -95 -30 57) -95]
Test Case: 634 | Input/Output: [(-48 -92 -53 -79) -92]
Test Case: 635 | Input/Output: [(21 -49 -14 20) -49]
Test Case: 636 | Input/Output: [(-67 26 -35 -38) -67]
Test Case: 637 | Input/Output: [(-32 7 -71 -92) -92]
Test Case: 638 | Input/Output: [(-94 25 73 -75) -94]
Test Case: 639 | Input/Output: [(88 -34 17 -37) -37]
Test Case: 640 | Input/Output: [(-68 -82 92 56) -82]
Test Case: 641 | Input/Output: [(3 18 -18 -71) -71]
Test Case: 642 | Input/Output: [(-6 74 57 -2) -6]
Test Case: 643 | Input/Output: [(22 -43 -47 -53) -53]
Test Case: 644 | Input/Output: [(18 15 51 13) 13]
Test Case: 645 | Input/Output: [(62 -79 95 -34) -79]
Test Case: 646 | Input/Output: [(-98 54 87 -68) -98]
Test Case: 647 | Input/Output: [(-84 -67 96 14) -84]
Test Case: 648 | Input/Output: [(-77 -67 -60 83) -77]
Test Case: 649 | Input/Output: [(17 -74 25 -100) -100]
Test Case: 650 | Input/Output: [(16 -65 -73 -96) -96]
Test Case: 651 | Input/Output: [(68 -18 -35 -13) -35]
Test Case: 652 | Input/Output: [(2 -73 -99 -53) -99]
Test Case: 653 | Input/Output: [(-81 -85 75 43) -85]
Test Case: 654 | Input/Output: [(-32 -32 -12 -22) -32]
Test Case: 655 | Input/Output: [(-87 88 81 -46) -87]
Test Case: 656 | Input/Output: [(48 14 41 -55) -55]
Test Case: 657 | Input/Output: [(68 88 -61 54) -61]
Test Case: 658 | Input/Output: [(-18 42 34 12) -18]
Test Case: 659 | Input/Output: [(-78 13 -81 0) -81]
Test Case: 660 | Input/Output: [(52 -92 3 -48) -92]
Test Case: 661 | Input/Output: [(12 -72 98 98) -72]
Test Case: 662 | Input/Output: [(10 77 -37 15) -37]
Test Case: 663 | Input/Output: [(25 -16 96 82) -16]
Test Case: 664 | Input/Output: [(-98 4 26 99) -98]
Test Case: 665 | Input/Output: [(52 -68 97 65) -68]
Test Case: 666 | Input/Output: [(19 -66 38 -90) -90]
Test Case: 667 | Input/Output: [(-57 85 -60 -55) -60]
Test Case: 668 | Input/Output: [(90 -79 -10 -51) -79]
Test Case: 669 | Input/Output: [(58 -89 60 76) -89]
Test Case: 670 | Input/Output: [(90 -21 81 -19) -21]
Test Case: 671 | Input/Output: [(75 -88 58 83) -88]
Test Case: 672 | Input/Output: [(-64 -81 10 -55) -81]
Test Case: 673 | Input/Output: [(-95 22 -4 -38) -95]
Test Case: 674 | Input/Output: [(-32 -89 -76 61) -89]
Test Case: 675 | Input/Output: [(85 3 47 56) 3]
Test Case: 676 | Input/Output: [(-83 50 -20 -34) -83]
Test Case: 677 | Input/Output: [(-18 -86 -90 -80) -90]
Test Case: 678 | Input/Output: [(-100 -46 52 -100) -100]
Test Case: 679 | Input/Output: [(-39 -80 9 43) -80]
Test Case: 680 | Input/Output: [(31 74 -58 -1) -58]
Test Case: 681 | Input/Output: [(1 95 -1 68) -1]
Test Case: 682 | Input/Output: [(13 -80 -46 -70) -80]
Test Case: 683 | Input/Output: [(100 -53 -93 -3) -93]
Test Case: 684 | Input/Output: [(75 -40 31 96) -40]
Test Case: 685 | Input/Output: [(51 64 31 -13) -13]
Test Case: 686 | Input/Output: [(-8 -84 -79 -20) -84]
Test Case: 687 | Input/Output: [(-94 48 -54 -90) -94]
Test Case: 688 | Input/Output: [(56 24 81 52) 24]
Test Case: 689 | Input/Output: [(-92 28 4 25) -92]
Test Case: 690 | Input/Output: [(-66 -70 -53 67) -70]
Test Case: 691 | Input/Output: [(-99 80 -84 -97) -99]
Test Case: 692 | Input/Output: [(1 40 -77 9) -77]
Test Case: 693 | Input/Output: [(-61 -83 18 -15) -83]
Test Case: 694 | Input/Output: [(-80 -65 62 -75) -80]
Test Case: 695 | Input/Output: [(-81 58 -80 54) -81]
Test Case: 696 | Input/Output: [(27 10 79 32) 10]
Test Case: 697 | Input/Output: [(54 18 33 -92) -92]
Test Case: 698 | Input/Output: [(59 -38 94 45) -38]
Test Case: 699 | Input/Output: [(-48 14 60 63) -48]
Test Case: 700 | Input/Output: [(27 29 22 6) 6]
Test Case: 701 | Input/Output: [(21 -18 -87 -34) -87]
Test Case: 702 | Input/Output: [(86 76 -75 51) -75]
Test Case: 703 | Input/Output: [(67 -76 26 2) -76]
Test Case: 704 | Input/Output: [(-54 57 -28 43) -54]
Test Case: 705 | Input/Output: [(73 -25 97 -73) -73]
Test Case: 706 | Input/Output: [(63 -41 -78 98) -78]
Test Case: 707 | Input/Output: [(62 42 17 -47) -47]
Test Case: 708 | Input/Output: [(72 -80 51 34) -80]
Test Case: 709 | Input/Output: [(-72 -67 14 87) -72]
Test Case: 710 | Input/Output: [(39 24 -70 72) -70]
Test Case: 711 | Input/Output: [(-86 -32 -6 45) -86]
Test Case: 712 | Input/Output: [(-78 -43 47 -76) -78]
Test Case: 713 | Input/Output: [(85 27 53 -1) -1]
Test Case: 714 | Input/Output: [(96 82 13 7) 7]
Test Case: 715 | Input/Output: [(-83 56 -21 10) -83]
Test Case: 716 | Input/Output: [(36 -61 19 -36) -61]
Test Case: 717 | Input/Output: [(86 80 -43 58) -43]
Test Case: 718 | Input/Output: [(-47 19 83 -5) -47]
Test Case: 719 | Input/Output: [(7 0 -19 -88) -88]
Test Case: 720 | Input/Output: [(7 -35 -74 63) -74]
Test Case: 721 | Input/Output: [(71 -92 -70 -47) -92]
Test Case: 722 | Input/Output: [(-36 -34 86 73) -36]
Test Case: 723 | Input/Output: [(41 85 -73 -94) -94]
Test Case: 724 | Input/Output: [(41 75 79 -7) -7]
Test Case: 725 | Input/Output: [(37 -40 97 -94) -94]
Test Case: 726 | Input/Output: [(-32 -95 -55 -42) -95]
Test Case: 727 | Input/Output: [(-24 63 50 -69) -69]
Test Case: 728 | Input/Output: [(4 97 -63 52) -63]
Test Case: 729 | Input/Output: [(-56 39 -27 92) -56]
Test Case: 730 | Input/Output: [(-18 -27 -54 -39) -54]
Test Case: 731 | Input/Output: [(-98 76 100 62) -98]
Test Case: 732 | Input/Output: [(-100 91 19 -67) -100]
Test Case: 733 | Input/Output: [(5 -3 29 88) -3]
Test Case: 734 | Input/Output: [(-17 -38 40 -8) -38]
Test Case: 735 | Input/Output: [(-30 88 49 -51) -51]
Test Case: 736 | Input/Output: [(39 79 -17 -61) -61]
Test Case: 737 | Input/Output: [(-40 -3 -73 -95) -95]
Test Case: 738 | Input/Output: [(43 -87 -75 -69) -87]
Test Case: 739 | Input/Output: [(-24 88 88 -42) -42]
Test Case: 740 | Input/Output: [(-86 -84 -20 18) -86]
Test Case: 741 | Input/Output: [(21 70 -12 -95) -95]
Test Case: 742 | Input/Output: [(-73 -75 -42 -25) -75]
Test Case: 743 | Input/Output: [(64 -23 100 -73) -73]
Test Case: 744 | Input/Output: [(28 -88 95 -84) -88]
Test Case: 745 | Input/Output: [(-29 -48 -19 -45) -48]
Test Case: 746 | Input/Output: [(15 -81 65 38) -81]
Test Case: 747 | Input/Output: [(-12 97 -93 -94) -94]
Test Case: 748 | Input/Output: [(90 22 44 63) 22]
Test Case: 749 | Input/Output: [(70 -61 -93 71) -93]
Test Case: 750 | Input/Output: [(8 -16 -98 -95) -98]
Test Case: 751 | Input/Output: [(-19 89 -53 -17) -53]
Test Case: 752 | Input/Output: [(-46 63 -47 58) -47]
Test Case: 753 | Input/Output: [(84 -13 39 84) -13]
Test Case: 754 | Input/Output: [(89 21 56 34) 21]
Test Case: 755 | Input/Output: [(12 56 57 -62) -62]
Test Case: 756 | Input/Output: [(86 92 -26 -62) -62]
Test Case: 757 | Input/Output: [(-32 59 -80 -61) -80]
Test Case: 758 | Input/Output: [(-64 57 -55 36) -64]
Test Case: 759 | Input/Output: [(-47 -28 86 -40) -47]
Test Case: 760 | Input/Output: [(-65 -15 -48 -65) -65]
Test Case: 761 | Input/Output: [(-72 81 61 49) -72]
Test Case: 762 | Input/Output: [(31 -5 25 -58) -58]
Test Case: 763 | Input/Output: [(-97 22 67 -37) -97]
Test Case: 764 | Input/Output: [(-23 -15 100 -6) -23]
Test Case: 765 | Input/Output: [(-2 25 15 -89) -89]
Test Case: 766 | Input/Output: [(-26 29 58 -54) -54]
Test Case: 767 | Input/Output: [(-90 -57 -16 -88) -90]
Test Case: 768 | Input/Output: [(92 9 61 -54) -54]
Test Case: 769 | Input/Output: [(-16 4 -81 -9) -81]
Test Case: 770 | Input/Output: [(-62 -68 -43 -40) -68]
Test Case: 771 | Input/Output: [(-2 -42 54 99) -42]
Test Case: 772 | Input/Output: [(-16 64 5 -8) -16]
Test Case: 773 | Input/Output: [(25 -87 37 -64) -87]
Test Case: 774 | Input/Output: [(90 -1 -3 59) -3]
Test Case: 775 | Input/Output: [(25 -35 -65 -55) -65]
Test Case: 776 | Input/Output: [(26 21 68 92) 21]
Test Case: 777 | Input/Output: [(19 69 27 63) 19]
Test Case: 778 | Input/Output: [(64 43 -74 90) -74]
Test Case: 779 | Input/Output: [(-100 85 64 -98) -100]
Test Case: 780 | Input/Output: [(-30 7 60 5) -30]
Test Case: 781 | Input/Output: [(64 40 9 -53) -53]
Test Case: 782 | Input/Output: [(90 24 42 86) 24]
Test Case: 783 | Input/Output: [(49 -48 -7 45) -48]
Test Case: 784 | Input/Output: [(-99 -31 -50 10) -99]
Test Case: 785 | Input/Output: [(0 -19 100 -1) -19]
Test Case: 786 | Input/Output: [(50 38 -86 -4) -86]
Test Case: 787 | Input/Output: [(-15 44 43 25) -15]
Test Case: 788 | Input/Output: [(-65 -22 4 -76) -76]
Test Case: 789 | Input/Output: [(96 -45 -94 38) -94]
Test Case: 790 | Input/Output: [(-18 -58 -77 -17) -77]
Test Case: 791 | Input/Output: [(26 38 -74 42) -74]
Test Case: 792 | Input/Output: [(-20 27 -31 -33) -33]
Test Case: 793 | Input/Output: [(0 -66 -92 22) -92]
Test Case: 794 | Input/Output: [(22 -1 6 95) -1]
Test Case: 795 | Input/Output: [(47 -54 -20 6) -54]
Test Case: 796 | Input/Output: [(-81 -76 -16 34) -81]
Test Case: 797 | Input/Output: [(58 -25 40 97) -25]
Test Case: 798 | Input/Output: [(23 62 60 -47) -47]
Test Case: 799 | Input/Output: [(-20 -62 45 18) -62]
Test Case: 800 | Input/Output: [(19 -8 -63 93) -63]
Test Case: 801 | Input/Output: [(63 19 63 -11) -11]
Test Case: 802 | Input/Output: [(33 83 -13 18) -13]
Test Case: 803 | Input/Output: [(96 -1 -71 -35) -71]
Test Case: 804 | Input/Output: [(-5 41 -13 91) -13]
Test Case: 805 | Input/Output: [(59 -72 17 -32) -72]
Test Case: 806 | Input/Output: [(46 79 37 5) 5]
Test Case: 807 | Input/Output: [(-43 -43 10 -82) -82]
Test Case: 808 | Input/Output: [(-79 76 -48 44) -79]
Test Case: 809 | Input/Output: [(58 -15 -10 -39) -39]
Test Case: 810 | Input/Output: [(-69 -59 -1 36) -69]
Test Case: 811 | Input/Output: [(-3 88 47 33) -3]
Test Case: 812 | Input/Output: [(48 52 -83 87) -83]
Test Case: 813 | Input/Output: [(4 65 62 -76) -76]
Test Case: 814 | Input/Output: [(-29 -52 -65 7) -65]
Test Case: 815 | Input/Output: [(44 -24 22 65) -24]
Test Case: 816 | Input/Output: [(-23 90 29 65) -23]
Test Case: 817 | Input/Output: [(91 -58 -61 22) -61]
Test Case: 818 | Input/Output: [(-41 -49 -75 67) -75]
Test Case: 819 | Input/Output: [(4 -62 -16 -43) -62]
Test Case: 820 | Input/Output: [(84 -22 -21 -7) -22]
Test Case: 821 | Input/Output: [(52 46 52 -51) -51]
Test Case: 822 | Input/Output: [(-31 -19 -53 83) -53]
Test Case: 823 | Input/Output: [(-38 73 -5 94) -38]
Test Case: 824 | Input/Output: [(-16 -89 64 19) -89]
Test Case: 825 | Input/Output: [(50 79 -47 -8) -47]
Test Case: 826 | Input/Output: [(82 -84 -43 76) -84]
Test Case: 827 | Input/Output: [(24 5 1 91) 1]
Test Case: 828 | Input/Output: [(-64 -39 -38 -7) -64]
Test Case: 829 | Input/Output: [(8 -97 99 32) -97]
Test Case: 830 | Input/Output: [(96 -31 -35 79) -35]
Test Case: 831 | Input/Output: [(-81 -96 14 -19) -96]
Test Case: 832 | Input/Output: [(-69 28 3 -4) -69]
Test Case: 833 | Input/Output: [(32 -66 -94 -49) -94]
Test Case: 834 | Input/Output: [(-73 -12 -66 74) -73]
Test Case: 835 | Input/Output: [(-43 76 12 -21) -43]
Test Case: 836 | Input/Output: [(-89 13 -18 -22) -89]
Test Case: 837 | Input/Output: [(68 57 66 91) 57]
Test Case: 838 | Input/Output: [(13 -54 17 18) -54]
Test Case: 839 | Input/Output: [(-18 5 98 -1) -18]
Test Case: 840 | Input/Output: [(22 -1 18 26) -1]
Test Case: 841 | Input/Output: [(18 -79 -40 -11) -79]
Test Case: 842 | Input/Output: [(-49 -19 -66 24) -66]
Test Case: 843 | Input/Output: [(-56 62 39 52) -56]
Test Case: 844 | Input/Output: [(2 -92 -76 -79) -92]
Test Case: 845 | Input/Output: [(81 -91 -18 17) -91]
Test Case: 846 | Input/Output: [(-17 51 100 -44) -44]
Test Case: 847 | Input/Output: [(-59 41 -50 73) -59]
Test Case: 848 | Input/Output: [(-42 -16 -29 -24) -42]
Test Case: 849 | Input/Output: [(-56 88 86 4) -56]
Test Case: 850 | Input/Output: [(2 -45 -100 -24) -100]
Test Case: 851 | Input/Output: [(-76 -35 58 76) -76]
Test Case: 852 | Input/Output: [(59 -47 -23 -59) -59]
Test Case: 853 | Input/Output: [(-35 -3 -98 27) -98]
Test Case: 854 | Input/Output: [(95 25 -95 -41) -95]
Test Case: 855 | Input/Output: [(-89 -51 -60 22) -89]
Test Case: 856 | Input/Output: [(27 2 -25 -2) -25]
Test Case: 857 | Input/Output: [(-43 57 -16 -4) -43]
Test Case: 858 | Input/Output: [(74 30 84 55) 30]
Test Case: 859 | Input/Output: [(-36 -60 -7 -77) -77]
Test Case: 860 | Input/Output: [(23 -92 60 96) -92]
Test Case: 861 | Input/Output: [(-93 -91 30 86) -93]
Test Case: 862 | Input/Output: [(63 -28 -6 -77) -77]
Test Case: 863 | Input/Output: [(99 -45 88 80) -45]
Test Case: 864 | Input/Output: [(45 24 -92 -19) -92]
Test Case: 865 | Input/Output: [(31 29 -59 -31) -59]
Test Case: 866 | Input/Output: [(16 35 -15 -94) -94]
Test Case: 867 | Input/Output: [(12 18 52 79) 12]
Test Case: 868 | Input/Output: [(-82 -42 -35 -54) -82]
Test Case: 869 | Input/Output: [(88 -41 -81 67) -81]
Test Case: 870 | Input/Output: [(-28 85 -47 -92) -92]
Test Case: 871 | Input/Output: [(-2 50 45 90) -2]
Test Case: 872 | Input/Output: [(-20 -8 -73 61) -73]
Test Case: 873 | Input/Output: [(50 -43 71 -98) -98]
Test Case: 874 | Input/Output: [(82 -45 -66 -85) -85]
Test Case: 875 | Input/Output: [(64 62 -59 -68) -68]
Test Case: 876 | Input/Output: [(-26 95 -49 -62) -62]
Test Case: 877 | Input/Output: [(-47 -69 70 43) -69]
Test Case: 878 | Input/Output: [(-59 -77 66 -69) -77]
Test Case: 879 | Input/Output: [(54 15 88 6) 6]
Test Case: 880 | Input/Output: [(-41 0 -100 -76) -100]
Test Case: 881 | Input/Output: [(57 -97 -3 70) -97]
Test Case: 882 | Input/Output: [(-52 84 87 24) -52]
Test Case: 883 | Input/Output: [(-18 17 70 -15) -18]
Test Case: 884 | Input/Output: [(79 48 95 79) 48]
Test Case: 885 | Input/Output: [(87 52 61 -52) -52]
Test Case: 886 | Input/Output: [(80 52 0 2) 0]
Test Case: 887 | Input/Output: [(-23 -83 73 -28) -83]
Test Case: 888 | Input/Output: [(-54 37 43 -16) -54]
Test Case: 889 | Input/Output: [(-62 24 9 -98) -98]
Test Case: 890 | Input/Output: [(-6 85 -38 3) -38]
Test Case: 891 | Input/Output: [(-85 5 13 89) -85]
Test Case: 892 | Input/Output: [(85 -91 -49 75) -91]
Test Case: 893 | Input/Output: [(43 -16 -60 -64) -64]
Test Case: 894 | Input/Output: [(-78 53 60 -18) -78]
Test Case: 895 | Input/Output: [(-37 -77 -80 63) -80]
Test Case: 896 | Input/Output: [(-50 -67 3 -62) -67]
Test Case: 897 | Input/Output: [(-75 67 -10 2) -75]
Test Case: 898 | Input/Output: [(-90 57 44 -92) -92]
Test Case: 899 | Input/Output: [(43 28 20 -15) -15]
Test Case: 900 | Input/Output: [(-11 -86 4 89) -86]
Test Case: 901 | Input/Output: [(-61 -49 64 51) -61]
Test Case: 902 | Input/Output: [(91 -24 89 78) -24]
Test Case: 903 | Input/Output: [(91 96 -51 -48) -51]
Test Case: 904 | Input/Output: [(58 -85 36 -86) -86]
Test Case: 905 | Input/Output: [(-9 -68 57 -84) -84]
Test Case: 906 | Input/Output: [(-87 -16 66 -78) -87]
Test Case: 907 | Input/Output: [(28 -48 -21 -20) -48]
Test Case: 908 | Input/Output: [(74 51 10 -62) -62]
Test Case: 909 | Input/Output: [(-52 45 -81 48) -81]
Test Case: 910 | Input/Output: [(77 15 -29 82) -29]
Test Case: 911 | Input/Output: [(81 -42 87 100) -42]
Test Case: 912 | Input/Output: [(-74 91 7 73) -74]
Test Case: 913 | Input/Output: [(6 -94 -48 36) -94]
Test Case: 914 | Input/Output: [(79 0 11 -98) -98]
Test Case: 915 | Input/Output: [(89 -53 83 8) -53]
Test Case: 916 | Input/Output: [(5 -43 15 15) -43]
Test Case: 917 | Input/Output: [(35 -62 -79 -91) -91]
Test Case: 918 | Input/Output: [(53 -13 100 59) -13]
Test Case: 919 | Input/Output: [(48 -28 -60 70) -60]
Test Case: 920 | Input/Output: [(-42 -38 50 21) -42]
Test Case: 921 | Input/Output: [(-52 51 98 76) -52]
Test Case: 922 | Input/Output: [(99 -65 -59 91) -65]
Test Case: 923 | Input/Output: [(94 21 -100 -89) -100]
Test Case: 924 | Input/Output: [(-58 -31 -85 -33) -85]
Test Case: 925 | Input/Output: [(-68 68 47 86) -68]
Test Case: 926 | Input/Output: [(-41 -51 -14 68) -51]
Test Case: 927 | Input/Output: [(3 -88 -10 -15) -88]
Test Case: 928 | Input/Output: [(88 87 49 60) 49]
Test Case: 929 | Input/Output: [(47 13 -17 -74) -74]
Test Case: 930 | Input/Output: [(54 26 -71 31) -71]
Test Case: 931 | Input/Output: [(40 -15 68 -52) -52]
Test Case: 932 | Input/Output: [(-8 -99 18 -60) -99]
Test Case: 933 | Input/Output: [(63 35 -64 70) -64]
Test Case: 934 | Input/Output: [(58 -65 36 46) -65]
Test Case: 935 | Input/Output: [(-86 -69 88 -39) -86]
Test Case: 936 | Input/Output: [(-95 29 -92 83) -95]
Test Case: 937 | Input/Output: [(-96 -71 -89 86) -96]
Test Case: 938 | Input/Output: [(5 90 52 -26) -26]
Test Case: 939 | Input/Output: [(67 -94 84 73) -94]
Test Case: 940 | Input/Output: [(69 79 -62 -65) -65]
Test Case: 941 | Input/Output: [(5 89 15 -85) -85]
Test Case: 942 | Input/Output: [(40 38 62 13) 13]
Test Case: 943 | Input/Output: [(77 23 6 45) 6]
Test Case: 944 | Input/Output: [(98 -4 -94 -44) -94]
Test Case: 945 | Input/Output: [(72 49 41 88) 41]
Test Case: 946 | Input/Output: [(-78 -15 -53 42) -78]
Test Case: 947 | Input/Output: [(-4 -5 -14 16) -14]
Test Case: 948 | Input/Output: [(63 57 74 -32) -32]
Test Case: 949 | Input/Output: [(37 52 97 -2) -2]
Test Case: 950 | Input/Output: [(84 -16 16 -57) -57]
Test Case: 951 | Input/Output: [(93 -55 -39 23) -55]
Test Case: 952 | Input/Output: [(90 -10 -16 -78) -78]
Test Case: 953 | Input/Output: [(70 -90 -40 46) -90]
Test Case: 954 | Input/Output: [(-66 -91 43 68) -91]
Test Case: 955 | Input/Output: [(-53 9 54 -87) -87]
Test Case: 956 | Input/Output: [(38 55 -22 31) -22]
Test Case: 957 | Input/Output: [(-5 -16 -49 95) -49]
Test Case: 958 | Input/Output: [(83 61 54 -1) -1]
Test Case: 959 | Input/Output: [(-11 -5 47 -49) -49]
Test Case: 960 | Input/Output: [(-31 43 89 26) -31]
Test Case: 961 | Input/Output: [(-67 44 36 88) -67]
Test Case: 962 | Input/Output: [(-96 87 93 -40) -96]
Test Case: 963 | Input/Output: [(-28 95 -21 -53) -53]
Test Case: 964 | Input/Output: [(23 79 -31 71) -31]
Test Case: 965 | Input/Output: [(-40 -12 -56 18) -56]
Test Case: 966 | Input/Output: [(-62 -10 5 82) -62]
Test Case: 967 | Input/Output: [(-83 -22 -92 87) -92]
Test Case: 968 | Input/Output: [(-44 36 18 96) -44]
Test Case: 969 | Input/Output: [(50 60 50 50) 50]
Test Case: 970 | Input/Output: [(33 -41 81 -87) -87]
Test Case: 971 | Input/Output: [(31 50 16 39) 16]
Test Case: 972 | Input/Output: [(52 31 65 -16) -16]
Test Case: 973 | Input/Output: [(-83 -25 -54 4) -83]
Test Case: 974 | Input/Output: [(48 -75 -13 87) -75]
Test Case: 975 | Input/Output: [(93 -68 -69 88) -69]
Test Case: 976 | Input/Output: [(25 84 90 -41) -41]
Test Case: 977 | Input/Output: [(74 -3 78 -76) -76]
Test Case: 978 | Input/Output: [(16 -91 -98 -62) -98]
Test Case: 979 | Input/Output: [(84 -53 22 22) -53]
Test Case: 980 | Input/Output: [(10 81 24 73) 10]
Test Case: 981 | Input/Output: [(-9 88 84 -60) -60]
Test Case: 982 | Input/Output: [(32 -60 -51 99) -60]
Test Case: 983 | Input/Output: [(20 70 -48 10) -48]
Test Case: 984 | Input/Output: [(0 -28 -95 -97) -97]
Test Case: 985 | Input/Output: [(28 29 11 -26) -26]
Test Case: 986 | Input/Output: [(-4 -86 -20 27) -86]
Test Case: 987 | Input/Output: [(35 -62 -38 8) -62]
Test Case: 988 | Input/Output: [(60 51 -50 53) -50]
Test Case: 989 | Input/Output: [(-55 -6 -24 49) -55]
Test Case: 990 | Input/Output: [(-45 -62 -6 -47) -62]
Test Case: 991 | Input/Output: [(-11 -58 -91 -90) -91]
Test Case: 992 | Input/Output: [(81 -47 32 -80) -80]
Test Case: 993 | Input/Output: [(91 -22 -77 15) -77]
Test Case: 994 | Input/Output: [(86 71 -15 -34) -34]
Test Case: 995 | Input/Output: [(-91 -7 22 -74) -91]
Test Case: 996 | Input/Output: [(-41 7 -9 -29) -41]
Test Case: 997 | Input/Output: [(-63 49 -12 49) -63]
Test Case: 998 | Input/Output: [(-22 -58 97 27) -58]
Test Case: 999 | Input/Output: [(25 95 -20 -36) -36]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 57 -126 -3 32 0 -15 -24 -68 -82 -33 -101 105 98 62 57 63
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-5 49 49 49] -5] [[-23 86 86 86] -23] [[-42 -42 -42 1] -42] [[2 2 2 -22] -22] [[-60 -67 -67 -67] -67] [[92 -72 92 92] -72] [[-40 -40 -40 19] -40] [[78 -97 -97 -97] -97] [[-6 -6 -6 -6] -6] [[95 95 -41 95] -41] [(49 49 49 49) 49] [(48 48 48 48) 48] [(-25 -25 -25 -25) -25] [(-2 -2 -2 -2) -2] [(58 58 58 58) 58] [(68 19 87 34) 19] [(42 9 69 39) 9] [(18 54 75 71) 18] [(62 72 23 61) 23] [(67 56 63 68) 56] [(90 53 5 21) 5] [(48 93 42 43) 42] [(78 78 53 12) 12] [(30 42 89 100) 30] [(90 10 44 10) 10] [(64 50 74 9) 9] [(57 29 92 7) 7] [(65 22 14 19) 14] [(25 28 6 32) 6] [(15 1 48 87) 1] [(35 77 83 34) 34] [(99 22 63 23) 22] [(45 19 84 87) 19] [(51 74 4 59) 4] [(40 44 91 96) 40] [(-44 -35 97 99) -44] [(0 51 65 -17) -17] [(-62 -10 -68 -24) -68] [(-95 -14 -34 84) -95] [(78 100 -81 -64) -81] [(-48 12 -88 41) -88] [(68 -56 35 -58) -58] [(70 84 -10 13) -10] [(-99 -1 -74 40) -99] [(-64 -27 -81 3) -81] [(78 1 33 93) 1] [(-8 42 -96 -62) -96] [(78 22 21 -13) -13] [(-56 67 -51 -49) -56] [(93 -58 22 5) -58] [(-59 91 70 82) -59] [(15 -96 -24 26) -96] [(-99 46 89 -88) -99] [(86 64 -92 -74) -92] [(63 77 64 42) 42] [(52 -64 65 28) -64] [(30 -22 43 -51) -51] [(-71 -59 -79 -47) -79] [(-49 -86 -28 35) -86] [(69 23 85 50) 23] [(21 1 -11 24) -11] [(-79 76 85 100) -79] [(-32 -83 -80 15) -83] [(88 96 -7 35) -7] [(55 -70 27 21) -70] [(-78 -68 31 44) -78] [(96 -4 -51 -18) -51] [(8 25 84 -5) -5] [(-11 -58 -45 -17) -58] [(-47 52 -75 27) -75] [(-40 -42 -52 -95) -95] [(14 41 -10 -63) -63] [(76 26 10 -85) -85] [(-1 20 -23 68) -23] [(-57 -81 -26 -37) -81] [(-71 19 -20 -19) -71] [(26 -84 -10 -70) -84] [(72 39 12 -5) -5] [(84 28 -61 -60) -61] [(-26 81 5 50) -26] [(-80 -14 25 22) -80] [(50 -32 21 33) -32] [(-79 -99 -16 69) -99] [(22 -13 80 -47) -47] [(96 67 23 19) 19] [(28 59 -19 -72) -72] [(-92 -12 82 64) -92] [(-8 27 -6 -28) -28] [(-42 57 52 -37) -42] [(-59 65 85 56) -59] [(62 34 59 -76) -76] [(56 -58 99 76) -58] [(-65 -77 -55 -87) -87] [(-74 -15 50 -64) -74] [(-47 -6 -18 -66) -66])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 49                 
Correct output: -23                 | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 87                 
Correct output: 9                   | Program output: 69                 
Correct output: 18                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 12                  | Program output: 53                 
Correct output: 30                  | Program output: 89                 
Correct output: 10                  | Program output: 44                 
Correct output: 9                   | Program output: 74                 
Correct output: 7                   | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 48                 
Correct output: 34                  | Program output: 83                 
Correct output: 22                  | Program output: 63                 
Correct output: 19                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 40                  | Program output: 91                 
Correct output: -44                 | Program output: 97                 
Correct output: -17                 | Program output: 65                 
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 35                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: 1                   | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: 21                 
Correct output: -56                 | Program output: -51                
Correct output: -58                 | Program output: 22                 
Correct output: -59                 | Program output: 70                 
Correct output: -96                 | Program output: -24                
Correct output: -99                 | Program output: 89                 
Correct output: -92                 | Program output: -92                
Correct output: 42                  | Program output: 64                 
Correct output: -64                 | Program output: 65                 
Correct output: -51                 | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -28                
Correct output: 23                  | Program output: 85                 
Correct output: -11                 | Program output: -11                
Correct output: -79                 | Program output: 85                 
Correct output: -83                 | Program output: -80                
Correct output: -7                  | Program output: -7                 
Correct output: -70                 | Program output: 27                 
Correct output: -78                 | Program output: 31                 
Correct output: -51                 | Program output: -51                
Correct output: -5                  | Program output: 84                 
Correct output: -58                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -52                
Correct output: -63                 | Program output: -10                
Correct output: -85                 | Program output: 10                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -26                
Correct output: -71                 | Program output: -20                
Correct output: -84                 | Program output: -10                
Correct output: -5                  | Program output: 12                 
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: 5                  
Correct output: -80                 | Program output: 25                 
Correct output: -32                 | Program output: 21                 
Correct output: -99                 | Program output: -16                
Correct output: -47                 | Program output: 80                 
Correct output: 19                  | Program output: 23                 
Correct output: -72                 | Program output: -19                
Correct output: -92                 | Program output: 82                 
Correct output: -28                 | Program output: -6                 
Correct output: -42                 | Program output: 52                 
Correct output: -59                 | Program output: 85                 
Correct output: -76                 | Program output: 59                 
Correct output: -58                 | Program output: 99                 
Correct output: -87                 | Program output: -55                
Correct output: -74                 | Program output: 50                 
Correct output: -66                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_830} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_or exec_s_when_autoconstructing (integer_lte) (integer_lt) (exec_s_when_autoconstructing (integer_mod) (in3) (print_integer boolean_flush exec_do*count (exec_s (tagged_830) (integer_lt) (integer_sub) exec_shove (integer_shove boolean_pop integer_shove exec_flush exec_pop (integer_div) integer_dup boolean_not) boolean_rot boolean_invert_first_then_and boolean_shove integer_stackdepth) boolean_yankdup boolean_yank integer_stackdepth exec_s (boolean_empty) (exec_swap (exec_dup_times (integer_shove) exec_pop (exec_yank exec_dup (integer_fromboolean integer_dup integer_gte exec_while (boolean_xor boolean_rot)))) ()) ())))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_830} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_or exec_s_when_autoconstructing (integer_lte) (integer_lt) (exec_s_when_autoconstructing (integer_mod) (in3) (print_integer boolean_flush exec_do*count (exec_s (tagged_830) (integer_lt) (integer_sub) exec_shove (integer_shove boolean_pop integer_shove exec_flush exec_pop (integer_div) integer_dup boolean_not) boolean_rot boolean_invert_first_then_and boolean_shove integer_stackdepth) boolean_yankdup boolean_yank integer_stackdepth exec_s (boolean_empty) (exec_swap (exec_dup_times (integer_shove) exec_pop (exec_yank exec_dup (integer_fromboolean integer_dup integer_gte exec_while (boolean_xor boolean_rot)))) ()) ())))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 3 7 2 2 2 7 7 14 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (7 3 7 2 2 2 7 7 14 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction -47} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tagged_747} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_stackdepth})
Best program: (-47 integer_inc integer_flush boolean_xor integer_max integer_dup print_boolean boolean_dup in3 exec_swap (exec_s (boolean_yankdup exec_k_when_autoconstructing (integer_yankdup print_integer integer_max exec_empty exec_pop (print_integer boolean_shove) integer_stackdepth exec_s_when_autoconstructing () (tagged_747 integer_yankdup) (boolean_dup) exec_while (exec_shove (boolean_invert_first_then_and) exec_dup_times (boolean_or) boolean_flush integer_sub exec_when (integer_yank integer_stackdepth))) ()) () ()) ())
Errors: [0 1 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 51
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 9.947
Median total errors in population: 10
Error averages by case: (0.993 0.997 0.993 0.998 0.998 0.998 0.993 0.993 0.986 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.934
Average program size in population (points): 67.658
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 505981
--- Timings ---
Current time: 1559584320084 milliseconds
Total Time:           3.0 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.7 seconds, 23.8%
Fitness Testing:      2.2 seconds, 72.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: 49                 
Correct output: -23                 | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: 95                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 54                 
Correct output: 23                  | Program output: 72                 
Correct output: 56                  | Program output: 56                 
Correct output: 5                   | Program output: 53                 
Correct output: 42                  | Program output: 93                 
Correct output: 12                  | Program output: 78                 
Correct output: 30                  | Program output: 42                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 50                 
Correct output: 7                   | Program output: 29                 
Correct output: 14                  | Program output: 22                 
Correct output: 6                   | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 77                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 74                 
Correct output: 40                  | Program output: 44                 
Correct output: -44                 | Program output: -35                
Correct output: -17                 | Program output: 51                 
Correct output: -68                 | Program output: -10                
Correct output: -95                 | Program output: -14                
Correct output: -81                 | Program output: 100                
Correct output: -88                 | Program output: 12                 
Correct output: -58                 | Program output: -56                
Correct output: -10                 | Program output: 84                 
Correct output: -99                 | Program output: -1                 
Correct output: -81                 | Program output: -27                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: 42                 
Correct output: -13                 | Program output: 22                 
Correct output: -56                 | Program output: 67                 
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: 91                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 46                 
Correct output: -92                 | Program output: 64                 
Correct output: 42                  | Program output: 77                 
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -22                
Correct output: -79                 | Program output: -59                
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -11                 | Program output: 1                  
Correct output: -79                 | Program output: 76                 
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -68                
Correct output: -51                 | Program output: -4                 
Correct output: -5                  | Program output: 25                 
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: 52                 
Correct output: -95                 | Program output: -42                
Correct output: -63                 | Program output: 41                 
Correct output: -85                 | Program output: 26                 
Correct output: -23                 | Program output: 20                 
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: 39                 
Correct output: -61                 | Program output: 28                 
Correct output: -26                 | Program output: 81                 
Correct output: -80                 | Program output: -14                
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -13                
Correct output: 19                  | Program output: 67                 
Correct output: -72                 | Program output: 59                 
Correct output: -92                 | Program output: -12                
Correct output: -28                 | Program output: 27                 
Correct output: -42                 | Program output: 57                 
Correct output: -59                 | Program output: 65                 
Correct output: -76                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -77                
Correct output: -74                 | Program output: -15                
Correct output: -66                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction 32} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 2, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_gte exec_yankdup boolean_or boolean_flush in1 exec_pop (boolean_not 32 boolean_yankdup) boolean_yankdup print_integer boolean_dup exec_shove (exec_empty boolean_invert_second_then_and) exec_while (integer_add exec_flush boolean_dup exec_do*times (integer_yankdup in3) integer_eq) boolean_frominteger integer_inc boolean_dup_items exec_do*while (integer_lt exec_y (integer_dup integer_rot exec_y_when_autoconstructing () exec_s (exec_while (integer_dec exec_do*count () in2 exec_eq boolean_invert_first_then_and exec_empty) integer_fromboolean print_integer print_boolean exec_do*range (integer_rot exec_pop (integer_yank print_integer integer_stackdepth exec_empty print_exec (in3)) boolean_rot exec_dup_items integer_yank integer_yank boolean_xor exec_s () () (exec_empty integer_lt exec_y (integer_dup exec_do*count (in4 integer_flush in4 boolean_yank integer_mult))))) () ())))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 89
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction 32} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction print_exec} {:close 2, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_s} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_gte exec_yankdup boolean_or boolean_flush in1 exec_pop (boolean_not 32 boolean_yankdup) boolean_yankdup print_integer boolean_dup exec_shove (exec_empty boolean_invert_second_then_and) exec_while (integer_add exec_flush boolean_dup exec_do*times (integer_yankdup in3) integer_eq) boolean_frominteger integer_inc boolean_dup_items exec_do*while (integer_lt exec_y (integer_dup integer_rot exec_y_when_autoconstructing () exec_s (exec_while (integer_dec exec_do*count () in2 exec_eq boolean_invert_first_then_and exec_empty) integer_fromboolean print_integer print_boolean exec_do*range (integer_rot exec_pop (integer_yank print_integer integer_stackdepth exec_empty print_exec (in3)) boolean_rot exec_dup_items integer_yank integer_yank boolean_xor exec_s () () (exec_empty integer_lt exec_y (integer_dup exec_do*count (in4 integer_flush in4 boolean_yank integer_mult))))) () ())))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 89
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 320 89 319 97 56 97 97 384 319)
Population mean number of elite cases: 1.87
Count of perfect (error zero) individuals by case: (88 320 89 319 97 56 97 97 384 319)
Population mean number of perfect (error zero) cases: 1.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction tagged_334} {:close 2, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot})
Best program: (boolean_dup_items integer_empty integer_empty exec_do*range (exec_k_when_autoconstructing (exec_dup (integer_lte) exec_rot (exec_k_when_autoconstructing () (boolean_rot in2 integer_mult) boolean_or boolean_yank exec_stackdepth boolean_eq exec_do*range () boolean_invert_first_then_and boolean_dup integer_yank boolean_eq tagged_334) (exec_eq) () integer_dup_items boolean_xor integer_mod) (boolean_yankdup integer_shove) exec_s_when_autoconstructing () (boolean_invert_second_then_and in2 integer_lte integer_yankdup) (print_integer exec_s_when_autoconstructing (boolean_or exec_dup_times (exec_when () integer_inc boolean_invert_first_then_and exec_rot () () ())) () ())))
Errors: [1 0 1 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 41
Size: 63
Percent parens: 0.349
--- Population Statistics ---
Average total errors in population: 8.134
Median total errors in population: 8
Error averages by case: (0.912 0.68 0.911 0.681 0.903 0.944 0.903 0.903 0.616 0.681)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.818
Average program size in population (points): 56.022
Average percent parens in population: 0.334
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.427
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 861458
--- Timings ---
Current time: 1559584322575 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.3 seconds, 42.6%
Fitness Testing:      2.7 seconds, 49.1%
Report:               0.4 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: 49                 
Correct output: -23                 | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 87                 
Correct output: 9                   | Program output: 69                 
Correct output: 18                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 12                  | Program output: 53                 
Correct output: 30                  | Program output: 89                 
Correct output: 10                  | Program output: 44                 
Correct output: 9                   | Program output: 74                 
Correct output: 7                   | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 48                 
Correct output: 34                  | Program output: 83                 
Correct output: 22                  | Program output: 63                 
Correct output: 19                  | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: 40                  | Program output: 91                 
Correct output: -44                 | Program output: 97                 
Correct output: -17                 | Program output: 65                 
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: 35                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: 1                   | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: 21                 
Correct output: -56                 | Program output: -51                
Correct output: -58                 | Program output: 22                 
Correct output: -59                 | Program output: 70                 
Correct output: -96                 | Program output: -24                
Correct output: -99                 | Program output: 89                 
Correct output: -92                 | Program output: -92                
Correct output: 42                  | Program output: 64                 
Correct output: -64                 | Program output: 65                 
Correct output: -51                 | Program output: 43                 
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -28                
Correct output: 23                  | Program output: 85                 
Correct output: -11                 | Program output: -11                
Correct output: -79                 | Program output: 85                 
Correct output: -83                 | Program output: -80                
Correct output: -7                  | Program output: -7                 
Correct output: -70                 | Program output: 27                 
Correct output: -78                 | Program output: 31                 
Correct output: -51                 | Program output: -51                
Correct output: -5                  | Program output: 84                 
Correct output: -58                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -52                
Correct output: -63                 | Program output: -10                
Correct output: -85                 | Program output: 10                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -26                
Correct output: -71                 | Program output: -20                
Correct output: -84                 | Program output: -10                
Correct output: -5                  | Program output: 12                 
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: 5                  
Correct output: -80                 | Program output: 25                 
Correct output: -32                 | Program output: 21                 
Correct output: -99                 | Program output: -16                
Correct output: -47                 | Program output: 80                 
Correct output: 19                  | Program output: 23                 
Correct output: -72                 | Program output: -19                
Correct output: -92                 | Program output: 82                 
Correct output: -28                 | Program output: -6                 
Correct output: -42                 | Program output: 52                 
Correct output: -59                 | Program output: 85                 
Correct output: -76                 | Program output: 59                 
Correct output: -58                 | Program output: 99                 
Correct output: -87                 | Program output: -55                
Correct output: -74                 | Program output: 50                 
Correct output: -66                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_empty boolean_dup_times boolean_shove in3 integer_dup print_integer integer_dup_times boolean_stackdepth exec_dup_times (integer_rot integer_flush boolean_dup_items exec_empty))
Lexicase best errors: [1 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_empty boolean_dup_times boolean_shove in3 integer_dup print_integer integer_dup_times boolean_stackdepth exec_dup_times (integer_rot integer_flush boolean_dup_items exec_empty))
Zero cases best errors: [1 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 286 101 233 233 277 93 658 93 658)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (287 286 101 233 233 277 93 658 93 658)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_mod} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_830} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot})
Best program: (boolean_or exec_s_when_autoconstructing (integer_lte) (integer_lt) (exec_s_when_autoconstructing (integer_mod) (in3) (print_integer boolean_flush exec_do*count (exec_s (tagged_830) (integer_lt) (integer_sub) exec_shove (integer_shove boolean_pop integer_shove exec_flush exec_pop (integer_div) integer_dup boolean_not) boolean_rot boolean_invert_first_then_and boolean_shove integer_stackdepth) boolean_yankdup boolean_yank integer_stackdepth exec_s (boolean_empty) (exec_swap (exec_dup_times (integer_shove) exec_pop (exec_yank exec_dup (integer_fromboolean integer_dup integer_gte exec_while (boolean_xor boolean_rot)))) ()) ())))
Errors: [1 1 0 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 66
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.081
Median total errors in population: 7
Error averages by case: (0.713 0.714 0.899 0.767 0.767 0.723 0.907 0.342 0.907 0.342)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.219
Average program size in population (points): 43.054
Average percent parens in population: 0.297
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9995
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1128674
--- Timings ---
Current time: 1559584325314 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 53.9%
Fitness Testing:      3.1 seconds, 36.5%
Report:               0.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: 2                  
Correct output: -67                 | Program output: -60                
Correct output: -72                 | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: 78                 
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: 95                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 68                 
Correct output: 9                   | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 62                 
Correct output: 56                  | Program output: 67                 
Correct output: 5                   | Program output: 90                 
Correct output: 42                  | Program output: 48                 
Correct output: 12                  | Program output: 78                 
Correct output: 30                  | Program output: 30                 
Correct output: 10                  | Program output: 90                 
Correct output: 9                   | Program output: 64                 
Correct output: 7                   | Program output: 57                 
Correct output: 14                  | Program output: 65                 
Correct output: 6                   | Program output: 25                 
Correct output: 1                   | Program output: 15                 
Correct output: 34                  | Program output: 35                 
Correct output: 22                  | Program output: 99                 
Correct output: 19                  | Program output: 45                 
Correct output: 4                   | Program output: 51                 
Correct output: 40                  | Program output: 40                 
Correct output: -44                 | Program output: -44                
Correct output: -17                 | Program output: 0                  
Correct output: -68                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: 78                 
Correct output: -88                 | Program output: -48                
Correct output: -58                 | Program output: 68                 
Correct output: -10                 | Program output: 70                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -64                
Correct output: 1                   | Program output: 78                 
Correct output: -96                 | Program output: -8                 
Correct output: -13                 | Program output: 78                 
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: 93                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: 86                 
Correct output: 42                  | Program output: 63                 
Correct output: -64                 | Program output: 52                 
Correct output: -51                 | Program output: 30                 
Correct output: -79                 | Program output: -71                
Correct output: -86                 | Program output: -49                
Correct output: 23                  | Program output: 69                 
Correct output: -11                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -32                
Correct output: -7                  | Program output: 88                 
Correct output: -70                 | Program output: 55                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: 96                 
Correct output: -5                  | Program output: 8                  
Correct output: -58                 | Program output: -11                
Correct output: -75                 | Program output: -47                
Correct output: -95                 | Program output: -40                
Correct output: -63                 | Program output: 14                 
Correct output: -85                 | Program output: 76                 
Correct output: -23                 | Program output: -1                 
Correct output: -81                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: 26                 
Correct output: -5                  | Program output: 72                 
Correct output: -61                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 50                 
Correct output: -99                 | Program output: -79                
Correct output: -47                 | Program output: 22                 
Correct output: 19                  | Program output: 96                 
Correct output: -72                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -8                 
Correct output: -42                 | Program output: -42                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: 62                 
Correct output: -58                 | Program output: 56                 
Correct output: -87                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -66                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_min})
Lexicase best program: (exec_do*count () exec_swap () (exec_yank) boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (in1) exec_swap (exec_do*count () print_integer) (integer_min integer_shove) integer_eq exec_yank integer_min)
Lexicase best errors: [1 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_yank} {:close 1, :instruction integer_min})
Zero cases best program: (exec_do*count () exec_swap () (exec_yank) boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (in1) exec_swap (exec_do*count () print_integer) (integer_min integer_shove) integer_eq exec_yank integer_min)
Zero cases best errors: [1 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 201 103 166 352 842 169 168 219 272)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (224 201 103 166 352 842 169 168 219 272)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_954} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub})
Best program: (exec_if (in1 boolean_invert_second_then_and integer_empty boolean_rot boolean_invert_second_then_and) (boolean_flush boolean_invert_first_then_and) exec_if (integer_rot integer_div integer_mult print_integer) () integer_dec integer_gt integer_min exec_eq integer_lte integer_rot exec_while (exec_empty print_newline tagged_954 boolean_invert_second_then_and boolean_yankdup) integer_lt integer_dup_items integer_eq integer_mult exec_pop () exec_dup_times (integer_add exec_k () (boolean_pop exec_swap (integer_mod integer_sub) ())))
Errors: [1 1 1 0 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 49
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 7.284
Median total errors in population: 7
Error averages by case: (0.776 0.799 0.897 0.834 0.648 0.158 0.831 0.832 0.781 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.549
Average program size in population (points): 55.298
Average percent parens in population: 0.309
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.71725
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.005
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1520278
--- Timings ---
Current time: 1559584328293 milliseconds
Total Time:          11.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 59.6%
Fitness Testing:      3.6 seconds, 31.5%
Report:               0.9 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: 49                 
Correct output: -23                 | Program output: 86                 
Correct output: -42                 | Program output: 1                  
Correct output: -22                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: 95                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 54                 
Correct output: 23                  | Program output: 72                 
Correct output: 56                  | Program output: 56                 
Correct output: 5                   | Program output: 53                 
Correct output: 42                  | Program output: 93                 
Correct output: 12                  | Program output: 78                 
Correct output: 30                  | Program output: 42                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 50                 
Correct output: 7                   | Program output: 29                 
Correct output: 14                  | Program output: 22                 
Correct output: 6                   | Program output: 28                 
Correct output: 1                   | Program output:                    
Correct output: 34                  | Program output: 77                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 74                 
Correct output: 40                  | Program output: 44                 
Correct output: -44                 | Program output: 99                 
Correct output: -17                 | Program output: 65                 
Correct output: -68                 | Program output: -24                
Correct output: -95                 | Program output: 84                 
Correct output: -81                 | Program output: 100                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -10                 | Program output: 84                 
Correct output: -99                 | Program output: 40                 
Correct output: -81                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: 22                 
Correct output: -56                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: 70                 
Correct output: -96                 | Program output:                    
Correct output: -99                 | Program output: 89                 
Correct output: -92                 | Program output: 64                 
Correct output: 42                  | Program output: 77                 
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -22                
Correct output: -79                 | Program output: -47                
Correct output: -86                 | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: -11                 | Program output: 1                  
Correct output: -79                 | Program output: 85                 
Correct output: -83                 | Program output: 15                 
Correct output: -7                  | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: 44                 
Correct output: -51                 | Program output: -4                 
Correct output: -5                  | Program output: 84                 
Correct output: -58                 | Program output: -17                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: 41                 
Correct output: -85                 | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -37                
Correct output: -71                 | Program output: -20                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: 39                 
Correct output: -61                 | Program output: 28                 
Correct output: -26                 | Program output: 5                  
Correct output: -80                 | Program output: 22                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: 69                 
Correct output: -47                 | Program output: -13                
Correct output: 19                  | Program output: 67                 
Correct output: -72                 | Program output: 59                 
Correct output: -92                 | Program output: 64                 
Correct output: -28                 | Program output: -6                 
Correct output: -42                 | Program output: 52                 
Correct output: -59                 | Program output: 85                 
Correct output: -76                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -64                
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_do*count () in1 exec_yank boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (exec_y_when_autoconstructing ()) exec_y_when_autoconstructing () integer_min in3 integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_empty integer_yankdup integer_rot in4 integer_lte) ())))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_do*count () in1 exec_yank boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (exec_y_when_autoconstructing ()) exec_y_when_autoconstructing () integer_min in3 integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_empty integer_yankdup integer_rot in4 integer_lte) ())))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 360 408 360 127 333 529 125 344 294)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (125 360 408 360 127 333 529 125 344 294)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Best program: (exec_do*count () in1 exec_yank boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (exec_y_when_autoconstructing ()) exec_y_when_autoconstructing () integer_min in3 integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_empty integer_yankdup integer_rot in4 integer_lte) ())))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.995
Median total errors in population: 7
Error averages by case: (0.875 0.64 0.592 0.64 0.873 0.667 0.471 0.875 0.656 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.394
Average program size in population (points): 46.148
Average percent parens in population: 0.308
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.549125
Median age in population: 6.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1862736
--- Timings ---
Current time: 1559584330914 milliseconds
Total Time:          13.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 62.4%
Fitness Testing:      4.0 seconds, 28.6%
Report:               1.1 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 668
Test mean error for best: 0.66800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -5                  | Program output: 49                 
Correct output: -23                 | Program output: 86                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: 95                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 75                 
Correct output: 23                  | Program output: 72                 
Correct output: 56                  | Program output: 56                 
Correct output: 5                   | Program output: 53                 
Correct output: 42                  | Program output: 93                 
Correct output: 12                  | Program output: 78                 
Correct output: 30                  | Program output: 42                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 50                 
Correct output: 7                   | Program output: 29                 
Correct output: 14                  | Program output: 22                 
Correct output: 6                   | Program output:                    
Correct output: 1                   | Program output: 48                 
Correct output: 34                  | Program output: 77                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 74                 
Correct output: 40                  | Program output: 44                 
Correct output: -44                 | Program output: 97                 
Correct output: -17                 | Program output: 65                 
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -34                
Correct output: -81                 | Program output: 100                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -56                
Correct output: -10                 | Program output: 84                 
Correct output: -99                 | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: 22                 
Correct output: -56                 | Program output: -51                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: 70                 
Correct output: -96                 | Program output: -24                
Correct output: -99                 | Program output: 89                 
Correct output: -92                 | Program output: 64                 
Correct output: 42                  | Program output: 77                 
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -28                
Correct output: 23                  | Program output: 23                 
Correct output: -11                 | Program output: 24                 
Correct output: -79                 | Program output: 85                 
Correct output: -83                 | Program output: -80                
Correct output: -7                  | Program output: 96                 
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: 31                 
Correct output: -51                 | Program output: -4                 
Correct output: -5                  | Program output: 84                 
Correct output: -58                 | Program output: -45                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -52                
Correct output: -63                 | Program output: -10                
Correct output: -85                 | Program output: 26                 
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -26                
Correct output: -71                 | Program output: -20                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: 39                 
Correct output: -61                 | Program output: 28                 
Correct output: -26                 | Program output: 5                  
Correct output: -80                 | Program output: 25                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -16                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 67                 
Correct output: -72                 | Program output: 59                 
Correct output: -92                 | Program output: 82                 
Correct output: -28                 | Program output: -6                 
Correct output: -42                 | Program output: 52                 
Correct output: -59                 | Program output: 85                 
Correct output: -76                 | Program output: 34                 
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -55                
Correct output: -74                 | Program output: 50                 
Correct output: -66                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_do*count () in1 exec_yank boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (exec_y_when_autoconstructing ()) exec_y_when_autoconstructing () integer_min in3 integer_yank exec_dup (integer_min integer_gt exec_empty) print_integer exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_empty integer_yankdup integer_rot in4 integer_lte) ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 38
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_do*count () in1 exec_yank boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (exec_y_when_autoconstructing ()) exec_y_when_autoconstructing () integer_min in3 integer_yank exec_dup (integer_min integer_gt exec_empty) print_integer exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_empty integer_yankdup integer_rot in4 integer_lte) ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 38
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (642 263 244 510 171 63 697 711 697 306)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (642 263 244 510 171 63 697 711 697 306)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*count} {:close 1, :instruction in1} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_items} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_invert_first_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Best program: (exec_do*count () in1 exec_yank boolean_or integer_dup exec_k_when_autoconstructing (integer_dup_items) (exec_y_when_autoconstructing ()) exec_y_when_autoconstructing () integer_min in3 integer_yank integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (boolean_invert_first_then_and) () exec_y_when_autoconstructing () integer_min in3 integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot in4 integer_lte) ())))
Errors: [0 0 1 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 55
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.696
Median total errors in population: 5
Error averages by case: (0.358 0.737 0.756 0.49 0.829 0.937 0.303 0.289 0.303 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.969
Average program size in population (points): 48.026
Average percent parens in population: 0.310
Minimum age in population: 5.5
Maximum age in population: 9.875
Average age in population: 8.1900625
Median age in population: 8.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.008
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2255573
--- Timings ---
Current time: 1559584333579 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 64.0%
Fitness Testing:      4.4 seconds, 26.6%
Report:               1.4 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 92                 
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: 95                 
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 34                 
Correct output: 9                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 61                 
Correct output: 56                  | Program output: 67                 
Correct output: 5                   | Program output: 21                 
Correct output: 42                  | Program output: 43                 
Correct output: 12                  | Program output: 12                 
Correct output: 30                  | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 19                 
Correct output: 6                   | Program output: 25                 
Correct output: 1                   | Program output: 15                 
Correct output: 34                  | Program output: 34                 
Correct output: 22                  | Program output: 23                 
Correct output: 19                  | Program output: 45                 
Correct output: 4                   | Program output: 51                 
Correct output: 40                  | Program output: 40                 
Correct output: -44                 | Program output: -44                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -62                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -64                
Correct output: -88                 | Program output: -48                
Correct output: -58                 | Program output: -58                
Correct output: -10                 | Program output: 13                 
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -64                
Correct output: 1                   | Program output: 78                 
Correct output: -96                 | Program output: -62                
Correct output: -13                 | Program output: -13                
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: 5                  
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -74                
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -79                 | Program output: -71                
Correct output: -86                 | Program output: -49                
Correct output: 23                  | Program output: 50                 
Correct output: -11                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -32                
Correct output: -7                  | Program output: 35                 
Correct output: -70                 | Program output: 21                 
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -18                
Correct output: -5                  | Program output: -5                 
Correct output: -58                 | Program output: -17                
Correct output: -75                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -85                 | Program output: -85                
Correct output: -23                 | Program output: -1                 
Correct output: -81                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -70                
Correct output: -5                  | Program output: -5                 
Correct output: -61                 | Program output: -60                
Correct output: -26                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: 33                 
Correct output: -99                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603})
Lexicase best program: (exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_rot (exec_eq) () (in4 integer_empty) integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603)))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603})
Zero cases best program: (exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_rot (exec_eq) () (in4 integer_empty) integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603)))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (415 101 132 277 409 244 318 288 324 324)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (415 101 132 277 409 244 318 288 324 324)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603})
Best program: (exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_rot (exec_eq) () (in4 integer_empty) integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603)))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 29
Size: 44
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.168
Median total errors in population: 7
Error averages by case: (0.585 0.899 0.868 0.723 0.591 0.756 0.682 0.712 0.676 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.458
Average program size in population (points): 53.597
Average percent parens in population: 0.318
Minimum age in population: 8.0
Maximum age in population: 11.125
Average age in population: 9.65284375
Median age in population: 9.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.008
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2668035
--- Timings ---
Current time: 1559584336196 milliseconds
Total Time:          19.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 65.1%
Fitness Testing:      4.8 seconds, 25.1%
Report:               1.8 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 335
Test mean error for best: 0.33500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: 1                  
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 92                 
Correct output: -40                 | Program output: 19                 
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 34                 
Correct output: 9                   | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 63                 
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 30                  | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 15                 
Correct output: 34                  | Program output: 34                 
Correct output: 22                  | Program output: 23                 
Correct output: 19                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 40                  | Program output: 40                 
Correct output: -44                 | Program output: 99                 
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -24                
Correct output: -95                 | Program output: 84                 
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: 40                 
Correct output: -81                 | Program output: 3                  
Correct output: 1                   | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: -13                
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: 5                  
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: 26                 
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: 28                 
Correct output: -51                 | Program output: -51                
Correct output: -79                 | Program output: -47                
Correct output: -86                 | Program output: 35                 
Correct output: 23                  | Program output: 50                 
Correct output: -11                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: 15                 
Correct output: -7                  | Program output: -7                 
Correct output: -70                 | Program output: 21                 
Correct output: -78                 | Program output: 44                 
Correct output: -51                 | Program output: -18                
Correct output: -5                  | Program output: -5                 
Correct output: -58                 | Program output: -17                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -85                 | Program output: -85                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -37                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -70                
Correct output: -5                  | Program output: -5                 
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -80                 | Program output: 22                 
Correct output: -32                 | Program output: 33                 
Correct output: -99                 | Program output: 69                 
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: 64                 
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 76                 
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -64                
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 3, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_rot (exec_eq) () (in4 integer_empty) integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt integer_min in3) integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 integer_gt exec_empty integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot in4 integer_lte) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 65
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 3, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_rot (exec_eq) () (in4 integer_empty) integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt integer_min in3) integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 integer_gt exec_empty integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot in4 integer_lte) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 65
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (496 371 219 193 460 367 524 130 411 752)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (496 371 219 193 460 367 524 130 411 752)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_eq} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 3, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Best program: (exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_rot (exec_eq) () (in4 integer_empty) integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt integer_min in3) integer_yank exec_dup (integer_min integer_gt exec_empty) integer_fromboolean in2 integer_gt exec_empty integer_fromboolean in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot in4 integer_lte) ())))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 65
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.077
Median total errors in population: 6
Error averages by case: (0.504 0.629 0.781 0.807 0.54 0.633 0.476 0.87 0.589 0.248)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.418
Average program size in population (points): 55.025
Average percent parens in population: 0.338
Minimum age in population: 9.0
Maximum age in population: 12.609375
Average age in population: 10.828765625
Median age in population: 10.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 189
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.009
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3096163
--- Timings ---
Current time: 1559584338961 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.4 seconds, 65.8%
Fitness Testing:      5.3 seconds, 24.3%
Report:               2.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 30                  | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 40                  | Program output: 40                 
Correct output: -44                 | Program output: -44                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: -13                
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -11                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -85                 | Program output: -85                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: -5                 
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -66                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_688} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot in4 integer_lte) ()))) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 63
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_688} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_gt in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot in4 integer_lte) ()))) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 63
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (658 549 475 374 275 568 568 856 568 544)
Population mean number of elite cases: 5.43
Count of perfect (error zero) individuals by case: (658 549 475 374 275 568 568 856 568 544)
Population mean number of perfect (error zero) cases: 5.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_688} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 2, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction tagged_603} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_60} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_rot})
Best program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 44
Size: 71
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 4.565
Median total errors in population: 3
Error averages by case: (0.342 0.451 0.525 0.626 0.725 0.432 0.432 0.144 0.432 0.456)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.605
Average program size in population (points): 61.042
Average percent parens in population: 0.321
Minimum age in population: 10.9375
Maximum age in population: 13.9609375
Average age in population: 12.570546875
Median age in population: 12.53515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.011
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.175
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3573070
--- Timings ---
Current time: 1559584341789 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 65.9%
Fitness Testing:      5.8 seconds, 23.6%
Report:               2.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 71


Auto-simplifying with starting size: 71
step: 0
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 500
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1000
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1500
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2000
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2500
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3000
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3500
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4000
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4500
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 5000
program: (exec_s (in2) (exec_do*range (exec_s_when_autoconstructing (integer_add tagged_688 exec_if (in1 boolean_invert_second_then_and boolean_swap boolean_not in4 exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) () integer_yank exec_dup (integer_min integer_div exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_y_when_autoconstructing ()) (exec_y_when_autoconstructing ()) integer_min in3) integer_yank exec_dup (exec_empty) integer_fromboolean) (in2 exec_swap (print_integer) (exec_dup (integer_gt tagged_603 exec_if (tag_integer_60 integer_dup integer_dup integer_yankdup integer_rot) ()))) ())) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -5                  | Program output: -5                 
Correct output: -23                 | Program output: -23                
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -22                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -97                 | Program output: -97                
Correct output: -6                  | Program output: -6                 
Correct output: -41                 | Program output: -41                
Correct output: 49                  | Program output: 49                 
Correct output: 48                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -2                  | Program output: -2                 
Correct output: 58                  | Program output: 58                 
Correct output: 19                  | Program output: 19                 
Correct output: 9                   | Program output: 9                  
Correct output: 18                  | Program output: 18                 
Correct output: 23                  | Program output: 23                 
Correct output: 56                  | Program output: 56                 
Correct output: 5                   | Program output: 5                  
Correct output: 42                  | Program output: 42                 
Correct output: 12                  | Program output: 12                 
Correct output: 30                  | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 9                   | Program output: 9                  
Correct output: 7                   | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 22                  | Program output: 22                 
Correct output: 19                  | Program output: 19                 
Correct output: 4                   | Program output: 4                  
Correct output: 40                  | Program output: 40                 
Correct output: -44                 | Program output: -44                
Correct output: -17                 | Program output: -17                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -81                 | Program output: -81                
Correct output: 1                   | Program output: 1                  
Correct output: -96                 | Program output: -96                
Correct output: -13                 | Program output: -13                
Correct output: -56                 | Program output: -56                
Correct output: -58                 | Program output: -58                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -92                 | Program output: -92                
Correct output: 42                  | Program output: 42                 
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 23                  | Program output: 23                 
Correct output: -11                 | Program output: -11                
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -70                 | Program output: -70                
Correct output: -78                 | Program output: -78                
Correct output: -51                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -85                 | Program output: -85                
Correct output: -23                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: -5                 
Correct output: -61                 | Program output: -61                
Correct output: -26                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: 19                  | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: -92                 | Program output: -92                
Correct output: -28                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -74                 | Program output: -74                
Correct output: -66                 | Program output: -66                
;;******************************
