Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[32 32 97 32] 32] [[-4 8 -4 -4] -4] [[-40 -47 -40 -40] -47] [[84 -76 -76 -76] -76] [[-14 -14 -14 64] -14] [[20 20 20 -33] -33] [[-75 -75 -75 69] -75] [[11 11 11 62] 11] [[-44 24 24 24] -44] [[-57 -57 -57 74] -57] [(66 66 66 66) 66] [(19 19 19 19) 19] [(-4 -4 -4 -4) -4] [(-36 -36 -36 -36) -36] [(28 28 28 28) 28] [(29 51 0 74) 0] [(80 4 95 35) 4] [(76 78 8 28) 8] [(51 3 55 22) 3] [(46 7 32 33) 7] [(34 28 33 66) 28] [(19 85 60 86) 19] [(83 29 61 7) 7] [(36 22 100 62) 22] [(16 54 53 8) 8] [(75 61 80 54) 54] [(18 73 56 64) 18] [(58 12 99 76) 12] [(56 23 32 35) 23] [(55 57 59 3) 3] [(85 10 30 24) 10] [(30 32 53 36) 30] [(52 97 62 18) 18] [(53 18 69 89) 18] [(39 81 26 97) 26] [(-58 -70 -2 -47) -70] [(19 94 -58 -46) -58] [(-82 -61 48 -45) -82] [(56 42 45 33) 33] [(-28 92 -96 85) -96] [(-99 -19 -59 5) -99] [(-82 42 -77 79) -82] [(-91 -13 37 74) -91] [(4 -48 57 19) -48] [(93 13 52 55) 13] [(-80 -97 -84 76) -97] [(80 54 -62 -71) -71] [(10 44 87 92) 10] [(-24 -13 -75 -83) -83] [(-61 79 90 9) -61] [(-57 -14 42 -96) -96] [(74 68 -37 19) -37] [(62 -86 -79 21) -86] [(-45 71 40 -55) -55] [(9 9 29 37) 9] [(34 12 -77 20) -77] [(38 -88 -42 -1) -88] [(-39 -37 -52 -68) -68] [(-97 -59 -96 -20) -97] [(-54 25 -3 49) -54] [(-1 95 34 86) -1] [(-97 27 -89 -68) -97] [(-30 -52 34 -34) -52] [(50 15 78 -52) -52] [(-51 8 -41 45) -51] [(-97 -84 -39 -40) -97] [(14 19 -71 8) -71] [(-89 3 75 41) -89] [(-56 -60 -47 -96) -96] [(-67 2 87 52) -67] [(-79 73 93 99) -79] [(38 13 -31 -15) -31] [(85 -79 -76 45) -79] [(-40 -91 57 48) -91] [(79 97 96 38) 38] [(76 59 100 35) 35] [(-86 -75 21 -97) -97] [(-38 4 0 42) -38] [(-24 2 -15 -32) -32] [(3 -62 67 -79) -79] [(90 -42 19 8) -42] [(-5 -34 -72 -45) -72] [(6 -26 -6 -67) -67] [(-96 -36 64 -6) -96] [(69 -79 93 66) -79] [(-5 -87 -45 7) -87] [(-23 72 -2 -93) -93] [(66 24 80 44) 24] [(-1 65 -51 -68) -68] [(24 -56 -14 14) -56] [(96 -60 -35 -17) -60] [(-46 14 -76 -54) -76] [(35 -15 -79 20) -79] [(8 -15 -76 -75) -76] [(-100 -99 96 46) -100])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[32 32 97 32] 32]
Train Case:   6 | Input/Output: [[-4 8 -4 -4] -4]
Train Case:   7 | Input/Output: [[-40 -47 -40 -40] -47]
Train Case:   8 | Input/Output: [[84 -76 -76 -76] -76]
Train Case:   9 | Input/Output: [[-14 -14 -14 64] -14]
Train Case:  10 | Input/Output: [[20 20 20 -33] -33]
Train Case:  11 | Input/Output: [[-75 -75 -75 69] -75]
Train Case:  12 | Input/Output: [[11 11 11 62] 11]
Train Case:  13 | Input/Output: [[-44 24 24 24] -44]
Train Case:  14 | Input/Output: [[-57 -57 -57 74] -57]
Train Case:  15 | Input/Output: [(66 66 66 66) 66]
Train Case:  16 | Input/Output: [(19 19 19 19) 19]
Train Case:  17 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  18 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  19 | Input/Output: [(28 28 28 28) 28]
Train Case:  20 | Input/Output: [(29 51 0 74) 0]
Train Case:  21 | Input/Output: [(80 4 95 35) 4]
Train Case:  22 | Input/Output: [(76 78 8 28) 8]
Train Case:  23 | Input/Output: [(51 3 55 22) 3]
Train Case:  24 | Input/Output: [(46 7 32 33) 7]
Train Case:  25 | Input/Output: [(34 28 33 66) 28]
Train Case:  26 | Input/Output: [(19 85 60 86) 19]
Train Case:  27 | Input/Output: [(83 29 61 7) 7]
Train Case:  28 | Input/Output: [(36 22 100 62) 22]
Train Case:  29 | Input/Output: [(16 54 53 8) 8]
Train Case:  30 | Input/Output: [(75 61 80 54) 54]
Train Case:  31 | Input/Output: [(18 73 56 64) 18]
Train Case:  32 | Input/Output: [(58 12 99 76) 12]
Train Case:  33 | Input/Output: [(56 23 32 35) 23]
Train Case:  34 | Input/Output: [(55 57 59 3) 3]
Train Case:  35 | Input/Output: [(85 10 30 24) 10]
Train Case:  36 | Input/Output: [(30 32 53 36) 30]
Train Case:  37 | Input/Output: [(52 97 62 18) 18]
Train Case:  38 | Input/Output: [(53 18 69 89) 18]
Train Case:  39 | Input/Output: [(39 81 26 97) 26]
Train Case:  40 | Input/Output: [(-58 -70 -2 -47) -70]
Train Case:  41 | Input/Output: [(19 94 -58 -46) -58]
Train Case:  42 | Input/Output: [(-82 -61 48 -45) -82]
Train Case:  43 | Input/Output: [(56 42 45 33) 33]
Train Case:  44 | Input/Output: [(-28 92 -96 85) -96]
Train Case:  45 | Input/Output: [(-99 -19 -59 5) -99]
Train Case:  46 | Input/Output: [(-82 42 -77 79) -82]
Train Case:  47 | Input/Output: [(-91 -13 37 74) -91]
Train Case:  48 | Input/Output: [(4 -48 57 19) -48]
Train Case:  49 | Input/Output: [(93 13 52 55) 13]
Train Case:  50 | Input/Output: [(-80 -97 -84 76) -97]
Train Case:  51 | Input/Output: [(80 54 -62 -71) -71]
Train Case:  52 | Input/Output: [(10 44 87 92) 10]
Train Case:  53 | Input/Output: [(-24 -13 -75 -83) -83]
Train Case:  54 | Input/Output: [(-61 79 90 9) -61]
Train Case:  55 | Input/Output: [(-57 -14 42 -96) -96]
Train Case:  56 | Input/Output: [(74 68 -37 19) -37]
Train Case:  57 | Input/Output: [(62 -86 -79 21) -86]
Train Case:  58 | Input/Output: [(-45 71 40 -55) -55]
Train Case:  59 | Input/Output: [(9 9 29 37) 9]
Train Case:  60 | Input/Output: [(34 12 -77 20) -77]
Train Case:  61 | Input/Output: [(38 -88 -42 -1) -88]
Train Case:  62 | Input/Output: [(-39 -37 -52 -68) -68]
Train Case:  63 | Input/Output: [(-97 -59 -96 -20) -97]
Train Case:  64 | Input/Output: [(-54 25 -3 49) -54]
Train Case:  65 | Input/Output: [(-1 95 34 86) -1]
Train Case:  66 | Input/Output: [(-97 27 -89 -68) -97]
Train Case:  67 | Input/Output: [(-30 -52 34 -34) -52]
Train Case:  68 | Input/Output: [(50 15 78 -52) -52]
Train Case:  69 | Input/Output: [(-51 8 -41 45) -51]
Train Case:  70 | Input/Output: [(-97 -84 -39 -40) -97]
Train Case:  71 | Input/Output: [(14 19 -71 8) -71]
Train Case:  72 | Input/Output: [(-89 3 75 41) -89]
Train Case:  73 | Input/Output: [(-56 -60 -47 -96) -96]
Train Case:  74 | Input/Output: [(-67 2 87 52) -67]
Train Case:  75 | Input/Output: [(-79 73 93 99) -79]
Train Case:  76 | Input/Output: [(38 13 -31 -15) -31]
Train Case:  77 | Input/Output: [(85 -79 -76 45) -79]
Train Case:  78 | Input/Output: [(-40 -91 57 48) -91]
Train Case:  79 | Input/Output: [(79 97 96 38) 38]
Train Case:  80 | Input/Output: [(76 59 100 35) 35]
Train Case:  81 | Input/Output: [(-86 -75 21 -97) -97]
Train Case:  82 | Input/Output: [(-38 4 0 42) -38]
Train Case:  83 | Input/Output: [(-24 2 -15 -32) -32]
Train Case:  84 | Input/Output: [(3 -62 67 -79) -79]
Train Case:  85 | Input/Output: [(90 -42 19 8) -42]
Train Case:  86 | Input/Output: [(-5 -34 -72 -45) -72]
Train Case:  87 | Input/Output: [(6 -26 -6 -67) -67]
Train Case:  88 | Input/Output: [(-96 -36 64 -6) -96]
Train Case:  89 | Input/Output: [(69 -79 93 66) -79]
Train Case:  90 | Input/Output: [(-5 -87 -45 7) -87]
Train Case:  91 | Input/Output: [(-23 72 -2 -93) -93]
Train Case:  92 | Input/Output: [(66 24 80 44) 24]
Train Case:  93 | Input/Output: [(-1 65 -51 -68) -68]
Train Case:  94 | Input/Output: [(24 -56 -14 14) -56]
Train Case:  95 | Input/Output: [(96 -60 -35 -17) -60]
Train Case:  96 | Input/Output: [(-46 14 -76 -54) -76]
Train Case:  97 | Input/Output: [(35 -15 -79 20) -79]
Train Case:  98 | Input/Output: [(8 -15 -76 -75) -76]
Train Case:  99 | Input/Output: [(-100 -99 96 46) -100]
Test Case:   0 | Input/Output: [[92 56 92 92] 56]
Test Case:   1 | Input/Output: [[80 0 80 80] 0]
Test Case:   2 | Input/Output: [[-38 -38 -38 37] -38]
Test Case:   3 | Input/Output: [[-95 -37 -95 -95] -95]
Test Case:   4 | Input/Output: [[-29 -100 -100 -100] -100]
Test Case:   5 | Input/Output: [[100 100 100 98] 98]
Test Case:   6 | Input/Output: [[-78 -78 78 -78] -78]
Test Case:   7 | Input/Output: [[64 64 -22 64] -22]
Test Case:   8 | Input/Output: [[29 14 14 14] 14]
Test Case:   9 | Input/Output: [[-77 -36 -36 -36] -77]
Test Case:  10 | Input/Output: [[-57 -57 -42 -57] -57]
Test Case:  11 | Input/Output: [[-42 -42 -88 -42] -88]
Test Case:  12 | Input/Output: [[-6 -6 -64 -6] -64]
Test Case:  13 | Input/Output: [[72 72 72 73] 72]
Test Case:  14 | Input/Output: [[29 -83 29 29] -83]
Test Case:  15 | Input/Output: [[-31 -67 -67 -67] -67]
Test Case:  16 | Input/Output: [[9 -43 9 9] -43]
Test Case:  17 | Input/Output: [[-26 0 0 0] -26]
Test Case:  18 | Input/Output: [[-100 10 10 10] -100]
Test Case:  19 | Input/Output: [[1 -36 -36 -36] -36]
Test Case:  20 | Input/Output: [[78 43 43 43] 43]
Test Case:  21 | Input/Output: [[43 -55 -55 -55] -55]
Test Case:  22 | Input/Output: [[29 29 29 51] 29]
Test Case:  23 | Input/Output: [[-60 33 -60 -60] -60]
Test Case:  24 | Input/Output: [[7 -16 7 7] -16]
Test Case:  25 | Input/Output: [[-94 38 38 38] -94]
Test Case:  26 | Input/Output: [[36 92 92 92] 36]
Test Case:  27 | Input/Output: [[60 60 25 60] 25]
Test Case:  28 | Input/Output: [[52 52 52 -42] -42]
Test Case:  29 | Input/Output: [[-92 -10 -10 -10] -92]
Test Case:  30 | Input/Output: [[35 -34 -34 -34] -34]
Test Case:  31 | Input/Output: [[89 -42 89 89] -42]
Test Case:  32 | Input/Output: [[83 7 7 7] 7]
Test Case:  33 | Input/Output: [[-54 -54 -54 -25] -54]
Test Case:  34 | Input/Output: [[-72 -49 -72 -72] -72]
Test Case:  35 | Input/Output: [[69 -43 -43 -43] -43]
Test Case:  36 | Input/Output: [[7 7 8 7] 7]
Test Case:  37 | Input/Output: [[-56 -81 -81 -81] -81]
Test Case:  38 | Input/Output: [[30 74 74 74] 30]
Test Case:  39 | Input/Output: [[36 66 36 36] 36]
Test Case:  40 | Input/Output: [[70 91 70 70] 70]
Test Case:  41 | Input/Output: [[11 69 69 69] 11]
Test Case:  42 | Input/Output: [[13 13 34 13] 13]
Test Case:  43 | Input/Output: [[97 97 97 -46] -46]
Test Case:  44 | Input/Output: [[-70 -17 -17 -17] -70]
Test Case:  45 | Input/Output: [[-64 -64 12 -64] -64]
Test Case:  46 | Input/Output: [[-34 -1 -1 -1] -34]
Test Case:  47 | Input/Output: [[94 18 94 94] 18]
Test Case:  48 | Input/Output: [[13 13 13 -55] -55]
Test Case:  49 | Input/Output: [[-6 -42 -6 -6] -42]
Test Case:  50 | Input/Output: [[-8 38 38 38] -8]
Test Case:  51 | Input/Output: [[27 41 27 27] 27]
Test Case:  52 | Input/Output: [[37 37 37 -86] -86]
Test Case:  53 | Input/Output: [[55 -2 55 55] -2]
Test Case:  54 | Input/Output: [[38 9 38 38] 9]
Test Case:  55 | Input/Output: [[-80 -80 -80 54] -80]
Test Case:  56 | Input/Output: [[-47 29 29 29] -47]
Test Case:  57 | Input/Output: [[-31 66 66 66] -31]
Test Case:  58 | Input/Output: [[59 -75 -75 -75] -75]
Test Case:  59 | Input/Output: [[92 -67 92 92] -67]
Test Case:  60 | Input/Output: [[23 17 23 23] 17]
Test Case:  61 | Input/Output: [[-28 -65 -65 -65] -65]
Test Case:  62 | Input/Output: [[26 26 -78 26] -78]
Test Case:  63 | Input/Output: [[26 26 26 71] 26]
Test Case:  64 | Input/Output: [[-9 -9 -9 -39] -39]
Test Case:  65 | Input/Output: [[-27 -15 -27 -27] -27]
Test Case:  66 | Input/Output: [[-45 82 82 82] -45]
Test Case:  67 | Input/Output: [[-82 59 -82 -82] -82]
Test Case:  68 | Input/Output: [[22 -80 -80 -80] -80]
Test Case:  69 | Input/Output: [[68 -3 68 68] -3]
Test Case:  70 | Input/Output: [[70 70 70 -8] -8]
Test Case:  71 | Input/Output: [[-26 18 18 18] -26]
Test Case:  72 | Input/Output: [[-10 -15 -15 -15] -15]
Test Case:  73 | Input/Output: [[3 3 -76 3] -76]
Test Case:  74 | Input/Output: [[-33 -68 -68 -68] -68]
Test Case:  75 | Input/Output: [[-64 20 -64 -64] -64]
Test Case:  76 | Input/Output: [[16 90 16 16] 16]
Test Case:  77 | Input/Output: [[-45 -2 -2 -2] -45]
Test Case:  78 | Input/Output: [[14 -87 -87 -87] -87]
Test Case:  79 | Input/Output: [[-18 57 57 57] -18]
Test Case:  80 | Input/Output: [[79 23 79 79] 23]
Test Case:  81 | Input/Output: [[-90 -30 -30 -30] -90]
Test Case:  82 | Input/Output: [[26 26 -11 26] -11]
Test Case:  83 | Input/Output: [[86 86 -58 86] -58]
Test Case:  84 | Input/Output: [[61 0 0 0] 0]
Test Case:  85 | Input/Output: [[95 33 95 95] 33]
Test Case:  86 | Input/Output: [[37 37 -69 37] -69]
Test Case:  87 | Input/Output: [[15 15 15 17] 15]
Test Case:  88 | Input/Output: [[-46 -46 -46 -19] -46]
Test Case:  89 | Input/Output: [[-39 -90 -90 -90] -90]
Test Case:  90 | Input/Output: [[62 37 37 37] 37]
Test Case:  91 | Input/Output: [[37 37 70 37] 37]
Test Case:  92 | Input/Output: [[46 46 46 43] 43]
Test Case:  93 | Input/Output: [[63 -66 63 63] -66]
Test Case:  94 | Input/Output: [[12 12 12 67] 12]
Test Case:  95 | Input/Output: [[69 10 10 10] 10]
Test Case:  96 | Input/Output: [[-39 -39 -43 -39] -43]
Test Case:  97 | Input/Output: [[-9 -9 66 -9] -9]
Test Case:  98 | Input/Output: [[-73 -92 -73 -73] -92]
Test Case:  99 | Input/Output: [[-59 -59 68 -59] -59]
Test Case: 100 | Input/Output: [(8 8 8 8) 8]
Test Case: 101 | Input/Output: [(31 31 31 31) 31]
Test Case: 102 | Input/Output: [(14 14 14 14) 14]
Test Case: 103 | Input/Output: [(35 35 35 35) 35]
Test Case: 104 | Input/Output: [(87 87 87 87) 87]
Test Case: 105 | Input/Output: [(94 94 94 94) 94]
Test Case: 106 | Input/Output: [(96 96 96 96) 96]
Test Case: 107 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 108 | Input/Output: [(91 91 91 91) 91]
Test Case: 109 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 110 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 111 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 112 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 113 | Input/Output: [(5 5 5 5) 5]
Test Case: 114 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 115 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 116 | Input/Output: [(84 84 84 84) 84]
Test Case: 117 | Input/Output: [(25 25 25 25) 25]
Test Case: 118 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 119 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 120 | Input/Output: [(55 55 55 55) 55]
Test Case: 121 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 122 | Input/Output: [(9 9 9 9) 9]
Test Case: 123 | Input/Output: [(89 89 89 89) 89]
Test Case: 124 | Input/Output: [(52 52 52 52) 52]
Test Case: 125 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 126 | Input/Output: [(39 39 39 39) 39]
Test Case: 127 | Input/Output: [(33 33 33 33) 33]
Test Case: 128 | Input/Output: [(7 7 7 7) 7]
Test Case: 129 | Input/Output: [(64 64 64 64) 64]
Test Case: 130 | Input/Output: [(79 79 79 79) 79]
Test Case: 131 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 132 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 133 | Input/Output: [(30 30 30 30) 30]
Test Case: 134 | Input/Output: [(55 55 55 55) 55]
Test Case: 135 | Input/Output: [(78 78 78 78) 78]
Test Case: 136 | Input/Output: [(14 14 14 14) 14]
Test Case: 137 | Input/Output: [(26 26 26 26) 26]
Test Case: 138 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 139 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 140 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 141 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 142 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 143 | Input/Output: [(38 38 38 38) 38]
Test Case: 144 | Input/Output: [(18 18 18 18) 18]
Test Case: 145 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 146 | Input/Output: [(19 19 19 19) 19]
Test Case: 147 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 148 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 149 | Input/Output: [(1 1 1 1) 1]
Test Case: 150 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 151 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 152 | Input/Output: [(1 1 1 1) 1]
Test Case: 153 | Input/Output: [(72 72 72 72) 72]
Test Case: 154 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 155 | Input/Output: [(22 22 22 22) 22]
Test Case: 156 | Input/Output: [(85 85 85 85) 85]
Test Case: 157 | Input/Output: [(14 14 14 14) 14]
Test Case: 158 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 159 | Input/Output: [(50 50 50 50) 50]
Test Case: 160 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 161 | Input/Output: [(56 56 56 56) 56]
Test Case: 162 | Input/Output: [(5 5 5 5) 5]
Test Case: 163 | Input/Output: [(35 35 35 35) 35]
Test Case: 164 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 165 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 166 | Input/Output: [(11 11 11 11) 11]
Test Case: 167 | Input/Output: [(30 30 30 30) 30]
Test Case: 168 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 169 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 170 | Input/Output: [(59 59 59 59) 59]
Test Case: 171 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 172 | Input/Output: [(17 17 17 17) 17]
Test Case: 173 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 174 | Input/Output: [(27 27 27 27) 27]
Test Case: 175 | Input/Output: [(88 88 88 88) 88]
Test Case: 176 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 177 | Input/Output: [(63 63 63 63) 63]
Test Case: 178 | Input/Output: [(82 82 82 82) 82]
Test Case: 179 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 180 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 181 | Input/Output: [(36 36 36 36) 36]
Test Case: 182 | Input/Output: [(24 24 24 24) 24]
Test Case: 183 | Input/Output: [(73 73 73 73) 73]
Test Case: 184 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 185 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 186 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 187 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 188 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 189 | Input/Output: [(15 15 15 15) 15]
Test Case: 190 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 191 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 192 | Input/Output: [(68 68 68 68) 68]
Test Case: 193 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 194 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 195 | Input/Output: [(56 56 56 56) 56]
Test Case: 196 | Input/Output: [(50 50 50 50) 50]
Test Case: 197 | Input/Output: [(55 55 55 55) 55]
Test Case: 198 | Input/Output: [(85 85 85 85) 85]
Test Case: 199 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 200 | Input/Output: [(17 36 79 57) 17]
Test Case: 201 | Input/Output: [(62 96 6 7) 6]
Test Case: 202 | Input/Output: [(58 56 71 62) 56]
Test Case: 203 | Input/Output: [(20 31 74 5) 5]
Test Case: 204 | Input/Output: [(47 29 2 65) 2]
Test Case: 205 | Input/Output: [(10 83 17 50) 10]
Test Case: 206 | Input/Output: [(71 86 13 90) 13]
Test Case: 207 | Input/Output: [(84 43 25 3) 3]
Test Case: 208 | Input/Output: [(66 57 49 85) 49]
Test Case: 209 | Input/Output: [(44 42 81 49) 42]
Test Case: 210 | Input/Output: [(82 74 94 25) 25]
Test Case: 211 | Input/Output: [(81 12 66 7) 7]
Test Case: 212 | Input/Output: [(13 60 79 88) 13]
Test Case: 213 | Input/Output: [(54 54 63 44) 44]
Test Case: 214 | Input/Output: [(80 60 76 54) 54]
Test Case: 215 | Input/Output: [(77 77 86 34) 34]
Test Case: 216 | Input/Output: [(9 21 17 82) 9]
Test Case: 217 | Input/Output: [(45 81 87 27) 27]
Test Case: 218 | Input/Output: [(15 23 3 2) 2]
Test Case: 219 | Input/Output: [(4 80 64 68) 4]
Test Case: 220 | Input/Output: [(8 48 54 74) 8]
Test Case: 221 | Input/Output: [(89 13 65 57) 13]
Test Case: 222 | Input/Output: [(55 39 35 21) 21]
Test Case: 223 | Input/Output: [(77 91 38 66) 38]
Test Case: 224 | Input/Output: [(5 70 70 47) 5]
Test Case: 225 | Input/Output: [(57 84 41 20) 20]
Test Case: 226 | Input/Output: [(35 83 34 70) 34]
Test Case: 227 | Input/Output: [(81 41 63 71) 41]
Test Case: 228 | Input/Output: [(57 15 4 27) 4]
Test Case: 229 | Input/Output: [(59 51 48 22) 22]
Test Case: 230 | Input/Output: [(10 57 16 19) 10]
Test Case: 231 | Input/Output: [(73 28 57 95) 28]
Test Case: 232 | Input/Output: [(75 75 9 85) 9]
Test Case: 233 | Input/Output: [(43 15 48 2) 2]
Test Case: 234 | Input/Output: [(79 3 63 6) 3]
Test Case: 235 | Input/Output: [(55 75 2 85) 2]
Test Case: 236 | Input/Output: [(41 72 16 36) 16]
Test Case: 237 | Input/Output: [(25 13 87 25) 13]
Test Case: 238 | Input/Output: [(29 55 76 51) 29]
Test Case: 239 | Input/Output: [(54 76 14 78) 14]
Test Case: 240 | Input/Output: [(83 74 5 34) 5]
Test Case: 241 | Input/Output: [(7 17 88 72) 7]
Test Case: 242 | Input/Output: [(79 76 10 18) 10]
Test Case: 243 | Input/Output: [(37 12 9 74) 9]
Test Case: 244 | Input/Output: [(87 50 7 24) 7]
Test Case: 245 | Input/Output: [(54 26 30 33) 26]
Test Case: 246 | Input/Output: [(74 85 98 39) 39]
Test Case: 247 | Input/Output: [(77 27 70 30) 27]
Test Case: 248 | Input/Output: [(22 54 23 14) 14]
Test Case: 249 | Input/Output: [(78 50 45 54) 45]
Test Case: 250 | Input/Output: [(9 3 88 19) 3]
Test Case: 251 | Input/Output: [(98 25 38 46) 25]
Test Case: 252 | Input/Output: [(25 89 45 54) 25]
Test Case: 253 | Input/Output: [(45 95 27 18) 18]
Test Case: 254 | Input/Output: [(6 73 97 14) 6]
Test Case: 255 | Input/Output: [(16 86 1 11) 1]
Test Case: 256 | Input/Output: [(50 65 54 66) 50]
Test Case: 257 | Input/Output: [(86 50 88 70) 50]
Test Case: 258 | Input/Output: [(49 55 14 47) 14]
Test Case: 259 | Input/Output: [(43 59 96 84) 43]
Test Case: 260 | Input/Output: [(77 47 71 83) 47]
Test Case: 261 | Input/Output: [(75 17 55 92) 17]
Test Case: 262 | Input/Output: [(57 8 3 84) 3]
Test Case: 263 | Input/Output: [(90 46 65 30) 30]
Test Case: 264 | Input/Output: [(69 5 26 85) 5]
Test Case: 265 | Input/Output: [(78 35 54 42) 35]
Test Case: 266 | Input/Output: [(26 33 78 75) 26]
Test Case: 267 | Input/Output: [(69 49 24 75) 24]
Test Case: 268 | Input/Output: [(58 65 98 57) 57]
Test Case: 269 | Input/Output: [(50 69 32 67) 32]
Test Case: 270 | Input/Output: [(8 80 98 28) 8]
Test Case: 271 | Input/Output: [(10 29 89 82) 10]
Test Case: 272 | Input/Output: [(17 45 69 62) 17]
Test Case: 273 | Input/Output: [(58 63 85 39) 39]
Test Case: 274 | Input/Output: [(70 95 86 91) 70]
Test Case: 275 | Input/Output: [(62 24 8 13) 8]
Test Case: 276 | Input/Output: [(20 0 78 85) 0]
Test Case: 277 | Input/Output: [(92 38 30 67) 30]
Test Case: 278 | Input/Output: [(65 28 25 97) 25]
Test Case: 279 | Input/Output: [(8 62 62 87) 8]
Test Case: 280 | Input/Output: [(22 35 6 46) 6]
Test Case: 281 | Input/Output: [(65 9 42 100) 9]
Test Case: 282 | Input/Output: [(21 20 73 7) 7]
Test Case: 283 | Input/Output: [(76 78 20 29) 20]
Test Case: 284 | Input/Output: [(32 44 11 16) 11]
Test Case: 285 | Input/Output: [(47 48 56 7) 7]
Test Case: 286 | Input/Output: [(39 89 55 36) 36]
Test Case: 287 | Input/Output: [(66 27 65 41) 27]
Test Case: 288 | Input/Output: [(27 30 62 70) 27]
Test Case: 289 | Input/Output: [(36 30 96 65) 30]
Test Case: 290 | Input/Output: [(66 21 57 32) 21]
Test Case: 291 | Input/Output: [(18 1 48 3) 1]
Test Case: 292 | Input/Output: [(75 45 53 69) 45]
Test Case: 293 | Input/Output: [(48 22 98 48) 22]
Test Case: 294 | Input/Output: [(28 23 12 59) 12]
Test Case: 295 | Input/Output: [(72 87 91 96) 72]
Test Case: 296 | Input/Output: [(7 86 64 26) 7]
Test Case: 297 | Input/Output: [(79 82 10 14) 10]
Test Case: 298 | Input/Output: [(4 84 53 14) 4]
Test Case: 299 | Input/Output: [(19 45 26 92) 19]
Test Case: 300 | Input/Output: [(65 23 12 71) 12]
Test Case: 301 | Input/Output: [(23 79 73 62) 23]
Test Case: 302 | Input/Output: [(4 100 49 24) 4]
Test Case: 303 | Input/Output: [(96 25 79 62) 25]
Test Case: 304 | Input/Output: [(7 84 33 11) 7]
Test Case: 305 | Input/Output: [(43 95 43 55) 43]
Test Case: 306 | Input/Output: [(71 59 78 9) 9]
Test Case: 307 | Input/Output: [(19 74 69 89) 19]
Test Case: 308 | Input/Output: [(50 62 53 22) 22]
Test Case: 309 | Input/Output: [(81 29 70 23) 23]
Test Case: 310 | Input/Output: [(33 65 58 28) 28]
Test Case: 311 | Input/Output: [(13 24 12 43) 12]
Test Case: 312 | Input/Output: [(5 19 5 31) 5]
Test Case: 313 | Input/Output: [(4 49 10 38) 4]
Test Case: 314 | Input/Output: [(26 61 59 12) 12]
Test Case: 315 | Input/Output: [(96 54 55 71) 54]
Test Case: 316 | Input/Output: [(26 65 25 50) 25]
Test Case: 317 | Input/Output: [(26 52 45 81) 26]
Test Case: 318 | Input/Output: [(8 52 12 51) 8]
Test Case: 319 | Input/Output: [(10 56 77 46) 10]
Test Case: 320 | Input/Output: [(50 89 33 94) 33]
Test Case: 321 | Input/Output: [(41 7 36 19) 7]
Test Case: 322 | Input/Output: [(86 11 28 99) 11]
Test Case: 323 | Input/Output: [(43 52 58 34) 34]
Test Case: 324 | Input/Output: [(99 0 57 90) 0]
Test Case: 325 | Input/Output: [(94 57 92 58) 57]
Test Case: 326 | Input/Output: [(85 72 74 38) 38]
Test Case: 327 | Input/Output: [(76 69 0 89) 0]
Test Case: 328 | Input/Output: [(24 1 58 10) 1]
Test Case: 329 | Input/Output: [(2 45 49 41) 2]
Test Case: 330 | Input/Output: [(41 4 39 12) 4]
Test Case: 331 | Input/Output: [(5 44 38 83) 5]
Test Case: 332 | Input/Output: [(39 38 9 51) 9]
Test Case: 333 | Input/Output: [(46 65 13 71) 13]
Test Case: 334 | Input/Output: [(61 67 77 60) 60]
Test Case: 335 | Input/Output: [(80 81 47 93) 47]
Test Case: 336 | Input/Output: [(25 53 21 70) 21]
Test Case: 337 | Input/Output: [(49 39 84 97) 39]
Test Case: 338 | Input/Output: [(62 11 43 73) 11]
Test Case: 339 | Input/Output: [(67 12 49 15) 12]
Test Case: 340 | Input/Output: [(81 1 89 42) 1]
Test Case: 341 | Input/Output: [(59 76 69 66) 59]
Test Case: 342 | Input/Output: [(20 15 5 90) 5]
Test Case: 343 | Input/Output: [(48 79 27 73) 27]
Test Case: 344 | Input/Output: [(25 81 83 29) 25]
Test Case: 345 | Input/Output: [(8 73 62 2) 2]
Test Case: 346 | Input/Output: [(59 8 30 9) 8]
Test Case: 347 | Input/Output: [(87 37 82 23) 23]
Test Case: 348 | Input/Output: [(28 38 99 25) 25]
Test Case: 349 | Input/Output: [(92 57 16 53) 16]
Test Case: 350 | Input/Output: [(92 56 74 29) 29]
Test Case: 351 | Input/Output: [(29 78 18 52) 18]
Test Case: 352 | Input/Output: [(30 92 60 72) 30]
Test Case: 353 | Input/Output: [(80 60 64 94) 60]
Test Case: 354 | Input/Output: [(14 4 97 76) 4]
Test Case: 355 | Input/Output: [(50 12 12 59) 12]
Test Case: 356 | Input/Output: [(94 39 27 94) 27]
Test Case: 357 | Input/Output: [(67 38 83 75) 38]
Test Case: 358 | Input/Output: [(19 59 87 9) 9]
Test Case: 359 | Input/Output: [(20 52 63 94) 20]
Test Case: 360 | Input/Output: [(8 69 77 20) 8]
Test Case: 361 | Input/Output: [(50 22 8 67) 8]
Test Case: 362 | Input/Output: [(94 37 59 76) 37]
Test Case: 363 | Input/Output: [(55 16 17 69) 16]
Test Case: 364 | Input/Output: [(38 89 88 79) 38]
Test Case: 365 | Input/Output: [(80 69 51 69) 51]
Test Case: 366 | Input/Output: [(62 81 80 6) 6]
Test Case: 367 | Input/Output: [(4 51 82 32) 4]
Test Case: 368 | Input/Output: [(21 3 2 77) 2]
Test Case: 369 | Input/Output: [(57 20 22 80) 20]
Test Case: 370 | Input/Output: [(34 77 25 53) 25]
Test Case: 371 | Input/Output: [(48 51 76 30) 30]
Test Case: 372 | Input/Output: [(41 37 91 98) 37]
Test Case: 373 | Input/Output: [(4 34 54 51) 4]
Test Case: 374 | Input/Output: [(32 76 40 49) 32]
Test Case: 375 | Input/Output: [(50 84 54 97) 50]
Test Case: 376 | Input/Output: [(18 82 24 7) 7]
Test Case: 377 | Input/Output: [(47 85 10 87) 10]
Test Case: 378 | Input/Output: [(63 28 22 82) 22]
Test Case: 379 | Input/Output: [(28 71 73 72) 28]
Test Case: 380 | Input/Output: [(15 61 12 21) 12]
Test Case: 381 | Input/Output: [(61 37 65 85) 37]
Test Case: 382 | Input/Output: [(21 22 31 81) 21]
Test Case: 383 | Input/Output: [(95 51 73 69) 51]
Test Case: 384 | Input/Output: [(2 44 9 2) 2]
Test Case: 385 | Input/Output: [(50 73 94 4) 4]
Test Case: 386 | Input/Output: [(77 82 81 66) 66]
Test Case: 387 | Input/Output: [(82 23 75 4) 4]
Test Case: 388 | Input/Output: [(66 6 92 6) 6]
Test Case: 389 | Input/Output: [(44 17 91 53) 17]
Test Case: 390 | Input/Output: [(60 92 80 49) 49]
Test Case: 391 | Input/Output: [(6 69 60 20) 6]
Test Case: 392 | Input/Output: [(29 39 90 20) 20]
Test Case: 393 | Input/Output: [(85 42 33 50) 33]
Test Case: 394 | Input/Output: [(76 84 33 68) 33]
Test Case: 395 | Input/Output: [(31 52 41 18) 18]
Test Case: 396 | Input/Output: [(31 82 19 22) 19]
Test Case: 397 | Input/Output: [(44 4 95 44) 4]
Test Case: 398 | Input/Output: [(46 96 11 40) 11]
Test Case: 399 | Input/Output: [(30 10 1 70) 1]
Test Case: 400 | Input/Output: [(96 -31 17 -37) -37]
Test Case: 401 | Input/Output: [(-24 68 100 61) -24]
Test Case: 402 | Input/Output: [(-39 63 -31 63) -39]
Test Case: 403 | Input/Output: [(-39 -80 72 -67) -80]
Test Case: 404 | Input/Output: [(94 37 61 -51) -51]
Test Case: 405 | Input/Output: [(-46 -19 -31 -24) -46]
Test Case: 406 | Input/Output: [(53 -98 -20 2) -98]
Test Case: 407 | Input/Output: [(3 -39 -59 31) -59]
Test Case: 408 | Input/Output: [(-38 4 -96 -33) -96]
Test Case: 409 | Input/Output: [(37 -17 -30 81) -30]
Test Case: 410 | Input/Output: [(-90 48 55 39) -90]
Test Case: 411 | Input/Output: [(27 26 -5 60) -5]
Test Case: 412 | Input/Output: [(90 -39 -52 97) -52]
Test Case: 413 | Input/Output: [(-1 90 -8 19) -8]
Test Case: 414 | Input/Output: [(91 -33 86 63) -33]
Test Case: 415 | Input/Output: [(-95 -7 75 4) -95]
Test Case: 416 | Input/Output: [(-75 -54 -8 -80) -80]
Test Case: 417 | Input/Output: [(-98 85 -94 51) -98]
Test Case: 418 | Input/Output: [(79 55 29 53) 29]
Test Case: 419 | Input/Output: [(54 77 47 -45) -45]
Test Case: 420 | Input/Output: [(-64 -46 -57 38) -64]
Test Case: 421 | Input/Output: [(-17 -84 50 -16) -84]
Test Case: 422 | Input/Output: [(66 17 76 86) 17]
Test Case: 423 | Input/Output: [(53 48 -83 78) -83]
Test Case: 424 | Input/Output: [(94 73 -80 -63) -80]
Test Case: 425 | Input/Output: [(-21 67 28 -55) -55]
Test Case: 426 | Input/Output: [(29 21 -49 83) -49]
Test Case: 427 | Input/Output: [(45 46 -64 100) -64]
Test Case: 428 | Input/Output: [(-52 -67 73 24) -67]
Test Case: 429 | Input/Output: [(-97 33 -62 30) -97]
Test Case: 430 | Input/Output: [(-68 -31 -8 -79) -79]
Test Case: 431 | Input/Output: [(29 27 -13 59) -13]
Test Case: 432 | Input/Output: [(-99 77 44 21) -99]
Test Case: 433 | Input/Output: [(-84 -13 -66 -2) -84]
Test Case: 434 | Input/Output: [(14 65 55 86) 14]
Test Case: 435 | Input/Output: [(-62 78 93 30) -62]
Test Case: 436 | Input/Output: [(-78 -93 88 -47) -93]
Test Case: 437 | Input/Output: [(-65 -92 74 34) -92]
Test Case: 438 | Input/Output: [(16 -95 65 -27) -95]
Test Case: 439 | Input/Output: [(13 -48 47 15) -48]
Test Case: 440 | Input/Output: [(-12 76 -12 -65) -65]
Test Case: 441 | Input/Output: [(63 -23 37 58) -23]
Test Case: 442 | Input/Output: [(-90 2 42 -31) -90]
Test Case: 443 | Input/Output: [(-49 56 74 -22) -49]
Test Case: 444 | Input/Output: [(-47 6 72 68) -47]
Test Case: 445 | Input/Output: [(-5 22 77 -14) -14]
Test Case: 446 | Input/Output: [(-70 56 -1 -53) -70]
Test Case: 447 | Input/Output: [(32 -7 82 88) -7]
Test Case: 448 | Input/Output: [(23 -69 25 54) -69]
Test Case: 449 | Input/Output: [(-18 6 -78 36) -78]
Test Case: 450 | Input/Output: [(-31 -78 18 -57) -78]
Test Case: 451 | Input/Output: [(-20 90 89 -53) -53]
Test Case: 452 | Input/Output: [(-35 -92 -86 -56) -92]
Test Case: 453 | Input/Output: [(32 -68 28 55) -68]
Test Case: 454 | Input/Output: [(78 -18 -84 -11) -84]
Test Case: 455 | Input/Output: [(-82 24 -15 -98) -98]
Test Case: 456 | Input/Output: [(20 54 -89 -98) -98]
Test Case: 457 | Input/Output: [(-27 -35 -16 -75) -75]
Test Case: 458 | Input/Output: [(-57 -14 50 59) -57]
Test Case: 459 | Input/Output: [(32 41 61 90) 32]
Test Case: 460 | Input/Output: [(83 32 -91 17) -91]
Test Case: 461 | Input/Output: [(-3 85 -25 10) -25]
Test Case: 462 | Input/Output: [(-9 -32 20 -79) -79]
Test Case: 463 | Input/Output: [(42 -16 72 -52) -52]
Test Case: 464 | Input/Output: [(-93 -97 38 -4) -97]
Test Case: 465 | Input/Output: [(92 -78 -97 -97) -97]
Test Case: 466 | Input/Output: [(-87 27 55 -29) -87]
Test Case: 467 | Input/Output: [(3 -72 -72 69) -72]
Test Case: 468 | Input/Output: [(-42 -65 18 -26) -65]
Test Case: 469 | Input/Output: [(83 -5 -68 -81) -81]
Test Case: 470 | Input/Output: [(-92 -87 -50 47) -92]
Test Case: 471 | Input/Output: [(58 48 93 -50) -50]
Test Case: 472 | Input/Output: [(10 -22 15 -14) -22]
Test Case: 473 | Input/Output: [(-63 -42 85 51) -63]
Test Case: 474 | Input/Output: [(52 -40 70 20) -40]
Test Case: 475 | Input/Output: [(-10 -29 -40 27) -40]
Test Case: 476 | Input/Output: [(30 -16 22 -95) -95]
Test Case: 477 | Input/Output: [(53 52 91 95) 52]
Test Case: 478 | Input/Output: [(-91 -49 84 -90) -91]
Test Case: 479 | Input/Output: [(-87 -77 27 16) -87]
Test Case: 480 | Input/Output: [(-27 -98 76 -57) -98]
Test Case: 481 | Input/Output: [(4 -71 61 56) -71]
Test Case: 482 | Input/Output: [(-56 28 -34 -11) -56]
Test Case: 483 | Input/Output: [(18 97 -53 52) -53]
Test Case: 484 | Input/Output: [(-61 -78 2 -70) -78]
Test Case: 485 | Input/Output: [(-5 50 -93 3) -93]
Test Case: 486 | Input/Output: [(59 -74 41 77) -74]
Test Case: 487 | Input/Output: [(78 66 -58 40) -58]
Test Case: 488 | Input/Output: [(-33 -90 56 -28) -90]
Test Case: 489 | Input/Output: [(-9 88 51 10) -9]
Test Case: 490 | Input/Output: [(53 -44 72 48) -44]
Test Case: 491 | Input/Output: [(0 91 32 13) 0]
Test Case: 492 | Input/Output: [(-52 -71 29 99) -71]
Test Case: 493 | Input/Output: [(-92 49 -18 -88) -92]
Test Case: 494 | Input/Output: [(-20 49 -27 88) -27]
Test Case: 495 | Input/Output: [(57 13 98 25) 13]
Test Case: 496 | Input/Output: [(-84 53 70 8) -84]
Test Case: 497 | Input/Output: [(-2 16 -76 66) -76]
Test Case: 498 | Input/Output: [(100 -19 -28 56) -28]
Test Case: 499 | Input/Output: [(-58 -73 93 36) -73]
Test Case: 500 | Input/Output: [(-65 71 -49 43) -65]
Test Case: 501 | Input/Output: [(-92 77 -41 91) -92]
Test Case: 502 | Input/Output: [(55 -52 -42 -77) -77]
Test Case: 503 | Input/Output: [(-4 -68 -70 -67) -70]
Test Case: 504 | Input/Output: [(-99 -35 -27 80) -99]
Test Case: 505 | Input/Output: [(91 29 -11 61) -11]
Test Case: 506 | Input/Output: [(-43 83 60 40) -43]
Test Case: 507 | Input/Output: [(-30 -74 36 64) -74]
Test Case: 508 | Input/Output: [(-91 -56 80 -7) -91]
Test Case: 509 | Input/Output: [(-83 47 96 -89) -89]
Test Case: 510 | Input/Output: [(-87 -90 -59 -26) -90]
Test Case: 511 | Input/Output: [(70 -96 85 -89) -96]
Test Case: 512 | Input/Output: [(16 99 -15 7) -15]
Test Case: 513 | Input/Output: [(9 -63 -29 93) -63]
Test Case: 514 | Input/Output: [(-16 -48 -34 38) -48]
Test Case: 515 | Input/Output: [(-14 -80 48 -67) -80]
Test Case: 516 | Input/Output: [(-42 51 -96 76) -96]
Test Case: 517 | Input/Output: [(52 -71 -26 -98) -98]
Test Case: 518 | Input/Output: [(72 35 5 -37) -37]
Test Case: 519 | Input/Output: [(-4 43 59 12) -4]
Test Case: 520 | Input/Output: [(47 70 -99 -1) -99]
Test Case: 521 | Input/Output: [(2 89 32 95) 2]
Test Case: 522 | Input/Output: [(-79 -13 93 96) -79]
Test Case: 523 | Input/Output: [(-62 42 -60 78) -62]
Test Case: 524 | Input/Output: [(-51 22 -29 -79) -79]
Test Case: 525 | Input/Output: [(80 57 -39 -47) -47]
Test Case: 526 | Input/Output: [(100 40 41 -2) -2]
Test Case: 527 | Input/Output: [(45 -77 -24 7) -77]
Test Case: 528 | Input/Output: [(-72 78 -28 63) -72]
Test Case: 529 | Input/Output: [(68 46 50 18) 18]
Test Case: 530 | Input/Output: [(-95 -98 75 5) -98]
Test Case: 531 | Input/Output: [(-47 -67 -88 -61) -88]
Test Case: 532 | Input/Output: [(-95 -19 -9 -43) -95]
Test Case: 533 | Input/Output: [(59 59 -65 50) -65]
Test Case: 534 | Input/Output: [(-88 -97 74 55) -97]
Test Case: 535 | Input/Output: [(59 -94 0 20) -94]
Test Case: 536 | Input/Output: [(43 -65 -62 68) -65]
Test Case: 537 | Input/Output: [(37 55 73 98) 37]
Test Case: 538 | Input/Output: [(75 4 59 96) 4]
Test Case: 539 | Input/Output: [(-84 -65 -63 -12) -84]
Test Case: 540 | Input/Output: [(-98 38 81 -43) -98]
Test Case: 541 | Input/Output: [(-34 -56 47 -2) -56]
Test Case: 542 | Input/Output: [(-92 -30 -15 51) -92]
Test Case: 543 | Input/Output: [(-73 -28 2 70) -73]
Test Case: 544 | Input/Output: [(-53 12 9 -95) -95]
Test Case: 545 | Input/Output: [(-43 8 96 -87) -87]
Test Case: 546 | Input/Output: [(13 31 -62 63) -62]
Test Case: 547 | Input/Output: [(73 29 -41 29) -41]
Test Case: 548 | Input/Output: [(38 12 -25 64) -25]
Test Case: 549 | Input/Output: [(-49 -5 19 -66) -66]
Test Case: 550 | Input/Output: [(-20 -100 -37 -2) -100]
Test Case: 551 | Input/Output: [(-21 89 70 -84) -84]
Test Case: 552 | Input/Output: [(-26 88 -51 97) -51]
Test Case: 553 | Input/Output: [(-76 17 -66 30) -76]
Test Case: 554 | Input/Output: [(88 2 -93 -81) -93]
Test Case: 555 | Input/Output: [(-8 75 -18 -78) -78]
Test Case: 556 | Input/Output: [(56 -46 1 -45) -46]
Test Case: 557 | Input/Output: [(71 9 -65 -37) -65]
Test Case: 558 | Input/Output: [(75 -1 -89 84) -89]
Test Case: 559 | Input/Output: [(-9 3 -92 -16) -92]
Test Case: 560 | Input/Output: [(-29 -91 20 -47) -91]
Test Case: 561 | Input/Output: [(-3 22 22 22) -3]
Test Case: 562 | Input/Output: [(77 -4 10 95) -4]
Test Case: 563 | Input/Output: [(83 -66 -76 -60) -76]
Test Case: 564 | Input/Output: [(-4 50 23 -14) -14]
Test Case: 565 | Input/Output: [(-89 -76 25 -91) -91]
Test Case: 566 | Input/Output: [(-60 96 -97 48) -97]
Test Case: 567 | Input/Output: [(41 -55 -70 -11) -70]
Test Case: 568 | Input/Output: [(81 49 95 -39) -39]
Test Case: 569 | Input/Output: [(-48 12 33 -42) -48]
Test Case: 570 | Input/Output: [(19 48 62 -59) -59]
Test Case: 571 | Input/Output: [(-3 -57 36 89) -57]
Test Case: 572 | Input/Output: [(0 13 6 16) 0]
Test Case: 573 | Input/Output: [(-3 63 80 -31) -31]
Test Case: 574 | Input/Output: [(-19 58 -62 48) -62]
Test Case: 575 | Input/Output: [(64 38 62 82) 38]
Test Case: 576 | Input/Output: [(-35 -81 49 76) -81]
Test Case: 577 | Input/Output: [(-28 60 70 -68) -68]
Test Case: 578 | Input/Output: [(-81 75 63 -22) -81]
Test Case: 579 | Input/Output: [(80 73 -30 34) -30]
Test Case: 580 | Input/Output: [(18 31 -95 31) -95]
Test Case: 581 | Input/Output: [(-59 87 21 84) -59]
Test Case: 582 | Input/Output: [(57 43 48 59) 43]
Test Case: 583 | Input/Output: [(16 -13 39 60) -13]
Test Case: 584 | Input/Output: [(-99 -42 -58 -49) -99]
Test Case: 585 | Input/Output: [(34 -74 -80 -11) -80]
Test Case: 586 | Input/Output: [(-87 -36 67 66) -87]
Test Case: 587 | Input/Output: [(13 -17 60 -66) -66]
Test Case: 588 | Input/Output: [(37 9 -32 29) -32]
Test Case: 589 | Input/Output: [(-1 15 61 -47) -47]
Test Case: 590 | Input/Output: [(-75 15 -47 -66) -75]
Test Case: 591 | Input/Output: [(-60 -57 83 84) -60]
Test Case: 592 | Input/Output: [(-3 28 37 -44) -44]
Test Case: 593 | Input/Output: [(75 -24 52 -92) -92]
Test Case: 594 | Input/Output: [(9 3 19 65) 3]
Test Case: 595 | Input/Output: [(11 98 -15 18) -15]
Test Case: 596 | Input/Output: [(-51 -72 47 -12) -72]
Test Case: 597 | Input/Output: [(80 -48 -22 76) -48]
Test Case: 598 | Input/Output: [(54 -16 76 84) -16]
Test Case: 599 | Input/Output: [(-21 13 3 1) -21]
Test Case: 600 | Input/Output: [(-84 74 6 70) -84]
Test Case: 601 | Input/Output: [(74 63 -97 -27) -97]
Test Case: 602 | Input/Output: [(47 76 4 46) 4]
Test Case: 603 | Input/Output: [(-97 21 -17 4) -97]
Test Case: 604 | Input/Output: [(94 11 6 84) 6]
Test Case: 605 | Input/Output: [(-32 -34 20 -52) -52]
Test Case: 606 | Input/Output: [(41 -49 -7 -39) -49]
Test Case: 607 | Input/Output: [(-33 13 -38 -80) -80]
Test Case: 608 | Input/Output: [(38 0 -34 -32) -34]
Test Case: 609 | Input/Output: [(71 -61 28 -43) -61]
Test Case: 610 | Input/Output: [(8 -22 -56 -60) -60]
Test Case: 611 | Input/Output: [(-59 60 87 88) -59]
Test Case: 612 | Input/Output: [(-6 -73 70 71) -73]
Test Case: 613 | Input/Output: [(-53 49 -45 5) -53]
Test Case: 614 | Input/Output: [(91 34 -56 -94) -94]
Test Case: 615 | Input/Output: [(27 5 -60 66) -60]
Test Case: 616 | Input/Output: [(5 74 -34 86) -34]
Test Case: 617 | Input/Output: [(83 33 15 39) 15]
Test Case: 618 | Input/Output: [(92 -75 -57 10) -75]
Test Case: 619 | Input/Output: [(4 15 64 -36) -36]
Test Case: 620 | Input/Output: [(13 99 -53 80) -53]
Test Case: 621 | Input/Output: [(-48 20 92 -60) -60]
Test Case: 622 | Input/Output: [(7 -85 25 -77) -85]
Test Case: 623 | Input/Output: [(-64 98 82 -4) -64]
Test Case: 624 | Input/Output: [(41 -25 -48 -86) -86]
Test Case: 625 | Input/Output: [(-96 3 -76 -41) -96]
Test Case: 626 | Input/Output: [(-73 -61 -28 -69) -73]
Test Case: 627 | Input/Output: [(-48 -85 22 -17) -85]
Test Case: 628 | Input/Output: [(-80 -36 -85 -30) -85]
Test Case: 629 | Input/Output: [(85 14 -49 82) -49]
Test Case: 630 | Input/Output: [(84 -71 24 64) -71]
Test Case: 631 | Input/Output: [(49 -1 -18 11) -18]
Test Case: 632 | Input/Output: [(38 23 10 -38) -38]
Test Case: 633 | Input/Output: [(96 43 33 -52) -52]
Test Case: 634 | Input/Output: [(39 65 -12 14) -12]
Test Case: 635 | Input/Output: [(-64 88 -1 -49) -64]
Test Case: 636 | Input/Output: [(-2 -91 72 -4) -91]
Test Case: 637 | Input/Output: [(-65 14 60 -61) -65]
Test Case: 638 | Input/Output: [(-20 -56 67 56) -56]
Test Case: 639 | Input/Output: [(-74 -13 -46 -98) -98]
Test Case: 640 | Input/Output: [(98 -81 -25 92) -81]
Test Case: 641 | Input/Output: [(-17 -23 14 44) -23]
Test Case: 642 | Input/Output: [(-51 -74 -76 -50) -76]
Test Case: 643 | Input/Output: [(-24 -45 -8 -79) -79]
Test Case: 644 | Input/Output: [(40 33 -87 -85) -87]
Test Case: 645 | Input/Output: [(6 56 12 -84) -84]
Test Case: 646 | Input/Output: [(-16 -81 37 -64) -81]
Test Case: 647 | Input/Output: [(21 -21 26 18) -21]
Test Case: 648 | Input/Output: [(-36 -87 -70 34) -87]
Test Case: 649 | Input/Output: [(17 94 -24 -92) -92]
Test Case: 650 | Input/Output: [(18 85 -34 38) -34]
Test Case: 651 | Input/Output: [(-18 32 60 -8) -18]
Test Case: 652 | Input/Output: [(89 7 -29 34) -29]
Test Case: 653 | Input/Output: [(-1 64 -94 -16) -94]
Test Case: 654 | Input/Output: [(100 16 -99 39) -99]
Test Case: 655 | Input/Output: [(-13 25 18 -71) -71]
Test Case: 656 | Input/Output: [(-41 -90 -11 84) -90]
Test Case: 657 | Input/Output: [(-90 -68 3 79) -90]
Test Case: 658 | Input/Output: [(-46 -91 -62 81) -91]
Test Case: 659 | Input/Output: [(-47 51 32 -61) -61]
Test Case: 660 | Input/Output: [(9 72 -91 66) -91]
Test Case: 661 | Input/Output: [(62 -6 60 -56) -56]
Test Case: 662 | Input/Output: [(59 37 95 -41) -41]
Test Case: 663 | Input/Output: [(-23 -22 -82 39) -82]
Test Case: 664 | Input/Output: [(28 -86 -85 -35) -86]
Test Case: 665 | Input/Output: [(-53 -55 -49 48) -55]
Test Case: 666 | Input/Output: [(-48 -88 29 -96) -96]
Test Case: 667 | Input/Output: [(-49 18 49 -83) -83]
Test Case: 668 | Input/Output: [(-68 41 -4 100) -68]
Test Case: 669 | Input/Output: [(-81 -48 48 -39) -81]
Test Case: 670 | Input/Output: [(96 20 100 16) 16]
Test Case: 671 | Input/Output: [(-89 -49 22 51) -89]
Test Case: 672 | Input/Output: [(-19 70 9 -83) -83]
Test Case: 673 | Input/Output: [(82 88 -2 69) -2]
Test Case: 674 | Input/Output: [(68 73 -76 -93) -93]
Test Case: 675 | Input/Output: [(-23 63 -54 -48) -54]
Test Case: 676 | Input/Output: [(-57 53 -98 76) -98]
Test Case: 677 | Input/Output: [(1 -83 86 17) -83]
Test Case: 678 | Input/Output: [(-99 100 -48 -55) -99]
Test Case: 679 | Input/Output: [(-50 98 5 -18) -50]
Test Case: 680 | Input/Output: [(17 96 -11 -97) -97]
Test Case: 681 | Input/Output: [(0 60 76 -34) -34]
Test Case: 682 | Input/Output: [(-99 40 -41 -32) -99]
Test Case: 683 | Input/Output: [(-57 -19 -18 0) -57]
Test Case: 684 | Input/Output: [(-58 98 -27 65) -58]
Test Case: 685 | Input/Output: [(-95 64 -52 -84) -95]
Test Case: 686 | Input/Output: [(82 20 6 23) 6]
Test Case: 687 | Input/Output: [(65 22 -16 22) -16]
Test Case: 688 | Input/Output: [(-61 -93 -9 4) -93]
Test Case: 689 | Input/Output: [(15 -23 81 -93) -93]
Test Case: 690 | Input/Output: [(-100 45 -8 -27) -100]
Test Case: 691 | Input/Output: [(-53 72 -20 -72) -72]
Test Case: 692 | Input/Output: [(-100 8 82 -71) -100]
Test Case: 693 | Input/Output: [(44 -23 -72 94) -72]
Test Case: 694 | Input/Output: [(-85 39 61 -9) -85]
Test Case: 695 | Input/Output: [(-65 70 -33 -70) -70]
Test Case: 696 | Input/Output: [(-12 -92 91 -16) -92]
Test Case: 697 | Input/Output: [(54 -3 48 58) -3]
Test Case: 698 | Input/Output: [(59 56 54 -43) -43]
Test Case: 699 | Input/Output: [(-51 -6 -93 -26) -93]
Test Case: 700 | Input/Output: [(82 -47 -2 -91) -91]
Test Case: 701 | Input/Output: [(-17 99 73 9) -17]
Test Case: 702 | Input/Output: [(-2 -23 66 -20) -23]
Test Case: 703 | Input/Output: [(33 21 -40 88) -40]
Test Case: 704 | Input/Output: [(70 56 -18 69) -18]
Test Case: 705 | Input/Output: [(-75 -10 68 14) -75]
Test Case: 706 | Input/Output: [(46 7 -34 39) -34]
Test Case: 707 | Input/Output: [(96 -55 83 69) -55]
Test Case: 708 | Input/Output: [(53 64 63 -59) -59]
Test Case: 709 | Input/Output: [(64 1 -20 -43) -43]
Test Case: 710 | Input/Output: [(-99 61 3 -26) -99]
Test Case: 711 | Input/Output: [(-34 24 -68 2) -68]
Test Case: 712 | Input/Output: [(31 -73 96 30) -73]
Test Case: 713 | Input/Output: [(63 -76 85 -79) -79]
Test Case: 714 | Input/Output: [(37 92 72 -98) -98]
Test Case: 715 | Input/Output: [(80 35 6 -30) -30]
Test Case: 716 | Input/Output: [(-19 16 53 -38) -38]
Test Case: 717 | Input/Output: [(-40 52 23 50) -40]
Test Case: 718 | Input/Output: [(64 -49 -36 -66) -66]
Test Case: 719 | Input/Output: [(50 22 11 80) 11]
Test Case: 720 | Input/Output: [(-29 -62 64 -55) -62]
Test Case: 721 | Input/Output: [(29 87 -3 -31) -31]
Test Case: 722 | Input/Output: [(-66 91 66 86) -66]
Test Case: 723 | Input/Output: [(-35 49 -22 -82) -82]
Test Case: 724 | Input/Output: [(-76 -5 -86 -9) -86]
Test Case: 725 | Input/Output: [(14 -65 62 -62) -65]
Test Case: 726 | Input/Output: [(-18 -24 18 29) -24]
Test Case: 727 | Input/Output: [(-88 87 -100 51) -100]
Test Case: 728 | Input/Output: [(-4 -96 99 55) -96]
Test Case: 729 | Input/Output: [(69 32 34 -23) -23]
Test Case: 730 | Input/Output: [(-34 -86 61 87) -86]
Test Case: 731 | Input/Output: [(6 -90 97 -38) -90]
Test Case: 732 | Input/Output: [(-20 -92 59 64) -92]
Test Case: 733 | Input/Output: [(-58 73 66 -34) -58]
Test Case: 734 | Input/Output: [(-64 -55 73 19) -64]
Test Case: 735 | Input/Output: [(67 76 -19 -36) -36]
Test Case: 736 | Input/Output: [(-65 -53 27 85) -65]
Test Case: 737 | Input/Output: [(12 68 99 -82) -82]
Test Case: 738 | Input/Output: [(63 38 -81 2) -81]
Test Case: 739 | Input/Output: [(-56 -59 20 59) -59]
Test Case: 740 | Input/Output: [(9 75 -73 -99) -99]
Test Case: 741 | Input/Output: [(-90 -85 18 -27) -90]
Test Case: 742 | Input/Output: [(-52 -15 84 18) -52]
Test Case: 743 | Input/Output: [(98 72 77 -38) -38]
Test Case: 744 | Input/Output: [(90 -5 89 23) -5]
Test Case: 745 | Input/Output: [(7 92 61 -4) -4]
Test Case: 746 | Input/Output: [(-66 4 -95 -22) -95]
Test Case: 747 | Input/Output: [(23 -9 91 -93) -93]
Test Case: 748 | Input/Output: [(-12 -75 -31 -16) -75]
Test Case: 749 | Input/Output: [(23 10 -15 42) -15]
Test Case: 750 | Input/Output: [(-24 -51 -57 95) -57]
Test Case: 751 | Input/Output: [(95 88 61 33) 33]
Test Case: 752 | Input/Output: [(-13 46 51 12) -13]
Test Case: 753 | Input/Output: [(-86 73 21 -43) -86]
Test Case: 754 | Input/Output: [(-86 15 33 52) -86]
Test Case: 755 | Input/Output: [(-19 49 3 -7) -19]
Test Case: 756 | Input/Output: [(81 93 26 -47) -47]
Test Case: 757 | Input/Output: [(4 -82 -43 -9) -82]
Test Case: 758 | Input/Output: [(-46 39 -83 -91) -91]
Test Case: 759 | Input/Output: [(6 -52 -98 -84) -98]
Test Case: 760 | Input/Output: [(91 81 -93 31) -93]
Test Case: 761 | Input/Output: [(-30 81 2 89) -30]
Test Case: 762 | Input/Output: [(4 31 87 -8) -8]
Test Case: 763 | Input/Output: [(50 67 31 -6) -6]
Test Case: 764 | Input/Output: [(-92 52 93 -77) -92]
Test Case: 765 | Input/Output: [(-99 -98 -36 -87) -99]
Test Case: 766 | Input/Output: [(25 -85 76 50) -85]
Test Case: 767 | Input/Output: [(29 63 -42 -23) -42]
Test Case: 768 | Input/Output: [(-14 68 -8 35) -14]
Test Case: 769 | Input/Output: [(-34 -11 -26 39) -34]
Test Case: 770 | Input/Output: [(-55 45 -79 35) -79]
Test Case: 771 | Input/Output: [(-8 -19 -16 20) -19]
Test Case: 772 | Input/Output: [(37 -27 -63 0) -63]
Test Case: 773 | Input/Output: [(-36 -12 34 -41) -41]
Test Case: 774 | Input/Output: [(-86 -81 -92 -68) -92]
Test Case: 775 | Input/Output: [(-11 13 21 97) -11]
Test Case: 776 | Input/Output: [(44 -85 21 48) -85]
Test Case: 777 | Input/Output: [(81 84 27 81) 27]
Test Case: 778 | Input/Output: [(98 2 20 -5) -5]
Test Case: 779 | Input/Output: [(3 -3 61 -15) -15]
Test Case: 780 | Input/Output: [(-17 -58 -46 38) -58]
Test Case: 781 | Input/Output: [(-30 -58 94 -98) -98]
Test Case: 782 | Input/Output: [(-29 70 32 63) -29]
Test Case: 783 | Input/Output: [(56 62 -18 53) -18]
Test Case: 784 | Input/Output: [(46 90 97 -61) -61]
Test Case: 785 | Input/Output: [(-8 95 -42 92) -42]
Test Case: 786 | Input/Output: [(20 73 9 36) 9]
Test Case: 787 | Input/Output: [(-34 64 54 -89) -89]
Test Case: 788 | Input/Output: [(87 81 -75 67) -75]
Test Case: 789 | Input/Output: [(86 53 44 -83) -83]
Test Case: 790 | Input/Output: [(99 78 64 5) 5]
Test Case: 791 | Input/Output: [(-65 9 -89 -20) -89]
Test Case: 792 | Input/Output: [(-54 -39 38 -54) -54]
Test Case: 793 | Input/Output: [(68 68 10 89) 10]
Test Case: 794 | Input/Output: [(97 26 -38 -6) -38]
Test Case: 795 | Input/Output: [(-1 14 -87 -87) -87]
Test Case: 796 | Input/Output: [(-29 -80 19 -33) -80]
Test Case: 797 | Input/Output: [(97 94 -7 -88) -88]
Test Case: 798 | Input/Output: [(-18 -12 48 14) -18]
Test Case: 799 | Input/Output: [(47 -59 -12 -32) -59]
Test Case: 800 | Input/Output: [(-18 13 81 50) -18]
Test Case: 801 | Input/Output: [(78 51 48 -10) -10]
Test Case: 802 | Input/Output: [(-6 39 51 -51) -51]
Test Case: 803 | Input/Output: [(58 59 -55 75) -55]
Test Case: 804 | Input/Output: [(76 -8 -51 68) -51]
Test Case: 805 | Input/Output: [(62 24 -75 -88) -88]
Test Case: 806 | Input/Output: [(87 -50 8 22) -50]
Test Case: 807 | Input/Output: [(-59 64 86 -23) -59]
Test Case: 808 | Input/Output: [(-87 49 34 -33) -87]
Test Case: 809 | Input/Output: [(-57 82 -98 99) -98]
Test Case: 810 | Input/Output: [(58 24 54 -19) -19]
Test Case: 811 | Input/Output: [(2 -40 -23 -58) -58]
Test Case: 812 | Input/Output: [(-83 100 -67 -97) -97]
Test Case: 813 | Input/Output: [(18 65 -19 87) -19]
Test Case: 814 | Input/Output: [(13 61 -68 -48) -68]
Test Case: 815 | Input/Output: [(2 -66 74 81) -66]
Test Case: 816 | Input/Output: [(-37 76 3 -75) -75]
Test Case: 817 | Input/Output: [(39 -24 -30 32) -30]
Test Case: 818 | Input/Output: [(21 -12 -87 -3) -87]
Test Case: 819 | Input/Output: [(83 48 51 59) 48]
Test Case: 820 | Input/Output: [(66 -95 -16 -98) -98]
Test Case: 821 | Input/Output: [(-28 -28 35 44) -28]
Test Case: 822 | Input/Output: [(57 20 -72 31) -72]
Test Case: 823 | Input/Output: [(2 34 99 -46) -46]
Test Case: 824 | Input/Output: [(94 -63 0 -61) -63]
Test Case: 825 | Input/Output: [(-72 -1 -69 -84) -84]
Test Case: 826 | Input/Output: [(-25 -81 -83 79) -83]
Test Case: 827 | Input/Output: [(5 -26 -57 66) -57]
Test Case: 828 | Input/Output: [(54 14 50 -33) -33]
Test Case: 829 | Input/Output: [(-15 48 52 -80) -80]
Test Case: 830 | Input/Output: [(96 34 65 19) 19]
Test Case: 831 | Input/Output: [(-57 -71 98 61) -71]
Test Case: 832 | Input/Output: [(63 -34 5 -41) -41]
Test Case: 833 | Input/Output: [(-67 -46 97 -66) -67]
Test Case: 834 | Input/Output: [(-60 -15 -51 72) -60]
Test Case: 835 | Input/Output: [(-34 -8 -57 25) -57]
Test Case: 836 | Input/Output: [(86 17 59 28) 17]
Test Case: 837 | Input/Output: [(-35 -31 86 44) -35]
Test Case: 838 | Input/Output: [(-96 71 31 33) -96]
Test Case: 839 | Input/Output: [(-26 -52 -71 7) -71]
Test Case: 840 | Input/Output: [(45 -2 -52 71) -52]
Test Case: 841 | Input/Output: [(48 15 90 96) 15]
Test Case: 842 | Input/Output: [(70 -85 45 92) -85]
Test Case: 843 | Input/Output: [(26 -6 29 -17) -17]
Test Case: 844 | Input/Output: [(62 97 -20 62) -20]
Test Case: 845 | Input/Output: [(42 -93 64 -87) -93]
Test Case: 846 | Input/Output: [(71 -37 5 -38) -38]
Test Case: 847 | Input/Output: [(47 -39 40 -65) -65]
Test Case: 848 | Input/Output: [(-38 -57 27 -95) -95]
Test Case: 849 | Input/Output: [(13 24 78 -21) -21]
Test Case: 850 | Input/Output: [(-20 17 -91 -38) -91]
Test Case: 851 | Input/Output: [(-65 -5 -62 -29) -65]
Test Case: 852 | Input/Output: [(-53 40 20 -68) -68]
Test Case: 853 | Input/Output: [(43 70 -68 -86) -86]
Test Case: 854 | Input/Output: [(-18 -74 -65 3) -74]
Test Case: 855 | Input/Output: [(29 -81 -91 -3) -91]
Test Case: 856 | Input/Output: [(57 70 -58 97) -58]
Test Case: 857 | Input/Output: [(51 42 -19 48) -19]
Test Case: 858 | Input/Output: [(25 -42 25 9) -42]
Test Case: 859 | Input/Output: [(-74 -12 -73 27) -74]
Test Case: 860 | Input/Output: [(8 74 99 91) 8]
Test Case: 861 | Input/Output: [(-4 16 -38 23) -38]
Test Case: 862 | Input/Output: [(-19 -89 28 -61) -89]
Test Case: 863 | Input/Output: [(10 -80 -26 95) -80]
Test Case: 864 | Input/Output: [(-31 60 -67 -84) -84]
Test Case: 865 | Input/Output: [(57 33 -66 6) -66]
Test Case: 866 | Input/Output: [(-30 -74 -46 -18) -74]
Test Case: 867 | Input/Output: [(-16 -43 -70 16) -70]
Test Case: 868 | Input/Output: [(-34 -26 25 57) -34]
Test Case: 869 | Input/Output: [(19 -58 72 81) -58]
Test Case: 870 | Input/Output: [(-68 82 -12 -26) -68]
Test Case: 871 | Input/Output: [(-77 73 -98 81) -98]
Test Case: 872 | Input/Output: [(-79 -30 83 -6) -79]
Test Case: 873 | Input/Output: [(-15 56 84 77) -15]
Test Case: 874 | Input/Output: [(69 -98 28 21) -98]
Test Case: 875 | Input/Output: [(37 -17 28 71) -17]
Test Case: 876 | Input/Output: [(-1 -73 -21 -8) -73]
Test Case: 877 | Input/Output: [(77 -60 40 -56) -60]
Test Case: 878 | Input/Output: [(37 -32 -69 -82) -82]
Test Case: 879 | Input/Output: [(-56 -54 -2 -19) -56]
Test Case: 880 | Input/Output: [(30 37 -57 45) -57]
Test Case: 881 | Input/Output: [(58 49 -100 49) -100]
Test Case: 882 | Input/Output: [(-22 42 -83 71) -83]
Test Case: 883 | Input/Output: [(-85 75 71 57) -85]
Test Case: 884 | Input/Output: [(81 11 34 14) 11]
Test Case: 885 | Input/Output: [(-66 -67 -11 69) -67]
Test Case: 886 | Input/Output: [(-32 -24 99 69) -32]
Test Case: 887 | Input/Output: [(44 -99 -94 94) -99]
Test Case: 888 | Input/Output: [(-43 81 -72 53) -72]
Test Case: 889 | Input/Output: [(66 9 -65 97) -65]
Test Case: 890 | Input/Output: [(20 -83 -52 -12) -83]
Test Case: 891 | Input/Output: [(-59 -95 -31 36) -95]
Test Case: 892 | Input/Output: [(36 -25 -59 46) -59]
Test Case: 893 | Input/Output: [(-51 -42 -56 90) -56]
Test Case: 894 | Input/Output: [(17 -49 -95 24) -95]
Test Case: 895 | Input/Output: [(-51 -26 47 99) -51]
Test Case: 896 | Input/Output: [(-80 16 -79 88) -80]
Test Case: 897 | Input/Output: [(-44 -39 -12 70) -44]
Test Case: 898 | Input/Output: [(-29 71 -21 24) -29]
Test Case: 899 | Input/Output: [(84 -25 55 -11) -25]
Test Case: 900 | Input/Output: [(67 67 -78 26) -78]
Test Case: 901 | Input/Output: [(13 -66 -5 64) -66]
Test Case: 902 | Input/Output: [(66 -15 -84 -16) -84]
Test Case: 903 | Input/Output: [(15 75 29 59) 15]
Test Case: 904 | Input/Output: [(-11 -43 2 85) -43]
Test Case: 905 | Input/Output: [(32 -46 -82 -78) -82]
Test Case: 906 | Input/Output: [(-31 26 -57 -89) -89]
Test Case: 907 | Input/Output: [(-57 -96 -65 39) -96]
Test Case: 908 | Input/Output: [(-14 0 17 -97) -97]
Test Case: 909 | Input/Output: [(31 -32 13 -54) -54]
Test Case: 910 | Input/Output: [(-61 -48 30 24) -61]
Test Case: 911 | Input/Output: [(-69 -68 16 -70) -70]
Test Case: 912 | Input/Output: [(18 -90 -23 11) -90]
Test Case: 913 | Input/Output: [(11 70 33 -39) -39]
Test Case: 914 | Input/Output: [(-51 46 3 21) -51]
Test Case: 915 | Input/Output: [(39 -47 77 -27) -47]
Test Case: 916 | Input/Output: [(-45 76 46 -96) -96]
Test Case: 917 | Input/Output: [(-77 -37 -99 36) -99]
Test Case: 918 | Input/Output: [(45 -96 83 91) -96]
Test Case: 919 | Input/Output: [(-95 -93 -74 -28) -95]
Test Case: 920 | Input/Output: [(53 -33 -7 -23) -33]
Test Case: 921 | Input/Output: [(-87 -6 -66 -100) -100]
Test Case: 922 | Input/Output: [(23 -75 -52 -88) -88]
Test Case: 923 | Input/Output: [(-9 -93 -64 -55) -93]
Test Case: 924 | Input/Output: [(98 -32 75 26) -32]
Test Case: 925 | Input/Output: [(15 -59 -6 -15) -59]
Test Case: 926 | Input/Output: [(9 -22 -54 83) -54]
Test Case: 927 | Input/Output: [(13 18 63 1) 1]
Test Case: 928 | Input/Output: [(91 -82 17 -40) -82]
Test Case: 929 | Input/Output: [(52 -48 -41 -18) -48]
Test Case: 930 | Input/Output: [(-35 -81 -26 -11) -81]
Test Case: 931 | Input/Output: [(-64 -3 100 -24) -64]
Test Case: 932 | Input/Output: [(18 -62 49 -9) -62]
Test Case: 933 | Input/Output: [(60 82 -48 -7) -48]
Test Case: 934 | Input/Output: [(-69 -34 -7 -9) -69]
Test Case: 935 | Input/Output: [(-41 6 -23 88) -41]
Test Case: 936 | Input/Output: [(87 -75 -64 69) -75]
Test Case: 937 | Input/Output: [(-74 6 41 -59) -74]
Test Case: 938 | Input/Output: [(39 90 -87 -93) -93]
Test Case: 939 | Input/Output: [(10 -85 9 -88) -88]
Test Case: 940 | Input/Output: [(-12 78 39 -96) -96]
Test Case: 941 | Input/Output: [(47 -58 81 -78) -78]
Test Case: 942 | Input/Output: [(-26 45 -100 89) -100]
Test Case: 943 | Input/Output: [(-61 59 39 -4) -61]
Test Case: 944 | Input/Output: [(71 -61 -72 -89) -89]
Test Case: 945 | Input/Output: [(91 -34 83 43) -34]
Test Case: 946 | Input/Output: [(8 10 -82 -52) -82]
Test Case: 947 | Input/Output: [(35 -33 70 72) -33]
Test Case: 948 | Input/Output: [(8 -39 -54 91) -54]
Test Case: 949 | Input/Output: [(43 -17 -80 -15) -80]
Test Case: 950 | Input/Output: [(58 -81 -85 50) -85]
Test Case: 951 | Input/Output: [(-91 -50 -33 54) -91]
Test Case: 952 | Input/Output: [(-46 72 -92 -8) -92]
Test Case: 953 | Input/Output: [(32 -81 -67 37) -81]
Test Case: 954 | Input/Output: [(30 -29 54 12) -29]
Test Case: 955 | Input/Output: [(15 16 2 -24) -24]
Test Case: 956 | Input/Output: [(-94 86 4 -7) -94]
Test Case: 957 | Input/Output: [(27 -100 58 -34) -100]
Test Case: 958 | Input/Output: [(34 69 6 27) 6]
Test Case: 959 | Input/Output: [(69 -99 -56 96) -99]
Test Case: 960 | Input/Output: [(-22 24 -97 2) -97]
Test Case: 961 | Input/Output: [(-18 62 -73 -53) -73]
Test Case: 962 | Input/Output: [(63 -41 -19 -42) -42]
Test Case: 963 | Input/Output: [(2 51 -68 88) -68]
Test Case: 964 | Input/Output: [(77 -36 -16 -21) -36]
Test Case: 965 | Input/Output: [(-75 91 -95 66) -95]
Test Case: 966 | Input/Output: [(-9 -27 -98 -21) -98]
Test Case: 967 | Input/Output: [(-41 29 66 -98) -98]
Test Case: 968 | Input/Output: [(-93 -59 -58 15) -93]
Test Case: 969 | Input/Output: [(44 -33 70 -63) -63]
Test Case: 970 | Input/Output: [(-57 -30 -52 71) -57]
Test Case: 971 | Input/Output: [(84 90 37 55) 37]
Test Case: 972 | Input/Output: [(66 75 -39 -72) -72]
Test Case: 973 | Input/Output: [(63 39 97 61) 39]
Test Case: 974 | Input/Output: [(-37 97 47 -43) -43]
Test Case: 975 | Input/Output: [(18 -99 50 27) -99]
Test Case: 976 | Input/Output: [(55 -47 77 -63) -63]
Test Case: 977 | Input/Output: [(-56 25 59 -41) -56]
Test Case: 978 | Input/Output: [(-33 98 -89 14) -89]
Test Case: 979 | Input/Output: [(-44 16 35 -25) -44]
Test Case: 980 | Input/Output: [(-29 51 -71 53) -71]
Test Case: 981 | Input/Output: [(-46 -28 31 35) -46]
Test Case: 982 | Input/Output: [(-84 -85 -37 33) -85]
Test Case: 983 | Input/Output: [(35 -75 -46 20) -75]
Test Case: 984 | Input/Output: [(-64 -21 56 -49) -64]
Test Case: 985 | Input/Output: [(41 -41 34 46) -41]
Test Case: 986 | Input/Output: [(-27 96 20 -88) -88]
Test Case: 987 | Input/Output: [(46 -57 -13 14) -57]
Test Case: 988 | Input/Output: [(53 -75 -81 -34) -81]
Test Case: 989 | Input/Output: [(-63 -18 91 87) -63]
Test Case: 990 | Input/Output: [(17 79 -69 -62) -69]
Test Case: 991 | Input/Output: [(84 66 95 78) 66]
Test Case: 992 | Input/Output: [(-32 -92 -19 -94) -94]
Test Case: 993 | Input/Output: [(-66 -68 -51 12) -68]
Test Case: 994 | Input/Output: [(-53 -84 55 68) -84]
Test Case: 995 | Input/Output: [(58 -27 19 95) -27]
Test Case: 996 | Input/Output: [(-69 31 55 -95) -95]
Test Case: 997 | Input/Output: [(-57 -57 -92 86) -92]
Test Case: 998 | Input/Output: [(11 29 83 -6) -6]
Test Case: 999 | Input/Output: [(-12 43 -18 -56) -56]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 123 -55 0 34 -38 -62 44 32 87 -21 -107 87 18 -64 -123 119
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[32 32 97 32] 32] [[-4 8 -4 -4] -4] [[-40 -47 -40 -40] -47] [[84 -76 -76 -76] -76] [[-14 -14 -14 64] -14] [[20 20 20 -33] -33] [[-75 -75 -75 69] -75] [[11 11 11 62] 11] [[-44 24 24 24] -44] [[-57 -57 -57 74] -57] [(66 66 66 66) 66] [(19 19 19 19) 19] [(-4 -4 -4 -4) -4] [(-36 -36 -36 -36) -36] [(28 28 28 28) 28] [(29 51 0 74) 0] [(80 4 95 35) 4] [(76 78 8 28) 8] [(51 3 55 22) 3] [(46 7 32 33) 7] [(34 28 33 66) 28] [(19 85 60 86) 19] [(83 29 61 7) 7] [(36 22 100 62) 22] [(16 54 53 8) 8] [(75 61 80 54) 54] [(18 73 56 64) 18] [(58 12 99 76) 12] [(56 23 32 35) 23] [(55 57 59 3) 3] [(85 10 30 24) 10] [(30 32 53 36) 30] [(52 97 62 18) 18] [(53 18 69 89) 18] [(39 81 26 97) 26] [(-58 -70 -2 -47) -70] [(19 94 -58 -46) -58] [(-82 -61 48 -45) -82] [(56 42 45 33) 33] [(-28 92 -96 85) -96] [(-99 -19 -59 5) -99] [(-82 42 -77 79) -82] [(-91 -13 37 74) -91] [(4 -48 57 19) -48] [(93 13 52 55) 13] [(-80 -97 -84 76) -97] [(80 54 -62 -71) -71] [(10 44 87 92) 10] [(-24 -13 -75 -83) -83] [(-61 79 90 9) -61] [(-57 -14 42 -96) -96] [(74 68 -37 19) -37] [(62 -86 -79 21) -86] [(-45 71 40 -55) -55] [(9 9 29 37) 9] [(34 12 -77 20) -77] [(38 -88 -42 -1) -88] [(-39 -37 -52 -68) -68] [(-97 -59 -96 -20) -97] [(-54 25 -3 49) -54] [(-1 95 34 86) -1] [(-97 27 -89 -68) -97] [(-30 -52 34 -34) -52] [(50 15 78 -52) -52] [(-51 8 -41 45) -51] [(-97 -84 -39 -40) -97] [(14 19 -71 8) -71] [(-89 3 75 41) -89] [(-56 -60 -47 -96) -96] [(-67 2 87 52) -67] [(-79 73 93 99) -79] [(38 13 -31 -15) -31] [(85 -79 -76 45) -79] [(-40 -91 57 48) -91] [(79 97 96 38) 38] [(76 59 100 35) 35] [(-86 -75 21 -97) -97] [(-38 4 0 42) -38] [(-24 2 -15 -32) -32] [(3 -62 67 -79) -79] [(90 -42 19 8) -42] [(-5 -34 -72 -45) -72] [(6 -26 -6 -67) -67] [(-96 -36 64 -6) -96] [(69 -79 93 66) -79] [(-5 -87 -45 7) -87] [(-23 72 -2 -93) -93] [(66 24 80 44) 24] [(-1 65 -51 -68) -68] [(24 -56 -14 14) -56] [(96 -60 -35 -17) -60] [(-46 14 -76 -54) -76] [(35 -15 -79 20) -79] [(8 -15 -76 -75) -76] [(-100 -99 96 46) -100])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 97                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 55                 
Correct output: 7                   | Program output: 32                 
Correct output: 28                  | Program output: 33                 
Correct output: 19                  | Program output: 60                 
Correct output: 7                   | Program output: 61                 
Correct output: 22                  | Program output: 100                
Correct output: 8                   | Program output: 53                 
Correct output: 54                  | Program output: 80                 
Correct output: 18                  | Program output: 56                 
Correct output: 12                  | Program output: 99                 
Correct output: 23                  | Program output: 32                 
Correct output: 3                   | Program output: 59                 
Correct output: 10                  | Program output: 30                 
Correct output: 30                  | Program output: 53                 
Correct output: 18                  | Program output: 62                 
Correct output: 18                  | Program output: 69                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -2                 
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: 48                 
Correct output: 33                  | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: 37                 
Correct output: -48                 | Program output: 57                 
Correct output: 13                  | Program output: 52                 
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 87                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output: 90                 
Correct output: -96                 | Program output: 42                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -79                
Correct output: -55                 | Program output: 40                 
Correct output: 9                   | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -42                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -96                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 34                 
Correct output: -97                 | Program output: -89                
Correct output: -52                 | Program output: 34                 
Correct output: -52                 | Program output: 78                 
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -89                 | Program output: 75                 
Correct output: -96                 | Program output: -47                
Correct output: -67                 | Program output: 87                 
Correct output: -79                 | Program output: 93                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -76                
Correct output: -91                 | Program output: 57                 
Correct output: 38                  | Program output: 96                 
Correct output: 35                  | Program output: 100                
Correct output: -97                 | Program output: 21                 
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: -15                
Correct output: -79                 | Program output: 67                 
Correct output: -42                 | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: 64                 
Correct output: -79                 | Program output: 93                 
Correct output: -87                 | Program output: -45                
Correct output: -93                 | Program output: -2                 
Correct output: 24                  | Program output: 80                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -14                
Correct output: -60                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_659} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop})
Lexicase best program: (exec_when (integer_empty) integer_shove boolean_pop in3 integer_sub boolean_invert_second_then_and exec_k (exec_y_when_autoconstructing (exec_if (exec_while () integer_dec exec_yankdup exec_yankdup) (in4 integer_stackdepth integer_mult integer_flush) in3 integer_rot print_integer) integer_yank in3 integer_empty integer_lte integer_sub integer_stackdepth) (exec_s (integer_max tag_exec_659 (exec_empty integer_rot integer_shove integer_fromboolean integer_mod integer_dup_times print_boolean print_integer) boolean_dup_items boolean_or integer_gt exec_if (integer_shove integer_max) (integer_inc in4 exec_y_when_autoconstructing (in1 exec_dup (integer_div integer_rot integer_dec) boolean_and) exec_yankdup integer_pop)) () ()))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction tag_exec_659} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_pop})
Zero cases best program: (exec_when (integer_empty) integer_shove boolean_pop in3 integer_sub boolean_invert_second_then_and exec_k (exec_y_when_autoconstructing (exec_if (exec_while () integer_dec exec_yankdup exec_yankdup) (in4 integer_stackdepth integer_mult integer_flush) in3 integer_rot print_integer) integer_yank in3 integer_empty integer_lte integer_sub integer_stackdepth) (exec_s (integer_max tag_exec_659 (exec_empty integer_rot integer_shove integer_fromboolean integer_mod integer_dup_times print_boolean print_integer) boolean_dup_items boolean_or integer_gt exec_if (integer_shove integer_max) (integer_inc in4 exec_y_when_autoconstructing (in1 exec_dup (integer_div integer_rot integer_dec) boolean_and) exec_yankdup integer_pop)) () ()))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 3 2 4 27 4 5 4 16)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (3 3 3 2 4 27 4 5 4 16)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction 34} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction tag_integer_360} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction print_boolean})
Best program: (in3 integer_div integer_sub exec_while (integer_inc) print_integer boolean_invert_first_then_and 34 integer_div integer_rot exec_while () integer_rot integer_dup exec_eq boolean_frominteger integer_eq integer_shove boolean_stackdepth integer_dup_items exec_flush exec_shove (integer_eq exec_dup (integer_empty) integer_dec boolean_not exec_pop () exec_pop (integer_div boolean_eq)) exec_yankdup integer_lt exec_dup_times (tag_integer_360 in3) exec_k_when_autoconstructing (boolean_eq) (integer_flush exec_empty exec_pop (integer_sub boolean_eq) integer_add integer_eq print_boolean))
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 56
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 9.929
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.997 0.998 0.996 0.973 0.996 0.995 0.996 0.984)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.483
Average program size in population (points): 69.412
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 493879
--- Timings ---
Current time: 1559583936418 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 30.9%
Fitness Testing:      1.7 seconds, 65.1%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_852} {:close 3, :instruction exec_swap})
Lexicase best program: (exec_do*range (boolean_invert_first_then_and boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995 print_integer boolean_yankdup exec_while (exec_do*range (tagged_852 exec_swap () ()))) ()) ()) () ()))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_852} {:close 3, :instruction exec_swap})
Zero cases best program: (exec_do*range (boolean_invert_first_then_and boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995 print_integer boolean_yankdup exec_while (exec_do*range (tagged_852 exec_swap () ()))) ()) ()) () ()))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 855 289 122 122 1000 291 864 122 1000)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (1 855 289 122 122 0 291 864 122 0)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_852} {:close 3, :instruction exec_swap})
Best program: (exec_do*range (boolean_invert_first_then_and boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995 print_integer boolean_yankdup exec_while (exec_do*range (tagged_852 exec_swap () ()))) ()) ()) () ()))
Errors: [1 0 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 49
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.334
Median total errors in population: 8
Error averages by case: (0.999 0.145 0.711 0.878 0.878 1.0 0.709 0.136 0.878 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 57.754
Average program size in population (points): 75.476
Average percent parens in population: 0.227
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.508
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 951512
--- Timings ---
Current time: 1559583939231 milliseconds
Total Time:           5.4 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.7 seconds, 49.3%
Fitness Testing:      2.3 seconds, 42.7%
Report:               0.3 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: 84                 
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 80                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 51                 
Correct output: 7                   | Program output: 46                 
Correct output: 28                  | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 83                 
Correct output: 22                  | Program output: 36                 
Correct output: 8                   | Program output:                    
Correct output: 54                  | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 23                  | Program output: 56                 
Correct output: 3                   | Program output: 55                 
Correct output: 10                  | Program output: 85                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 53                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -58                
Correct output: -58                 | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 56                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: 4                  
Correct output: 13                  | Program output: 93                 
Correct output: -97                 | Program output: -80                
Correct output: -71                 | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -57                
Correct output: -37                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -55                 | Program output: -45                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 34                 
Correct output: -88                 | Program output: 38                 
Correct output: -68                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -30                
Correct output: -52                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: 38                 
Correct output: -79                 | Program output: 85                 
Correct output: -91                 | Program output: -40                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 76                 
Correct output: -97                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -24                
Correct output: -79                 | Program output: 3                  
Correct output: -42                 | Program output:                    
Correct output: -72                 | Program output: -5                 
Correct output: -67                 | Program output: 6                  
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 69                 
Correct output: -87                 | Program output: -5                 
Correct output: -93                 | Program output: -23                
Correct output: 24                  | Program output: 66                 
Correct output: -68                 | Program output: -1                 
Correct output: -56                 | Program output: 24                 
Correct output: -60                 | Program output: 96                 
Correct output: -76                 | Program output: -46                
Correct output: -79                 | Program output: 35                 
Correct output: -76                 | Program output: 8                  
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop) boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq in4 exec_dup_times (integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when (exec_rot (exec_stackdepth) (integer_dup_times) (integer_mod boolean_swap integer_yank exec_do*times (integer_rot integer_swap)))))) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop) boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq in4 exec_dup_times (integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when (exec_rot (exec_stackdepth) (integer_dup_times) (integer_mod boolean_swap integer_yank exec_do*times (integer_rot integer_swap)))))) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 33 493 294 107 817 33 493 290 901)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (109 33 493 294 107 817 33 493 290 901)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_swap})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop) boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq in4 exec_dup_times (integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when (exec_rot (exec_stackdepth) (integer_dup_times) (integer_mod) integer_pop integer_yank exec_do*times (integer_rot integer_swap)))) ())
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 73
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.43
Median total errors in population: 6
Error averages by case: (0.891 0.967 0.507 0.706 0.893 0.183 0.967 0.507 0.71 0.099)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.772
Average program size in population (points): 63.247
Average percent parens in population: 0.235
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0165
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1444540
--- Timings ---
Current time: 1559583942517 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.8 seconds, 56.8%
Fitness Testing:      2.9 seconds, 34.7%
Report:               0.6 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction print_integer})
Lexicase best program: (integer_fromboolean integer_swap integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup (integer_rot integer_min integer_empty integer_swap) exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Lexicase best errors: [0 0 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction print_integer})
Zero cases best program: (integer_fromboolean integer_swap integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup (integer_rot integer_min integer_empty integer_swap) exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Zero cases best errors: [0 0 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (631 216 1000 630 234 1000 413 216 413 217)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (631 216 0 630 234 0 413 216 413 217)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_eq integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor in3 in2 boolean_invert_first_then_and print_integer) () ())
Errors: [0 0 1 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.03
Median total errors in population: 6
Error averages by case: (0.369 0.784 1.0 0.37 0.766 1.0 0.587 0.784 0.587 0.783)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 52.378
Average program size in population (points): 68.662
Average percent parens in population: 0.231
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.48575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2072863
--- Timings ---
Current time: 1559583945385 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 58.0%
Fitness Testing:      3.6 seconds, 30.9%
Report:               1.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Lexicase best errors: [0 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Zero cases best errors: [0 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (761 761 499 1000 262 499 259 118 2 123)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (761 761 499 0 262 499 259 118 2 123)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min exec_do*times (integer_swap) exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Errors: [0 0 0 1 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 26
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.716
Median total errors in population: 6
Error averages by case: (0.239 0.239 0.501 1.0 0.738 0.501 0.741 0.882 0.998 0.877)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 41.527
Average program size in population (points): 54.376
Average percent parens in population: 0.230
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.980625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2538257
--- Timings ---
Current time: 1559583948301 milliseconds
Total Time:          14.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 61.4%
Fitness Testing:      4.1 seconds, 28.1%
Report:               1.4 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 97                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 95                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 55                 
Correct output: 7                   | Program output: 32                 
Correct output: 28                  | Program output: 33                 
Correct output: 19                  | Program output: 60                 
Correct output: 7                   | Program output: 61                 
Correct output: 22                  | Program output: 100                
Correct output: 8                   | Program output: 53                 
Correct output: 54                  | Program output: 80                 
Correct output: 18                  | Program output: 56                 
Correct output: 12                  | Program output: 99                 
Correct output: 23                  | Program output: 32                 
Correct output: 3                   | Program output: 59                 
Correct output: 10                  | Program output: 30                 
Correct output: 30                  | Program output: 53                 
Correct output: 18                  | Program output: 62                 
Correct output: 18                  | Program output: 69                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -2                 
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: 48                 
Correct output: 33                  | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: 37                 
Correct output: -48                 | Program output: 57                 
Correct output: 13                  | Program output: 52                 
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 87                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output: 90                 
Correct output: -96                 | Program output: 42                 
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -79                
Correct output: -55                 | Program output: 40                 
Correct output: 9                   | Program output: 29                 
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -42                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -96                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 34                 
Correct output: -97                 | Program output: -89                
Correct output: -52                 | Program output: 34                 
Correct output: -52                 | Program output: 78                 
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -39                
Correct output: -71                 | Program output: -71                
Correct output: -89                 | Program output: 75                 
Correct output: -96                 | Program output: -47                
Correct output: -67                 | Program output: 87                 
Correct output: -79                 | Program output: 93                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -76                
Correct output: -91                 | Program output: 57                 
Correct output: 38                  | Program output: 96                 
Correct output: 35                  | Program output: 100                
Correct output: -97                 | Program output: 21                 
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: -15                
Correct output: -79                 | Program output: 67                 
Correct output: -42                 | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -6                 
Correct output: -96                 | Program output: 64                 
Correct output: -79                 | Program output: 93                 
Correct output: -87                 | Program output: -45                
Correct output: -93                 | Program output: -2                 
Correct output: 24                  | Program output: 80                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -14                
Correct output: -60                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: 96                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_852} {:close 3, :instruction exec_swap})
Lexicase best program: (integer_mult boolean_invert_first_then_and boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop in4 exec_k_when_autoconstructing (in1 integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995 print_integer boolean_yankdup exec_while (exec_do*range (tagged_852 exec_swap () ()))) ()) ()) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_852} {:close 3, :instruction exec_swap})
Zero cases best program: (integer_mult boolean_invert_first_then_and boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop in4 exec_k_when_autoconstructing (in1 integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995 print_integer boolean_yankdup exec_while (exec_do*range (tagged_852 exec_swap () ()))) ()) ()) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 308 695 311 574 308 634 4 190 254)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (4 308 695 311 574 308 634 4 190 254)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction 19} {:close 1, :instruction integer_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction print_integer})
Best program: (integer_dup_times boolean_yank integer_div integer_fromboolean exec_y_when_autoconstructing (boolean_frominteger 19) integer_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 in3 print_integer) ())
Errors: [0 1 0 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.718
Median total errors in population: 7
Error averages by case: (0.996 0.692 0.305 0.689 0.426 0.692 0.366 0.996 0.81 0.746)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.462
Average program size in population (points): 54.184
Average percent parens in population: 0.226
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.5446875
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3015376
--- Timings ---
Current time: 1559583950992 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 63.2%
Fitness Testing:      4.6 seconds, 26.7%
Report:               1.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if})
Lexicase best program: (exec_do*range () integer_empty exec_do*range () integer_empty integer_gte integer_dup exec_yankdup boolean_invert_first_then_and in2 integer_dup boolean_invert_second_then_and integer_swap print_integer boolean_frominteger integer_shove integer_pop in3 in3 exec_eq exec_do*count (exec_empty) integer_lte integer_dup_items boolean_eq integer_empty exec_eq print_integer exec_y_when_autoconstructing (exec_stackdepth) exec_if (exec_do*times (boolean_dup_times integer_yankdup) boolean_yank integer_mult exec_if () ()) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if})
Zero cases best program: (exec_do*range () integer_empty exec_do*range () integer_empty integer_gte integer_dup exec_yankdup boolean_invert_first_then_and in2 integer_dup boolean_invert_second_then_and integer_swap print_integer boolean_frominteger integer_shove integer_pop in3 in3 exec_eq exec_do*count (exec_empty) integer_lte integer_dup_items boolean_eq integer_empty exec_eq print_integer exec_y_when_autoconstructing (exec_stackdepth) exec_if (exec_do*times (boolean_dup_times integer_yankdup) boolean_yank integer_mult exec_if () ()) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 444 113 770 334 771 113 120 334 332)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (890 444 113 770 334 771 113 120 334 332)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_eq integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor in3 in2 boolean_invert_first_then_and) (print_integer) ())
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.779
Median total errors in population: 7
Error averages by case: (0.11 0.556 0.887 0.23 0.666 0.229 0.887 0.88 0.666 0.668)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.003
Average program size in population (points): 46.967
Average percent parens in population: 0.228
Minimum age in population: 6.0
Maximum age in population: 10.71875
Average age in population: 9.08209375
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3432423
--- Timings ---
Current time: 1559583953703 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 64.9%
Fitness Testing:      5.1 seconds, 25.3%
Report:               1.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop in4 exec_k_when_autoconstructing (boolean_dup_times integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995) ()) ()) ())
Lexicase best errors: [1 1 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop in4 exec_k_when_autoconstructing (boolean_dup_times integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995) ()) ()) ())
Zero cases best errors: [1 1 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 289 757 468 757 468 469 889 123 467)
Population mean number of elite cases: 4.98
Count of perfect (error zero) individuals by case: (289 289 757 468 757 468 469 889 123 467)
Population mean number of perfect (error zero) cases: 4.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 2, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Errors: [1 1 0 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.024
Median total errors in population: 5
Error averages by case: (0.711 0.711 0.243 0.532 0.243 0.532 0.531 0.111 0.877 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.348
Average program size in population (points): 52.563
Average percent parens in population: 0.228
Minimum age in population: 8.0
Maximum age in population: 12.46875
Average age in population: 10.49653125
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3955869
--- Timings ---
Current time: 1559583956565 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.0 seconds, 65.9%
Fitness Testing:      5.7 seconds, 24.8%
Report:               2.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: 69                 
Correct output: 11                  | Program output: 62                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: 74                 
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 74                 
Correct output: 4                   | Program output: 35                 
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 22                 
Correct output: 7                   | Program output: 33                 
Correct output: 28                  | Program output: 66                 
Correct output: 19                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 62                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 76                 
Correct output: 23                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 24                 
Correct output: 30                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 89                 
Correct output: 26                  | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: 5                  
Correct output: -82                 | Program output: 79                 
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: 1                  
Correct output: 13                  | Program output: 55                 
Correct output: -97                 | Program output: 76                 
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 37                 
Correct output: -77                 | Program output: 20                 
Correct output: -88                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: 49                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: 45                 
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: 45                 
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 8                  
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: 66                 
Correct output: -87                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: 14                 
Correct output: -60                 | Program output: -17                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: 20                 
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -8} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () () integer_add integer_dup_items integer_sub boolean_invert_second_then_and exec_dup_times (exec_eq in4 exec_dup_times (integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank) (in1 exec_yank) print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when (exec_rot (exec_stackdepth) (-8) (integer_mod) boolean_swap integer_yank exec_do*times (integer_rot integer_mult)))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction -8} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () () integer_add integer_dup_items integer_sub boolean_invert_second_then_and exec_dup_times (exec_eq in4 exec_dup_times (integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank) (in1 exec_yank) print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when (exec_rot (exec_stackdepth) (-8) (integer_mod) boolean_swap integer_yank exec_do*times (integer_rot integer_mult)))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 542 92 92 543 86 872 16 3 543)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (884 542 92 92 543 86 872 16 3 543)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot})
Best program: (tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop) boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq in4 exec_dup_times (integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) boolean_shove in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) exec_when (exec_rot () () ()))) ())
Errors: [0 1 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.327
Median total errors in population: 5
Error averages by case: (0.116 0.458 0.908 0.908 0.457 0.914 0.128 0.984 0.997 0.457)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.361
Average program size in population (points): 49.938
Average percent parens in population: 0.228
Minimum age in population: 9.5625
Maximum age in population: 13.7890625
Average age in population: 11.9831484375
Median age in population: 12.04296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4430480
--- Timings ---
Current time: 1559583959546 milliseconds
Total Time:          25.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.0 seconds, 66.6%
Fitness Testing:      6.2 seconds, 24.3%
Report:               2.2 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 boolean_invert_first_then_and print_integer) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 5 305 854 306 116 740 116 306 308)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (5 5 305 854 306 116 740 116 306 308)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if})
Best program: (integer_mult integer_empty integer_pop integer_dup exec_yankdup boolean_invert_first_then_and in2 integer_dup boolean_invert_second_then_and integer_swap print_integer boolean_frominteger integer_shove integer_pop in3 in3 exec_eq exec_do*count (exec_empty) integer_lte integer_dup_items boolean_eq integer_empty exec_eq print_integer exec_y_when_autoconstructing (integer_pop) exec_if (exec_do*times (boolean_dup_times exec_do*times () boolean_yank integer_mult exec_if () ())) ())
Errors: [1 1 0 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.939
Median total errors in population: 8
Error averages by case: (0.995 0.995 0.695 0.146 0.694 0.884 0.26 0.884 0.694 0.692)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.02
Average program size in population (points): 49.339
Average percent parens in population: 0.227
Minimum age in population: 11.21875
Maximum age in population: 15.1328125
Average age in population: 13.33023828125
Median age in population: 13.412109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4999027
--- Timings ---
Current time: 1559583962411 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.0 seconds, 66.3%
Fitness Testing:      6.8 seconds, 23.8%
Report:               2.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Lexicase best program: (exec_do*range (integer_yankdup boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_empty integer_swap) (exec_s_when_autoconstructing (boolean_xor) () (in3 in2 boolean_invert_first_then_and print_integer)) ()))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Zero cases best program: (exec_do*range (integer_yankdup boolean_not integer_yank exec_do*count () boolean_swap in4 boolean_eq exec_rot (integer_empty integer_swap) (exec_s_when_autoconstructing (boolean_xor) () (in3 in2 boolean_invert_first_then_and print_integer)) ()))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (499 9 501 501 499 8 201 499 498 9)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (499 9 501 501 499 8 201 499 498 9)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor in3 in2 boolean_invert_first_then_and print_integer) () ())
Errors: [0 1 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 25
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.776
Median total errors in population: 7
Error averages by case: (0.501 0.991 0.499 0.499 0.501 0.992 0.799 0.501 0.502 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.972
Average program size in population (points): 40.961
Average percent parens in population: 0.220
Minimum age in population: 12.21875
Maximum age in population: 16.705078125
Average age in population: 14.79186328125
Median age in population: 14.89453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5384950
--- Timings ---
Current time: 1559583965049 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.0 seconds, 67.1%
Fitness Testing:      7.3 seconds, 23.2%
Report:               3.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if})
Lexicase best program: (exec_do*range () integer_empty integer_gte integer_dup exec_yankdup boolean_invert_first_then_and in2 integer_dup boolean_invert_second_then_and integer_swap print_integer boolean_frominteger integer_shove integer_pop integer_inc in3 exec_eq exec_do*count (exec_empty) integer_lte integer_dup_items boolean_eq integer_empty exec_eq print_integer exec_y_when_autoconstructing (integer_mult exec_if (exec_empty) (boolean_dup_times integer_yankdup) boolean_yank integer_mult exec_if () ()))
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if})
Zero cases best program: (exec_do*range () integer_empty integer_gte integer_dup exec_yankdup boolean_invert_first_then_and in2 integer_dup boolean_invert_second_then_and integer_swap print_integer boolean_frominteger integer_shove integer_pop integer_inc in3 exec_eq exec_do*count (exec_empty) integer_lte integer_dup_items boolean_eq integer_empty exec_eq print_integer exec_y_when_autoconstructing (integer_mult exec_if (exec_empty) (boolean_dup_times integer_yankdup) boolean_yank integer_mult exec_if () ()))
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 524 277 77 797 526 525 890 603 276)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (76 524 277 77 797 526 525 890 603 276)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_995} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*range} {:close 0, :instruction tagged_852} {:close 2, :instruction exec_swap})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) (in3 in2 integer_dup_items boolean_shove exec_dup_items exec_if (integer_gte print_integer print_integer in2 print_integer integer_div integer_dup_times in4 exec_k_when_autoconstructing (in1 integer_pop integer_max exec_flush integer_lte integer_div tag_boolean_995 print_integer boolean_yankdup exec_while (exec_do*range (tagged_852 exec_swap () ()))) ()) ()) ())
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.429
Median total errors in population: 4
Error averages by case: (0.924 0.476 0.723 0.923 0.203 0.474 0.475 0.11 0.397 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.72
Average program size in population (points): 42.695
Average percent parens in population: 0.208
Minimum age in population: 13.46875
Maximum age in population: 18.4580078125
Average age in population: 16.2556123046875
Median age in population: 16.37451171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5824584
--- Timings ---
Current time: 1559583967777 milliseconds
Total Time:          34.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 67.7%
Fitness Testing:      7.8 seconds, 22.8%
Report:               3.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Lexicase best program: (exec_do*range (boolean_invert_first_then_and boolean_not integer_rot tagged_272 integer_sub exec_swap () (boolean_xor) in3 in2 boolean_invert_first_then_and print_integer))
Lexicase best errors: [0 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Zero cases best program: (exec_do*range (boolean_invert_first_then_and boolean_not integer_rot tagged_272 integer_sub exec_swap () (boolean_xor) in3 in2 boolean_invert_first_then_and print_integer))
Zero cases best errors: [0 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (420 215 875 217 425 626 627 218 32 1000)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (420 215 875 217 425 626 627 218 32 0)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer})
Best program: (integer_fromboolean boolean_and exec_s_when_autoconstructing () (exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (boolean_xor) () (in3 in2 boolean_invert_first_then_and print_integer)) ())
Errors: [0 1 0 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.345
Median total errors in population: 6
Error averages by case: (0.58 0.785 0.125 0.783 0.575 0.374 0.373 0.782 0.968 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 37.853
Average program size in population (points): 47.974
Average percent parens in population: 0.210
Minimum age in population: 14.46875
Maximum age in population: 19.8232421875
Average age in population: 17.32617138671875
Median age in population: 17.420166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6373651
--- Timings ---
Current time: 1559583970591 milliseconds
Total Time:          36.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 67.9%
Fitness Testing:      8.4 seconds, 22.7%
Report:               3.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: 84                 
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 80                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 51                 
Correct output: 7                   | Program output: 46                 
Correct output: 28                  | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 83                 
Correct output: 22                  | Program output: 36                 
Correct output: 8                   | Program output: 16                 
Correct output: 54                  | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 23                  | Program output: 56                 
Correct output: 3                   | Program output: 55                 
Correct output: 10                  | Program output: 85                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 53                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -58                
Correct output: -58                 | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 56                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: 4                  
Correct output: 13                  | Program output: 93                 
Correct output: -97                 | Program output: -80                
Correct output: -71                 | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -24                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -57                
Correct output: -37                 | Program output: 74                 
Correct output: -86                 | Program output: 62                 
Correct output: -55                 | Program output: -45                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 34                 
Correct output: -88                 | Program output: 38                 
Correct output: -68                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -30                
Correct output: -52                 | Program output: 50                 
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -56                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: 38                 
Correct output: -79                 | Program output: 85                 
Correct output: -91                 | Program output: -40                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 76                 
Correct output: -97                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -24                
Correct output: -79                 | Program output: 3                  
Correct output: -42                 | Program output: 90                 
Correct output: -72                 | Program output: -5                 
Correct output: -67                 | Program output: 6                  
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: 69                 
Correct output: -87                 | Program output: -5                 
Correct output: -93                 | Program output: -23                
Correct output: 24                  | Program output: 66                 
Correct output: -68                 | Program output: -1                 
Correct output: -56                 | Program output: 24                 
Correct output: -60                 | Program output: 96                 
Correct output: -76                 | Program output: -46                
Correct output: -79                 | Program output: 35                 
Correct output: -76                 | Program output: 8                  
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () () integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when ()) ())
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () () integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when ()) ())
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 328 1 1 426 330 132 426 757 329)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (329 328 1 1 426 330 132 426 757 329)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times exec_y_when_autoconstructing (exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min integer_dup_items exec_noop boolean_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div)) ()))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.941
Median total errors in population: 7
Error averages by case: (0.671 0.672 0.999 0.999 0.574 0.67 0.868 0.574 0.243 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.736
Average program size in population (points): 46.214
Average percent parens in population: 0.204
Minimum age in population: 15.46875
Maximum age in population: 21.190185546875
Average age in population: 18.600490234375
Median age in population: 18.7890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.709
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6891448
--- Timings ---
Current time: 1559583973741 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.1 seconds, 68.2%
Fitness Testing:      9.0 seconds, 22.6%
Report:               3.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: 64                 
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: 74                 
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: 5                  
Correct output: -82                 | Program output: 79                 
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: 76                 
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: 49                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 45                 
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -74                
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2)
Lexicase best errors: [0 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2)
Zero cases best errors: [0 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 118 399 249 500 396 297 183 183 896)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (297 118 399 249 500 396 297 183 183 896)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2)
Errors: [0 0 1 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 56
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.482
Median total errors in population: 7
Error averages by case: (0.703 0.882 0.601 0.751 0.5 0.604 0.703 0.817 0.817 0.104)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.975
Average program size in population (points): 44.973
Average percent parens in population: 0.200
Minimum age in population: 16.46875
Maximum age in population: 22.739990234375
Average age in population: 20.19731372070312
Median age in population: 20.28387451171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7445277
--- Timings ---
Current time: 1559583976914 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 67.9%
Fitness Testing:      9.6 seconds, 22.4%
Report:               4.1 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: 64                 
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: 74                 
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: 5                  
Correct output: -82                 | Program output: 79                 
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: 76                 
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: 49                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 45                 
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -74                
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean boolean_and exec_rot () (exec_eq integer_sub) (boolean_yank boolean_pop boolean_dup tag_boolean_536 integer_add integer_rot tagged_272) integer_sub exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2)
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean boolean_and exec_rot () (exec_eq integer_sub) (boolean_yank boolean_pop boolean_dup tag_boolean_536 integer_add integer_rot tagged_272) integer_sub exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2)
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (408 37 407 407 202 452 868 202 423 37)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (408 37 407 407 202 452 868 202 423 37)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2)
Errors: [0 1 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 47
Size: 56
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 6.557
Median total errors in population: 6
Error averages by case: (0.592 0.963 0.593 0.593 0.798 0.548 0.132 0.798 0.577 0.963)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.838
Average program size in population (points): 48.467
Average percent parens in population: 0.182
Minimum age in population: 18.38525390625
Maximum age in population: 23.67120361328125
Average age in population: 21.82417120361328
Median age in population: 21.95651245117188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8100565
--- Timings ---
Current time: 1559583980175 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 67.4%
Fitness Testing:     10.3 seconds, 22.4%
Report:               4.6 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: 69                 
Correct output: 11                  | Program output: 62                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: 74                 
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 74                 
Correct output: 4                   | Program output: 35                 
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 22                 
Correct output: 7                   | Program output: 33                 
Correct output: 28                  | Program output: 66                 
Correct output: 19                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 62                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 76                 
Correct output: 23                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 24                 
Correct output: 30                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 89                 
Correct output: 26                  | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: 5                  
Correct output: -82                 | Program output: 79                 
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: 19                 
Correct output: 13                  | Program output: 55                 
Correct output: -97                 | Program output: 76                 
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 37                 
Correct output: -77                 | Program output: 20                 
Correct output: -88                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: 49                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: 45                 
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: 45                 
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 8                  
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: 66                 
Correct output: -87                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: 14                 
Correct output: -60                 | Program output: -17                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: 20                 
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 exec_s (exec_swap () (integer_add integer_dup_items) integer_dup boolean_invert_second_then_and boolean_pop) (boolean_swap exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () in3 boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Lexicase best errors: [0 0 1 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction exec_s} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 exec_s (exec_swap () (integer_add integer_dup_items) integer_dup boolean_invert_second_then_and boolean_pop) (boolean_swap exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () in3 boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Zero cases best errors: [0 0 1 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 236 316 294 1 867 293 316 236 301)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (236 236 316 294 1 867 293 316 236 301)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 boolean_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 0 1 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 50
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 6.904
Median total errors in population: 6
Error averages by case: (0.764 0.764 0.684 0.706 0.999 0.133 0.707 0.684 0.764 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.249
Average program size in population (points): 55.192
Average percent parens in population: 0.180
Minimum age in population: 19.38525390625
Maximum age in population: 25.0791015625
Average age in population: 23.33977691650391
Median age in population: 23.42939758300781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.005
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8878036
--- Timings ---
Current time: 1559583983550 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.1 seconds, 66.8%
Fitness Testing:     11.2 seconds, 22.6%
Report:               5.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 55                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 92                 
Correct output: -99                 | Program output:                    
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 95                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 20                 
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -41                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (integer_min boolean_invert_second_then_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) (print_integer)) () ())
Lexicase best errors: [1 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (integer_min boolean_invert_second_then_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) (print_integer)) () ())
Zero cases best errors: [1 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 252 218 221 109 218 843 218 252 263)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (110 252 218 221 109 218 843 218 252 263)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (integer_add integer_dup_items integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup))
Errors: [1 1 0 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 47
Size: 56
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 7.296
Median total errors in population: 7
Error averages by case: (0.89 0.748 0.782 0.779 0.891 0.782 0.157 0.782 0.748 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.796
Average program size in population (points): 55.817
Average percent parens in population: 0.196
Minimum age in population: 21.66650390625
Maximum age in population: 26.94253540039062
Average age in population: 25.16052311706543
Median age in population: 25.21320343017578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9618666
--- Timings ---
Current time: 1559583986929 milliseconds
Total Time:          52.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.1 seconds, 66.4%
Fitness Testing:     12.0 seconds, 22.8%
Report:               5.6 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: 64                 
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: 69                 
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: 74                 
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 78                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 73                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 97                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: 5                  
Correct output: -82                 | Program output: 79                 
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: 76                 
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: 49                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: 45                 
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 97                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output:                    
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (integer_min boolean_invert_second_then_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_rot exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) (integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Lexicase best errors: [0 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () integer_rot integer_min integer_empty integer_swap exec_s_when_autoconstructing (integer_min boolean_invert_second_then_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_rot exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) (integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Zero cases best errors: [0 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 45 59 204 58 648 344 354 254 256)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (156 45 59 204 58 648 344 354 254 256)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 1, :instruction in2})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_inc exec_swap () (integer_add integer_dup_items) integer_sub boolean_invert_second_then_and boolean_pop boolean_stackdepth exec_yankdup boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_flush exec_dup_times () integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger in1 exec_yank) print_integer exec_y ()) (boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) integer_empty boolean_frominteger exec_flush exec_yank integer_rot exec_pop (in2))
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 57
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.622
Median total errors in population: 7
Error averages by case: (0.844 0.955 0.941 0.796 0.942 0.352 0.656 0.646 0.746 0.744)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.767
Average program size in population (points): 56.358
Average percent parens in population: 0.186
Minimum age in population: 23.260498046875
Maximum age in population: 28.94253540039062
Average age in population: 26.77403708648682
Median age in population: 26.81232452392578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.006
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 10392744
--- Timings ---
Current time: 1559583990368 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.1 seconds, 65.9%
Fitness Testing:     12.9 seconds, 22.9%
Report:               6.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 60                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 53                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 94                 
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: 3N                 
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -13                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 71                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -37                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 34                 
Correct output: -97                 | Program output: 27                 
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 96                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: 2                  
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: 72                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: 65                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: 14                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor in3 in2 integer_pop boolean_invert_second_then_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer integer_flush) exec_yank in1 exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when ())
Lexicase best errors: [0 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_when})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor in3 in2 integer_pop boolean_invert_second_then_and exec_empty exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer integer_flush) exec_yank in1 exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 exec_when ())
Zero cases best errors: [0 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 345 74 871 269 107 451 126 9 279)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (106 345 74 871 269 107 451 126 9 279)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [1 1 0 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 43
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 7.363
Median total errors in population: 7
Error averages by case: (0.894 0.655 0.926 0.129 0.731 0.893 0.549 0.874 0.991 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.798
Average program size in population (points): 54.763
Average percent parens in population: 0.163
Minimum age in population: 25.67179870605469
Maximum age in population: 30.06448364257812
Average age in population: 28.47760242462158
Median age in population: 28.49817276000977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.007
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 11200809
--- Timings ---
Current time: 1559583993713 milliseconds
Total Time:          59.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.0 seconds, 65.4%
Fitness Testing:     13.8 seconds, 23.2%
Report:               6.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: 64                 
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: 69                 
Correct output: 11                  | Program output: 62                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: 74                 
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 74                 
Correct output: 4                   | Program output: 35                 
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 22                 
Correct output: 7                   | Program output: 33                 
Correct output: 28                  | Program output: 66                 
Correct output: 19                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 62                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 76                 
Correct output: 23                  | Program output: 35                 
Correct output: 3                   | Program output: 1                  
Correct output: 10                  | Program output: 24                 
Correct output: 30                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 89                 
Correct output: 26                  | Program output: 97                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: 5                  
Correct output: -82                 | Program output: 79                 
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: 19                 
Correct output: 13                  | Program output: 55                 
Correct output: -97                 | Program output: 76                 
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: 21                 
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 37                 
Correct output: -77                 | Program output: 20                 
Correct output: -88                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: 49                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: 45                 
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: 45                 
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 42                 
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 8                  
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: 66                 
Correct output: -87                 | Program output: 7                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: 14                 
Correct output: -60                 | Program output: -17                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: 20                 
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Lexicase best program: (boolean_dup boolean_dup_items integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer integer_flush) exec_yank in1 exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 boolean_rot exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth exec_if (boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Lexicase best errors: [0 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Zero cases best program: (boolean_dup boolean_dup_items integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_k_when_autoconstructing (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) (print_integer integer_flush) exec_yank in1 exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 boolean_rot exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth exec_if (boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Zero cases best errors: [0 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (468 298 376 39 39 406 289 365 387 190)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (468 298 376 39 39 406 289 365 387 190)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor in3 in2 integer_pop boolean_invert_second_then_and integer_min integer_empty integer_swap boolean_xor in3 in2 integer_pop boolean_invert_second_then_and exec_empty exec_do*count (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) print_integer boolean_yank boolean_flush exec_yank integer_div integer_stackdepth integer_empty)
Errors: [0 0 1 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 42
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 7.143
Median total errors in population: 6
Error averages by case: (0.532 0.702 0.624 0.961 0.961 0.594 0.711 0.635 0.613 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.937
Average program size in population (points): 47.701
Average percent parens in population: 0.142
Minimum age in population: 29.36936187744141
Maximum age in population: 31.71692276000977
Average age in population: 30.50688785552979
Median age in population: 30.61703491210938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 164
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.007
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 12037407
--- Timings ---
Current time: 1559583997163 milliseconds
Total Time:          63.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.0 seconds, 65.0%
Fitness Testing:     14.8 seconds, 23.4%
Report:               7.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 580
Test mean error for best: 0.58000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 626                
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 35                 
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 22                 
Correct output: 7                   | Program output: 33                 
Correct output: 28                  | Program output: 66                 
Correct output: 19                  | Program output: 86                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 62                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 76                 
Correct output: 23                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 24                 
Correct output: 30                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 89                 
Correct output: 26                  | Program output: 97                 
Correct output: -70                 | Program output: -2                 
Correct output: -58                 | Program output: 0N                 
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: 74                 
Correct output: -48                 | Program output: 19                 
Correct output: 13                  | Program output: 55                 
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 92                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -79                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 3737               
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -42                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -96                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -89                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -39                
Correct output: -71                 | Program output: -711               
Correct output: -89                 | Program output: 41                 
Correct output: -96                 | Program output: -47                
Correct output: -67                 | Program output: 52                 
Correct output: -79                 | Program output: 99                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -76                
Correct output: -91                 | Program output: 48                 
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: 66                 
Correct output: -87                 | Program output: -45                
Correct output: -93                 | Program output: -2                 
Correct output: 24                  | Program output: 44                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -14                
Correct output: -60                 | Program output: -35                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Lexicase best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) boolean_stackdepth) (exec_dup () integer_rot) integer_min integer_empty integer_swap boolean_xor in3 in2 integer_pop boolean_invert_second_then_and exec_empty exec_do*count (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) print_integer boolean_yank boolean_flush exec_yank integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 boolean_rot exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth exec_if (boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Zero cases best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) boolean_stackdepth) (exec_dup () integer_rot) integer_min integer_empty integer_swap boolean_xor in3 in2 integer_pop boolean_invert_second_then_and exec_empty exec_do*count (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) print_integer boolean_yank boolean_flush exec_yank integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 boolean_rot exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth exec_if (boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (831 400 332 8 495 438 227 163 398 849)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (831 400 332 8 495 438 227 163 398 849)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction in2})
Best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) boolean_stackdepth) (exec_dup () integer_rot) integer_min integer_empty integer_swap boolean_xor in3 in2 integer_pop boolean_invert_second_then_and exec_empty exec_do*count (in4 integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank) print_integer boolean_yank boolean_flush exec_yank integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2 boolean_rot exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth exec_if (boolean_frominteger exec_flush exec_yank integer_rot integer_inc in2) ())
Errors: [0 0 0 1 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 66
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 5.859
Median total errors in population: 6
Error averages by case: (0.169 0.6 0.668 0.992 0.505 0.562 0.773 0.837 0.602 0.151)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.604
Average program size in population (points): 47.599
Average percent parens in population: 0.146
Minimum age in population: 30.54314231872559
Maximum age in population: 33.46999359130859
Average age in population: 32.08924573135376
Median age in population: 32.16720199584961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12886555
--- Timings ---
Current time: 1559584000434 milliseconds
Total Time:          66.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.0 seconds, 64.6%
Fitness Testing:     15.7 seconds, 23.6%
Report:               7.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 60                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 53                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 40                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -96                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 34                 
Correct output: -97                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 96                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: -15                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank print_integer boolean_yank boolean_flush exec_yank integer_div integer_stackdepth integer_empty)
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger integer_stackdepth exec_while (integer_flush) exec_yank in1 exec_yank print_integer boolean_yank boolean_flush exec_yank integer_div integer_stackdepth integer_empty)
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (787 782 396 452 452 346 84 551 548 394)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (787 782 396 452 452 346 84 551 548 394)
Population mean number of perfect (error zero) cases: 4.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 45
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 5.208
Median total errors in population: 4
Error averages by case: (0.213 0.218 0.604 0.548 0.548 0.654 0.916 0.449 0.452 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.357
Average program size in population (points): 52.294
Average percent parens in population: 0.152
Minimum age in population: 31.86470794677734
Maximum age in population: 35.06423902511597
Average age in population: 33.69530001735687
Median age in population: 33.76828193664551
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13567204
--- Timings ---
Current time: 1559584003640 milliseconds
Total Time:          69.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.9 seconds, 64.5%
Fitness Testing:     16.4 seconds, 23.6%
Report:               8.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yankdup})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor boolean_dup_items in2 integer_min boolean_invert_second_then_and boolean_xor exec_swap (exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_do*count (integer_rot print_exec (integer_yankdup)))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.163
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 1, :instruction integer_yankdup})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor boolean_dup_items in2 integer_min boolean_invert_second_then_and boolean_xor exec_swap (exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_do*count (integer_rot print_exec (integer_yankdup)))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 582 582 863 582 100 882 304 854 857)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (449 582 582 863 582 100 882 304 854 857)
Population mean number of perfect (error zero) cases: 6.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) (integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 3.945
Median total errors in population: 3
Error averages by case: (0.551 0.418 0.418 0.137 0.418 0.9 0.118 0.696 0.146 0.143)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.526
Average program size in population (points): 49.485
Average percent parens in population: 0.161
Minimum age in population: 33.21692276000977
Maximum age in population: 36.92040777206421
Average age in population: 35.26516082286835
Median age in population: 35.30775189399719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 14301910
--- Timings ---
Current time: 1559584006887 milliseconds
Total Time:          72.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.8 seconds, 64.3%
Fitness Testing:     17.3 seconds, 23.7%
Report:               8.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor boolean_dup_items in2 integer_min boolean_invert_second_then_and boolean_xor exec_swap (exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div boolean_pop integer_empty boolean_frominteger exec_flush exec_do*count (integer_rot integer_inc integer_yankdup))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor boolean_dup_items in2 integer_min boolean_invert_second_then_and boolean_xor exec_swap (exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div boolean_pop integer_empty boolean_frominteger exec_flush exec_do*count (integer_rot integer_inc integer_yankdup))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (665 687 666 656 883 161 665 158 867 1)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (665 687 666 656 883 161 665 158 867 1)
Population mean number of perfect (error zero) cases: 5.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor integer_dup_items) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) (integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 4.591
Median total errors in population: 3
Error averages by case: (0.335 0.313 0.334 0.344 0.117 0.839 0.335 0.842 0.133 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.312
Average program size in population (points): 46.674
Average percent parens in population: 0.158
Minimum age in population: 34.66795587539673
Maximum age in population: 38.48027122020721
Average age in population: 36.89761402976513
Median age in population: 36.96806991100311
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14999241
--- Timings ---
Current time: 1559584010080 milliseconds
Total Time:          76.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.7 seconds, 64.1%
Fitness Testing:     18.1 seconds, 23.8%
Report:               9.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 28                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 85                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 64                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 81                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: 85                 
Correct output: -99                 | Program output: -19                
Correct output: -82                 | Program output: 42                 
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: 25                 
Correct output: -1                  | Program output: 86                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: 8                  
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: 4                  
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup})
Lexicase best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_inc boolean_pop in4) in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) (integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup})
Zero cases best program: (boolean_dup_times boolean_xor exec_k (exec_dup_times (exec_eq integer_inc boolean_pop in4) in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth) (integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (508 135 508 507 233 508 507 231 866 227)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (508 135 508 507 233 508 507 231 866 227)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (integer_fromboolean boolean_and integer_rot exec_eq integer_sub boolean_yank boolean_pop boolean_yank boolean_pop in4 boolean_stackdepth exec_dup () boolean_xor boolean_dup_items in2 integer_min boolean_invert_second_then_and boolean_xor exec_swap (exec_empty in2 in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_do*count (integer_rot integer_inc integer_yankdup))
Errors: [0 1 0 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 41
Size: 48
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 5.77
Median total errors in population: 5
Error averages by case: (0.492 0.865 0.492 0.493 0.767 0.492 0.493 0.769 0.134 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.854
Average program size in population (points): 46.07
Average percent parens in population: 0.156
Minimum age in population: 35.66795587539673
Maximum age in population: 40.0122532248497
Average age in population: 38.45216373294592
Median age in population: 38.48148590326309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 15694135
--- Timings ---
Current time: 1559584013326 milliseconds
Total Time:          79.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 63.9%
Fitness Testing:     18.9 seconds, 23.9%
Report:               9.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 407
Test mean error for best: 0.40700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 60                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 53                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output: 79                 
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 40                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -96                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 34                 
Correct output: -97                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 96                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: -15                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (488 859 266 252 564 331 883 277 251 564)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (488 859 266 252 564 331 883 277 251 564)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in2 integer_pop boolean_not exec_empty in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and boolean_frominteger exec_flush exec_yank integer_max integer_inc integer_yankdup)
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 38
Size: 46
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 5.265
Median total errors in population: 5
Error averages by case: (0.512 0.141 0.734 0.748 0.436 0.669 0.117 0.723 0.749 0.436)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.89
Average program size in population (points): 47.348
Average percent parens in population: 0.157
Minimum age in population: 37.73185634613037
Maximum age in population: 41.45580193400383
Average age in population: 39.88096828469634
Median age in population: 39.9218413233757
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 16394378
--- Timings ---
Current time: 1559584016511 milliseconds
Total Time:          82.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 63.7%
Fitness Testing:     19.8 seconds, 24.0%
Report:              10.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 60                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output:                    
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 32                 
Correct output: 18                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -77                
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 44                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -14                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 40                 
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -96                
Correct output: -54                 | Program output: -3                 
Correct output: -1                  | Program output: 34                 
Correct output: -97                 | Program output: -89                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -41                
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output:                    
Correct output: -89                 | Program output: 3                  
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: 2                  
Correct output: -79                 | Program output: 73                 
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 96                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -75                
Correct output: -38                 | Program output: 0                  
Correct output: -32                 | Program output: -15                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output:                    
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in2 integer_pop boolean_not exec_empty in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and boolean_frominteger exec_flush exec_yank integer_max integer_inc integer_yankdup)
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and exec_empty exec_if (in2 integer_pop boolean_not exec_empty in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) (print_integer exec_y ()) boolean_flush boolean_invert_second_then_and boolean_frominteger exec_flush exec_yank integer_max integer_inc integer_yankdup)
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 813 273 562 235 365 841 631 835 631)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (199 813 273 562 235 365 841 631 835 631)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 39
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4.615
Median total errors in population: 4
Error averages by case: (0.801 0.187 0.727 0.438 0.765 0.635 0.159 0.369 0.165 0.369)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.44
Average program size in population (points): 42.569
Average percent parens in population: 0.166
Minimum age in population: 38.73185634613037
Maximum age in population: 43.07130950689316
Average age in population: 40.83835423250496
Median age in population: 40.94313034415245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 17137928
--- Timings ---
Current time: 1559584019840 milliseconds
Total Time:          85.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.5 seconds, 63.5%
Fitness Testing:     20.7 seconds, 24.1%
Report:              10.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 80                 
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 51                 
Correct output: 7                   | Program output: 46                 
Correct output: 28                  | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 36                 
Correct output: 8                   | Program output: 54                 
Correct output: 54                  | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 23                  | Program output: 56                 
Correct output: 3                   | Program output: 1                  
Correct output: 10                  | Program output: 85                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 53                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 56                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 34                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 19                 
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 76                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 exec_dup () boolean_xor in3 in2 integer_pop boolean_not exec_empty in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer) (exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub boolean_xor exec_k (exec_dup_times (exec_eq boolean_yank boolean_pop in4) in2 integer_min boolean_invert_second_then_and boolean_xor boolean_and boolean_dup tag_boolean_536 integer_add integer_rot tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 exec_dup () boolean_xor in3 in2 integer_pop boolean_not exec_empty in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer) (exec_y ()) boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 579 228 620 826 358 785 323 865 11)
Population mean number of elite cases: 4.85
Count of perfect (error zero) individuals by case: (258 579 228 620 826 358 785 323 865 11)
Population mean number of perfect (error zero) cases: 4.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 44
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 5.147
Median total errors in population: 4
Error averages by case: (0.742 0.421 0.772 0.38 0.174 0.642 0.215 0.677 0.135 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.145
Average program size in population (points): 48.147
Average percent parens in population: 0.167
Minimum age in population: 39.73185634613037
Maximum age in population: 44.67879069596529
Average age in population: 42.35621791969985
Median age in population: 42.37347142398357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.008
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 17896008
--- Timings ---
Current time: 1559584023219 milliseconds
Total Time:          89.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 63.3%
Fitness Testing:     21.5 seconds, 24.2%
Report:              11.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 459
Test mean error for best: 0.45900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 80                 
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 1                  
Correct output: 7                   | Program output: 46                 
Correct output: 28                  | Program output: 34                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 75                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 23                  | Program output: 56                 
Correct output: 3                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 18976252           
Correct output: 18                  | Program output: 53                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -61                
Correct output: 33                  | Program output: 56                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -59                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -13                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 93                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: 9                  
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 19                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -84                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 76                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -36                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 66                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: -99                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (866 646 225 133 364 871 508 280 359 499)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (866 646 225 133 364 871 508 280 359 499)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and in3 in2 integer_pop boolean_not exec_empty in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () boolean_flush boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 62
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 5.249
Median total errors in population: 5
Error averages by case: (0.134 0.354 0.775 0.867 0.636 0.129 0.492 0.72 0.641 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.497
Average program size in population (points): 52.789
Average percent parens in population: 0.158
Minimum age in population: 42.01769414544106
Maximum age in population: 45.59691340848804
Average age in population: 43.51234434977546
Median age in population: 43.52224372327328
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.009
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 18665747
--- Timings ---
Current time: 1559584026631 milliseconds
Total Time:          92.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.5 seconds, 63.2%
Fitness Testing:     22.4 seconds, 24.2%
Report:              11.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output:                    
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -24                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -57                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -45                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -24                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output:                    
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -23                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -1                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -46                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub exec_swap (exec_dup () boolean_xor) (in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) print_integer exec_y () integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.156
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub exec_swap (exec_dup () boolean_xor) (in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank) print_integer exec_y () integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (611 767 86 591 348 711 692 73 707 126)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (611 767 86 591 348 711 692 73 707 126)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (boolean_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 31
Percent parens: 0.097
--- Population Statistics ---
Average total errors in population: 5.288
Median total errors in population: 5
Error averages by case: (0.389 0.233 0.914 0.409 0.652 0.289 0.308 0.927 0.293 0.874)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.469
Average program size in population (points): 49.962
Average percent parens in population: 0.150
Minimum age in population: 43.19650065898895
Maximum age in population: 46.89056956768036
Average age in population: 44.92647996007651
Median age in population: 44.94650065898895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.009
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 19470085
--- Timings ---
Current time: 1559584030100 milliseconds
Total Time:          96.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.4 seconds, 62.9%
Fitness Testing:     23.4 seconds, 24.4%
Report:              12.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 444
Test mean error for best: 0.44400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output:                    
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 55                 
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -24                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -57                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -45                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -24                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output:                    
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -23                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -1                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -46                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (787 653 618 810 285 384 465 116 655 880)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (787 653 618 810 285 384 465 116 655 880)
Population mean number of perfect (error zero) cases: 5.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_396} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_396 integer_sub boolean_xor in2 integer_min boolean_invert_second_then_and integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 35
Percent parens: 0.057
--- Population Statistics ---
Average total errors in population: 4.347
Median total errors in population: 4
Error averages by case: (0.213 0.347 0.382 0.19 0.715 0.616 0.535 0.884 0.345 0.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.507
Average program size in population (points): 45.082
Average percent parens in population: 0.141
Minimum age in population: 44.19650065898895
Maximum age in population: 48.29991772770882
Average age in population: 46.13516377242748
Median age in population: 46.19650065898895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.009
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 20210260
--- Timings ---
Current time: 1559584033159 milliseconds
Total Time:          99.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 62.8%
Fitness Testing:     24.3 seconds, 24.4%
Report:              12.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 29                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output:                    
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 1                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: 19                 
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: 54                 
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -24                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -57                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -45                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -24                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output:                    
Correct output: -72                 | Program output: -34                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -23                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -1                 
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -46                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -15                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.128
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (849 139 691 767 879 246 468 775 323 264)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (849 139 691 767 879 246 468 775 323 264)
Population mean number of perfect (error zero) cases: 5.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 tagged_272 integer_sub boolean_xor in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_y () integer_fromboolean boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 33
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 4.599
Median total errors in population: 4
Error averages by case: (0.151 0.861 0.309 0.233 0.121 0.754 0.532 0.225 0.677 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.319
Average program size in population (points): 40.948
Average percent parens in population: 0.136
Minimum age in population: 45.19650065898895
Maximum age in population: 49.87320919334888
Average age in population: 47.69872872614721
Median age in population: 47.69650065898895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.008
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 20981858
--- Timings ---
Current time: 1559584036476 milliseconds
Total Time:         102.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 62.9%
Fitness Testing:     25.1 seconds, 24.5%
Report:              12.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -40                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 29                 
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 5                  
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 39                 
Correct output: -70                 | Program output: -47                
Correct output: -58                 | Program output: -46                
Correct output: -82                 | Program output: -45                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -28                
Correct output: -99                 | Program output: -3N                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 68                 
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: 12                 
Correct output: -88                 | Program output: -1                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -68                
Correct output: -52                 | Program output: -34                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -40                
Correct output: -71                 | Program output: 8                  
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: -15                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -45                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -6                 
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 5                  
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -17                
Correct output: -76                 | Program output: -54                
Correct output: -79                 | Program output: -15                
Correct output: -76                 | Program output: -75                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_do*times () integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 48
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 2, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer exec_do*times () integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 404 406 128 808 619 29 619 504 864)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (884 404 406 128 808 619 29 619 504 864)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 in2 exec_dup () boolean_xor in4 in2 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_empty boolean_frominteger exec_flush exec_yank integer_rot integer_inc integer_yankdup)
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 47
Size: 54
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 4.735
Median total errors in population: 4
Error averages by case: (0.116 0.596 0.594 0.872 0.192 0.381 0.971 0.381 0.496 0.136)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.936
Average program size in population (points): 43.533
Average percent parens in population: 0.125
Minimum age in population: 46.19650065898895
Maximum age in population: 50.85354848578572
Average age in population: 48.96724260586128
Median age in population: 49.08405002125073
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.01
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 21641028
--- Timings ---
Current time: 1559584039483 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.3 seconds, 62.8%
Fitness Testing:     25.9 seconds, 24.5%
Report:              13.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 217
Test mean error for best: 0.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: 20                 
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output:                    
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 16                 
Correct output: 54                  | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 52                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 42                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -62                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -75                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -57                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -45                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -52                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: 15                 
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -60                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 79                 
Correct output: 35                  | Program output: 59                 
Correct output: -97                 | Program output: -86                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -24                
Correct output: -79                 | Program output: -62                
Correct output: -42                 | Program output: -42                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -26                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output:                    
Correct output: -93                 | Program output: -23                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -51                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 37
Percent parens: 0.162
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 739 484 112 675 690 688 25 324 265)
Population mean number of elite cases: 4.59
Count of perfect (error zero) individuals by case: (583 739 484 112 675 690 688 25 324 265)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 5.415
Median total errors in population: 4
Error averages by case: (0.417 0.261 0.516 0.888 0.325 0.31 0.312 0.975 0.676 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.827
Average program size in population (points): 48.079
Average percent parens in population: 0.131
Minimum age in population: 49.26059631258249
Maximum age in population: 51.76059631258249
Average age in population: 50.59859573889128
Median age in population: 50.63439957238734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.01
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 22272670
--- Timings ---
Current time: 1559584042341 milliseconds
Total Time:         108.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.3 seconds, 62.9%
Fitness Testing:     26.6 seconds, 24.5%
Report:              13.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 18
Test mean error for best: 0.01800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 1
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 1
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 1
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 9                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -41                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 43
Percent parens: 0.116
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 43
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (44 368 609 809 814 897 366 790 814 708)
Population mean number of elite cases: 6.22
Count of perfect (error zero) individuals by case: (44 368 609 809 814 897 366 790 814 708)
Population mean number of perfect (error zero) cases: 6.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_536} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_yankdup})
Best program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 38
Size: 43
Percent parens: 0.116
--- Population Statistics ---
Average total errors in population: 3.781
Median total errors in population: 3
Error averages by case: (0.956 0.632 0.391 0.191 0.186 0.103 0.634 0.21 0.186 0.292)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.189
Average program size in population (points): 40.183
Average percent parens in population: 0.149
Minimum age in population: 50.97854848578572
Maximum age in population: 53.38559631258249
Average age in population: 52.59959987617913
Median age in population: 52.59426897790399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 346
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.374
Total error diversity:				 0.011
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 22780222
--- Timings ---
Current time: 1559584045093 milliseconds
Total Time:         111.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.3 seconds, 63.1%
Fitness Testing:     27.1 seconds, 24.3%
Report:              13.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 43


Auto-simplifying with starting size: 43
step: 0
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 500
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1000
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 1500
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2000
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 2500
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3000
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 3500
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4000
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 4500
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

step: 5000
program: (boolean_dup tag_boolean_536 integer_add in1 exec_eq integer_sub boolean_xor in2 integer_min exec_swap () (exec_dup () boolean_xor) in3 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_min boolean_invert_second_then_and in4 integer_stackdepth exec_while (integer_flush) boolean_frominteger boolean_xor exec_yank print_integer boolean_frominteger integer_fromboolean boolean_invert_second_then_and boolean_invert_second_then_and integer_div integer_stackdepth integer_rot integer_inc integer_yankdup)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 43

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 18
Test mean error for best: 0.01800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 1
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 1
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 1
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 32                  | Program output: 32                 
Correct output: -4                  | Program output: -4                 
Correct output: -47                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -14                 | Program output: -14                
Correct output: -33                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: 11                  | Program output: 11                 
Correct output: -44                 | Program output: -44                
Correct output: -57                 | Program output: -57                
Correct output: 66                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: -4                  | Program output: -4                 
Correct output: -36                 | Program output: -36                
Correct output: 28                  | Program output: 28                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 28                  | Program output: 28                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 9                  
Correct output: 54                  | Program output: 54                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -70                 | Program output: -70                
Correct output: -58                 | Program output: -58                
Correct output: -82                 | Program output: -82                
Correct output: 33                  | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -99                 | Program output: -99                
Correct output: -82                 | Program output: -82                
Correct output: -91                 | Program output: -91                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: 10                  | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -77                 | Program output: -77                
Correct output: -88                 | Program output: -88                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -52                 | Program output: -52                
Correct output: -52                 | Program output: -52                
Correct output: -51                 | Program output: -51                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -96                 | Program output: -96                
Correct output: -67                 | Program output: -67                
Correct output: -79                 | Program output: -79                
Correct output: -31                 | Program output: -31                
Correct output: -79                 | Program output: -79                
Correct output: -91                 | Program output: -91                
Correct output: 38                  | Program output: 38                 
Correct output: 35                  | Program output: 35                 
Correct output: -97                 | Program output: -97                
Correct output: -38                 | Program output: -38                
Correct output: -32                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -42                 | Program output: -41                
Correct output: -72                 | Program output: -72                
Correct output: -67                 | Program output: -67                
Correct output: -96                 | Program output: -96                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -68                 | Program output: -68                
Correct output: -56                 | Program output: -56                
Correct output: -60                 | Program output: -60                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -100                | Program output: -100               
;;******************************
