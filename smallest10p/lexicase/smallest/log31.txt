Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[82 74 74 74] 74] [[-87 -87 -87 61] -87] [[-91 -91 80 -91] -91] [[-54 -72 -72 -72] -72] [[0 -42 0 0] -42] [[-12 26 26 26] -12] [[-56 -56 28 -56] -56] [[-88 -94 -88 -88] -94] [[-22 -22 -22 -6] -22] [[-92 -92 -92 -44] -92] [(-59 -59 -59 -59) -59] [(-49 -49 -49 -49) -49] [(-100 -100 -100 -100) -100] [(77 77 77 77) 77] [(16 16 16 16) 16] [(37 88 76 95) 37] [(95 74 5 100) 5] [(71 29 24 96) 24] [(83 72 83 57) 57] [(10 69 34 64) 10] [(84 97 85 2) 2] [(57 57 1 5) 1] [(68 78 75 37) 37] [(71 42 28 10) 10] [(1 94 13 57) 1] [(57 83 26 67) 26] [(37 99 0 89) 0] [(6 40 33 11) 6] [(97 45 75 40) 40] [(13 75 35 41) 13] [(19 26 79 22) 19] [(2 37 8 2) 2] [(63 73 78 72) 63] [(81 80 87 4) 4] [(59 24 34 95) 24] [(-53 -79 -65 -68) -79] [(34 91 53 -24) -24] [(-63 23 -63 41) -63] [(-98 11 -41 62) -98] [(-16 -54 33 26) -54] [(15 55 6 32) 6] [(-34 40 -23 -6) -34] [(-89 46 -95 -18) -95] [(-58 -82 65 -51) -82] [(-1 80 49 34) -1] [(-59 65 16 -83) -83] [(-45 19 -39 -77) -77] [(-55 71 -94 -20) -94] [(-46 60 -83 58) -83] [(-92 -38 15 -43) -92] [(53 -5 47 -85) -85] [(-56 0 -63 10) -63] [(44 -98 -71 91) -98] [(-96 -34 -83 53) -96] [(-14 64 74 -15) -15] [(-34 -99 33 -27) -99] [(6 -43 -68 80) -68] [(-6 66 -51 64) -51] [(20 -2 28 -66) -66] [(19 -77 49 -67) -77] [(17 -48 35 0) -48] [(86 -52 45 -11) -52] [(-50 -26 64 -12) -50] [(-85 77 29 -36) -85] [(-48 38 -19 12) -48] [(68 -49 90 -57) -57] [(-71 -29 52 40) -71] [(-59 52 89 -21) -59] [(-87 -13 4 1) -87] [(29 -78 -74 -69) -78] [(6 88 -5 -13) -13] [(-41 57 -91 -59) -91] [(82 -16 -50 -100) -100] [(84 -80 -75 -15) -80] [(-100 72 81 -38) -100] [(47 -45 -16 -10) -45] [(27 -54 91 -93) -93] [(-20 69 63 59) -20] [(-73 -66 33 91) -73] [(-59 -15 -33 13) -59] [(43 76 72 -39) -39] [(-3 88 -87 40) -87] [(72 -99 -25 31) -99] [(61 31 94 -52) -52] [(99 35 -36 87) -36] [(83 33 44 -69) -69] [(45 -88 15 27) -88] [(52 -20 55 -87) -87] [(-21 -28 -29 -61) -61] [(0 32 15 93) 0] [(58 -2 -24 -60) -60] [(54 -19 61 -22) -22] [(59 -78 35 -79) -79] [(81 42 -24 78) -24] [(58 60 -36 -32) -36])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[82 74 74 74] 74]
Train Case:   6 | Input/Output: [[-87 -87 -87 61] -87]
Train Case:   7 | Input/Output: [[-91 -91 80 -91] -91]
Train Case:   8 | Input/Output: [[-54 -72 -72 -72] -72]
Train Case:   9 | Input/Output: [[0 -42 0 0] -42]
Train Case:  10 | Input/Output: [[-12 26 26 26] -12]
Train Case:  11 | Input/Output: [[-56 -56 28 -56] -56]
Train Case:  12 | Input/Output: [[-88 -94 -88 -88] -94]
Train Case:  13 | Input/Output: [[-22 -22 -22 -6] -22]
Train Case:  14 | Input/Output: [[-92 -92 -92 -44] -92]
Train Case:  15 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  16 | Input/Output: [(-49 -49 -49 -49) -49]
Train Case:  17 | Input/Output: [(-100 -100 -100 -100) -100]
Train Case:  18 | Input/Output: [(77 77 77 77) 77]
Train Case:  19 | Input/Output: [(16 16 16 16) 16]
Train Case:  20 | Input/Output: [(37 88 76 95) 37]
Train Case:  21 | Input/Output: [(95 74 5 100) 5]
Train Case:  22 | Input/Output: [(71 29 24 96) 24]
Train Case:  23 | Input/Output: [(83 72 83 57) 57]
Train Case:  24 | Input/Output: [(10 69 34 64) 10]
Train Case:  25 | Input/Output: [(84 97 85 2) 2]
Train Case:  26 | Input/Output: [(57 57 1 5) 1]
Train Case:  27 | Input/Output: [(68 78 75 37) 37]
Train Case:  28 | Input/Output: [(71 42 28 10) 10]
Train Case:  29 | Input/Output: [(1 94 13 57) 1]
Train Case:  30 | Input/Output: [(57 83 26 67) 26]
Train Case:  31 | Input/Output: [(37 99 0 89) 0]
Train Case:  32 | Input/Output: [(6 40 33 11) 6]
Train Case:  33 | Input/Output: [(97 45 75 40) 40]
Train Case:  34 | Input/Output: [(13 75 35 41) 13]
Train Case:  35 | Input/Output: [(19 26 79 22) 19]
Train Case:  36 | Input/Output: [(2 37 8 2) 2]
Train Case:  37 | Input/Output: [(63 73 78 72) 63]
Train Case:  38 | Input/Output: [(81 80 87 4) 4]
Train Case:  39 | Input/Output: [(59 24 34 95) 24]
Train Case:  40 | Input/Output: [(-53 -79 -65 -68) -79]
Train Case:  41 | Input/Output: [(34 91 53 -24) -24]
Train Case:  42 | Input/Output: [(-63 23 -63 41) -63]
Train Case:  43 | Input/Output: [(-98 11 -41 62) -98]
Train Case:  44 | Input/Output: [(-16 -54 33 26) -54]
Train Case:  45 | Input/Output: [(15 55 6 32) 6]
Train Case:  46 | Input/Output: [(-34 40 -23 -6) -34]
Train Case:  47 | Input/Output: [(-89 46 -95 -18) -95]
Train Case:  48 | Input/Output: [(-58 -82 65 -51) -82]
Train Case:  49 | Input/Output: [(-1 80 49 34) -1]
Train Case:  50 | Input/Output: [(-59 65 16 -83) -83]
Train Case:  51 | Input/Output: [(-45 19 -39 -77) -77]
Train Case:  52 | Input/Output: [(-55 71 -94 -20) -94]
Train Case:  53 | Input/Output: [(-46 60 -83 58) -83]
Train Case:  54 | Input/Output: [(-92 -38 15 -43) -92]
Train Case:  55 | Input/Output: [(53 -5 47 -85) -85]
Train Case:  56 | Input/Output: [(-56 0 -63 10) -63]
Train Case:  57 | Input/Output: [(44 -98 -71 91) -98]
Train Case:  58 | Input/Output: [(-96 -34 -83 53) -96]
Train Case:  59 | Input/Output: [(-14 64 74 -15) -15]
Train Case:  60 | Input/Output: [(-34 -99 33 -27) -99]
Train Case:  61 | Input/Output: [(6 -43 -68 80) -68]
Train Case:  62 | Input/Output: [(-6 66 -51 64) -51]
Train Case:  63 | Input/Output: [(20 -2 28 -66) -66]
Train Case:  64 | Input/Output: [(19 -77 49 -67) -77]
Train Case:  65 | Input/Output: [(17 -48 35 0) -48]
Train Case:  66 | Input/Output: [(86 -52 45 -11) -52]
Train Case:  67 | Input/Output: [(-50 -26 64 -12) -50]
Train Case:  68 | Input/Output: [(-85 77 29 -36) -85]
Train Case:  69 | Input/Output: [(-48 38 -19 12) -48]
Train Case:  70 | Input/Output: [(68 -49 90 -57) -57]
Train Case:  71 | Input/Output: [(-71 -29 52 40) -71]
Train Case:  72 | Input/Output: [(-59 52 89 -21) -59]
Train Case:  73 | Input/Output: [(-87 -13 4 1) -87]
Train Case:  74 | Input/Output: [(29 -78 -74 -69) -78]
Train Case:  75 | Input/Output: [(6 88 -5 -13) -13]
Train Case:  76 | Input/Output: [(-41 57 -91 -59) -91]
Train Case:  77 | Input/Output: [(82 -16 -50 -100) -100]
Train Case:  78 | Input/Output: [(84 -80 -75 -15) -80]
Train Case:  79 | Input/Output: [(-100 72 81 -38) -100]
Train Case:  80 | Input/Output: [(47 -45 -16 -10) -45]
Train Case:  81 | Input/Output: [(27 -54 91 -93) -93]
Train Case:  82 | Input/Output: [(-20 69 63 59) -20]
Train Case:  83 | Input/Output: [(-73 -66 33 91) -73]
Train Case:  84 | Input/Output: [(-59 -15 -33 13) -59]
Train Case:  85 | Input/Output: [(43 76 72 -39) -39]
Train Case:  86 | Input/Output: [(-3 88 -87 40) -87]
Train Case:  87 | Input/Output: [(72 -99 -25 31) -99]
Train Case:  88 | Input/Output: [(61 31 94 -52) -52]
Train Case:  89 | Input/Output: [(99 35 -36 87) -36]
Train Case:  90 | Input/Output: [(83 33 44 -69) -69]
Train Case:  91 | Input/Output: [(45 -88 15 27) -88]
Train Case:  92 | Input/Output: [(52 -20 55 -87) -87]
Train Case:  93 | Input/Output: [(-21 -28 -29 -61) -61]
Train Case:  94 | Input/Output: [(0 32 15 93) 0]
Train Case:  95 | Input/Output: [(58 -2 -24 -60) -60]
Train Case:  96 | Input/Output: [(54 -19 61 -22) -22]
Train Case:  97 | Input/Output: [(59 -78 35 -79) -79]
Train Case:  98 | Input/Output: [(81 42 -24 78) -24]
Train Case:  99 | Input/Output: [(58 60 -36 -32) -36]
Test Case:   0 | Input/Output: [[-98 -78 -78 -78] -98]
Test Case:   1 | Input/Output: [[-84 -84 -84 -64] -84]
Test Case:   2 | Input/Output: [[2 2 -8 2] -8]
Test Case:   3 | Input/Output: [[50 -89 -89 -89] -89]
Test Case:   4 | Input/Output: [[87 86 86 86] 86]
Test Case:   5 | Input/Output: [[31 31 31 -82] -82]
Test Case:   6 | Input/Output: [[45 45 -57 45] -57]
Test Case:   7 | Input/Output: [[74 -23 -23 -23] -23]
Test Case:   8 | Input/Output: [[-33 -33 9 -33] -33]
Test Case:   9 | Input/Output: [[-94 -94 -94 81] -94]
Test Case:  10 | Input/Output: [[74 16 16 16] 16]
Test Case:  11 | Input/Output: [[54 -33 54 54] -33]
Test Case:  12 | Input/Output: [[-17 -90 -90 -90] -90]
Test Case:  13 | Input/Output: [[-72 58 58 58] -72]
Test Case:  14 | Input/Output: [[-21 -21 -21 -53] -53]
Test Case:  15 | Input/Output: [[-10 -10 -10 13] -10]
Test Case:  16 | Input/Output: [[67 67 -89 67] -89]
Test Case:  17 | Input/Output: [[71 71 71 -89] -89]
Test Case:  18 | Input/Output: [[-97 -97 -91 -97] -97]
Test Case:  19 | Input/Output: [[21 21 -38 21] -38]
Test Case:  20 | Input/Output: [[-92 39 -92 -92] -92]
Test Case:  21 | Input/Output: [[-36 -48 -36 -36] -48]
Test Case:  22 | Input/Output: [[13 13 13 82] 13]
Test Case:  23 | Input/Output: [[-19 -19 -19 -61] -61]
Test Case:  24 | Input/Output: [[-3 43 43 43] -3]
Test Case:  25 | Input/Output: [[-6 43 43 43] -6]
Test Case:  26 | Input/Output: [[-11 -11 -11 -84] -84]
Test Case:  27 | Input/Output: [[-85 -85 -11 -85] -85]
Test Case:  28 | Input/Output: [[-51 -82 -51 -51] -82]
Test Case:  29 | Input/Output: [[23 23 -9 23] -9]
Test Case:  30 | Input/Output: [[-25 -25 -25 -51] -51]
Test Case:  31 | Input/Output: [[15 15 15 86] 15]
Test Case:  32 | Input/Output: [[4 8 4 4] 4]
Test Case:  33 | Input/Output: [[-39 -39 -39 21] -39]
Test Case:  34 | Input/Output: [[20 34 34 34] 20]
Test Case:  35 | Input/Output: [[57 57 25 57] 25]
Test Case:  36 | Input/Output: [[-22 -22 -22 -79] -79]
Test Case:  37 | Input/Output: [[62 -49 -49 -49] -49]
Test Case:  38 | Input/Output: [[41 41 -35 41] -35]
Test Case:  39 | Input/Output: [[84 -100 84 84] -100]
Test Case:  40 | Input/Output: [[41 41 41 -89] -89]
Test Case:  41 | Input/Output: [[-73 -73 75 -73] -73]
Test Case:  42 | Input/Output: [[-17 -54 -17 -17] -54]
Test Case:  43 | Input/Output: [[-57 -57 -37 -57] -57]
Test Case:  44 | Input/Output: [[52 -76 -76 -76] -76]
Test Case:  45 | Input/Output: [[12 12 12 68] 12]
Test Case:  46 | Input/Output: [[-35 -35 -72 -35] -72]
Test Case:  47 | Input/Output: [[-40 90 -40 -40] -40]
Test Case:  48 | Input/Output: [[39 39 39 24] 24]
Test Case:  49 | Input/Output: [[27 27 67 27] 27]
Test Case:  50 | Input/Output: [[-78 44 -78 -78] -78]
Test Case:  51 | Input/Output: [[18 18 18 -57] -57]
Test Case:  52 | Input/Output: [[-62 -62 -62 5] -62]
Test Case:  53 | Input/Output: [[-18 -18 -18 6] -18]
Test Case:  54 | Input/Output: [[60 -52 60 60] -52]
Test Case:  55 | Input/Output: [[6 6 -50 6] -50]
Test Case:  56 | Input/Output: [[-6 -53 -53 -53] -53]
Test Case:  57 | Input/Output: [[-9 -9 -10 -9] -10]
Test Case:  58 | Input/Output: [[-13 -13 65 -13] -13]
Test Case:  59 | Input/Output: [[61 61 -25 61] -25]
Test Case:  60 | Input/Output: [[-44 6 -44 -44] -44]
Test Case:  61 | Input/Output: [[42 42 -37 42] -37]
Test Case:  62 | Input/Output: [[52 22 22 22] 22]
Test Case:  63 | Input/Output: [[-69 -69 73 -69] -69]
Test Case:  64 | Input/Output: [[19 61 61 61] 19]
Test Case:  65 | Input/Output: [[-91 60 60 60] -91]
Test Case:  66 | Input/Output: [[88 52 52 52] 52]
Test Case:  67 | Input/Output: [[-23 -23 -23 -42] -42]
Test Case:  68 | Input/Output: [[32 24 24 24] 24]
Test Case:  69 | Input/Output: [[57 44 44 44] 44]
Test Case:  70 | Input/Output: [[-81 -87 -87 -87] -87]
Test Case:  71 | Input/Output: [[-93 -25 -25 -25] -93]
Test Case:  72 | Input/Output: [[-66 -66 35 -66] -66]
Test Case:  73 | Input/Output: [[40 40 40 -81] -81]
Test Case:  74 | Input/Output: [[-50 10 -50 -50] -50]
Test Case:  75 | Input/Output: [[24 68 24 24] 24]
Test Case:  76 | Input/Output: [[-19 -53 -53 -53] -53]
Test Case:  77 | Input/Output: [[-63 -63 -29 -63] -63]
Test Case:  78 | Input/Output: [[-92 -92 -92 85] -92]
Test Case:  79 | Input/Output: [[10 10 10 74] 10]
Test Case:  80 | Input/Output: [[28 28 -19 28] -19]
Test Case:  81 | Input/Output: [[56 -70 -70 -70] -70]
Test Case:  82 | Input/Output: [[68 68 68 -39] -39]
Test Case:  83 | Input/Output: [[35 35 35 22] 22]
Test Case:  84 | Input/Output: [[31 31 -24 31] -24]
Test Case:  85 | Input/Output: [[-30 36 -30 -30] -30]
Test Case:  86 | Input/Output: [[-6 7 -6 -6] -6]
Test Case:  87 | Input/Output: [[29 -98 -98 -98] -98]
Test Case:  88 | Input/Output: [[6 2 6 6] 2]
Test Case:  89 | Input/Output: [[2 2 -97 2] -97]
Test Case:  90 | Input/Output: [[-69 -69 -69 71] -69]
Test Case:  91 | Input/Output: [[-8 40 40 40] -8]
Test Case:  92 | Input/Output: [[-31 41 -31 -31] -31]
Test Case:  93 | Input/Output: [[2 2 2 33] 2]
Test Case:  94 | Input/Output: [[-12 -12 -12 29] -12]
Test Case:  95 | Input/Output: [[22 22 22 -59] -59]
Test Case:  96 | Input/Output: [[75 90 90 90] 75]
Test Case:  97 | Input/Output: [[-3 -68 -3 -3] -68]
Test Case:  98 | Input/Output: [[0 0 92 0] 0]
Test Case:  99 | Input/Output: [[-28 -28 -28 17] -28]
Test Case: 100 | Input/Output: [(17 17 17 17) 17]
Test Case: 101 | Input/Output: [(15 15 15 15) 15]
Test Case: 102 | Input/Output: [(99 99 99 99) 99]
Test Case: 103 | Input/Output: [(44 44 44 44) 44]
Test Case: 104 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 105 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 106 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 107 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 108 | Input/Output: [(2 2 2 2) 2]
Test Case: 109 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 110 | Input/Output: [(77 77 77 77) 77]
Test Case: 111 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 112 | Input/Output: [(52 52 52 52) 52]
Test Case: 113 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 114 | Input/Output: [(29 29 29 29) 29]
Test Case: 115 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 116 | Input/Output: [(58 58 58 58) 58]
Test Case: 117 | Input/Output: [(15 15 15 15) 15]
Test Case: 118 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 119 | Input/Output: [(2 2 2 2) 2]
Test Case: 120 | Input/Output: [(23 23 23 23) 23]
Test Case: 121 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 122 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 123 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 124 | Input/Output: [(64 64 64 64) 64]
Test Case: 125 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 126 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 127 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 128 | Input/Output: [(6 6 6 6) 6]
Test Case: 129 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 130 | Input/Output: [(83 83 83 83) 83]
Test Case: 131 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 132 | Input/Output: [(81 81 81 81) 81]
Test Case: 133 | Input/Output: [(9 9 9 9) 9]
Test Case: 134 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 135 | Input/Output: [(96 96 96 96) 96]
Test Case: 136 | Input/Output: [(7 7 7 7) 7]
Test Case: 137 | Input/Output: [(13 13 13 13) 13]
Test Case: 138 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 139 | Input/Output: [(34 34 34 34) 34]
Test Case: 140 | Input/Output: [(95 95 95 95) 95]
Test Case: 141 | Input/Output: [(51 51 51 51) 51]
Test Case: 142 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 143 | Input/Output: [(41 41 41 41) 41]
Test Case: 144 | Input/Output: [(10 10 10 10) 10]
Test Case: 145 | Input/Output: [(31 31 31 31) 31]
Test Case: 146 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 147 | Input/Output: [(47 47 47 47) 47]
Test Case: 148 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 149 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 150 | Input/Output: [(10 10 10 10) 10]
Test Case: 151 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 152 | Input/Output: [(40 40 40 40) 40]
Test Case: 153 | Input/Output: [(26 26 26 26) 26]
Test Case: 154 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 155 | Input/Output: [(20 20 20 20) 20]
Test Case: 156 | Input/Output: [(92 92 92 92) 92]
Test Case: 157 | Input/Output: [(16 16 16 16) 16]
Test Case: 158 | Input/Output: [(54 54 54 54) 54]
Test Case: 159 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 160 | Input/Output: [(88 88 88 88) 88]
Test Case: 161 | Input/Output: [(28 28 28 28) 28]
Test Case: 162 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 163 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 164 | Input/Output: [(69 69 69 69) 69]
Test Case: 165 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 166 | Input/Output: [(6 6 6 6) 6]
Test Case: 167 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 168 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 169 | Input/Output: [(16 16 16 16) 16]
Test Case: 170 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 171 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 172 | Input/Output: [(44 44 44 44) 44]
Test Case: 173 | Input/Output: [(10 10 10 10) 10]
Test Case: 174 | Input/Output: [(43 43 43 43) 43]
Test Case: 175 | Input/Output: [(68 68 68 68) 68]
Test Case: 176 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 177 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 178 | Input/Output: [(92 92 92 92) 92]
Test Case: 179 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 180 | Input/Output: [(35 35 35 35) 35]
Test Case: 181 | Input/Output: [(76 76 76 76) 76]
Test Case: 182 | Input/Output: [(16 16 16 16) 16]
Test Case: 183 | Input/Output: [(60 60 60 60) 60]
Test Case: 184 | Input/Output: [(2 2 2 2) 2]
Test Case: 185 | Input/Output: [(53 53 53 53) 53]
Test Case: 186 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 187 | Input/Output: [(64 64 64 64) 64]
Test Case: 188 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 189 | Input/Output: [(63 63 63 63) 63]
Test Case: 190 | Input/Output: [(59 59 59 59) 59]
Test Case: 191 | Input/Output: [(82 82 82 82) 82]
Test Case: 192 | Input/Output: [(71 71 71 71) 71]
Test Case: 193 | Input/Output: [(31 31 31 31) 31]
Test Case: 194 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 195 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 196 | Input/Output: [(62 62 62 62) 62]
Test Case: 197 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 198 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 199 | Input/Output: [(48 48 48 48) 48]
Test Case: 200 | Input/Output: [(28 64 48 100) 28]
Test Case: 201 | Input/Output: [(89 82 14 26) 14]
Test Case: 202 | Input/Output: [(25 18 45 27) 18]
Test Case: 203 | Input/Output: [(52 65 32 20) 20]
Test Case: 204 | Input/Output: [(32 29 74 52) 29]
Test Case: 205 | Input/Output: [(37 27 78 93) 27]
Test Case: 206 | Input/Output: [(19 7 8 13) 7]
Test Case: 207 | Input/Output: [(96 24 21 45) 21]
Test Case: 208 | Input/Output: [(58 100 39 89) 39]
Test Case: 209 | Input/Output: [(13 99 39 16) 13]
Test Case: 210 | Input/Output: [(85 1 88 24) 1]
Test Case: 211 | Input/Output: [(31 71 64 40) 31]
Test Case: 212 | Input/Output: [(39 97 1 82) 1]
Test Case: 213 | Input/Output: [(4 94 68 8) 4]
Test Case: 214 | Input/Output: [(22 35 49 59) 22]
Test Case: 215 | Input/Output: [(41 83 5 36) 5]
Test Case: 216 | Input/Output: [(75 93 12 3) 3]
Test Case: 217 | Input/Output: [(43 66 99 23) 23]
Test Case: 218 | Input/Output: [(12 68 80 53) 12]
Test Case: 219 | Input/Output: [(42 35 60 57) 35]
Test Case: 220 | Input/Output: [(34 28 67 44) 28]
Test Case: 221 | Input/Output: [(85 13 71 29) 13]
Test Case: 222 | Input/Output: [(33 72 2 11) 2]
Test Case: 223 | Input/Output: [(19 92 10 1) 1]
Test Case: 224 | Input/Output: [(86 76 50 95) 50]
Test Case: 225 | Input/Output: [(5 84 47 52) 5]
Test Case: 226 | Input/Output: [(95 64 26 53) 26]
Test Case: 227 | Input/Output: [(56 98 78 68) 56]
Test Case: 228 | Input/Output: [(57 50 34 4) 4]
Test Case: 229 | Input/Output: [(69 77 52 53) 52]
Test Case: 230 | Input/Output: [(15 17 59 67) 15]
Test Case: 231 | Input/Output: [(41 8 36 24) 8]
Test Case: 232 | Input/Output: [(17 21 11 20) 11]
Test Case: 233 | Input/Output: [(25 31 34 52) 25]
Test Case: 234 | Input/Output: [(46 14 80 65) 14]
Test Case: 235 | Input/Output: [(10 78 29 46) 10]
Test Case: 236 | Input/Output: [(3 26 27 1) 1]
Test Case: 237 | Input/Output: [(99 73 10 3) 3]
Test Case: 238 | Input/Output: [(65 51 77 64) 51]
Test Case: 239 | Input/Output: [(77 32 36 10) 10]
Test Case: 240 | Input/Output: [(66 89 100 4) 4]
Test Case: 241 | Input/Output: [(87 34 64 55) 34]
Test Case: 242 | Input/Output: [(82 53 44 32) 32]
Test Case: 243 | Input/Output: [(0 53 63 100) 0]
Test Case: 244 | Input/Output: [(96 53 47 57) 47]
Test Case: 245 | Input/Output: [(64 16 48 67) 16]
Test Case: 246 | Input/Output: [(10 62 27 14) 10]
Test Case: 247 | Input/Output: [(8 36 13 99) 8]
Test Case: 248 | Input/Output: [(74 34 55 70) 34]
Test Case: 249 | Input/Output: [(21 95 21 92) 21]
Test Case: 250 | Input/Output: [(89 54 81 54) 54]
Test Case: 251 | Input/Output: [(93 78 67 20) 20]
Test Case: 252 | Input/Output: [(50 8 67 39) 8]
Test Case: 253 | Input/Output: [(54 7 22 14) 7]
Test Case: 254 | Input/Output: [(14 2 57 24) 2]
Test Case: 255 | Input/Output: [(71 28 35 98) 28]
Test Case: 256 | Input/Output: [(29 65 3 5) 3]
Test Case: 257 | Input/Output: [(91 3 84 35) 3]
Test Case: 258 | Input/Output: [(0 82 8 68) 0]
Test Case: 259 | Input/Output: [(1 46 60 4) 1]
Test Case: 260 | Input/Output: [(36 68 87 29) 29]
Test Case: 261 | Input/Output: [(23 91 62 13) 13]
Test Case: 262 | Input/Output: [(47 3 43 35) 3]
Test Case: 263 | Input/Output: [(14 40 6 76) 6]
Test Case: 264 | Input/Output: [(23 34 99 70) 23]
Test Case: 265 | Input/Output: [(17 13 83 61) 13]
Test Case: 266 | Input/Output: [(72 78 45 58) 45]
Test Case: 267 | Input/Output: [(60 46 18 61) 18]
Test Case: 268 | Input/Output: [(11 95 27 89) 11]
Test Case: 269 | Input/Output: [(88 3 29 74) 3]
Test Case: 270 | Input/Output: [(74 22 45 64) 22]
Test Case: 271 | Input/Output: [(82 40 7 18) 7]
Test Case: 272 | Input/Output: [(25 18 6 7) 6]
Test Case: 273 | Input/Output: [(46 33 99 11) 11]
Test Case: 274 | Input/Output: [(27 41 11 64) 11]
Test Case: 275 | Input/Output: [(7 46 93 37) 7]
Test Case: 276 | Input/Output: [(25 75 71 9) 9]
Test Case: 277 | Input/Output: [(54 18 3 20) 3]
Test Case: 278 | Input/Output: [(48 73 71 4) 4]
Test Case: 279 | Input/Output: [(86 10 42 47) 10]
Test Case: 280 | Input/Output: [(39 12 75 95) 12]
Test Case: 281 | Input/Output: [(2 100 13 59) 2]
Test Case: 282 | Input/Output: [(9 25 44 4) 4]
Test Case: 283 | Input/Output: [(28 90 75 98) 28]
Test Case: 284 | Input/Output: [(16 90 46 63) 16]
Test Case: 285 | Input/Output: [(24 29 31 49) 24]
Test Case: 286 | Input/Output: [(100 12 84 40) 12]
Test Case: 287 | Input/Output: [(73 5 17 76) 5]
Test Case: 288 | Input/Output: [(29 32 78 23) 23]
Test Case: 289 | Input/Output: [(71 4 82 57) 4]
Test Case: 290 | Input/Output: [(87 45 76 13) 13]
Test Case: 291 | Input/Output: [(21 75 18 3) 3]
Test Case: 292 | Input/Output: [(30 72 31 31) 30]
Test Case: 293 | Input/Output: [(23 35 4 20) 4]
Test Case: 294 | Input/Output: [(50 23 63 72) 23]
Test Case: 295 | Input/Output: [(79 57 18 48) 18]
Test Case: 296 | Input/Output: [(32 99 41 19) 19]
Test Case: 297 | Input/Output: [(27 10 25 96) 10]
Test Case: 298 | Input/Output: [(31 23 12 28) 12]
Test Case: 299 | Input/Output: [(16 70 4 17) 4]
Test Case: 300 | Input/Output: [(2 55 16 10) 2]
Test Case: 301 | Input/Output: [(77 37 22 56) 22]
Test Case: 302 | Input/Output: [(91 58 24 2) 2]
Test Case: 303 | Input/Output: [(10 15 95 15) 10]
Test Case: 304 | Input/Output: [(63 64 69 48) 48]
Test Case: 305 | Input/Output: [(75 74 64 21) 21]
Test Case: 306 | Input/Output: [(65 49 34 73) 34]
Test Case: 307 | Input/Output: [(84 12 100 32) 12]
Test Case: 308 | Input/Output: [(55 44 77 77) 44]
Test Case: 309 | Input/Output: [(69 2 89 24) 2]
Test Case: 310 | Input/Output: [(72 27 93 62) 27]
Test Case: 311 | Input/Output: [(19 46 38 23) 19]
Test Case: 312 | Input/Output: [(28 67 18 94) 18]
Test Case: 313 | Input/Output: [(94 100 98 40) 40]
Test Case: 314 | Input/Output: [(42 5 38 40) 5]
Test Case: 315 | Input/Output: [(30 4 14 23) 4]
Test Case: 316 | Input/Output: [(48 22 48 22) 22]
Test Case: 317 | Input/Output: [(37 86 38 0) 0]
Test Case: 318 | Input/Output: [(99 90 19 13) 13]
Test Case: 319 | Input/Output: [(99 35 72 53) 35]
Test Case: 320 | Input/Output: [(81 22 74 87) 22]
Test Case: 321 | Input/Output: [(64 21 10 41) 10]
Test Case: 322 | Input/Output: [(34 49 7 17) 7]
Test Case: 323 | Input/Output: [(78 6 91 15) 6]
Test Case: 324 | Input/Output: [(42 83 30 79) 30]
Test Case: 325 | Input/Output: [(61 24 17 84) 17]
Test Case: 326 | Input/Output: [(72 3 20 28) 3]
Test Case: 327 | Input/Output: [(87 76 14 29) 14]
Test Case: 328 | Input/Output: [(30 61 29 84) 29]
Test Case: 329 | Input/Output: [(15 12 66 75) 12]
Test Case: 330 | Input/Output: [(55 26 13 45) 13]
Test Case: 331 | Input/Output: [(83 55 1 10) 1]
Test Case: 332 | Input/Output: [(95 33 16 5) 5]
Test Case: 333 | Input/Output: [(66 98 57 92) 57]
Test Case: 334 | Input/Output: [(99 2 74 73) 2]
Test Case: 335 | Input/Output: [(97 87 36 81) 36]
Test Case: 336 | Input/Output: [(63 89 10 38) 10]
Test Case: 337 | Input/Output: [(41 53 83 72) 41]
Test Case: 338 | Input/Output: [(29 98 22 74) 22]
Test Case: 339 | Input/Output: [(7 9 69 0) 0]
Test Case: 340 | Input/Output: [(94 49 26 5) 5]
Test Case: 341 | Input/Output: [(39 100 96 19) 19]
Test Case: 342 | Input/Output: [(82 39 19 93) 19]
Test Case: 343 | Input/Output: [(17 42 37 78) 17]
Test Case: 344 | Input/Output: [(44 91 36 80) 36]
Test Case: 345 | Input/Output: [(66 17 90 14) 14]
Test Case: 346 | Input/Output: [(67 35 93 22) 22]
Test Case: 347 | Input/Output: [(34 73 25 2) 2]
Test Case: 348 | Input/Output: [(26 46 54 16) 16]
Test Case: 349 | Input/Output: [(31 43 94 42) 31]
Test Case: 350 | Input/Output: [(59 43 12 39) 12]
Test Case: 351 | Input/Output: [(64 86 16 76) 16]
Test Case: 352 | Input/Output: [(39 60 40 28) 28]
Test Case: 353 | Input/Output: [(31 45 70 55) 31]
Test Case: 354 | Input/Output: [(20 87 8 80) 8]
Test Case: 355 | Input/Output: [(4 57 93 59) 4]
Test Case: 356 | Input/Output: [(56 57 44 3) 3]
Test Case: 357 | Input/Output: [(33 72 33 64) 33]
Test Case: 358 | Input/Output: [(54 61 62 17) 17]
Test Case: 359 | Input/Output: [(10 28 10 97) 10]
Test Case: 360 | Input/Output: [(90 71 100 47) 47]
Test Case: 361 | Input/Output: [(49 34 78 39) 34]
Test Case: 362 | Input/Output: [(70 24 64 79) 24]
Test Case: 363 | Input/Output: [(89 16 11 80) 11]
Test Case: 364 | Input/Output: [(20 34 25 59) 20]
Test Case: 365 | Input/Output: [(0 41 30 33) 0]
Test Case: 366 | Input/Output: [(94 70 17 16) 16]
Test Case: 367 | Input/Output: [(87 99 36 65) 36]
Test Case: 368 | Input/Output: [(18 56 28 14) 14]
Test Case: 369 | Input/Output: [(87 26 55 17) 17]
Test Case: 370 | Input/Output: [(50 92 46 84) 46]
Test Case: 371 | Input/Output: [(13 83 2 61) 2]
Test Case: 372 | Input/Output: [(11 20 70 65) 11]
Test Case: 373 | Input/Output: [(41 19 61 35) 19]
Test Case: 374 | Input/Output: [(95 73 78 44) 44]
Test Case: 375 | Input/Output: [(53 19 59 25) 19]
Test Case: 376 | Input/Output: [(69 2 40 42) 2]
Test Case: 377 | Input/Output: [(28 52 90 62) 28]
Test Case: 378 | Input/Output: [(21 46 80 92) 21]
Test Case: 379 | Input/Output: [(70 69 77 6) 6]
Test Case: 380 | Input/Output: [(71 94 19 71) 19]
Test Case: 381 | Input/Output: [(59 3 74 89) 3]
Test Case: 382 | Input/Output: [(78 26 11 12) 11]
Test Case: 383 | Input/Output: [(27 2 57 27) 2]
Test Case: 384 | Input/Output: [(54 17 14 84) 14]
Test Case: 385 | Input/Output: [(73 31 26 64) 26]
Test Case: 386 | Input/Output: [(14 67 1 84) 1]
Test Case: 387 | Input/Output: [(2 20 5 15) 2]
Test Case: 388 | Input/Output: [(44 85 56 45) 44]
Test Case: 389 | Input/Output: [(78 25 16 62) 16]
Test Case: 390 | Input/Output: [(84 64 90 65) 64]
Test Case: 391 | Input/Output: [(52 65 6 4) 4]
Test Case: 392 | Input/Output: [(0 80 89 1) 0]
Test Case: 393 | Input/Output: [(45 48 5 14) 5]
Test Case: 394 | Input/Output: [(73 20 74 88) 20]
Test Case: 395 | Input/Output: [(61 11 57 77) 11]
Test Case: 396 | Input/Output: [(20 9 81 27) 9]
Test Case: 397 | Input/Output: [(69 23 41 76) 23]
Test Case: 398 | Input/Output: [(0 96 41 19) 0]
Test Case: 399 | Input/Output: [(72 62 65 72) 62]
Test Case: 400 | Input/Output: [(-82 7 -90 -99) -99]
Test Case: 401 | Input/Output: [(37 57 -11 76) -11]
Test Case: 402 | Input/Output: [(-27 32 84 -70) -70]
Test Case: 403 | Input/Output: [(-77 4 -67 77) -77]
Test Case: 404 | Input/Output: [(-92 22 11 43) -92]
Test Case: 405 | Input/Output: [(-31 -73 -55 45) -73]
Test Case: 406 | Input/Output: [(11 57 -30 -6) -30]
Test Case: 407 | Input/Output: [(-24 -16 -80 49) -80]
Test Case: 408 | Input/Output: [(-23 -51 65 -87) -87]
Test Case: 409 | Input/Output: [(97 -59 52 -33) -59]
Test Case: 410 | Input/Output: [(-30 -56 -91 2) -91]
Test Case: 411 | Input/Output: [(75 33 42 -93) -93]
Test Case: 412 | Input/Output: [(31 -23 -99 -48) -99]
Test Case: 413 | Input/Output: [(77 -10 99 -29) -29]
Test Case: 414 | Input/Output: [(-73 52 -1 95) -73]
Test Case: 415 | Input/Output: [(76 -67 11 47) -67]
Test Case: 416 | Input/Output: [(93 -20 -57 -33) -57]
Test Case: 417 | Input/Output: [(52 13 53 6) 6]
Test Case: 418 | Input/Output: [(70 -3 -39 -77) -77]
Test Case: 419 | Input/Output: [(5 -15 -36 -5) -36]
Test Case: 420 | Input/Output: [(56 32 7 -11) -11]
Test Case: 421 | Input/Output: [(85 24 92 91) 24]
Test Case: 422 | Input/Output: [(96 -66 6 86) -66]
Test Case: 423 | Input/Output: [(-7 11 51 -64) -64]
Test Case: 424 | Input/Output: [(57 73 -29 18) -29]
Test Case: 425 | Input/Output: [(-50 61 -26 -92) -92]
Test Case: 426 | Input/Output: [(78 10 85 -98) -98]
Test Case: 427 | Input/Output: [(-90 -10 44 -86) -90]
Test Case: 428 | Input/Output: [(14 69 -83 59) -83]
Test Case: 429 | Input/Output: [(76 -11 13 40) -11]
Test Case: 430 | Input/Output: [(-21 28 37 100) -21]
Test Case: 431 | Input/Output: [(-74 42 -2 36) -74]
Test Case: 432 | Input/Output: [(-47 39 50 -31) -47]
Test Case: 433 | Input/Output: [(33 -23 -71 85) -71]
Test Case: 434 | Input/Output: [(-65 41 47 -98) -98]
Test Case: 435 | Input/Output: [(-70 57 -86 -92) -92]
Test Case: 436 | Input/Output: [(-61 7 -78 2) -78]
Test Case: 437 | Input/Output: [(74 86 11 22) 11]
Test Case: 438 | Input/Output: [(-100 37 20 -16) -100]
Test Case: 439 | Input/Output: [(46 48 -41 -63) -63]
Test Case: 440 | Input/Output: [(-90 -58 -79 -89) -90]
Test Case: 441 | Input/Output: [(78 33 84 -54) -54]
Test Case: 442 | Input/Output: [(-49 90 99 -19) -49]
Test Case: 443 | Input/Output: [(-83 64 35 -93) -93]
Test Case: 444 | Input/Output: [(-35 98 15 -68) -68]
Test Case: 445 | Input/Output: [(-58 -86 -94 42) -94]
Test Case: 446 | Input/Output: [(31 18 21 -99) -99]
Test Case: 447 | Input/Output: [(-53 71 16 54) -53]
Test Case: 448 | Input/Output: [(-96 -72 -62 -7) -96]
Test Case: 449 | Input/Output: [(92 29 32 -41) -41]
Test Case: 450 | Input/Output: [(26 -35 100 -27) -35]
Test Case: 451 | Input/Output: [(-75 -7 -73 31) -75]
Test Case: 452 | Input/Output: [(-24 62 -55 -4) -55]
Test Case: 453 | Input/Output: [(-56 18 13 9) -56]
Test Case: 454 | Input/Output: [(68 15 20 73) 15]
Test Case: 455 | Input/Output: [(-72 12 19 58) -72]
Test Case: 456 | Input/Output: [(10 -24 16 93) -24]
Test Case: 457 | Input/Output: [(96 68 -54 73) -54]
Test Case: 458 | Input/Output: [(47 -90 90 35) -90]
Test Case: 459 | Input/Output: [(-46 -15 -88 -54) -88]
Test Case: 460 | Input/Output: [(89 30 1 -46) -46]
Test Case: 461 | Input/Output: [(-72 -37 -29 55) -72]
Test Case: 462 | Input/Output: [(-57 94 -81 -25) -81]
Test Case: 463 | Input/Output: [(-64 -1 6 26) -64]
Test Case: 464 | Input/Output: [(2 54 -63 37) -63]
Test Case: 465 | Input/Output: [(67 99 97 -16) -16]
Test Case: 466 | Input/Output: [(3 -97 -45 71) -97]
Test Case: 467 | Input/Output: [(-96 -49 46 -93) -96]
Test Case: 468 | Input/Output: [(-47 51 -7 -77) -77]
Test Case: 469 | Input/Output: [(98 -16 8 -5) -16]
Test Case: 470 | Input/Output: [(-7 45 84 55) -7]
Test Case: 471 | Input/Output: [(4 13 -69 -28) -69]
Test Case: 472 | Input/Output: [(0 -41 69 15) -41]
Test Case: 473 | Input/Output: [(65 89 81 -15) -15]
Test Case: 474 | Input/Output: [(-59 62 64 -7) -59]
Test Case: 475 | Input/Output: [(47 -54 -21 49) -54]
Test Case: 476 | Input/Output: [(-43 -8 50 -63) -63]
Test Case: 477 | Input/Output: [(96 90 27 75) 27]
Test Case: 478 | Input/Output: [(17 38 76 -32) -32]
Test Case: 479 | Input/Output: [(26 43 -41 -33) -41]
Test Case: 480 | Input/Output: [(-67 39 18 9) -67]
Test Case: 481 | Input/Output: [(85 -24 -57 20) -57]
Test Case: 482 | Input/Output: [(-58 -77 -77 79) -77]
Test Case: 483 | Input/Output: [(20 -29 90 92) -29]
Test Case: 484 | Input/Output: [(100 -48 56 25) -48]
Test Case: 485 | Input/Output: [(29 15 92 15) 15]
Test Case: 486 | Input/Output: [(99 -23 41 -67) -67]
Test Case: 487 | Input/Output: [(90 -40 -1 59) -40]
Test Case: 488 | Input/Output: [(31 -21 5 53) -21]
Test Case: 489 | Input/Output: [(100 -90 65 -35) -90]
Test Case: 490 | Input/Output: [(-4 -62 -7 5) -62]
Test Case: 491 | Input/Output: [(22 94 92 -42) -42]
Test Case: 492 | Input/Output: [(74 -67 -39 -38) -67]
Test Case: 493 | Input/Output: [(-5 44 49 -30) -30]
Test Case: 494 | Input/Output: [(-81 -45 70 16) -81]
Test Case: 495 | Input/Output: [(53 -2 -93 -44) -93]
Test Case: 496 | Input/Output: [(43 -89 -22 73) -89]
Test Case: 497 | Input/Output: [(-45 -31 -45 54) -45]
Test Case: 498 | Input/Output: [(-17 80 98 96) -17]
Test Case: 499 | Input/Output: [(41 -68 57 -51) -68]
Test Case: 500 | Input/Output: [(49 52 1 -98) -98]
Test Case: 501 | Input/Output: [(-72 95 49 74) -72]
Test Case: 502 | Input/Output: [(41 -87 -21 26) -87]
Test Case: 503 | Input/Output: [(4 -84 6 84) -84]
Test Case: 504 | Input/Output: [(22 89 34 -76) -76]
Test Case: 505 | Input/Output: [(-42 75 31 82) -42]
Test Case: 506 | Input/Output: [(56 23 79 38) 23]
Test Case: 507 | Input/Output: [(-88 6 72 -51) -88]
Test Case: 508 | Input/Output: [(79 70 38 -23) -23]
Test Case: 509 | Input/Output: [(-63 -5 -64 55) -64]
Test Case: 510 | Input/Output: [(35 -21 -33 56) -33]
Test Case: 511 | Input/Output: [(-71 83 2 3) -71]
Test Case: 512 | Input/Output: [(-83 -5 67 -8) -83]
Test Case: 513 | Input/Output: [(100 -99 53 53) -99]
Test Case: 514 | Input/Output: [(-80 -88 -82 -43) -88]
Test Case: 515 | Input/Output: [(-6 44 97 69) -6]
Test Case: 516 | Input/Output: [(-80 50 73 5) -80]
Test Case: 517 | Input/Output: [(72 -63 40 -23) -63]
Test Case: 518 | Input/Output: [(70 -11 100 17) -11]
Test Case: 519 | Input/Output: [(-31 70 68 -98) -98]
Test Case: 520 | Input/Output: [(-50 62 -5 -21) -50]
Test Case: 521 | Input/Output: [(-83 -46 -24 94) -83]
Test Case: 522 | Input/Output: [(-40 -7 -39 -28) -40]
Test Case: 523 | Input/Output: [(-96 -53 5 -44) -96]
Test Case: 524 | Input/Output: [(-5 97 -75 45) -75]
Test Case: 525 | Input/Output: [(-95 -71 68 -79) -95]
Test Case: 526 | Input/Output: [(69 -28 -64 -51) -64]
Test Case: 527 | Input/Output: [(-39 -24 10 71) -39]
Test Case: 528 | Input/Output: [(43 12 86 -13) -13]
Test Case: 529 | Input/Output: [(-77 -39 1 -84) -84]
Test Case: 530 | Input/Output: [(-52 19 26 43) -52]
Test Case: 531 | Input/Output: [(100 89 -12 90) -12]
Test Case: 532 | Input/Output: [(87 -80 25 -10) -80]
Test Case: 533 | Input/Output: [(87 -5 -71 -55) -71]
Test Case: 534 | Input/Output: [(-2 -40 100 -52) -52]
Test Case: 535 | Input/Output: [(-56 53 -77 20) -77]
Test Case: 536 | Input/Output: [(-69 41 -2 -100) -100]
Test Case: 537 | Input/Output: [(53 -100 52 56) -100]
Test Case: 538 | Input/Output: [(-71 33 92 -69) -71]
Test Case: 539 | Input/Output: [(16 -26 4 -81) -81]
Test Case: 540 | Input/Output: [(-56 -5 -79 -99) -99]
Test Case: 541 | Input/Output: [(-60 -65 -35 23) -65]
Test Case: 542 | Input/Output: [(20 -12 -83 43) -83]
Test Case: 543 | Input/Output: [(54 -70 -89 -50) -89]
Test Case: 544 | Input/Output: [(-79 -18 -67 91) -79]
Test Case: 545 | Input/Output: [(4 -34 18 -38) -38]
Test Case: 546 | Input/Output: [(-87 32 -92 -60) -92]
Test Case: 547 | Input/Output: [(-83 -34 90 -42) -83]
Test Case: 548 | Input/Output: [(15 55 -9 -30) -30]
Test Case: 549 | Input/Output: [(-54 10 -18 59) -54]
Test Case: 550 | Input/Output: [(7 -67 49 -3) -67]
Test Case: 551 | Input/Output: [(73 29 -39 -28) -39]
Test Case: 552 | Input/Output: [(10 -35 -68 69) -68]
Test Case: 553 | Input/Output: [(-82 -67 93 -44) -82]
Test Case: 554 | Input/Output: [(14 -88 -92 59) -92]
Test Case: 555 | Input/Output: [(95 -49 43 -14) -49]
Test Case: 556 | Input/Output: [(-72 97 -29 -74) -74]
Test Case: 557 | Input/Output: [(-63 -33 -5 -29) -63]
Test Case: 558 | Input/Output: [(-95 84 -95 26) -95]
Test Case: 559 | Input/Output: [(-83 35 30 -90) -90]
Test Case: 560 | Input/Output: [(-57 -39 -91 9) -91]
Test Case: 561 | Input/Output: [(66 34 60 23) 23]
Test Case: 562 | Input/Output: [(90 13 -79 75) -79]
Test Case: 563 | Input/Output: [(27 -30 -51 54) -51]
Test Case: 564 | Input/Output: [(-80 -26 84 -68) -80]
Test Case: 565 | Input/Output: [(93 -40 -76 -64) -76]
Test Case: 566 | Input/Output: [(69 -85 -53 30) -85]
Test Case: 567 | Input/Output: [(93 -11 83 -35) -35]
Test Case: 568 | Input/Output: [(-50 -41 88 -91) -91]
Test Case: 569 | Input/Output: [(-64 -80 47 15) -80]
Test Case: 570 | Input/Output: [(-35 59 13 -6) -35]
Test Case: 571 | Input/Output: [(-70 79 -92 -43) -92]
Test Case: 572 | Input/Output: [(92 -13 -56 70) -56]
Test Case: 573 | Input/Output: [(-32 35 -86 -76) -86]
Test Case: 574 | Input/Output: [(-28 46 -79 -59) -79]
Test Case: 575 | Input/Output: [(46 53 44 -43) -43]
Test Case: 576 | Input/Output: [(-65 -88 72 64) -88]
Test Case: 577 | Input/Output: [(-27 -21 -97 -55) -97]
Test Case: 578 | Input/Output: [(-47 14 35 72) -47]
Test Case: 579 | Input/Output: [(90 -66 -83 -74) -83]
Test Case: 580 | Input/Output: [(-29 62 72 68) -29]
Test Case: 581 | Input/Output: [(43 -67 -95 6) -95]
Test Case: 582 | Input/Output: [(74 90 -12 -33) -33]
Test Case: 583 | Input/Output: [(-67 -16 89 45) -67]
Test Case: 584 | Input/Output: [(4 68 47 -94) -94]
Test Case: 585 | Input/Output: [(2 -81 52 -42) -81]
Test Case: 586 | Input/Output: [(13 -22 -29 89) -29]
Test Case: 587 | Input/Output: [(32 54 -92 6) -92]
Test Case: 588 | Input/Output: [(33 -89 81 85) -89]
Test Case: 589 | Input/Output: [(99 55 -18 -63) -63]
Test Case: 590 | Input/Output: [(73 78 -67 -76) -76]
Test Case: 591 | Input/Output: [(-47 81 99 -34) -47]
Test Case: 592 | Input/Output: [(-100 -55 57 -82) -100]
Test Case: 593 | Input/Output: [(-38 -7 -34 47) -38]
Test Case: 594 | Input/Output: [(26 68 -59 57) -59]
Test Case: 595 | Input/Output: [(76 -100 -61 -4) -100]
Test Case: 596 | Input/Output: [(24 97 -28 -77) -77]
Test Case: 597 | Input/Output: [(-86 35 -31 -16) -86]
Test Case: 598 | Input/Output: [(49 50 -88 30) -88]
Test Case: 599 | Input/Output: [(-7 -15 65 -2) -15]
Test Case: 600 | Input/Output: [(-21 62 -13 40) -21]
Test Case: 601 | Input/Output: [(83 12 -30 13) -30]
Test Case: 602 | Input/Output: [(32 24 19 -45) -45]
Test Case: 603 | Input/Output: [(24 -66 -72 17) -72]
Test Case: 604 | Input/Output: [(-58 1 33 -55) -58]
Test Case: 605 | Input/Output: [(94 -53 19 99) -53]
Test Case: 606 | Input/Output: [(40 43 -39 -85) -85]
Test Case: 607 | Input/Output: [(-16 72 -35 -76) -76]
Test Case: 608 | Input/Output: [(-36 47 -12 -52) -52]
Test Case: 609 | Input/Output: [(-80 -63 89 -33) -80]
Test Case: 610 | Input/Output: [(23 -26 58 95) -26]
Test Case: 611 | Input/Output: [(-50 -71 -49 25) -71]
Test Case: 612 | Input/Output: [(-84 -96 -15 99) -96]
Test Case: 613 | Input/Output: [(54 -29 0 -77) -77]
Test Case: 614 | Input/Output: [(65 96 -36 82) -36]
Test Case: 615 | Input/Output: [(77 -57 81 2) -57]
Test Case: 616 | Input/Output: [(92 -35 -25 -97) -97]
Test Case: 617 | Input/Output: [(-54 8 -8 35) -54]
Test Case: 618 | Input/Output: [(-73 56 72 96) -73]
Test Case: 619 | Input/Output: [(69 29 -65 12) -65]
Test Case: 620 | Input/Output: [(-34 -9 -57 -81) -81]
Test Case: 621 | Input/Output: [(-87 -74 11 -85) -87]
Test Case: 622 | Input/Output: [(24 -74 -24 77) -74]
Test Case: 623 | Input/Output: [(10 -40 -49 -15) -49]
Test Case: 624 | Input/Output: [(73 50 -21 -64) -64]
Test Case: 625 | Input/Output: [(-89 57 -80 -27) -89]
Test Case: 626 | Input/Output: [(-94 56 46 -75) -94]
Test Case: 627 | Input/Output: [(-81 25 -15 -31) -81]
Test Case: 628 | Input/Output: [(84 -95 -51 97) -95]
Test Case: 629 | Input/Output: [(-6 6 -79 97) -79]
Test Case: 630 | Input/Output: [(52 -47 -3 -2) -47]
Test Case: 631 | Input/Output: [(-40 -89 95 -93) -93]
Test Case: 632 | Input/Output: [(-88 -80 2 69) -88]
Test Case: 633 | Input/Output: [(-62 -26 -41 34) -62]
Test Case: 634 | Input/Output: [(10 -83 -84 -36) -84]
Test Case: 635 | Input/Output: [(79 87 -86 28) -86]
Test Case: 636 | Input/Output: [(-17 28 3 27) -17]
Test Case: 637 | Input/Output: [(-56 44 57 -73) -73]
Test Case: 638 | Input/Output: [(-46 8 20 91) -46]
Test Case: 639 | Input/Output: [(-68 21 -81 -18) -81]
Test Case: 640 | Input/Output: [(-4 -87 -94 47) -94]
Test Case: 641 | Input/Output: [(28 -97 -8 -63) -97]
Test Case: 642 | Input/Output: [(-48 -60 -67 -49) -67]
Test Case: 643 | Input/Output: [(56 -12 -98 99) -98]
Test Case: 644 | Input/Output: [(11 80 -80 -34) -80]
Test Case: 645 | Input/Output: [(99 51 73 67) 51]
Test Case: 646 | Input/Output: [(44 -72 0 -52) -72]
Test Case: 647 | Input/Output: [(50 -44 6 85) -44]
Test Case: 648 | Input/Output: [(71 78 49 63) 49]
Test Case: 649 | Input/Output: [(74 -59 24 6) -59]
Test Case: 650 | Input/Output: [(-81 -47 77 -70) -81]
Test Case: 651 | Input/Output: [(-86 -69 -95 88) -95]
Test Case: 652 | Input/Output: [(66 -51 9 34) -51]
Test Case: 653 | Input/Output: [(-84 -84 -86 64) -86]
Test Case: 654 | Input/Output: [(27 -100 -41 50) -100]
Test Case: 655 | Input/Output: [(22 6 -49 -45) -49]
Test Case: 656 | Input/Output: [(56 75 11 -37) -37]
Test Case: 657 | Input/Output: [(-17 -71 55 55) -71]
Test Case: 658 | Input/Output: [(39 -17 -22 5) -22]
Test Case: 659 | Input/Output: [(-70 -19 -87 -79) -87]
Test Case: 660 | Input/Output: [(-3 78 20 61) -3]
Test Case: 661 | Input/Output: [(14 -70 -93 2) -93]
Test Case: 662 | Input/Output: [(51 -16 -3 -75) -75]
Test Case: 663 | Input/Output: [(-27 -50 9 52) -50]
Test Case: 664 | Input/Output: [(16 94 100 -57) -57]
Test Case: 665 | Input/Output: [(45 -40 -46 92) -46]
Test Case: 666 | Input/Output: [(-59 63 68 40) -59]
Test Case: 667 | Input/Output: [(-86 63 -11 -81) -86]
Test Case: 668 | Input/Output: [(47 16 -48 7) -48]
Test Case: 669 | Input/Output: [(38 -37 -38 5) -38]
Test Case: 670 | Input/Output: [(-44 49 -29 -78) -78]
Test Case: 671 | Input/Output: [(40 82 -46 86) -46]
Test Case: 672 | Input/Output: [(-47 77 11 -38) -47]
Test Case: 673 | Input/Output: [(71 -34 -24 -88) -88]
Test Case: 674 | Input/Output: [(-74 -74 38 66) -74]
Test Case: 675 | Input/Output: [(40 87 -12 47) -12]
Test Case: 676 | Input/Output: [(-37 13 -83 79) -83]
Test Case: 677 | Input/Output: [(-99 -80 -55 -99) -99]
Test Case: 678 | Input/Output: [(-30 70 23 -71) -71]
Test Case: 679 | Input/Output: [(-22 77 95 -80) -80]
Test Case: 680 | Input/Output: [(-45 -27 48 31) -45]
Test Case: 681 | Input/Output: [(72 54 -18 -93) -93]
Test Case: 682 | Input/Output: [(82 65 69 -95) -95]
Test Case: 683 | Input/Output: [(85 90 62 -1) -1]
Test Case: 684 | Input/Output: [(-29 3 40 30) -29]
Test Case: 685 | Input/Output: [(-31 38 5 -2) -31]
Test Case: 686 | Input/Output: [(-61 8 -69 14) -69]
Test Case: 687 | Input/Output: [(-86 36 74 64) -86]
Test Case: 688 | Input/Output: [(-23 19 67 -98) -98]
Test Case: 689 | Input/Output: [(4 100 18 30) 4]
Test Case: 690 | Input/Output: [(-52 87 53 -83) -83]
Test Case: 691 | Input/Output: [(63 -80 -51 61) -80]
Test Case: 692 | Input/Output: [(37 -25 -22 15) -25]
Test Case: 693 | Input/Output: [(19 -36 -53 57) -53]
Test Case: 694 | Input/Output: [(-59 -43 58 -36) -59]
Test Case: 695 | Input/Output: [(24 -56 -21 91) -56]
Test Case: 696 | Input/Output: [(-13 -14 94 -46) -46]
Test Case: 697 | Input/Output: [(75 -72 7 -69) -72]
Test Case: 698 | Input/Output: [(4 -79 36 -42) -79]
Test Case: 699 | Input/Output: [(-96 20 97 -40) -96]
Test Case: 700 | Input/Output: [(72 -11 50 -87) -87]
Test Case: 701 | Input/Output: [(-46 10 13 -24) -46]
Test Case: 702 | Input/Output: [(19 -18 -36 -70) -70]
Test Case: 703 | Input/Output: [(-42 -66 29 97) -66]
Test Case: 704 | Input/Output: [(88 79 45 -38) -38]
Test Case: 705 | Input/Output: [(60 -21 -22 -59) -59]
Test Case: 706 | Input/Output: [(14 -66 -19 -40) -66]
Test Case: 707 | Input/Output: [(77 -77 -29 4) -77]
Test Case: 708 | Input/Output: [(-53 -80 -51 64) -80]
Test Case: 709 | Input/Output: [(51 -66 -98 72) -98]
Test Case: 710 | Input/Output: [(-85 -94 25 -91) -94]
Test Case: 711 | Input/Output: [(20 -2 42 -87) -87]
Test Case: 712 | Input/Output: [(-59 57 -71 100) -71]
Test Case: 713 | Input/Output: [(-87 37 -48 100) -87]
Test Case: 714 | Input/Output: [(-80 -92 56 -40) -92]
Test Case: 715 | Input/Output: [(83 -60 -34 22) -60]
Test Case: 716 | Input/Output: [(-24 -91 18 21) -91]
Test Case: 717 | Input/Output: [(-24 -39 92 7) -39]
Test Case: 718 | Input/Output: [(36 -13 52 5) -13]
Test Case: 719 | Input/Output: [(-75 -29 -40 64) -75]
Test Case: 720 | Input/Output: [(86 55 60 23) 23]
Test Case: 721 | Input/Output: [(70 39 26 -56) -56]
Test Case: 722 | Input/Output: [(-52 91 -81 63) -81]
Test Case: 723 | Input/Output: [(-64 -12 74 28) -64]
Test Case: 724 | Input/Output: [(81 4 44 -23) -23]
Test Case: 725 | Input/Output: [(21 -40 -22 57) -40]
Test Case: 726 | Input/Output: [(67 -64 26 -50) -64]
Test Case: 727 | Input/Output: [(-13 -44 97 -47) -47]
Test Case: 728 | Input/Output: [(-73 35 -47 75) -73]
Test Case: 729 | Input/Output: [(64 53 0 -3) -3]
Test Case: 730 | Input/Output: [(89 49 -46 -15) -46]
Test Case: 731 | Input/Output: [(-5 10 -77 -33) -77]
Test Case: 732 | Input/Output: [(31 22 23 -1) -1]
Test Case: 733 | Input/Output: [(-76 -75 16 60) -76]
Test Case: 734 | Input/Output: [(9 54 24 -8) -8]
Test Case: 735 | Input/Output: [(54 91 -69 88) -69]
Test Case: 736 | Input/Output: [(-73 -30 89 -79) -79]
Test Case: 737 | Input/Output: [(50 -83 -32 47) -83]
Test Case: 738 | Input/Output: [(-29 57 -28 100) -29]
Test Case: 739 | Input/Output: [(65 -4 -62 47) -62]
Test Case: 740 | Input/Output: [(-93 42 -2 82) -93]
Test Case: 741 | Input/Output: [(96 62 -11 95) -11]
Test Case: 742 | Input/Output: [(-41 13 -99 -68) -99]
Test Case: 743 | Input/Output: [(4 -28 -82 32) -82]
Test Case: 744 | Input/Output: [(48 65 56 88) 48]
Test Case: 745 | Input/Output: [(75 -44 -49 60) -49]
Test Case: 746 | Input/Output: [(72 -17 -73 19) -73]
Test Case: 747 | Input/Output: [(50 8 54 -94) -94]
Test Case: 748 | Input/Output: [(80 -41 -27 26) -41]
Test Case: 749 | Input/Output: [(-45 -61 -93 52) -93]
Test Case: 750 | Input/Output: [(-71 -94 69 -89) -94]
Test Case: 751 | Input/Output: [(31 24 3 22) 3]
Test Case: 752 | Input/Output: [(-37 -78 -29 -80) -80]
Test Case: 753 | Input/Output: [(95 -91 40 64) -91]
Test Case: 754 | Input/Output: [(-15 -98 91 -41) -98]
Test Case: 755 | Input/Output: [(-39 89 90 -44) -44]
Test Case: 756 | Input/Output: [(-49 87 37 40) -49]
Test Case: 757 | Input/Output: [(83 -81 84 9) -81]
Test Case: 758 | Input/Output: [(-48 -42 -39 55) -48]
Test Case: 759 | Input/Output: [(85 -2 -37 12) -37]
Test Case: 760 | Input/Output: [(-85 -3 -82 22) -85]
Test Case: 761 | Input/Output: [(-66 19 12 -62) -66]
Test Case: 762 | Input/Output: [(-55 -8 -54 -13) -55]
Test Case: 763 | Input/Output: [(-38 54 62 87) -38]
Test Case: 764 | Input/Output: [(-91 -64 50 -83) -91]
Test Case: 765 | Input/Output: [(1 4 -91 -42) -91]
Test Case: 766 | Input/Output: [(-85 23 -8 16) -85]
Test Case: 767 | Input/Output: [(-39 -69 -70 13) -70]
Test Case: 768 | Input/Output: [(36 68 -21 -73) -73]
Test Case: 769 | Input/Output: [(60 51 75 91) 51]
Test Case: 770 | Input/Output: [(-58 -31 79 9) -58]
Test Case: 771 | Input/Output: [(-38 69 -42 13) -42]
Test Case: 772 | Input/Output: [(-71 47 -56 12) -71]
Test Case: 773 | Input/Output: [(-35 -9 -57 66) -57]
Test Case: 774 | Input/Output: [(52 -69 53 -32) -69]
Test Case: 775 | Input/Output: [(5 -71 91 -32) -71]
Test Case: 776 | Input/Output: [(71 -52 93 9) -52]
Test Case: 777 | Input/Output: [(69 61 -68 10) -68]
Test Case: 778 | Input/Output: [(-79 62 -22 -80) -80]
Test Case: 779 | Input/Output: [(12 79 -39 95) -39]
Test Case: 780 | Input/Output: [(-16 -19 32 -18) -19]
Test Case: 781 | Input/Output: [(67 63 44 95) 44]
Test Case: 782 | Input/Output: [(37 43 15 100) 15]
Test Case: 783 | Input/Output: [(15 58 8 16) 8]
Test Case: 784 | Input/Output: [(43 14 -75 -40) -75]
Test Case: 785 | Input/Output: [(43 -19 -58 2) -58]
Test Case: 786 | Input/Output: [(92 -6 -50 -3) -50]
Test Case: 787 | Input/Output: [(-22 46 -61 27) -61]
Test Case: 788 | Input/Output: [(46 97 -27 13) -27]
Test Case: 789 | Input/Output: [(9 22 -24 33) -24]
Test Case: 790 | Input/Output: [(-29 -83 43 -83) -83]
Test Case: 791 | Input/Output: [(43 -95 -50 -78) -95]
Test Case: 792 | Input/Output: [(-88 -63 84 -6) -88]
Test Case: 793 | Input/Output: [(-57 -69 63 72) -69]
Test Case: 794 | Input/Output: [(-45 -8 -36 -33) -45]
Test Case: 795 | Input/Output: [(-32 -57 6 20) -57]
Test Case: 796 | Input/Output: [(63 -1 43 10) -1]
Test Case: 797 | Input/Output: [(38 -9 78 -7) -9]
Test Case: 798 | Input/Output: [(62 -55 -33 89) -55]
Test Case: 799 | Input/Output: [(-42 -81 78 48) -81]
Test Case: 800 | Input/Output: [(11 11 -63 -52) -63]
Test Case: 801 | Input/Output: [(-99 -75 47 54) -99]
Test Case: 802 | Input/Output: [(66 64 62 27) 27]
Test Case: 803 | Input/Output: [(-48 46 -92 71) -92]
Test Case: 804 | Input/Output: [(48 -91 10 30) -91]
Test Case: 805 | Input/Output: [(69 -19 -82 60) -82]
Test Case: 806 | Input/Output: [(-18 80 -75 -10) -75]
Test Case: 807 | Input/Output: [(-93 -38 28 -75) -93]
Test Case: 808 | Input/Output: [(-16 83 -66 56) -66]
Test Case: 809 | Input/Output: [(-80 -77 -100 94) -100]
Test Case: 810 | Input/Output: [(88 29 34 27) 27]
Test Case: 811 | Input/Output: [(1 77 -97 82) -97]
Test Case: 812 | Input/Output: [(-82 -3 -10 8) -82]
Test Case: 813 | Input/Output: [(-79 57 -28 -47) -79]
Test Case: 814 | Input/Output: [(-29 79 12 -77) -77]
Test Case: 815 | Input/Output: [(35 89 6 62) 6]
Test Case: 816 | Input/Output: [(17 0 -12 -43) -43]
Test Case: 817 | Input/Output: [(43 -64 -66 -33) -66]
Test Case: 818 | Input/Output: [(-2 22 29 -34) -34]
Test Case: 819 | Input/Output: [(-70 -35 -26 -47) -70]
Test Case: 820 | Input/Output: [(14 45 -10 43) -10]
Test Case: 821 | Input/Output: [(97 -37 89 79) -37]
Test Case: 822 | Input/Output: [(15 80 80 57) 15]
Test Case: 823 | Input/Output: [(84 -11 -14 78) -14]
Test Case: 824 | Input/Output: [(25 3 20 -45) -45]
Test Case: 825 | Input/Output: [(47 -33 -71 14) -71]
Test Case: 826 | Input/Output: [(-89 -20 -50 55) -89]
Test Case: 827 | Input/Output: [(23 -65 25 53) -65]
Test Case: 828 | Input/Output: [(-4 99 34 -9) -9]
Test Case: 829 | Input/Output: [(-88 -47 33 6) -88]
Test Case: 830 | Input/Output: [(9 -42 22 65) -42]
Test Case: 831 | Input/Output: [(-90 -43 -39 -89) -90]
Test Case: 832 | Input/Output: [(88 -28 -42 31) -42]
Test Case: 833 | Input/Output: [(-71 65 17 -38) -71]
Test Case: 834 | Input/Output: [(49 -93 47 -48) -93]
Test Case: 835 | Input/Output: [(-74 12 46 0) -74]
Test Case: 836 | Input/Output: [(-6 3 95 93) -6]
Test Case: 837 | Input/Output: [(79 -32 44 -44) -44]
Test Case: 838 | Input/Output: [(-89 17 -25 -36) -89]
Test Case: 839 | Input/Output: [(80 -63 47 80) -63]
Test Case: 840 | Input/Output: [(74 73 81 44) 44]
Test Case: 841 | Input/Output: [(22 94 39 17) 17]
Test Case: 842 | Input/Output: [(-12 40 78 -2) -12]
Test Case: 843 | Input/Output: [(-29 -75 7 57) -75]
Test Case: 844 | Input/Output: [(-61 -70 66 -63) -70]
Test Case: 845 | Input/Output: [(45 -84 -98 -38) -98]
Test Case: 846 | Input/Output: [(-4 27 -16 -64) -64]
Test Case: 847 | Input/Output: [(-29 -57 -38 60) -57]
Test Case: 848 | Input/Output: [(79 36 65 23) 23]
Test Case: 849 | Input/Output: [(25 12 -18 61) -18]
Test Case: 850 | Input/Output: [(-15 26 -53 83) -53]
Test Case: 851 | Input/Output: [(9 -47 18 34) -47]
Test Case: 852 | Input/Output: [(70 60 -87 37) -87]
Test Case: 853 | Input/Output: [(-32 -26 -42 68) -42]
Test Case: 854 | Input/Output: [(-28 -54 89 -82) -82]
Test Case: 855 | Input/Output: [(-100 -91 5 -81) -100]
Test Case: 856 | Input/Output: [(-20 61 -57 -57) -57]
Test Case: 857 | Input/Output: [(-91 -91 18 70) -91]
Test Case: 858 | Input/Output: [(-64 94 -84 58) -84]
Test Case: 859 | Input/Output: [(-70 24 -42 25) -70]
Test Case: 860 | Input/Output: [(2 92 -2 -76) -76]
Test Case: 861 | Input/Output: [(23 -46 -68 63) -68]
Test Case: 862 | Input/Output: [(37 65 19 39) 19]
Test Case: 863 | Input/Output: [(-68 -22 59 34) -68]
Test Case: 864 | Input/Output: [(-41 63 89 -37) -41]
Test Case: 865 | Input/Output: [(47 -52 -100 43) -100]
Test Case: 866 | Input/Output: [(-64 -39 -64 20) -64]
Test Case: 867 | Input/Output: [(-69 70 100 62) -69]
Test Case: 868 | Input/Output: [(-40 -47 12 24) -47]
Test Case: 869 | Input/Output: [(32 -35 76 -49) -49]
Test Case: 870 | Input/Output: [(-33 38 69 19) -33]
Test Case: 871 | Input/Output: [(-42 81 -88 18) -88]
Test Case: 872 | Input/Output: [(-77 84 -69 60) -77]
Test Case: 873 | Input/Output: [(73 -86 86 81) -86]
Test Case: 874 | Input/Output: [(-26 98 -93 99) -93]
Test Case: 875 | Input/Output: [(-27 -19 65 -33) -33]
Test Case: 876 | Input/Output: [(71 77 5 -77) -77]
Test Case: 877 | Input/Output: [(25 35 -17 -50) -50]
Test Case: 878 | Input/Output: [(12 1 -32 -86) -86]
Test Case: 879 | Input/Output: [(-31 -66 -93 81) -93]
Test Case: 880 | Input/Output: [(-3 15 60 -9) -9]
Test Case: 881 | Input/Output: [(84 27 49 30) 27]
Test Case: 882 | Input/Output: [(93 -31 70 -42) -42]
Test Case: 883 | Input/Output: [(-100 -35 76 -24) -100]
Test Case: 884 | Input/Output: [(42 87 -21 19) -21]
Test Case: 885 | Input/Output: [(-47 26 25 -57) -57]
Test Case: 886 | Input/Output: [(53 -2 -16 11) -16]
Test Case: 887 | Input/Output: [(9 87 -64 0) -64]
Test Case: 888 | Input/Output: [(2 49 68 9) 2]
Test Case: 889 | Input/Output: [(49 90 -73 -100) -100]
Test Case: 890 | Input/Output: [(90 3 -91 -62) -91]
Test Case: 891 | Input/Output: [(77 -79 -81 20) -81]
Test Case: 892 | Input/Output: [(-66 24 -39 -39) -66]
Test Case: 893 | Input/Output: [(8 -35 12 -70) -70]
Test Case: 894 | Input/Output: [(32 -100 0 62) -100]
Test Case: 895 | Input/Output: [(-29 -20 -31 9) -31]
Test Case: 896 | Input/Output: [(-89 -71 -93 -73) -93]
Test Case: 897 | Input/Output: [(-95 70 -53 -82) -95]
Test Case: 898 | Input/Output: [(-42 9 -36 -10) -42]
Test Case: 899 | Input/Output: [(-56 6 -34 -62) -62]
Test Case: 900 | Input/Output: [(66 -37 43 -17) -37]
Test Case: 901 | Input/Output: [(-43 -10 -30 -50) -50]
Test Case: 902 | Input/Output: [(-1 -57 -21 -25) -57]
Test Case: 903 | Input/Output: [(45 -23 70 4) -23]
Test Case: 904 | Input/Output: [(21 -62 -81 18) -81]
Test Case: 905 | Input/Output: [(-52 44 35 -39) -52]
Test Case: 906 | Input/Output: [(90 83 20 -27) -27]
Test Case: 907 | Input/Output: [(71 32 -18 -8) -18]
Test Case: 908 | Input/Output: [(-15 92 95 -54) -54]
Test Case: 909 | Input/Output: [(-83 93 40 74) -83]
Test Case: 910 | Input/Output: [(91 5 -20 99) -20]
Test Case: 911 | Input/Output: [(-96 0 76 -17) -96]
Test Case: 912 | Input/Output: [(-74 -79 19 72) -79]
Test Case: 913 | Input/Output: [(3 -100 69 -60) -100]
Test Case: 914 | Input/Output: [(3 0 73 8) 0]
Test Case: 915 | Input/Output: [(12 43 -60 -48) -60]
Test Case: 916 | Input/Output: [(8 83 -48 -13) -48]
Test Case: 917 | Input/Output: [(48 34 -32 91) -32]
Test Case: 918 | Input/Output: [(61 -92 3 -6) -92]
Test Case: 919 | Input/Output: [(-39 66 23 -45) -45]
Test Case: 920 | Input/Output: [(-41 77 20 -15) -41]
Test Case: 921 | Input/Output: [(65 -98 71 -31) -98]
Test Case: 922 | Input/Output: [(6 58 88 23) 6]
Test Case: 923 | Input/Output: [(25 -11 -67 15) -67]
Test Case: 924 | Input/Output: [(84 -16 -48 -55) -55]
Test Case: 925 | Input/Output: [(-72 -17 -75 19) -75]
Test Case: 926 | Input/Output: [(-43 -10 -65 -45) -65]
Test Case: 927 | Input/Output: [(96 59 88 -2) -2]
Test Case: 928 | Input/Output: [(27 -33 -33 88) -33]
Test Case: 929 | Input/Output: [(94 90 87 18) 18]
Test Case: 930 | Input/Output: [(-2 -30 -3 -51) -51]
Test Case: 931 | Input/Output: [(-57 -53 24 56) -57]
Test Case: 932 | Input/Output: [(27 -14 18 20) -14]
Test Case: 933 | Input/Output: [(-34 20 77 34) -34]
Test Case: 934 | Input/Output: [(-10 -59 -17 74) -59]
Test Case: 935 | Input/Output: [(-50 23 48 91) -50]
Test Case: 936 | Input/Output: [(-76 87 23 -11) -76]
Test Case: 937 | Input/Output: [(11 -23 57 36) -23]
Test Case: 938 | Input/Output: [(-7 18 -28 -38) -38]
Test Case: 939 | Input/Output: [(63 52 42 -26) -26]
Test Case: 940 | Input/Output: [(-97 72 -22 -8) -97]
Test Case: 941 | Input/Output: [(-100 -38 48 -77) -100]
Test Case: 942 | Input/Output: [(84 33 -79 -35) -79]
Test Case: 943 | Input/Output: [(-45 -35 10 -30) -45]
Test Case: 944 | Input/Output: [(-73 -42 -50 -61) -73]
Test Case: 945 | Input/Output: [(51 -83 95 60) -83]
Test Case: 946 | Input/Output: [(-3 94 72 42) -3]
Test Case: 947 | Input/Output: [(-4 -88 80 -58) -88]
Test Case: 948 | Input/Output: [(59 -29 8 -13) -29]
Test Case: 949 | Input/Output: [(48 57 -60 -90) -90]
Test Case: 950 | Input/Output: [(32 51 -32 83) -32]
Test Case: 951 | Input/Output: [(46 29 -92 -100) -100]
Test Case: 952 | Input/Output: [(53 43 92 -62) -62]
Test Case: 953 | Input/Output: [(89 98 20 65) 20]
Test Case: 954 | Input/Output: [(67 1 25 -20) -20]
Test Case: 955 | Input/Output: [(-85 46 -82 -83) -85]
Test Case: 956 | Input/Output: [(-53 1 78 -89) -89]
Test Case: 957 | Input/Output: [(50 1 -87 68) -87]
Test Case: 958 | Input/Output: [(68 -79 -37 5) -79]
Test Case: 959 | Input/Output: [(97 40 -90 -84) -90]
Test Case: 960 | Input/Output: [(-95 80 54 -81) -95]
Test Case: 961 | Input/Output: [(-51 -52 -42 16) -52]
Test Case: 962 | Input/Output: [(12 -65 -87 -97) -97]
Test Case: 963 | Input/Output: [(64 -35 -27 -26) -35]
Test Case: 964 | Input/Output: [(-54 -46 -67 -26) -67]
Test Case: 965 | Input/Output: [(-64 23 -68 -23) -68]
Test Case: 966 | Input/Output: [(-26 8 24 -44) -44]
Test Case: 967 | Input/Output: [(89 -91 49 70) -91]
Test Case: 968 | Input/Output: [(23 1 9 66) 1]
Test Case: 969 | Input/Output: [(-15 -52 58 -29) -52]
Test Case: 970 | Input/Output: [(-9 -80 19 4) -80]
Test Case: 971 | Input/Output: [(-29 78 13 9) -29]
Test Case: 972 | Input/Output: [(-40 -71 -83 58) -83]
Test Case: 973 | Input/Output: [(-65 36 -54 -93) -93]
Test Case: 974 | Input/Output: [(-71 52 62 -83) -83]
Test Case: 975 | Input/Output: [(12 1 32 -33) -33]
Test Case: 976 | Input/Output: [(46 69 24 -59) -59]
Test Case: 977 | Input/Output: [(-94 71 -24 -28) -94]
Test Case: 978 | Input/Output: [(-30 46 93 4) -30]
Test Case: 979 | Input/Output: [(-1 -86 -59 -12) -86]
Test Case: 980 | Input/Output: [(-89 -20 16 75) -89]
Test Case: 981 | Input/Output: [(99 23 63 -49) -49]
Test Case: 982 | Input/Output: [(40 12 -28 53) -28]
Test Case: 983 | Input/Output: [(-90 66 -89 68) -90]
Test Case: 984 | Input/Output: [(86 -6 -2 21) -6]
Test Case: 985 | Input/Output: [(43 -51 94 71) -51]
Test Case: 986 | Input/Output: [(38 -14 13 37) -14]
Test Case: 987 | Input/Output: [(-60 32 13 82) -60]
Test Case: 988 | Input/Output: [(-27 91 17 -89) -89]
Test Case: 989 | Input/Output: [(-36 -60 21 -100) -100]
Test Case: 990 | Input/Output: [(53 32 -3 70) -3]
Test Case: 991 | Input/Output: [(-68 -65 -75 -35) -75]
Test Case: 992 | Input/Output: [(82 5 -58 -28) -58]
Test Case: 993 | Input/Output: [(-41 49 -32 -22) -41]
Test Case: 994 | Input/Output: [(65 59 -58 -69) -69]
Test Case: 995 | Input/Output: [(68 -13 -70 97) -70]
Test Case: 996 | Input/Output: [(-20 59 70 15) -20]
Test Case: 997 | Input/Output: [(-36 -84 -22 -55) -84]
Test Case: 998 | Input/Output: [(-16 -35 63 75) -35]
Test Case: 999 | Input/Output: [(-33 87 28 -92) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -48 102 107 -7 -17 9 -122 41 -71 -34 -104 -81 82 -92 -72 -33
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[82 74 74 74] 74] [[-87 -87 -87 61] -87] [[-91 -91 80 -91] -91] [[-54 -72 -72 -72] -72] [[0 -42 0 0] -42] [[-12 26 26 26] -12] [[-56 -56 28 -56] -56] [[-88 -94 -88 -88] -94] [[-22 -22 -22 -6] -22] [[-92 -92 -92 -44] -92] [(-59 -59 -59 -59) -59] [(-49 -49 -49 -49) -49] [(-100 -100 -100 -100) -100] [(77 77 77 77) 77] [(16 16 16 16) 16] [(37 88 76 95) 37] [(95 74 5 100) 5] [(71 29 24 96) 24] [(83 72 83 57) 57] [(10 69 34 64) 10] [(84 97 85 2) 2] [(57 57 1 5) 1] [(68 78 75 37) 37] [(71 42 28 10) 10] [(1 94 13 57) 1] [(57 83 26 67) 26] [(37 99 0 89) 0] [(6 40 33 11) 6] [(97 45 75 40) 40] [(13 75 35 41) 13] [(19 26 79 22) 19] [(2 37 8 2) 2] [(63 73 78 72) 63] [(81 80 87 4) 4] [(59 24 34 95) 24] [(-53 -79 -65 -68) -79] [(34 91 53 -24) -24] [(-63 23 -63 41) -63] [(-98 11 -41 62) -98] [(-16 -54 33 26) -54] [(15 55 6 32) 6] [(-34 40 -23 -6) -34] [(-89 46 -95 -18) -95] [(-58 -82 65 -51) -82] [(-1 80 49 34) -1] [(-59 65 16 -83) -83] [(-45 19 -39 -77) -77] [(-55 71 -94 -20) -94] [(-46 60 -83 58) -83] [(-92 -38 15 -43) -92] [(53 -5 47 -85) -85] [(-56 0 -63 10) -63] [(44 -98 -71 91) -98] [(-96 -34 -83 53) -96] [(-14 64 74 -15) -15] [(-34 -99 33 -27) -99] [(6 -43 -68 80) -68] [(-6 66 -51 64) -51] [(20 -2 28 -66) -66] [(19 -77 49 -67) -77] [(17 -48 35 0) -48] [(86 -52 45 -11) -52] [(-50 -26 64 -12) -50] [(-85 77 29 -36) -85] [(-48 38 -19 12) -48] [(68 -49 90 -57) -57] [(-71 -29 52 40) -71] [(-59 52 89 -21) -59] [(-87 -13 4 1) -87] [(29 -78 -74 -69) -78] [(6 88 -5 -13) -13] [(-41 57 -91 -59) -91] [(82 -16 -50 -100) -100] [(84 -80 -75 -15) -80] [(-100 72 81 -38) -100] [(47 -45 -16 -10) -45] [(27 -54 91 -93) -93] [(-20 69 63 59) -20] [(-73 -66 33 91) -73] [(-59 -15 -33 13) -59] [(43 76 72 -39) -39] [(-3 88 -87 40) -87] [(72 -99 -25 31) -99] [(61 31 94 -52) -52] [(99 35 -36 87) -36] [(83 33 44 -69) -69] [(45 -88 15 27) -88] [(52 -20 55 -87) -87] [(-21 -28 -29 -61) -61] [(0 32 15 93) 0] [(58 -2 -24 -60) -60] [(54 -19 61 -22) -22] [(59 -78 35 -79) -79] [(81 42 -24 78) -24] [(58 60 -36 -32) -36])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: 0                  
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 68                 
Correct output: 10                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 63                 
Correct output: 4                   | Program output: 81                 
Correct output: 24                  | Program output: 34                 
Correct output: -79                 | Program output: -65                
Correct output: -24                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -58                
Correct output: -1                  | Program output: -1                 
Correct output: -83                 | Program output: -59                
Correct output: -77                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 47                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -71                
Correct output: -96                 | Program output: -96                
Correct output: -15                 | Program output: -14                
Correct output: -99                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: 20                 
Correct output: -77                 | Program output: 19                 
Correct output: -48                 | Program output: 17                 
Correct output: -52                 | Program output: 45                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -74                
Correct output: -13                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -50                
Correct output: -80                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -16                
Correct output: -93                 | Program output: 27                 
Correct output: -20                 | Program output: -20                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -39                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -25                
Correct output: -52                 | Program output: 61                 
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: 44                 
Correct output: -88                 | Program output: 15                 
Correct output: -87                 | Program output: 52                 
Correct output: -61                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: -60                 | Program output: -24                
Correct output: -22                 | Program output: 54                 
Correct output: -79                 | Program output: 35                 
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 9 4 3 4 3 1 12 4 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 9 4 3 4 3 1 12 4 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.997 0.991 0.996 0.997 0.996 0.997 0.999 0.988 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.867
Average program size in population (points): 70.221
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 469268
--- Timings ---
Current time: 1559583100258 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 29.5%
Fitness Testing:      1.8 seconds, 66.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: 0                  
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 68                 
Correct output: 10                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 63                 
Correct output: 4                   | Program output: 81                 
Correct output: 24                  | Program output: 34                 
Correct output: -79                 | Program output: -65                
Correct output: -24                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -58                
Correct output: -1                  | Program output: -1                 
Correct output: -83                 | Program output: -59                
Correct output: -77                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 47                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -71                
Correct output: -96                 | Program output: -96                
Correct output: -15                 | Program output: -14                
Correct output: -99                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: 20                 
Correct output: -77                 | Program output: 19                 
Correct output: -48                 | Program output: 17                 
Correct output: -52                 | Program output: 45                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -74                
Correct output: -13                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -50                
Correct output: -80                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -16                
Correct output: -93                 | Program output: 27                 
Correct output: -20                 | Program output: -20                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -39                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -25                
Correct output: -52                 | Program output: 61                 
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: 44                 
Correct output: -88                 | Program output: 15                 
Correct output: -87                 | Program output: 52                 
Correct output: -61                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: -60                 | Program output: -24                
Correct output: -22                 | Program output: 54                 
Correct output: -79                 | Program output: 35                 
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 60
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 60
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (744 739 730 86 734 848 834 750 85 748)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (744 739 730 86 734 848 834 750 85 748)
Population mean number of perfect (error zero) cases: 6.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Best program: (integer_pop boolean_invert_second_then_and integer_rot integer_stackdepth exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 3.702
Median total errors in population: 2
Error averages by case: (0.256 0.261 0.27 0.914 0.266 0.152 0.166 0.25 0.915 0.252)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.432
Average program size in population (points): 64.94
Average percent parens in population: 0.275
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.527
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 429
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 436
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 776998
--- Timings ---
Current time: 1559583102635 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 47.8%
Fitness Testing:      2.3 seconds, 43.5%
Report:               0.4 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: 0                  
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 68                 
Correct output: 10                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 63                 
Correct output: 4                   | Program output: 81                 
Correct output: 24                  | Program output: 34                 
Correct output: -79                 | Program output: -65                
Correct output: -24                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -58                
Correct output: -1                  | Program output: -1                 
Correct output: -83                 | Program output: -59                
Correct output: -77                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 47                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -71                
Correct output: -96                 | Program output: -96                
Correct output: -15                 | Program output: -14                
Correct output: -99                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: 20                 
Correct output: -77                 | Program output: 19                 
Correct output: -48                 | Program output: 17                 
Correct output: -52                 | Program output: 45                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -74                
Correct output: -13                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -50                
Correct output: -80                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -16                
Correct output: -93                 | Program output: 27                 
Correct output: -20                 | Program output: -20                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -39                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -25                
Correct output: -52                 | Program output: 61                 
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: 44                 
Correct output: -88                 | Program output: 15                 
Correct output: -87                 | Program output: 52                 
Correct output: -61                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: -60                 | Program output: -24                
Correct output: -22                 | Program output: 54                 
Correct output: -79                 | Program output: 35                 
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Lexicase best errors: [1 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ()) ()))))
Zero cases best errors: [1 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 647 200 199 652 1000 636 862 640 1000)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (200 647 200 199 652 0 636 862 640 0)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_do*times (integer_dec exec_noop) exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor))) ()) ()))))
Errors: [1 0 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 43
Size: 59
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 5.964
Median total errors in population: 5
Error averages by case: (0.8 0.353 0.8 0.801 0.348 1.0 0.364 0.138 0.36 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 52.09
Average program size in population (points): 69.952
Average percent parens in population: 0.263
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.043
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 250
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1169939
--- Timings ---
Current time: 1559583105384 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.5 seconds, 56.6%
Fitness Testing:      2.8 seconds, 34.6%
Report:               0.6 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 405
Test mean error for best: 0.40500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: 0                  
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 83                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 84                 
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 68                 
Correct output: 10                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 75                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 63                 
Correct output: 4                   | Program output: 81                 
Correct output: 24                  | Program output: 34                 
Correct output: -79                 | Program output: -65                
Correct output: -24                 | Program output: 34                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -16                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -58                
Correct output: -1                  | Program output: -1                 
Correct output: -83                 | Program output: -59                
Correct output: -77                 | Program output: -45                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: 47                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -71                
Correct output: -96                 | Program output: -96                
Correct output: -15                 | Program output: -14                
Correct output: -99                 | Program output: -34                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: 20                 
Correct output: -77                 | Program output: 19                 
Correct output: -48                 | Program output: 17                 
Correct output: -52                 | Program output: 45                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -74                
Correct output: -13                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -50                
Correct output: -80                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -16                
Correct output: -93                 | Program output: 27                 
Correct output: -20                 | Program output: -20                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -39                 | Program output: 43                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -25                
Correct output: -52                 | Program output: 61                 
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: 44                 
Correct output: -88                 | Program output: 15                 
Correct output: -87                 | Program output: 52                 
Correct output: -61                 | Program output: -29                
Correct output: 0                   | Program output: 0                  
Correct output: -60                 | Program output: -24                
Correct output: -22                 | Program output: 54                 
Correct output: -79                 | Program output: 35                 
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if})
Lexicase best program: (exec_do*range (boolean_invert_second_then_and) integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if () ())) ()) ()))))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 54
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if})
Zero cases best program: (exec_do*range (boolean_invert_second_then_and) integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if () ())) ()) ()))))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 54
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 478 479 475 478 476 1000 477 352 353)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (0 478 479 475 478 476 0 477 352 353)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 2, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_yankdup} {:close 1, :instruction tagged_225} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction -22} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_606} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction tag_exec_91} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_yankdup boolean_not print_boolean integer_dup_items boolean_shove exec_do*while () boolean_empty integer_lte integer_eq exec_when (integer_gte exec_do*while (boolean_dup_times exec_yank boolean_rot in3 exec_eq) integer_dup_times boolean_xor) exec_dup (in1 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_dup) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (integer_gte print_integer exec_shove (integer_shove exec_dup (in4 integer_sub integer_rot exec_yank boolean_or exec_y_when_autoconstructing (exec_dup_items integer_yankdup) tagged_225) exec_k_when_autoconstructing (integer_swap integer_eq integer_max integer_gte integer_yank boolean_invert_second_then_and in3) (boolean_invert_second_then_and integer_mod boolean_dup_items) integer_gt integer_inc exec_dup (boolean_and integer_mod exec_dup_times (boolean_empty boolean_dup_items -22) exec_s_when_autoconstructing (integer_sub integer_lte integer_add boolean_pop tagged_606) (integer_gte exec_do*count (boolean_invert_second_then_and boolean_frominteger exec_k_when_autoconstructing () (boolean_frominteger boolean_dup) exec_eq exec_dup (boolean_invert_first_then_and boolean_yank in3 tag_exec_91 (print_newline boolean_or) exec_stackdepth) integer_lt integer_swap boolean_yank integer_mod exec_do*times (exec_when (integer_flush exec_s_when_autoconstructing () (exec_pop (integer_lte integer_yank integer_swap boolean_stackdepth boolean_and boolean_invert_first_then_and)) ())))) ()))) ()) ()))))
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 112
Size: 147
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.432
Median total errors in population: 8
Error averages by case: (1.0 0.522 0.521 0.525 0.522 0.524 1.0 0.523 0.648 0.647)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 58.159
Average program size in population (points): 76.255
Average percent parens in population: 0.246
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.54625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.796
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1693496
--- Timings ---
Current time: 1559583108216 milliseconds
Total Time:          10.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.5 seconds, 60.1%
Fitness Testing:      3.3 seconds, 31.0%
Report:               0.9 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 399
Test mean error for best: 0.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: 0                  
Correct output: -12                 | Program output: 26                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -88                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 11                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 35                 
Correct output: 19                  | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 34                 
Correct output: -79                 | Program output: -68                
Correct output: -24                 | Program output: -24                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -41                
Correct output: -54                 | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -51                
Correct output: -1                  | Program output: 34                 
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -43                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -71                
Correct output: -96                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -67                
Correct output: -48                 | Program output: 0                  
Correct output: -52                 | Program output: -11                
Correct output: -50                 | Program output: -12                
Correct output: -85                 | Program output: -36                
Correct output: -48                 | Program output: -19                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 40                 
Correct output: -59                 | Program output: -21                
Correct output: -87                 | Program output: 1                  
Correct output: -78                 | Program output: -74                
Correct output: -13                 | Program output: -13                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -75                
Correct output: -100                | Program output: -38                
Correct output: -45                 | Program output: -16                
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: 59                 
Correct output: -73                 | Program output: 33                 
Correct output: -59                 | Program output: -33                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -25                
Correct output: -52                 | Program output: -52                
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: 15                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: 0                   | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in4 integer_min) exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (integer_dup exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (integer_gt boolean_xor) integer_yank exec_do*while (exec_do*while () boolean_xor)) ()) ())))
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in4 integer_min) exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (integer_dup exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (integer_gt boolean_xor) integer_yank exec_do*while (exec_do*while () boolean_xor)) ()) ())))
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (859 653 203 1 204 1 203 678 670 656)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (859 653 203 1 204 1 203 678 670 656)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in4 integer_min) exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (integer_dup exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (integer_gt boolean_xor) integer_yank exec_do*while (exec_do*while () boolean_xor)) ()) ())))
Errors: [0 0 0 1 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 43
Size: 58
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 5.872
Median total errors in population: 5
Error averages by case: (0.141 0.347 0.797 0.999 0.796 0.999 0.797 0.322 0.33 0.344)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.235
Average program size in population (points): 68.591
Average percent parens in population: 0.259
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.976875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 96
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2078910
--- Timings ---
Current time: 1559583110997 milliseconds
Total Time:          13.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.6 seconds, 63.5%
Fitness Testing:      3.7 seconds, 27.3%
Report:               1.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: 26                 
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 76                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 11                 
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 35                 
Correct output: 19                  | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 72                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -41                
Correct output: -54                 | Program output: -54                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -23                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -1                  | Program output: 34                 
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -43                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -83                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -50                 | Program output: -26                
Correct output: -85                 | Program output: -36                
Correct output: -48                 | Program output: -19                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -29                
Correct output: -59                 | Program output: -21                
Correct output: -87                 | Program output: -13                
Correct output: -78                 | Program output: -78                
Correct output: -13                 | Program output: -13                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -38                
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: 59                 
Correct output: -73                 | Program output: -66                
Correct output: -59                 | Program output: -33                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: 0                   | Program output: 15                 
Correct output: -60                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (511 243 638 268 476 268 808 241 268 476)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (511 243 638 268 476 268 808 241 268 476)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max integer_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Errors: [0 1 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 50
Size: 68
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 5.803
Median total errors in population: 6
Error averages by case: (0.489 0.757 0.362 0.732 0.524 0.732 0.192 0.759 0.732 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.118
Average program size in population (points): 61.206
Average percent parens in population: 0.278
Minimum age in population: 5.5
Maximum age in population: 8.75
Average age in population: 7.3978125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2345565
--- Timings ---
Current time: 1559583113494 milliseconds
Total Time:          16.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 65.9%
Fitness Testing:      4.0 seconds, 24.9%
Report:               1.4 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -1                  | Program output: -1                 
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -13                 | Program output: -13                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: 0                   | Program output: 0                  
Correct output: -60                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 849 739 310 532 533 739 532 310 735)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (531 849 739 310 532 533 739 532 310 735)
Population mean number of perfect (error zero) cases: 5.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tagged_601} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor})
Best program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 4.19
Median total errors in population: 2
Error averages by case: (0.469 0.151 0.261 0.69 0.468 0.467 0.261 0.468 0.69 0.265)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.501
Average program size in population (points): 65.162
Average percent parens in population: 0.271
Minimum age in population: 6.5
Maximum age in population: 10.28125
Average age in population: 9.1981875
Median age in population: 9.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 285
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2632037
--- Timings ---
Current time: 1559583115976 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.5 seconds, 67.4%
Fitness Testing:      4.3 seconds, 23.2%
Report:               1.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 74


Auto-simplifying with starting size: 74
step: 0
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 500
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1000
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1500
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2000
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2500
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3000
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3500
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4000
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4500
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 5000
program: (integer_pop boolean_invert_second_then_and integer_rot boolean_yank exec_yank boolean_rot in3 exec_eq integer_dup_times boolean_xor exec_dup (in1 integer_min integer_dup_times boolean_xor) exec_dup (in4 integer_min) exec_do*range (in2 integer_min exec_do*range (boolean_pop print_integer exec_k (in4 integer_max exec_flush integer_mult exec_do*times (exec_eq) integer_div) (print_boolean exec_rot (boolean_flush tagged_601 integer_gte) (exec_noop integer_dup_times tagged_601 integer_gte) (exec_noop integer_dup_times exec_k (print_newline boolean_invert_first_then_and exec_k (integer_dec exec_noop) (exec_if (boolean_xor) (integer_yank exec_do*while (exec_do*while () boolean_xor)))) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 74                  | Program output: 74                 
Correct output: -87                 | Program output: -87                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: -56                 | Program output: -56                
Correct output: -94                 | Program output: -94                
Correct output: -22                 | Program output: -22                
Correct output: -92                 | Program output: -92                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -100                | Program output: -100               
Correct output: 77                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 24                  | Program output: 24                 
Correct output: 57                  | Program output: 57                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 37                  | Program output: 37                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 26                  | Program output: 26                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: 40                  | Program output: 40                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 63                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: 6                   | Program output: 6                  
Correct output: -34                 | Program output: -34                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -1                  | Program output: -1                 
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -94                 | Program output: -94                
Correct output: -83                 | Program output: -83                
Correct output: -92                 | Program output: -92                
Correct output: -85                 | Program output: -85                
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -15                 | Program output: -15                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -51                 | Program output: -51                
Correct output: -66                 | Program output: -66                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -52                 | Program output: -52                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -87                 | Program output: -87                
Correct output: -78                 | Program output: -78                
Correct output: -13                 | Program output: -13                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -80                 | Program output: -80                
Correct output: -100                | Program output: -100               
Correct output: -45                 | Program output: -45                
Correct output: -93                 | Program output: -93                
Correct output: -20                 | Program output: -20                
Correct output: -73                 | Program output: -73                
Correct output: -59                 | Program output: -59                
Correct output: -39                 | Program output: -39                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -36                 | Program output: -36                
Correct output: -69                 | Program output: -69                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: 0                   | Program output: 0                  
Correct output: -60                 | Program output: -60                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -79                
Correct output: -24                 | Program output: -24                
Correct output: -36                 | Program output: -36                
;;******************************
