Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[88 40 88 88] 40] [[-35 -35 -35 -66] -66] [[-20 -20 0 -20] -20] [[-8 -8 -79 -8] -79] [[-99 -30 -99 -99] -99] [[7 7 -52 7] -52] [[48 14 14 14] 14] [[51 20 20 20] 20] [[-59 72 72 72] -59] [[-76 33 33 33] -76] [(78 78 78 78) 78] [(-11 -11 -11 -11) -11] [(-76 -76 -76 -76) -76] [(85 85 85 85) 85] [(18 18 18 18) 18] [(12 76 58 12) 12] [(85 15 9 86) 9] [(16 3 3 10) 3] [(57 54 92 64) 54] [(14 46 48 94) 14] [(12 7 97 40) 7] [(8 86 38 70) 8] [(38 97 50 58) 38] [(97 14 89 34) 14] [(54 34 76 24) 24] [(62 45 67 97) 45] [(65 37 36 98) 36] [(45 69 87 52) 45] [(78 88 78 28) 28] [(40 48 9 8) 8] [(98 42 99 14) 14] [(24 13 21 61) 13] [(47 55 6 81) 6] [(35 36 78 76) 35] [(97 78 82 87) 78] [(-23 16 -78 -92) -92] [(-51 -55 -64 -19) -64] [(18 -80 -32 60) -80] [(-72 49 -14 70) -72] [(77 -100 48 68) -100] [(-4 -76 19 -56) -76] [(19 77 12 68) 12] [(87 -9 23 -91) -91] [(12 42 70 14) 12] [(-11 -7 -11 83) -11] [(6 -87 -63 75) -87] [(31 -70 -45 99) -70] [(-63 -64 84 87) -64] [(69 -90 23 17) -90] [(71 95 -31 29) -31] [(-70 70 60 29) -70] [(22 -95 -48 10) -95] [(-21 -74 -71 -92) -92] [(-88 26 -83 -35) -88] [(84 -95 -50 47) -95] [(-20 3 74 24) -20] [(57 -56 17 9) -56] [(69 45 -76 23) -76] [(-4 -48 -2 78) -48] [(45 35 67 -31) -31] [(98 25 30 72) 25] [(-40 -56 45 -100) -100] [(-87 13 93 -20) -87] [(-27 -23 38 11) -27] [(-70 59 27 -61) -70] [(19 -10 25 88) -10] [(-58 -91 -90 -21) -91] [(-45 86 -66 41) -66] [(90 50 -45 -44) -45] [(3 87 95 -67) -67] [(49 -16 -92 -51) -92] [(81 19 -18 -54) -54] [(-30 -95 -40 -92) -95] [(89 -58 -28 -27) -58] [(-61 18 85 91) -61] [(54 36 68 -18) -18] [(-56 51 23 46) -56] [(-93 -69 55 -17) -93] [(89 -61 4 -19) -61] [(-83 -92 -45 -75) -92] [(100 -58 84 31) -58] [(-47 90 -16 -33) -47] [(-41 -95 -40 32) -95] [(52 -7 68 20) -7] [(-11 13 -35 88) -35] [(-45 -22 81 24) -45] [(-73 -48 -64 -8) -73] [(29 90 40 -92) -92] [(-7 21 80 -89) -89] [(-91 22 53 21) -91] [(51 -80 7 59) -80] [(93 20 -83 49) -83] [(10 26 71 -40) -40] [(38 10 -91 -7) -91] [(-27 -32 -61 81) -61])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[88 40 88 88] 40]
Train Case:   6 | Input/Output: [[-35 -35 -35 -66] -66]
Train Case:   7 | Input/Output: [[-20 -20 0 -20] -20]
Train Case:   8 | Input/Output: [[-8 -8 -79 -8] -79]
Train Case:   9 | Input/Output: [[-99 -30 -99 -99] -99]
Train Case:  10 | Input/Output: [[7 7 -52 7] -52]
Train Case:  11 | Input/Output: [[48 14 14 14] 14]
Train Case:  12 | Input/Output: [[51 20 20 20] 20]
Train Case:  13 | Input/Output: [[-59 72 72 72] -59]
Train Case:  14 | Input/Output: [[-76 33 33 33] -76]
Train Case:  15 | Input/Output: [(78 78 78 78) 78]
Train Case:  16 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  17 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  18 | Input/Output: [(85 85 85 85) 85]
Train Case:  19 | Input/Output: [(18 18 18 18) 18]
Train Case:  20 | Input/Output: [(12 76 58 12) 12]
Train Case:  21 | Input/Output: [(85 15 9 86) 9]
Train Case:  22 | Input/Output: [(16 3 3 10) 3]
Train Case:  23 | Input/Output: [(57 54 92 64) 54]
Train Case:  24 | Input/Output: [(14 46 48 94) 14]
Train Case:  25 | Input/Output: [(12 7 97 40) 7]
Train Case:  26 | Input/Output: [(8 86 38 70) 8]
Train Case:  27 | Input/Output: [(38 97 50 58) 38]
Train Case:  28 | Input/Output: [(97 14 89 34) 14]
Train Case:  29 | Input/Output: [(54 34 76 24) 24]
Train Case:  30 | Input/Output: [(62 45 67 97) 45]
Train Case:  31 | Input/Output: [(65 37 36 98) 36]
Train Case:  32 | Input/Output: [(45 69 87 52) 45]
Train Case:  33 | Input/Output: [(78 88 78 28) 28]
Train Case:  34 | Input/Output: [(40 48 9 8) 8]
Train Case:  35 | Input/Output: [(98 42 99 14) 14]
Train Case:  36 | Input/Output: [(24 13 21 61) 13]
Train Case:  37 | Input/Output: [(47 55 6 81) 6]
Train Case:  38 | Input/Output: [(35 36 78 76) 35]
Train Case:  39 | Input/Output: [(97 78 82 87) 78]
Train Case:  40 | Input/Output: [(-23 16 -78 -92) -92]
Train Case:  41 | Input/Output: [(-51 -55 -64 -19) -64]
Train Case:  42 | Input/Output: [(18 -80 -32 60) -80]
Train Case:  43 | Input/Output: [(-72 49 -14 70) -72]
Train Case:  44 | Input/Output: [(77 -100 48 68) -100]
Train Case:  45 | Input/Output: [(-4 -76 19 -56) -76]
Train Case:  46 | Input/Output: [(19 77 12 68) 12]
Train Case:  47 | Input/Output: [(87 -9 23 -91) -91]
Train Case:  48 | Input/Output: [(12 42 70 14) 12]
Train Case:  49 | Input/Output: [(-11 -7 -11 83) -11]
Train Case:  50 | Input/Output: [(6 -87 -63 75) -87]
Train Case:  51 | Input/Output: [(31 -70 -45 99) -70]
Train Case:  52 | Input/Output: [(-63 -64 84 87) -64]
Train Case:  53 | Input/Output: [(69 -90 23 17) -90]
Train Case:  54 | Input/Output: [(71 95 -31 29) -31]
Train Case:  55 | Input/Output: [(-70 70 60 29) -70]
Train Case:  56 | Input/Output: [(22 -95 -48 10) -95]
Train Case:  57 | Input/Output: [(-21 -74 -71 -92) -92]
Train Case:  58 | Input/Output: [(-88 26 -83 -35) -88]
Train Case:  59 | Input/Output: [(84 -95 -50 47) -95]
Train Case:  60 | Input/Output: [(-20 3 74 24) -20]
Train Case:  61 | Input/Output: [(57 -56 17 9) -56]
Train Case:  62 | Input/Output: [(69 45 -76 23) -76]
Train Case:  63 | Input/Output: [(-4 -48 -2 78) -48]
Train Case:  64 | Input/Output: [(45 35 67 -31) -31]
Train Case:  65 | Input/Output: [(98 25 30 72) 25]
Train Case:  66 | Input/Output: [(-40 -56 45 -100) -100]
Train Case:  67 | Input/Output: [(-87 13 93 -20) -87]
Train Case:  68 | Input/Output: [(-27 -23 38 11) -27]
Train Case:  69 | Input/Output: [(-70 59 27 -61) -70]
Train Case:  70 | Input/Output: [(19 -10 25 88) -10]
Train Case:  71 | Input/Output: [(-58 -91 -90 -21) -91]
Train Case:  72 | Input/Output: [(-45 86 -66 41) -66]
Train Case:  73 | Input/Output: [(90 50 -45 -44) -45]
Train Case:  74 | Input/Output: [(3 87 95 -67) -67]
Train Case:  75 | Input/Output: [(49 -16 -92 -51) -92]
Train Case:  76 | Input/Output: [(81 19 -18 -54) -54]
Train Case:  77 | Input/Output: [(-30 -95 -40 -92) -95]
Train Case:  78 | Input/Output: [(89 -58 -28 -27) -58]
Train Case:  79 | Input/Output: [(-61 18 85 91) -61]
Train Case:  80 | Input/Output: [(54 36 68 -18) -18]
Train Case:  81 | Input/Output: [(-56 51 23 46) -56]
Train Case:  82 | Input/Output: [(-93 -69 55 -17) -93]
Train Case:  83 | Input/Output: [(89 -61 4 -19) -61]
Train Case:  84 | Input/Output: [(-83 -92 -45 -75) -92]
Train Case:  85 | Input/Output: [(100 -58 84 31) -58]
Train Case:  86 | Input/Output: [(-47 90 -16 -33) -47]
Train Case:  87 | Input/Output: [(-41 -95 -40 32) -95]
Train Case:  88 | Input/Output: [(52 -7 68 20) -7]
Train Case:  89 | Input/Output: [(-11 13 -35 88) -35]
Train Case:  90 | Input/Output: [(-45 -22 81 24) -45]
Train Case:  91 | Input/Output: [(-73 -48 -64 -8) -73]
Train Case:  92 | Input/Output: [(29 90 40 -92) -92]
Train Case:  93 | Input/Output: [(-7 21 80 -89) -89]
Train Case:  94 | Input/Output: [(-91 22 53 21) -91]
Train Case:  95 | Input/Output: [(51 -80 7 59) -80]
Train Case:  96 | Input/Output: [(93 20 -83 49) -83]
Train Case:  97 | Input/Output: [(10 26 71 -40) -40]
Train Case:  98 | Input/Output: [(38 10 -91 -7) -91]
Train Case:  99 | Input/Output: [(-27 -32 -61 81) -61]
Test Case:   0 | Input/Output: [[-45 -62 -62 -62] -62]
Test Case:   1 | Input/Output: [[-78 -86 -78 -78] -86]
Test Case:   2 | Input/Output: [[34 34 34 64] 34]
Test Case:   3 | Input/Output: [[95 -76 -76 -76] -76]
Test Case:   4 | Input/Output: [[75 -45 -45 -45] -45]
Test Case:   5 | Input/Output: [[54 96 96 96] 54]
Test Case:   6 | Input/Output: [[75 91 75 75] 75]
Test Case:   7 | Input/Output: [[27 -82 27 27] -82]
Test Case:   8 | Input/Output: [[-9 -9 76 -9] -9]
Test Case:   9 | Input/Output: [[-44 78 78 78] -44]
Test Case:  10 | Input/Output: [[-18 -18 86 -18] -18]
Test Case:  11 | Input/Output: [[-96 -41 -41 -41] -96]
Test Case:  12 | Input/Output: [[-12 64 64 64] -12]
Test Case:  13 | Input/Output: [[-97 -20 -20 -20] -97]
Test Case:  14 | Input/Output: [[-94 -94 96 -94] -94]
Test Case:  15 | Input/Output: [[-1 88 -1 -1] -1]
Test Case:  16 | Input/Output: [[-38 34 -38 -38] -38]
Test Case:  17 | Input/Output: [[-44 -44 41 -44] -44]
Test Case:  18 | Input/Output: [[-96 -55 -96 -96] -96]
Test Case:  19 | Input/Output: [[-63 -63 -42 -63] -63]
Test Case:  20 | Input/Output: [[-54 -54 51 -54] -54]
Test Case:  21 | Input/Output: [[-10 -10 63 -10] -10]
Test Case:  22 | Input/Output: [[-89 61 61 61] -89]
Test Case:  23 | Input/Output: [[15 -35 15 15] -35]
Test Case:  24 | Input/Output: [[93 93 -1 93] -1]
Test Case:  25 | Input/Output: [[61 66 61 61] 61]
Test Case:  26 | Input/Output: [[-62 18 18 18] -62]
Test Case:  27 | Input/Output: [[-73 -73 -73 28] -73]
Test Case:  28 | Input/Output: [[18 18 9 18] 9]
Test Case:  29 | Input/Output: [[81 48 48 48] 48]
Test Case:  30 | Input/Output: [[-42 -3 -42 -42] -42]
Test Case:  31 | Input/Output: [[-37 -37 -55 -37] -55]
Test Case:  32 | Input/Output: [[-14 -14 -14 -60] -60]
Test Case:  33 | Input/Output: [[31 31 40 31] 31]
Test Case:  34 | Input/Output: [[-16 -16 -8 -16] -16]
Test Case:  35 | Input/Output: [[-41 45 45 45] -41]
Test Case:  36 | Input/Output: [[-88 -88 6 -88] -88]
Test Case:  37 | Input/Output: [[62 62 2 62] 2]
Test Case:  38 | Input/Output: [[-97 37 -97 -97] -97]
Test Case:  39 | Input/Output: [[-57 70 70 70] -57]
Test Case:  40 | Input/Output: [[-41 -41 -41 -87] -87]
Test Case:  41 | Input/Output: [[-5 -5 -5 51] -5]
Test Case:  42 | Input/Output: [[-64 41 41 41] -64]
Test Case:  43 | Input/Output: [[-42 -59 -42 -42] -59]
Test Case:  44 | Input/Output: [[-48 -8 -8 -8] -48]
Test Case:  45 | Input/Output: [[-13 -4 -13 -13] -13]
Test Case:  46 | Input/Output: [[-10 -10 24 -10] -10]
Test Case:  47 | Input/Output: [[-46 -46 72 -46] -46]
Test Case:  48 | Input/Output: [[-10 -98 -98 -98] -98]
Test Case:  49 | Input/Output: [[44 53 53 53] 44]
Test Case:  50 | Input/Output: [[-39 -39 -39 79] -39]
Test Case:  51 | Input/Output: [[-63 -71 -63 -63] -71]
Test Case:  52 | Input/Output: [[13 91 13 13] 13]
Test Case:  53 | Input/Output: [[46 -8 46 46] -8]
Test Case:  54 | Input/Output: [[40 -61 40 40] -61]
Test Case:  55 | Input/Output: [[43 -14 -14 -14] -14]
Test Case:  56 | Input/Output: [[72 72 48 72] 48]
Test Case:  57 | Input/Output: [[-50 30 30 30] -50]
Test Case:  58 | Input/Output: [[-29 -76 -76 -76] -76]
Test Case:  59 | Input/Output: [[-54 -54 -54 68] -54]
Test Case:  60 | Input/Output: [[60 60 70 60] 60]
Test Case:  61 | Input/Output: [[15 -66 15 15] -66]
Test Case:  62 | Input/Output: [[-47 -47 -47 -100] -100]
Test Case:  63 | Input/Output: [[-16 -16 -16 -80] -80]
Test Case:  64 | Input/Output: [[7 -57 -57 -57] -57]
Test Case:  65 | Input/Output: [[52 62 62 62] 52]
Test Case:  66 | Input/Output: [[77 59 77 77] 59]
Test Case:  67 | Input/Output: [[12 12 12 44] 12]
Test Case:  68 | Input/Output: [[7 74 7 7] 7]
Test Case:  69 | Input/Output: [[10 12 12 12] 10]
Test Case:  70 | Input/Output: [[94 94 94 12] 12]
Test Case:  71 | Input/Output: [[-88 -27 -27 -27] -88]
Test Case:  72 | Input/Output: [[57 -61 -61 -61] -61]
Test Case:  73 | Input/Output: [[51 51 51 -73] -73]
Test Case:  74 | Input/Output: [[91 91 -2 91] -2]
Test Case:  75 | Input/Output: [[77 77 77 17] 17]
Test Case:  76 | Input/Output: [[54 -4 -4 -4] -4]
Test Case:  77 | Input/Output: [[54 -24 -24 -24] -24]
Test Case:  78 | Input/Output: [[-39 -39 -39 -71] -71]
Test Case:  79 | Input/Output: [[-27 -15 -15 -15] -27]
Test Case:  80 | Input/Output: [[-67 31 31 31] -67]
Test Case:  81 | Input/Output: [[55 55 55 -58] -58]
Test Case:  82 | Input/Output: [[-56 -5 -56 -56] -56]
Test Case:  83 | Input/Output: [[37 37 37 -9] -9]
Test Case:  84 | Input/Output: [[14 -94 14 14] -94]
Test Case:  85 | Input/Output: [[84 84 84 79] 79]
Test Case:  86 | Input/Output: [[-59 -59 -59 -59] -59]
Test Case:  87 | Input/Output: [[30 -13 30 30] -13]
Test Case:  88 | Input/Output: [[-72 40 -72 -72] -72]
Test Case:  89 | Input/Output: [[55 -54 55 55] -54]
Test Case:  90 | Input/Output: [[-20 -20 -20 35] -20]
Test Case:  91 | Input/Output: [[74 74 -97 74] -97]
Test Case:  92 | Input/Output: [[17 17 17 -90] -90]
Test Case:  93 | Input/Output: [[85 -24 85 85] -24]
Test Case:  94 | Input/Output: [[-94 5 -94 -94] -94]
Test Case:  95 | Input/Output: [[-40 -40 -97 -40] -97]
Test Case:  96 | Input/Output: [[17 -2 -2 -2] -2]
Test Case:  97 | Input/Output: [[-41 -41 -41 -88] -88]
Test Case:  98 | Input/Output: [[-99 -66 -99 -99] -99]
Test Case:  99 | Input/Output: [[-5 -5 -5 68] -5]
Test Case: 100 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 101 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 102 | Input/Output: [(56 56 56 56) 56]
Test Case: 103 | Input/Output: [(82 82 82 82) 82]
Test Case: 104 | Input/Output: [(18 18 18 18) 18]
Test Case: 105 | Input/Output: [(46 46 46 46) 46]
Test Case: 106 | Input/Output: [(15 15 15 15) 15]
Test Case: 107 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 108 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 109 | Input/Output: [(32 32 32 32) 32]
Test Case: 110 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 111 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 112 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 113 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 114 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 115 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 116 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 117 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 118 | Input/Output: [(56 56 56 56) 56]
Test Case: 119 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 120 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 121 | Input/Output: [(94 94 94 94) 94]
Test Case: 122 | Input/Output: [(94 94 94 94) 94]
Test Case: 123 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 124 | Input/Output: [(64 64 64 64) 64]
Test Case: 125 | Input/Output: [(71 71 71 71) 71]
Test Case: 126 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 127 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 128 | Input/Output: [(12 12 12 12) 12]
Test Case: 129 | Input/Output: [(9 9 9 9) 9]
Test Case: 130 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 131 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 132 | Input/Output: [(96 96 96 96) 96]
Test Case: 133 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 134 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 135 | Input/Output: [(65 65 65 65) 65]
Test Case: 136 | Input/Output: [(5 5 5 5) 5]
Test Case: 137 | Input/Output: [(85 85 85 85) 85]
Test Case: 138 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 139 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 140 | Input/Output: [(22 22 22 22) 22]
Test Case: 141 | Input/Output: [(54 54 54 54) 54]
Test Case: 142 | Input/Output: [(63 63 63 63) 63]
Test Case: 143 | Input/Output: [(31 31 31 31) 31]
Test Case: 144 | Input/Output: [(39 39 39 39) 39]
Test Case: 145 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 146 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 147 | Input/Output: [(27 27 27 27) 27]
Test Case: 148 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 149 | Input/Output: [(58 58 58 58) 58]
Test Case: 150 | Input/Output: [(20 20 20 20) 20]
Test Case: 151 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 152 | Input/Output: [(100 100 100 100) 100]
Test Case: 153 | Input/Output: [(34 34 34 34) 34]
Test Case: 154 | Input/Output: [(25 25 25 25) 25]
Test Case: 155 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 156 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 157 | Input/Output: [(58 58 58 58) 58]
Test Case: 158 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 159 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 160 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 161 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 162 | Input/Output: [(19 19 19 19) 19]
Test Case: 163 | Input/Output: [(97 97 97 97) 97]
Test Case: 164 | Input/Output: [(25 25 25 25) 25]
Test Case: 165 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 166 | Input/Output: [(42 42 42 42) 42]
Test Case: 167 | Input/Output: [(98 98 98 98) 98]
Test Case: 168 | Input/Output: [(32 32 32 32) 32]
Test Case: 169 | Input/Output: [(67 67 67 67) 67]
Test Case: 170 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 171 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 172 | Input/Output: [(54 54 54 54) 54]
Test Case: 173 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 174 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 175 | Input/Output: [(25 25 25 25) 25]
Test Case: 176 | Input/Output: [(33 33 33 33) 33]
Test Case: 177 | Input/Output: [(37 37 37 37) 37]
Test Case: 178 | Input/Output: [(89 89 89 89) 89]
Test Case: 179 | Input/Output: [(45 45 45 45) 45]
Test Case: 180 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 181 | Input/Output: [(48 48 48 48) 48]
Test Case: 182 | Input/Output: [(36 36 36 36) 36]
Test Case: 183 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 184 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 185 | Input/Output: [(5 5 5 5) 5]
Test Case: 186 | Input/Output: [(19 19 19 19) 19]
Test Case: 187 | Input/Output: [(62 62 62 62) 62]
Test Case: 188 | Input/Output: [(71 71 71 71) 71]
Test Case: 189 | Input/Output: [(75 75 75 75) 75]
Test Case: 190 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 191 | Input/Output: [(27 27 27 27) 27]
Test Case: 192 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 193 | Input/Output: [(86 86 86 86) 86]
Test Case: 194 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 195 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 196 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 197 | Input/Output: [(78 78 78 78) 78]
Test Case: 198 | Input/Output: [(19 19 19 19) 19]
Test Case: 199 | Input/Output: [(60 60 60 60) 60]
Test Case: 200 | Input/Output: [(16 94 93 34) 16]
Test Case: 201 | Input/Output: [(57 20 16 25) 16]
Test Case: 202 | Input/Output: [(72 0 57 99) 0]
Test Case: 203 | Input/Output: [(83 71 10 93) 10]
Test Case: 204 | Input/Output: [(42 86 12 48) 12]
Test Case: 205 | Input/Output: [(48 83 96 87) 48]
Test Case: 206 | Input/Output: [(84 19 60 85) 19]
Test Case: 207 | Input/Output: [(19 49 17 49) 17]
Test Case: 208 | Input/Output: [(7 25 43 76) 7]
Test Case: 209 | Input/Output: [(65 73 72 25) 25]
Test Case: 210 | Input/Output: [(8 26 85 20) 8]
Test Case: 211 | Input/Output: [(41 85 24 31) 24]
Test Case: 212 | Input/Output: [(70 14 51 0) 0]
Test Case: 213 | Input/Output: [(17 48 42 33) 17]
Test Case: 214 | Input/Output: [(12 43 92 21) 12]
Test Case: 215 | Input/Output: [(25 18 76 19) 18]
Test Case: 216 | Input/Output: [(46 16 25 16) 16]
Test Case: 217 | Input/Output: [(90 12 16 38) 12]
Test Case: 218 | Input/Output: [(49 86 88 51) 49]
Test Case: 219 | Input/Output: [(15 48 73 56) 15]
Test Case: 220 | Input/Output: [(20 0 0 37) 0]
Test Case: 221 | Input/Output: [(38 55 36 0) 0]
Test Case: 222 | Input/Output: [(36 75 53 75) 36]
Test Case: 223 | Input/Output: [(44 62 61 94) 44]
Test Case: 224 | Input/Output: [(65 16 38 20) 16]
Test Case: 225 | Input/Output: [(76 100 81 87) 76]
Test Case: 226 | Input/Output: [(97 73 8 55) 8]
Test Case: 227 | Input/Output: [(41 72 60 13) 13]
Test Case: 228 | Input/Output: [(72 15 51 75) 15]
Test Case: 229 | Input/Output: [(10 59 76 12) 10]
Test Case: 230 | Input/Output: [(45 83 44 45) 44]
Test Case: 231 | Input/Output: [(89 64 55 85) 55]
Test Case: 232 | Input/Output: [(9 86 65 88) 9]
Test Case: 233 | Input/Output: [(83 20 85 25) 20]
Test Case: 234 | Input/Output: [(2 31 100 100) 2]
Test Case: 235 | Input/Output: [(85 15 37 31) 15]
Test Case: 236 | Input/Output: [(5 46 16 11) 5]
Test Case: 237 | Input/Output: [(30 70 73 75) 30]
Test Case: 238 | Input/Output: [(57 51 42 85) 42]
Test Case: 239 | Input/Output: [(47 16 92 36) 16]
Test Case: 240 | Input/Output: [(21 48 82 39) 21]
Test Case: 241 | Input/Output: [(67 70 65 24) 24]
Test Case: 242 | Input/Output: [(4 54 88 11) 4]
Test Case: 243 | Input/Output: [(35 99 62 29) 29]
Test Case: 244 | Input/Output: [(67 25 68 81) 25]
Test Case: 245 | Input/Output: [(20 37 2 81) 2]
Test Case: 246 | Input/Output: [(24 3 29 88) 3]
Test Case: 247 | Input/Output: [(30 91 51 89) 30]
Test Case: 248 | Input/Output: [(33 76 32 30) 30]
Test Case: 249 | Input/Output: [(17 88 63 17) 17]
Test Case: 250 | Input/Output: [(1 56 39 91) 1]
Test Case: 251 | Input/Output: [(33 4 74 88) 4]
Test Case: 252 | Input/Output: [(10 12 99 48) 10]
Test Case: 253 | Input/Output: [(58 51 5 45) 5]
Test Case: 254 | Input/Output: [(68 73 70 78) 68]
Test Case: 255 | Input/Output: [(99 47 0 25) 0]
Test Case: 256 | Input/Output: [(4 90 83 7) 4]
Test Case: 257 | Input/Output: [(92 54 18 29) 18]
Test Case: 258 | Input/Output: [(28 48 81 42) 28]
Test Case: 259 | Input/Output: [(36 24 64 10) 10]
Test Case: 260 | Input/Output: [(88 47 72 3) 3]
Test Case: 261 | Input/Output: [(51 9 30 63) 9]
Test Case: 262 | Input/Output: [(1 65 59 72) 1]
Test Case: 263 | Input/Output: [(86 99 16 9) 9]
Test Case: 264 | Input/Output: [(78 11 47 58) 11]
Test Case: 265 | Input/Output: [(26 79 7 14) 7]
Test Case: 266 | Input/Output: [(24 46 41 61) 24]
Test Case: 267 | Input/Output: [(97 61 49 58) 49]
Test Case: 268 | Input/Output: [(35 37 51 76) 35]
Test Case: 269 | Input/Output: [(100 83 57 10) 10]
Test Case: 270 | Input/Output: [(3 10 14 48) 3]
Test Case: 271 | Input/Output: [(79 15 15 39) 15]
Test Case: 272 | Input/Output: [(55 14 69 38) 14]
Test Case: 273 | Input/Output: [(59 8 64 90) 8]
Test Case: 274 | Input/Output: [(71 58 10 40) 10]
Test Case: 275 | Input/Output: [(12 11 95 29) 11]
Test Case: 276 | Input/Output: [(19 37 67 50) 19]
Test Case: 277 | Input/Output: [(69 47 34 86) 34]
Test Case: 278 | Input/Output: [(81 55 6 64) 6]
Test Case: 279 | Input/Output: [(91 6 60 26) 6]
Test Case: 280 | Input/Output: [(100 59 89 96) 59]
Test Case: 281 | Input/Output: [(97 93 88 17) 17]
Test Case: 282 | Input/Output: [(75 15 45 8) 8]
Test Case: 283 | Input/Output: [(11 68 100 94) 11]
Test Case: 284 | Input/Output: [(7 19 92 53) 7]
Test Case: 285 | Input/Output: [(46 4 26 31) 4]
Test Case: 286 | Input/Output: [(100 94 43 76) 43]
Test Case: 287 | Input/Output: [(33 49 34 47) 33]
Test Case: 288 | Input/Output: [(88 24 83 24) 24]
Test Case: 289 | Input/Output: [(20 80 58 25) 20]
Test Case: 290 | Input/Output: [(11 35 3 12) 3]
Test Case: 291 | Input/Output: [(46 19 12 0) 0]
Test Case: 292 | Input/Output: [(13 67 15 95) 13]
Test Case: 293 | Input/Output: [(66 24 75 31) 24]
Test Case: 294 | Input/Output: [(8 69 23 97) 8]
Test Case: 295 | Input/Output: [(13 83 88 37) 13]
Test Case: 296 | Input/Output: [(72 74 95 16) 16]
Test Case: 297 | Input/Output: [(16 42 56 21) 16]
Test Case: 298 | Input/Output: [(33 79 53 78) 33]
Test Case: 299 | Input/Output: [(57 5 82 36) 5]
Test Case: 300 | Input/Output: [(46 56 14 23) 14]
Test Case: 301 | Input/Output: [(10 72 26 41) 10]
Test Case: 302 | Input/Output: [(27 34 47 6) 6]
Test Case: 303 | Input/Output: [(42 35 30 4) 4]
Test Case: 304 | Input/Output: [(12 9 97 59) 9]
Test Case: 305 | Input/Output: [(75 63 70 56) 56]
Test Case: 306 | Input/Output: [(63 3 48 71) 3]
Test Case: 307 | Input/Output: [(51 85 10 80) 10]
Test Case: 308 | Input/Output: [(52 74 55 38) 38]
Test Case: 309 | Input/Output: [(56 99 39 17) 17]
Test Case: 310 | Input/Output: [(86 10 3 18) 3]
Test Case: 311 | Input/Output: [(49 95 47 71) 47]
Test Case: 312 | Input/Output: [(29 30 76 69) 29]
Test Case: 313 | Input/Output: [(37 76 11 23) 11]
Test Case: 314 | Input/Output: [(99 13 21 71) 13]
Test Case: 315 | Input/Output: [(22 23 78 53) 22]
Test Case: 316 | Input/Output: [(82 29 10 61) 10]
Test Case: 317 | Input/Output: [(68 96 43 27) 27]
Test Case: 318 | Input/Output: [(35 55 69 39) 35]
Test Case: 319 | Input/Output: [(49 80 91 2) 2]
Test Case: 320 | Input/Output: [(19 0 52 36) 0]
Test Case: 321 | Input/Output: [(14 37 39 88) 14]
Test Case: 322 | Input/Output: [(65 98 25 95) 25]
Test Case: 323 | Input/Output: [(3 63 10 23) 3]
Test Case: 324 | Input/Output: [(53 93 25 92) 25]
Test Case: 325 | Input/Output: [(81 15 83 23) 15]
Test Case: 326 | Input/Output: [(26 22 22 49) 22]
Test Case: 327 | Input/Output: [(19 85 62 95) 19]
Test Case: 328 | Input/Output: [(45 25 85 76) 25]
Test Case: 329 | Input/Output: [(99 43 36 54) 36]
Test Case: 330 | Input/Output: [(79 99 38 51) 38]
Test Case: 331 | Input/Output: [(4 20 93 29) 4]
Test Case: 332 | Input/Output: [(41 36 12 24) 12]
Test Case: 333 | Input/Output: [(80 25 97 71) 25]
Test Case: 334 | Input/Output: [(43 98 84 80) 43]
Test Case: 335 | Input/Output: [(58 32 4 56) 4]
Test Case: 336 | Input/Output: [(45 74 97 88) 45]
Test Case: 337 | Input/Output: [(35 29 84 80) 29]
Test Case: 338 | Input/Output: [(53 87 59 6) 6]
Test Case: 339 | Input/Output: [(8 83 48 64) 8]
Test Case: 340 | Input/Output: [(4 87 52 20) 4]
Test Case: 341 | Input/Output: [(70 22 17 88) 17]
Test Case: 342 | Input/Output: [(68 83 49 94) 49]
Test Case: 343 | Input/Output: [(49 76 51 69) 49]
Test Case: 344 | Input/Output: [(68 24 8 13) 8]
Test Case: 345 | Input/Output: [(26 5 42 8) 5]
Test Case: 346 | Input/Output: [(79 54 35 7) 7]
Test Case: 347 | Input/Output: [(3 39 90 63) 3]
Test Case: 348 | Input/Output: [(91 45 55 44) 44]
Test Case: 349 | Input/Output: [(34 41 71 80) 34]
Test Case: 350 | Input/Output: [(9 2 16 46) 2]
Test Case: 351 | Input/Output: [(29 6 90 89) 6]
Test Case: 352 | Input/Output: [(32 92 76 88) 32]
Test Case: 353 | Input/Output: [(17 85 18 24) 17]
Test Case: 354 | Input/Output: [(45 2 51 38) 2]
Test Case: 355 | Input/Output: [(53 65 21 24) 21]
Test Case: 356 | Input/Output: [(29 76 85 2) 2]
Test Case: 357 | Input/Output: [(31 72 96 76) 31]
Test Case: 358 | Input/Output: [(90 23 35 35) 23]
Test Case: 359 | Input/Output: [(70 77 59 96) 59]
Test Case: 360 | Input/Output: [(30 57 89 7) 7]
Test Case: 361 | Input/Output: [(22 86 84 11) 11]
Test Case: 362 | Input/Output: [(26 64 48 22) 22]
Test Case: 363 | Input/Output: [(27 21 85 50) 21]
Test Case: 364 | Input/Output: [(31 27 1 25) 1]
Test Case: 365 | Input/Output: [(0 66 0 62) 0]
Test Case: 366 | Input/Output: [(90 58 60 65) 58]
Test Case: 367 | Input/Output: [(87 66 82 98) 66]
Test Case: 368 | Input/Output: [(65 4 63 59) 4]
Test Case: 369 | Input/Output: [(77 22 7 80) 7]
Test Case: 370 | Input/Output: [(2 20 20 73) 2]
Test Case: 371 | Input/Output: [(26 15 56 27) 15]
Test Case: 372 | Input/Output: [(12 24 72 33) 12]
Test Case: 373 | Input/Output: [(8 76 8 14) 8]
Test Case: 374 | Input/Output: [(81 47 100 11) 11]
Test Case: 375 | Input/Output: [(72 85 82 46) 46]
Test Case: 376 | Input/Output: [(40 52 31 51) 31]
Test Case: 377 | Input/Output: [(71 34 75 87) 34]
Test Case: 378 | Input/Output: [(64 11 62 5) 5]
Test Case: 379 | Input/Output: [(78 36 33 48) 33]
Test Case: 380 | Input/Output: [(20 58 27 16) 16]
Test Case: 381 | Input/Output: [(60 69 16 12) 12]
Test Case: 382 | Input/Output: [(67 1 95 35) 1]
Test Case: 383 | Input/Output: [(56 53 57 4) 4]
Test Case: 384 | Input/Output: [(99 5 0 65) 0]
Test Case: 385 | Input/Output: [(2 64 90 15) 2]
Test Case: 386 | Input/Output: [(11 62 28 78) 11]
Test Case: 387 | Input/Output: [(98 87 98 61) 61]
Test Case: 388 | Input/Output: [(90 80 48 68) 48]
Test Case: 389 | Input/Output: [(80 23 100 15) 15]
Test Case: 390 | Input/Output: [(76 71 49 84) 49]
Test Case: 391 | Input/Output: [(14 18 42 98) 14]
Test Case: 392 | Input/Output: [(7 28 13 61) 7]
Test Case: 393 | Input/Output: [(39 76 7 84) 7]
Test Case: 394 | Input/Output: [(60 21 24 14) 14]
Test Case: 395 | Input/Output: [(8 46 59 54) 8]
Test Case: 396 | Input/Output: [(21 52 94 52) 21]
Test Case: 397 | Input/Output: [(69 31 98 90) 31]
Test Case: 398 | Input/Output: [(35 30 66 94) 30]
Test Case: 399 | Input/Output: [(96 86 3 50) 3]
Test Case: 400 | Input/Output: [(29 99 -81 54) -81]
Test Case: 401 | Input/Output: [(-96 -79 72 43) -96]
Test Case: 402 | Input/Output: [(-26 94 -91 -69) -91]
Test Case: 403 | Input/Output: [(56 8 -72 -15) -72]
Test Case: 404 | Input/Output: [(67 34 31 -58) -58]
Test Case: 405 | Input/Output: [(69 84 -95 29) -95]
Test Case: 406 | Input/Output: [(8 36 60 -99) -99]
Test Case: 407 | Input/Output: [(69 -18 0 -92) -92]
Test Case: 408 | Input/Output: [(-59 -52 -20 98) -59]
Test Case: 409 | Input/Output: [(10 60 81 -63) -63]
Test Case: 410 | Input/Output: [(78 -37 63 50) -37]
Test Case: 411 | Input/Output: [(35 -23 -80 91) -80]
Test Case: 412 | Input/Output: [(-54 70 48 63) -54]
Test Case: 413 | Input/Output: [(6 -54 -72 55) -72]
Test Case: 414 | Input/Output: [(27 -60 15 10) -60]
Test Case: 415 | Input/Output: [(94 -49 -59 44) -59]
Test Case: 416 | Input/Output: [(88 28 35 -69) -69]
Test Case: 417 | Input/Output: [(38 -2 -83 -33) -83]
Test Case: 418 | Input/Output: [(23 48 81 98) 23]
Test Case: 419 | Input/Output: [(-48 24 -23 -74) -74]
Test Case: 420 | Input/Output: [(-12 -58 0 36) -58]
Test Case: 421 | Input/Output: [(-73 -66 41 -55) -73]
Test Case: 422 | Input/Output: [(15 7 -59 67) -59]
Test Case: 423 | Input/Output: [(52 -52 -89 -57) -89]
Test Case: 424 | Input/Output: [(-88 -25 -71 65) -88]
Test Case: 425 | Input/Output: [(-2 47 -78 -81) -81]
Test Case: 426 | Input/Output: [(-4 -1 -75 22) -75]
Test Case: 427 | Input/Output: [(-43 -73 -63 74) -73]
Test Case: 428 | Input/Output: [(18 -96 -80 -64) -96]
Test Case: 429 | Input/Output: [(35 -36 -29 -88) -88]
Test Case: 430 | Input/Output: [(-28 -56 -15 27) -56]
Test Case: 431 | Input/Output: [(-16 95 96 17) -16]
Test Case: 432 | Input/Output: [(13 34 21 -86) -86]
Test Case: 433 | Input/Output: [(9 40 -98 -15) -98]
Test Case: 434 | Input/Output: [(-43 -71 -89 -60) -89]
Test Case: 435 | Input/Output: [(30 -29 -74 73) -74]
Test Case: 436 | Input/Output: [(4 -89 51 -56) -89]
Test Case: 437 | Input/Output: [(-45 0 -96 80) -96]
Test Case: 438 | Input/Output: [(81 -76 -18 61) -76]
Test Case: 439 | Input/Output: [(-40 80 -38 34) -40]
Test Case: 440 | Input/Output: [(92 44 96 3) 3]
Test Case: 441 | Input/Output: [(45 -2 0 87) -2]
Test Case: 442 | Input/Output: [(-47 5 81 -49) -49]
Test Case: 443 | Input/Output: [(28 100 -22 -22) -22]
Test Case: 444 | Input/Output: [(-44 -77 60 -87) -87]
Test Case: 445 | Input/Output: [(-20 75 -7 61) -20]
Test Case: 446 | Input/Output: [(79 -31 60 52) -31]
Test Case: 447 | Input/Output: [(76 -44 85 -51) -51]
Test Case: 448 | Input/Output: [(-26 12 -45 -54) -54]
Test Case: 449 | Input/Output: [(30 -85 -67 30) -85]
Test Case: 450 | Input/Output: [(83 -9 -34 75) -34]
Test Case: 451 | Input/Output: [(-24 61 91 29) -24]
Test Case: 452 | Input/Output: [(13 -71 30 34) -71]
Test Case: 453 | Input/Output: [(63 69 -33 -5) -33]
Test Case: 454 | Input/Output: [(-83 -11 -13 32) -83]
Test Case: 455 | Input/Output: [(51 34 -15 66) -15]
Test Case: 456 | Input/Output: [(78 67 -57 76) -57]
Test Case: 457 | Input/Output: [(-98 2 19 -36) -98]
Test Case: 458 | Input/Output: [(56 -51 76 90) -51]
Test Case: 459 | Input/Output: [(-82 20 -1 65) -82]
Test Case: 460 | Input/Output: [(-30 52 0 -21) -30]
Test Case: 461 | Input/Output: [(-31 90 -86 -15) -86]
Test Case: 462 | Input/Output: [(-62 -9 -92 26) -92]
Test Case: 463 | Input/Output: [(89 -68 97 -77) -77]
Test Case: 464 | Input/Output: [(34 -35 74 82) -35]
Test Case: 465 | Input/Output: [(82 81 66 29) 29]
Test Case: 466 | Input/Output: [(-31 49 -6 32) -31]
Test Case: 467 | Input/Output: [(63 19 -12 42) -12]
Test Case: 468 | Input/Output: [(-42 -16 -49 3) -49]
Test Case: 469 | Input/Output: [(95 8 40 -12) -12]
Test Case: 470 | Input/Output: [(-26 -45 93 -2) -45]
Test Case: 471 | Input/Output: [(-5 48 -75 -16) -75]
Test Case: 472 | Input/Output: [(89 -63 -51 -73) -73]
Test Case: 473 | Input/Output: [(-11 18 7 -84) -84]
Test Case: 474 | Input/Output: [(11 14 47 -68) -68]
Test Case: 475 | Input/Output: [(16 -42 -5 -5) -42]
Test Case: 476 | Input/Output: [(67 -72 34 -92) -92]
Test Case: 477 | Input/Output: [(74 90 8 17) 8]
Test Case: 478 | Input/Output: [(17 6 25 100) 6]
Test Case: 479 | Input/Output: [(11 -64 -64 54) -64]
Test Case: 480 | Input/Output: [(22 54 -59 53) -59]
Test Case: 481 | Input/Output: [(-19 -75 -86 -26) -86]
Test Case: 482 | Input/Output: [(-62 28 74 -24) -62]
Test Case: 483 | Input/Output: [(94 28 -62 70) -62]
Test Case: 484 | Input/Output: [(-76 -50 -61 60) -76]
Test Case: 485 | Input/Output: [(29 -13 -80 -82) -82]
Test Case: 486 | Input/Output: [(86 -88 62 -28) -88]
Test Case: 487 | Input/Output: [(-68 58 98 -70) -70]
Test Case: 488 | Input/Output: [(0 35 52 -82) -82]
Test Case: 489 | Input/Output: [(-64 84 52 79) -64]
Test Case: 490 | Input/Output: [(-42 -19 -89 -80) -89]
Test Case: 491 | Input/Output: [(-70 -100 20 -73) -100]
Test Case: 492 | Input/Output: [(84 -27 7 -59) -59]
Test Case: 493 | Input/Output: [(-28 79 11 44) -28]
Test Case: 494 | Input/Output: [(-94 82 0 21) -94]
Test Case: 495 | Input/Output: [(11 18 89 -86) -86]
Test Case: 496 | Input/Output: [(91 -49 -50 85) -50]
Test Case: 497 | Input/Output: [(96 60 -92 -94) -94]
Test Case: 498 | Input/Output: [(87 -49 97 -7) -49]
Test Case: 499 | Input/Output: [(-92 -47 0 -5) -92]
Test Case: 500 | Input/Output: [(14 16 -80 -18) -80]
Test Case: 501 | Input/Output: [(67 -69 86 -4) -69]
Test Case: 502 | Input/Output: [(-7 35 -14 -12) -14]
Test Case: 503 | Input/Output: [(-76 -8 -38 -30) -76]
Test Case: 504 | Input/Output: [(-8 -46 0 24) -46]
Test Case: 505 | Input/Output: [(-87 -79 59 11) -87]
Test Case: 506 | Input/Output: [(10 41 -80 35) -80]
Test Case: 507 | Input/Output: [(-60 96 -82 -16) -82]
Test Case: 508 | Input/Output: [(59 -89 -1 -4) -89]
Test Case: 509 | Input/Output: [(-98 40 -25 82) -98]
Test Case: 510 | Input/Output: [(3 -66 41 50) -66]
Test Case: 511 | Input/Output: [(-59 -79 -20 -76) -79]
Test Case: 512 | Input/Output: [(-49 30 3 9) -49]
Test Case: 513 | Input/Output: [(-83 8 60 85) -83]
Test Case: 514 | Input/Output: [(71 42 -84 -50) -84]
Test Case: 515 | Input/Output: [(87 -11 -13 48) -13]
Test Case: 516 | Input/Output: [(47 73 31 70) 31]
Test Case: 517 | Input/Output: [(-4 1 -29 3) -29]
Test Case: 518 | Input/Output: [(-29 -47 -18 -5) -47]
Test Case: 519 | Input/Output: [(-15 16 55 13) -15]
Test Case: 520 | Input/Output: [(19 -74 22 58) -74]
Test Case: 521 | Input/Output: [(-81 -67 87 37) -81]
Test Case: 522 | Input/Output: [(-76 -29 31 95) -76]
Test Case: 523 | Input/Output: [(68 66 -93 -20) -93]
Test Case: 524 | Input/Output: [(-15 34 96 -27) -27]
Test Case: 525 | Input/Output: [(-64 41 -38 66) -64]
Test Case: 526 | Input/Output: [(76 -21 -14 -25) -25]
Test Case: 527 | Input/Output: [(-6 -42 3 48) -42]
Test Case: 528 | Input/Output: [(-92 -39 -4 74) -92]
Test Case: 529 | Input/Output: [(90 -1 98 -56) -56]
Test Case: 530 | Input/Output: [(-66 99 28 -39) -66]
Test Case: 531 | Input/Output: [(-65 -86 -94 -28) -94]
Test Case: 532 | Input/Output: [(-15 92 -2 -68) -68]
Test Case: 533 | Input/Output: [(-24 -97 87 33) -97]
Test Case: 534 | Input/Output: [(-38 -81 83 -28) -81]
Test Case: 535 | Input/Output: [(100 -17 75 -44) -44]
Test Case: 536 | Input/Output: [(-84 -18 11 12) -84]
Test Case: 537 | Input/Output: [(-67 -21 46 -81) -81]
Test Case: 538 | Input/Output: [(-31 -93 86 -87) -93]
Test Case: 539 | Input/Output: [(77 -66 -86 -45) -86]
Test Case: 540 | Input/Output: [(-36 17 96 -23) -36]
Test Case: 541 | Input/Output: [(-16 22 63 -84) -84]
Test Case: 542 | Input/Output: [(14 21 -23 -95) -95]
Test Case: 543 | Input/Output: [(-97 -49 -80 -51) -97]
Test Case: 544 | Input/Output: [(78 -61 -22 -5) -61]
Test Case: 545 | Input/Output: [(-25 -57 -21 18) -57]
Test Case: 546 | Input/Output: [(28 74 -93 -34) -93]
Test Case: 547 | Input/Output: [(49 38 35 -67) -67]
Test Case: 548 | Input/Output: [(-81 -60 63 -89) -89]
Test Case: 549 | Input/Output: [(-49 -69 51 1) -69]
Test Case: 550 | Input/Output: [(-96 -65 -99 -22) -99]
Test Case: 551 | Input/Output: [(-51 -53 46 -5) -53]
Test Case: 552 | Input/Output: [(-67 41 -96 -49) -96]
Test Case: 553 | Input/Output: [(86 45 31 2) 2]
Test Case: 554 | Input/Output: [(-17 -13 -23 10) -23]
Test Case: 555 | Input/Output: [(-25 67 -82 -19) -82]
Test Case: 556 | Input/Output: [(10 52 -95 -36) -95]
Test Case: 557 | Input/Output: [(48 16 -71 22) -71]
Test Case: 558 | Input/Output: [(-19 22 19 -27) -27]
Test Case: 559 | Input/Output: [(66 11 -13 15) -13]
Test Case: 560 | Input/Output: [(-22 -60 -68 -64) -68]
Test Case: 561 | Input/Output: [(-15 -58 7 86) -58]
Test Case: 562 | Input/Output: [(86 80 -51 11) -51]
Test Case: 563 | Input/Output: [(-54 -89 34 42) -89]
Test Case: 564 | Input/Output: [(0 -92 -42 52) -92]
Test Case: 565 | Input/Output: [(-29 -69 82 96) -69]
Test Case: 566 | Input/Output: [(-22 35 72 29) -22]
Test Case: 567 | Input/Output: [(-57 -67 59 34) -67]
Test Case: 568 | Input/Output: [(-29 51 -70 -15) -70]
Test Case: 569 | Input/Output: [(37 85 90 -20) -20]
Test Case: 570 | Input/Output: [(63 -91 -99 85) -99]
Test Case: 571 | Input/Output: [(-59 17 34 -39) -59]
Test Case: 572 | Input/Output: [(83 65 67 50) 50]
Test Case: 573 | Input/Output: [(-36 16 -66 -4) -66]
Test Case: 574 | Input/Output: [(72 58 -30 39) -30]
Test Case: 575 | Input/Output: [(61 -17 -72 -5) -72]
Test Case: 576 | Input/Output: [(89 95 -89 -82) -89]
Test Case: 577 | Input/Output: [(36 -49 56 -69) -69]
Test Case: 578 | Input/Output: [(39 27 3 14) 3]
Test Case: 579 | Input/Output: [(9 70 -14 11) -14]
Test Case: 580 | Input/Output: [(-41 42 -63 5) -63]
Test Case: 581 | Input/Output: [(23 -59 32 -82) -82]
Test Case: 582 | Input/Output: [(-3 5 94 22) -3]
Test Case: 583 | Input/Output: [(-16 -71 -7 37) -71]
Test Case: 584 | Input/Output: [(9 -2 -20 -38) -38]
Test Case: 585 | Input/Output: [(97 -35 -48 -2) -48]
Test Case: 586 | Input/Output: [(0 58 -89 5) -89]
Test Case: 587 | Input/Output: [(86 -58 84 -17) -58]
Test Case: 588 | Input/Output: [(-70 -44 -59 40) -70]
Test Case: 589 | Input/Output: [(47 -25 -80 -96) -96]
Test Case: 590 | Input/Output: [(-20 -60 -75 31) -75]
Test Case: 591 | Input/Output: [(-30 -59 -89 -70) -89]
Test Case: 592 | Input/Output: [(27 -36 -23 32) -36]
Test Case: 593 | Input/Output: [(3 -47 -7 55) -47]
Test Case: 594 | Input/Output: [(-66 78 24 93) -66]
Test Case: 595 | Input/Output: [(-17 98 27 -36) -36]
Test Case: 596 | Input/Output: [(72 78 -57 -23) -57]
Test Case: 597 | Input/Output: [(-55 64 96 -30) -55]
Test Case: 598 | Input/Output: [(27 -59 -35 87) -59]
Test Case: 599 | Input/Output: [(28 2 -23 -61) -61]
Test Case: 600 | Input/Output: [(74 -85 -39 -92) -92]
Test Case: 601 | Input/Output: [(-26 76 -97 -27) -97]
Test Case: 602 | Input/Output: [(-7 95 35 46) -7]
Test Case: 603 | Input/Output: [(15 -83 -82 -14) -83]
Test Case: 604 | Input/Output: [(82 -47 46 83) -47]
Test Case: 605 | Input/Output: [(-47 -43 -46 -82) -82]
Test Case: 606 | Input/Output: [(-67 54 -22 -55) -67]
Test Case: 607 | Input/Output: [(-44 -73 56 15) -73]
Test Case: 608 | Input/Output: [(75 81 81 28) 28]
Test Case: 609 | Input/Output: [(17 58 77 -100) -100]
Test Case: 610 | Input/Output: [(-31 -2 -38 13) -38]
Test Case: 611 | Input/Output: [(-40 90 -15 -99) -99]
Test Case: 612 | Input/Output: [(92 -54 0 -30) -54]
Test Case: 613 | Input/Output: [(-59 -26 -92 77) -92]
Test Case: 614 | Input/Output: [(49 91 97 -11) -11]
Test Case: 615 | Input/Output: [(-5 -100 -83 56) -100]
Test Case: 616 | Input/Output: [(-62 37 39 -97) -97]
Test Case: 617 | Input/Output: [(-14 18 -1 68) -14]
Test Case: 618 | Input/Output: [(-5 32 32 -18) -18]
Test Case: 619 | Input/Output: [(-69 -25 -57 74) -69]
Test Case: 620 | Input/Output: [(31 -66 51 78) -66]
Test Case: 621 | Input/Output: [(-88 57 -52 -32) -88]
Test Case: 622 | Input/Output: [(94 38 47 17) 17]
Test Case: 623 | Input/Output: [(-71 40 70 82) -71]
Test Case: 624 | Input/Output: [(-84 -1 -27 19) -84]
Test Case: 625 | Input/Output: [(-12 84 91 -29) -29]
Test Case: 626 | Input/Output: [(83 -48 65 4) -48]
Test Case: 627 | Input/Output: [(67 -94 70 -5) -94]
Test Case: 628 | Input/Output: [(17 64 -69 -10) -69]
Test Case: 629 | Input/Output: [(93 -73 8 -37) -73]
Test Case: 630 | Input/Output: [(-48 78 -13 -8) -48]
Test Case: 631 | Input/Output: [(-2 -59 61 1) -59]
Test Case: 632 | Input/Output: [(46 76 -1 -46) -46]
Test Case: 633 | Input/Output: [(-80 83 92 65) -80]
Test Case: 634 | Input/Output: [(-57 -24 63 66) -57]
Test Case: 635 | Input/Output: [(-68 -84 33 92) -84]
Test Case: 636 | Input/Output: [(-40 2 35 -76) -76]
Test Case: 637 | Input/Output: [(78 96 67 55) 55]
Test Case: 638 | Input/Output: [(40 73 -22 45) -22]
Test Case: 639 | Input/Output: [(-28 68 7 87) -28]
Test Case: 640 | Input/Output: [(16 -74 66 -63) -74]
Test Case: 641 | Input/Output: [(96 -36 9 -65) -65]
Test Case: 642 | Input/Output: [(-6 -65 8 26) -65]
Test Case: 643 | Input/Output: [(18 31 -22 8) -22]
Test Case: 644 | Input/Output: [(-36 30 14 -32) -36]
Test Case: 645 | Input/Output: [(-70 -5 -64 -23) -70]
Test Case: 646 | Input/Output: [(79 9 78 -77) -77]
Test Case: 647 | Input/Output: [(1 -31 -27 -39) -39]
Test Case: 648 | Input/Output: [(44 -98 77 76) -98]
Test Case: 649 | Input/Output: [(-82 -32 -99 32) -99]
Test Case: 650 | Input/Output: [(2 -95 -75 -11) -95]
Test Case: 651 | Input/Output: [(-1 29 -27 5) -27]
Test Case: 652 | Input/Output: [(-40 -33 -10 93) -40]
Test Case: 653 | Input/Output: [(59 -89 -6 -11) -89]
Test Case: 654 | Input/Output: [(71 -38 19 35) -38]
Test Case: 655 | Input/Output: [(-19 35 10 35) -19]
Test Case: 656 | Input/Output: [(86 53 -1 74) -1]
Test Case: 657 | Input/Output: [(-12 -3 21 6) -12]
Test Case: 658 | Input/Output: [(73 -67 38 59) -67]
Test Case: 659 | Input/Output: [(83 8 40 100) 8]
Test Case: 660 | Input/Output: [(-33 -19 18 49) -33]
Test Case: 661 | Input/Output: [(-45 7 86 -56) -56]
Test Case: 662 | Input/Output: [(53 -22 49 80) -22]
Test Case: 663 | Input/Output: [(50 -93 61 -89) -93]
Test Case: 664 | Input/Output: [(2 -27 -77 44) -77]
Test Case: 665 | Input/Output: [(-51 12 -18 -44) -51]
Test Case: 666 | Input/Output: [(-2 -61 -63 -28) -63]
Test Case: 667 | Input/Output: [(-66 28 68 95) -66]
Test Case: 668 | Input/Output: [(55 -78 34 -2) -78]
Test Case: 669 | Input/Output: [(-7 -80 -11 -24) -80]
Test Case: 670 | Input/Output: [(-49 97 -51 -56) -56]
Test Case: 671 | Input/Output: [(51 88 90 -99) -99]
Test Case: 672 | Input/Output: [(-98 -22 80 67) -98]
Test Case: 673 | Input/Output: [(31 -99 -94 17) -99]
Test Case: 674 | Input/Output: [(-93 2 51 -70) -93]
Test Case: 675 | Input/Output: [(22 -69 -43 -14) -69]
Test Case: 676 | Input/Output: [(-56 93 -36 79) -56]
Test Case: 677 | Input/Output: [(-96 -19 -98 -11) -98]
Test Case: 678 | Input/Output: [(3 34 -93 31) -93]
Test Case: 679 | Input/Output: [(6 61 44 -90) -90]
Test Case: 680 | Input/Output: [(-1 -56 17 -42) -56]
Test Case: 681 | Input/Output: [(27 -52 34 1) -52]
Test Case: 682 | Input/Output: [(-65 -23 93 -82) -82]
Test Case: 683 | Input/Output: [(-31 -48 72 -10) -48]
Test Case: 684 | Input/Output: [(43 72 61 17) 17]
Test Case: 685 | Input/Output: [(86 91 -16 -55) -55]
Test Case: 686 | Input/Output: [(-79 3 54 22) -79]
Test Case: 687 | Input/Output: [(-2 -51 97 25) -51]
Test Case: 688 | Input/Output: [(2 -48 38 -78) -78]
Test Case: 689 | Input/Output: [(-75 -61 -92 -6) -92]
Test Case: 690 | Input/Output: [(97 0 79 -45) -45]
Test Case: 691 | Input/Output: [(62 72 -65 -55) -65]
Test Case: 692 | Input/Output: [(68 -79 -87 -16) -87]
Test Case: 693 | Input/Output: [(13 -77 -66 -64) -77]
Test Case: 694 | Input/Output: [(37 90 -69 -76) -76]
Test Case: 695 | Input/Output: [(98 61 1 66) 1]
Test Case: 696 | Input/Output: [(-96 -97 81 57) -97]
Test Case: 697 | Input/Output: [(18 -11 -64 -34) -64]
Test Case: 698 | Input/Output: [(-77 99 20 1) -77]
Test Case: 699 | Input/Output: [(-14 -68 62 -59) -68]
Test Case: 700 | Input/Output: [(35 10 84 -31) -31]
Test Case: 701 | Input/Output: [(84 19 58 14) 14]
Test Case: 702 | Input/Output: [(-83 61 -80 22) -83]
Test Case: 703 | Input/Output: [(7 -68 2 90) -68]
Test Case: 704 | Input/Output: [(-78 -54 65 -39) -78]
Test Case: 705 | Input/Output: [(83 -2 -2 42) -2]
Test Case: 706 | Input/Output: [(-40 30 43 -95) -95]
Test Case: 707 | Input/Output: [(7 14 2 83) 2]
Test Case: 708 | Input/Output: [(-28 37 90 -27) -28]
Test Case: 709 | Input/Output: [(-97 -52 -46 -94) -97]
Test Case: 710 | Input/Output: [(-73 83 -52 -95) -95]
Test Case: 711 | Input/Output: [(-48 -19 60 -25) -48]
Test Case: 712 | Input/Output: [(-31 -92 4 82) -92]
Test Case: 713 | Input/Output: [(88 25 44 -94) -94]
Test Case: 714 | Input/Output: [(-45 83 -95 -83) -95]
Test Case: 715 | Input/Output: [(-55 62 76 96) -55]
Test Case: 716 | Input/Output: [(28 72 72 50) 28]
Test Case: 717 | Input/Output: [(-53 -18 -15 39) -53]
Test Case: 718 | Input/Output: [(52 -14 -94 -32) -94]
Test Case: 719 | Input/Output: [(94 74 -88 -41) -88]
Test Case: 720 | Input/Output: [(40 -97 80 -87) -97]
Test Case: 721 | Input/Output: [(-43 74 6 -20) -43]
Test Case: 722 | Input/Output: [(19 64 -56 18) -56]
Test Case: 723 | Input/Output: [(12 42 7 -48) -48]
Test Case: 724 | Input/Output: [(-91 -16 15 -21) -91]
Test Case: 725 | Input/Output: [(80 29 -38 -7) -38]
Test Case: 726 | Input/Output: [(-66 -74 -91 -8) -91]
Test Case: 727 | Input/Output: [(48 -71 75 -61) -71]
Test Case: 728 | Input/Output: [(-88 93 52 79) -88]
Test Case: 729 | Input/Output: [(31 58 37 41) 31]
Test Case: 730 | Input/Output: [(-40 1 -32 88) -40]
Test Case: 731 | Input/Output: [(3 96 -79 -49) -79]
Test Case: 732 | Input/Output: [(-93 -38 88 70) -93]
Test Case: 733 | Input/Output: [(-51 -6 -57 -95) -95]
Test Case: 734 | Input/Output: [(-50 -7 98 36) -50]
Test Case: 735 | Input/Output: [(70 62 -87 -60) -87]
Test Case: 736 | Input/Output: [(-91 98 -30 -96) -96]
Test Case: 737 | Input/Output: [(-60 57 -75 -76) -76]
Test Case: 738 | Input/Output: [(-13 -28 67 85) -28]
Test Case: 739 | Input/Output: [(-28 -74 13 -17) -74]
Test Case: 740 | Input/Output: [(64 -19 45 -66) -66]
Test Case: 741 | Input/Output: [(40 20 -54 15) -54]
Test Case: 742 | Input/Output: [(79 69 49 82) 49]
Test Case: 743 | Input/Output: [(37 -61 49 46) -61]
Test Case: 744 | Input/Output: [(61 66 -6 -65) -65]
Test Case: 745 | Input/Output: [(7 -45 22 -11) -45]
Test Case: 746 | Input/Output: [(82 -7 60 12) -7]
Test Case: 747 | Input/Output: [(-20 92 -33 -50) -50]
Test Case: 748 | Input/Output: [(91 -45 99 97) -45]
Test Case: 749 | Input/Output: [(-13 -88 57 -66) -88]
Test Case: 750 | Input/Output: [(86 32 23 -73) -73]
Test Case: 751 | Input/Output: [(-19 -55 91 -88) -88]
Test Case: 752 | Input/Output: [(-93 -8 -55 -62) -93]
Test Case: 753 | Input/Output: [(7 98 -97 11) -97]
Test Case: 754 | Input/Output: [(98 -41 -29 44) -41]
Test Case: 755 | Input/Output: [(34 -87 -95 -67) -95]
Test Case: 756 | Input/Output: [(-58 -48 32 -69) -69]
Test Case: 757 | Input/Output: [(19 94 -87 -80) -87]
Test Case: 758 | Input/Output: [(33 94 91 94) 33]
Test Case: 759 | Input/Output: [(-60 -46 -35 -27) -60]
Test Case: 760 | Input/Output: [(-100 -4 -49 45) -100]
Test Case: 761 | Input/Output: [(71 66 24 87) 24]
Test Case: 762 | Input/Output: [(57 72 31 -99) -99]
Test Case: 763 | Input/Output: [(-4 19 55 53) -4]
Test Case: 764 | Input/Output: [(-36 18 74 24) -36]
Test Case: 765 | Input/Output: [(-31 -58 -61 -65) -65]
Test Case: 766 | Input/Output: [(-32 65 6 41) -32]
Test Case: 767 | Input/Output: [(91 -80 -5 33) -80]
Test Case: 768 | Input/Output: [(-83 -63 28 -89) -89]
Test Case: 769 | Input/Output: [(-89 -63 -88 24) -89]
Test Case: 770 | Input/Output: [(21 8 13 -81) -81]
Test Case: 771 | Input/Output: [(-6 -28 55 -47) -47]
Test Case: 772 | Input/Output: [(-80 -40 -12 -10) -80]
Test Case: 773 | Input/Output: [(1 38 73 -63) -63]
Test Case: 774 | Input/Output: [(-54 -88 95 49) -88]
Test Case: 775 | Input/Output: [(62 96 3 -66) -66]
Test Case: 776 | Input/Output: [(-2 72 -41 34) -41]
Test Case: 777 | Input/Output: [(-59 -2 -35 77) -59]
Test Case: 778 | Input/Output: [(-5 -19 -73 59) -73]
Test Case: 779 | Input/Output: [(85 16 27 -79) -79]
Test Case: 780 | Input/Output: [(-54 80 23 24) -54]
Test Case: 781 | Input/Output: [(-14 -61 31 23) -61]
Test Case: 782 | Input/Output: [(61 51 40 -33) -33]
Test Case: 783 | Input/Output: [(-74 12 80 -9) -74]
Test Case: 784 | Input/Output: [(52 -38 80 11) -38]
Test Case: 785 | Input/Output: [(72 -60 91 -4) -60]
Test Case: 786 | Input/Output: [(70 64 41 74) 41]
Test Case: 787 | Input/Output: [(-57 -82 -97 78) -97]
Test Case: 788 | Input/Output: [(-19 33 38 91) -19]
Test Case: 789 | Input/Output: [(-93 -4 43 39) -93]
Test Case: 790 | Input/Output: [(2 -59 -86 62) -86]
Test Case: 791 | Input/Output: [(15 -28 -5 2) -28]
Test Case: 792 | Input/Output: [(-22 58 -79 -93) -93]
Test Case: 793 | Input/Output: [(70 78 -66 -9) -66]
Test Case: 794 | Input/Output: [(-67 74 63 -76) -76]
Test Case: 795 | Input/Output: [(58 82 -21 -17) -21]
Test Case: 796 | Input/Output: [(78 23 42 92) 23]
Test Case: 797 | Input/Output: [(21 86 82 27) 21]
Test Case: 798 | Input/Output: [(-22 2 -36 67) -36]
Test Case: 799 | Input/Output: [(-75 95 -33 53) -75]
Test Case: 800 | Input/Output: [(29 -68 -11 -16) -68]
Test Case: 801 | Input/Output: [(-36 80 100 -11) -36]
Test Case: 802 | Input/Output: [(38 -79 87 -40) -79]
Test Case: 803 | Input/Output: [(56 40 6 98) 6]
Test Case: 804 | Input/Output: [(-54 82 -72 -12) -72]
Test Case: 805 | Input/Output: [(-100 -27 34 38) -100]
Test Case: 806 | Input/Output: [(-17 84 55 46) -17]
Test Case: 807 | Input/Output: [(-77 -11 -94 75) -94]
Test Case: 808 | Input/Output: [(69 -22 -16 54) -22]
Test Case: 809 | Input/Output: [(-28 74 49 -9) -28]
Test Case: 810 | Input/Output: [(-41 55 -68 -25) -68]
Test Case: 811 | Input/Output: [(-14 48 -21 -7) -21]
Test Case: 812 | Input/Output: [(31 -61 24 6) -61]
Test Case: 813 | Input/Output: [(92 -1 29 54) -1]
Test Case: 814 | Input/Output: [(93 -61 -59 -31) -61]
Test Case: 815 | Input/Output: [(91 -59 -82 80) -82]
Test Case: 816 | Input/Output: [(47 -51 23 -45) -51]
Test Case: 817 | Input/Output: [(70 -97 -100 28) -100]
Test Case: 818 | Input/Output: [(90 3 54 97) 3]
Test Case: 819 | Input/Output: [(35 -42 80 70) -42]
Test Case: 820 | Input/Output: [(9 3 13 -16) -16]
Test Case: 821 | Input/Output: [(-69 -73 -80 28) -80]
Test Case: 822 | Input/Output: [(70 -93 41 93) -93]
Test Case: 823 | Input/Output: [(15 77 -77 -9) -77]
Test Case: 824 | Input/Output: [(-51 -87 -8 50) -87]
Test Case: 825 | Input/Output: [(9 21 -35 -41) -41]
Test Case: 826 | Input/Output: [(-56 57 -23 83) -56]
Test Case: 827 | Input/Output: [(-99 11 -91 -65) -99]
Test Case: 828 | Input/Output: [(52 89 38 -96) -96]
Test Case: 829 | Input/Output: [(-20 -33 -34 -37) -37]
Test Case: 830 | Input/Output: [(67 -2 64 92) -2]
Test Case: 831 | Input/Output: [(-2 70 -21 -91) -91]
Test Case: 832 | Input/Output: [(-31 38 95 31) -31]
Test Case: 833 | Input/Output: [(-57 75 77 18) -57]
Test Case: 834 | Input/Output: [(-7 41 7 -47) -47]
Test Case: 835 | Input/Output: [(81 -30 50 -59) -59]
Test Case: 836 | Input/Output: [(-4 37 -52 21) -52]
Test Case: 837 | Input/Output: [(-71 -12 -45 20) -71]
Test Case: 838 | Input/Output: [(4 -43 -36 -99) -99]
Test Case: 839 | Input/Output: [(-88 69 -74 -16) -88]
Test Case: 840 | Input/Output: [(83 54 -63 57) -63]
Test Case: 841 | Input/Output: [(34 -89 58 -6) -89]
Test Case: 842 | Input/Output: [(31 2 -85 -44) -85]
Test Case: 843 | Input/Output: [(-67 59 -56 -55) -67]
Test Case: 844 | Input/Output: [(-17 -28 -80 21) -80]
Test Case: 845 | Input/Output: [(43 -93 81 78) -93]
Test Case: 846 | Input/Output: [(89 51 -59 19) -59]
Test Case: 847 | Input/Output: [(70 68 -52 -27) -52]
Test Case: 848 | Input/Output: [(-25 -94 -44 47) -94]
Test Case: 849 | Input/Output: [(-90 42 38 -3) -90]
Test Case: 850 | Input/Output: [(8 -7 6 -61) -61]
Test Case: 851 | Input/Output: [(28 57 -65 -94) -94]
Test Case: 852 | Input/Output: [(-2 -59 1 39) -59]
Test Case: 853 | Input/Output: [(70 20 1 0) 0]
Test Case: 854 | Input/Output: [(-23 -45 97 6) -45]
Test Case: 855 | Input/Output: [(60 -4 65 3) -4]
Test Case: 856 | Input/Output: [(27 -16 -88 -6) -88]
Test Case: 857 | Input/Output: [(-30 -40 79 81) -40]
Test Case: 858 | Input/Output: [(-75 28 38 -20) -75]
Test Case: 859 | Input/Output: [(80 -51 82 31) -51]
Test Case: 860 | Input/Output: [(-79 73 -93 48) -93]
Test Case: 861 | Input/Output: [(17 -99 24 23) -99]
Test Case: 862 | Input/Output: [(-48 42 26 -72) -72]
Test Case: 863 | Input/Output: [(2 26 70 -84) -84]
Test Case: 864 | Input/Output: [(62 35 18 -11) -11]
Test Case: 865 | Input/Output: [(-24 51 66 4) -24]
Test Case: 866 | Input/Output: [(52 92 76 -1) -1]
Test Case: 867 | Input/Output: [(31 34 -38 -10) -38]
Test Case: 868 | Input/Output: [(-97 61 15 18) -97]
Test Case: 869 | Input/Output: [(-58 51 93 82) -58]
Test Case: 870 | Input/Output: [(-99 12 9 -11) -99]
Test Case: 871 | Input/Output: [(-32 42 81 -90) -90]
Test Case: 872 | Input/Output: [(37 -48 -39 57) -48]
Test Case: 873 | Input/Output: [(-24 -1 -29 -86) -86]
Test Case: 874 | Input/Output: [(-6 -69 8 -38) -69]
Test Case: 875 | Input/Output: [(-44 -89 -43 93) -89]
Test Case: 876 | Input/Output: [(-78 -37 44 51) -78]
Test Case: 877 | Input/Output: [(52 29 -30 -70) -70]
Test Case: 878 | Input/Output: [(-1 -20 68 52) -20]
Test Case: 879 | Input/Output: [(-79 68 -25 27) -79]
Test Case: 880 | Input/Output: [(-52 41 -2 -78) -78]
Test Case: 881 | Input/Output: [(-57 -81 -22 -99) -99]
Test Case: 882 | Input/Output: [(15 0 4 38) 0]
Test Case: 883 | Input/Output: [(72 -6 63 1) -6]
Test Case: 884 | Input/Output: [(24 56 -5 -14) -14]
Test Case: 885 | Input/Output: [(-25 -80 5 62) -80]
Test Case: 886 | Input/Output: [(-51 -65 40 96) -65]
Test Case: 887 | Input/Output: [(-56 -69 65 -77) -77]
Test Case: 888 | Input/Output: [(1 -82 -92 -100) -100]
Test Case: 889 | Input/Output: [(56 71 83 99) 56]
Test Case: 890 | Input/Output: [(85 93 70 95) 70]
Test Case: 891 | Input/Output: [(-10 -23 66 71) -23]
Test Case: 892 | Input/Output: [(-79 -8 40 1) -79]
Test Case: 893 | Input/Output: [(49 40 -71 37) -71]
Test Case: 894 | Input/Output: [(38 80 -51 -4) -51]
Test Case: 895 | Input/Output: [(69 40 48 -47) -47]
Test Case: 896 | Input/Output: [(-78 -35 -76 80) -78]
Test Case: 897 | Input/Output: [(56 -86 -7 20) -86]
Test Case: 898 | Input/Output: [(82 -89 35 -69) -89]
Test Case: 899 | Input/Output: [(-50 26 -2 6) -50]
Test Case: 900 | Input/Output: [(21 78 34 53) 21]
Test Case: 901 | Input/Output: [(-99 -98 -42 91) -99]
Test Case: 902 | Input/Output: [(-20 -1 85 -11) -20]
Test Case: 903 | Input/Output: [(91 86 37 -85) -85]
Test Case: 904 | Input/Output: [(6 -39 -51 67) -51]
Test Case: 905 | Input/Output: [(-12 -16 -25 21) -25]
Test Case: 906 | Input/Output: [(-14 -26 -27 62) -27]
Test Case: 907 | Input/Output: [(20 71 29 88) 20]
Test Case: 908 | Input/Output: [(61 6 66 -10) -10]
Test Case: 909 | Input/Output: [(41 55 -9 -97) -97]
Test Case: 910 | Input/Output: [(45 7 84 78) 7]
Test Case: 911 | Input/Output: [(-81 0 16 50) -81]
Test Case: 912 | Input/Output: [(-81 -85 89 -47) -85]
Test Case: 913 | Input/Output: [(-31 87 -54 -35) -54]
Test Case: 914 | Input/Output: [(34 94 97 -75) -75]
Test Case: 915 | Input/Output: [(88 10 -86 -24) -86]
Test Case: 916 | Input/Output: [(-69 57 -4 -89) -89]
Test Case: 917 | Input/Output: [(-52 -51 64 -66) -66]
Test Case: 918 | Input/Output: [(76 -83 -47 62) -83]
Test Case: 919 | Input/Output: [(3 -50 82 6) -50]
Test Case: 920 | Input/Output: [(83 56 61 85) 56]
Test Case: 921 | Input/Output: [(72 -35 60 61) -35]
Test Case: 922 | Input/Output: [(87 -78 -44 69) -78]
Test Case: 923 | Input/Output: [(-7 15 -79 -79) -79]
Test Case: 924 | Input/Output: [(-15 -46 -25 -2) -46]
Test Case: 925 | Input/Output: [(-5 -21 59 44) -21]
Test Case: 926 | Input/Output: [(95 26 86 -46) -46]
Test Case: 927 | Input/Output: [(-26 -68 -1 -96) -96]
Test Case: 928 | Input/Output: [(67 -34 90 -56) -56]
Test Case: 929 | Input/Output: [(-82 79 29 -91) -91]
Test Case: 930 | Input/Output: [(17 98 -26 -55) -55]
Test Case: 931 | Input/Output: [(68 23 -44 95) -44]
Test Case: 932 | Input/Output: [(-3 -96 -10 -26) -96]
Test Case: 933 | Input/Output: [(-99 -20 -15 -75) -99]
Test Case: 934 | Input/Output: [(-76 14 78 9) -76]
Test Case: 935 | Input/Output: [(64 -41 -47 19) -47]
Test Case: 936 | Input/Output: [(-60 20 24 7) -60]
Test Case: 937 | Input/Output: [(-78 53 -45 -41) -78]
Test Case: 938 | Input/Output: [(4 -4 -38 18) -38]
Test Case: 939 | Input/Output: [(24 -83 -35 -23) -83]
Test Case: 940 | Input/Output: [(-3 56 71 -8) -8]
Test Case: 941 | Input/Output: [(-21 -54 81 -49) -54]
Test Case: 942 | Input/Output: [(-79 -3 89 19) -79]
Test Case: 943 | Input/Output: [(47 -76 89 46) -76]
Test Case: 944 | Input/Output: [(-43 30 -81 1) -81]
Test Case: 945 | Input/Output: [(-26 6 73 1) -26]
Test Case: 946 | Input/Output: [(32 -95 -16 97) -95]
Test Case: 947 | Input/Output: [(88 -7 -6 -28) -28]
Test Case: 948 | Input/Output: [(7 80 56 18) 7]
Test Case: 949 | Input/Output: [(-44 -95 -94 -81) -95]
Test Case: 950 | Input/Output: [(-65 78 22 -73) -73]
Test Case: 951 | Input/Output: [(-15 64 -99 14) -99]
Test Case: 952 | Input/Output: [(92 -62 66 -11) -62]
Test Case: 953 | Input/Output: [(47 69 -60 72) -60]
Test Case: 954 | Input/Output: [(-55 45 -74 -14) -74]
Test Case: 955 | Input/Output: [(42 -73 -53 80) -73]
Test Case: 956 | Input/Output: [(-37 34 -55 -44) -55]
Test Case: 957 | Input/Output: [(75 -55 -53 -97) -97]
Test Case: 958 | Input/Output: [(56 53 -31 -62) -62]
Test Case: 959 | Input/Output: [(-2 73 -36 -31) -36]
Test Case: 960 | Input/Output: [(74 -15 83 -24) -24]
Test Case: 961 | Input/Output: [(50 -4 -8 11) -8]
Test Case: 962 | Input/Output: [(39 55 16 70) 16]
Test Case: 963 | Input/Output: [(-11 13 -51 74) -51]
Test Case: 964 | Input/Output: [(33 45 -37 51) -37]
Test Case: 965 | Input/Output: [(56 9 -50 100) -50]
Test Case: 966 | Input/Output: [(-43 73 66 -77) -77]
Test Case: 967 | Input/Output: [(-63 -6 45 -41) -63]
Test Case: 968 | Input/Output: [(-7 35 -73 -2) -73]
Test Case: 969 | Input/Output: [(-83 5 74 5) -83]
Test Case: 970 | Input/Output: [(62 74 36 48) 36]
Test Case: 971 | Input/Output: [(21 58 22 -75) -75]
Test Case: 972 | Input/Output: [(-44 32 63 48) -44]
Test Case: 973 | Input/Output: [(-88 52 94 43) -88]
Test Case: 974 | Input/Output: [(-78 29 39 26) -78]
Test Case: 975 | Input/Output: [(72 74 68 74) 68]
Test Case: 976 | Input/Output: [(-24 -11 -68 51) -68]
Test Case: 977 | Input/Output: [(-100 78 -38 17) -100]
Test Case: 978 | Input/Output: [(90 81 87 -35) -35]
Test Case: 979 | Input/Output: [(-31 33 90 -45) -45]
Test Case: 980 | Input/Output: [(36 -19 -72 -81) -81]
Test Case: 981 | Input/Output: [(-94 -70 -58 -27) -94]
Test Case: 982 | Input/Output: [(-43 -87 -19 -36) -87]
Test Case: 983 | Input/Output: [(-49 -6 -47 -19) -49]
Test Case: 984 | Input/Output: [(37 37 -27 -25) -27]
Test Case: 985 | Input/Output: [(15 -85 -25 93) -85]
Test Case: 986 | Input/Output: [(-89 12 -68 65) -89]
Test Case: 987 | Input/Output: [(-48 38 -72 51) -72]
Test Case: 988 | Input/Output: [(-16 -70 -72 -91) -91]
Test Case: 989 | Input/Output: [(17 93 -10 -20) -20]
Test Case: 990 | Input/Output: [(13 3 -15 96) -15]
Test Case: 991 | Input/Output: [(82 60 -10 53) -10]
Test Case: 992 | Input/Output: [(37 -49 -9 -59) -59]
Test Case: 993 | Input/Output: [(-20 65 94 -85) -85]
Test Case: 994 | Input/Output: [(-43 55 -90 -24) -90]
Test Case: 995 | Input/Output: [(-70 7 -73 56) -73]
Test Case: 996 | Input/Output: [(38 84 51 -12) -12]
Test Case: 997 | Input/Output: [(-20 46 -6 4) -20]
Test Case: 998 | Input/Output: [(-32 8 -87 -47) -87]
Test Case: 999 | Input/Output: [(-57 90 5 -33) -57]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 99 15 -97 -39 113 42 27 -90 88 106 116 -101 93 11 -74 110
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[88 40 88 88] 40] [[-35 -35 -35 -66] -66] [[-20 -20 0 -20] -20] [[-8 -8 -79 -8] -79] [[-99 -30 -99 -99] -99] [[7 7 -52 7] -52] [[48 14 14 14] 14] [[51 20 20 20] 20] [[-59 72 72 72] -59] [[-76 33 33 33] -76] [(78 78 78 78) 78] [(-11 -11 -11 -11) -11] [(-76 -76 -76 -76) -76] [(85 85 85 85) 85] [(18 18 18 18) 18] [(12 76 58 12) 12] [(85 15 9 86) 9] [(16 3 3 10) 3] [(57 54 92 64) 54] [(14 46 48 94) 14] [(12 7 97 40) 7] [(8 86 38 70) 8] [(38 97 50 58) 38] [(97 14 89 34) 14] [(54 34 76 24) 24] [(62 45 67 97) 45] [(65 37 36 98) 36] [(45 69 87 52) 45] [(78 88 78 28) 28] [(40 48 9 8) 8] [(98 42 99 14) 14] [(24 13 21 61) 13] [(47 55 6 81) 6] [(35 36 78 76) 35] [(97 78 82 87) 78] [(-23 16 -78 -92) -92] [(-51 -55 -64 -19) -64] [(18 -80 -32 60) -80] [(-72 49 -14 70) -72] [(77 -100 48 68) -100] [(-4 -76 19 -56) -76] [(19 77 12 68) 12] [(87 -9 23 -91) -91] [(12 42 70 14) 12] [(-11 -7 -11 83) -11] [(6 -87 -63 75) -87] [(31 -70 -45 99) -70] [(-63 -64 84 87) -64] [(69 -90 23 17) -90] [(71 95 -31 29) -31] [(-70 70 60 29) -70] [(22 -95 -48 10) -95] [(-21 -74 -71 -92) -92] [(-88 26 -83 -35) -88] [(84 -95 -50 47) -95] [(-20 3 74 24) -20] [(57 -56 17 9) -56] [(69 45 -76 23) -76] [(-4 -48 -2 78) -48] [(45 35 67 -31) -31] [(98 25 30 72) 25] [(-40 -56 45 -100) -100] [(-87 13 93 -20) -87] [(-27 -23 38 11) -27] [(-70 59 27 -61) -70] [(19 -10 25 88) -10] [(-58 -91 -90 -21) -91] [(-45 86 -66 41) -66] [(90 50 -45 -44) -45] [(3 87 95 -67) -67] [(49 -16 -92 -51) -92] [(81 19 -18 -54) -54] [(-30 -95 -40 -92) -95] [(89 -58 -28 -27) -58] [(-61 18 85 91) -61] [(54 36 68 -18) -18] [(-56 51 23 46) -56] [(-93 -69 55 -17) -93] [(89 -61 4 -19) -61] [(-83 -92 -45 -75) -92] [(100 -58 84 31) -58] [(-47 90 -16 -33) -47] [(-41 -95 -40 32) -95] [(52 -7 68 20) -7] [(-11 13 -35 88) -35] [(-45 -22 81 24) -45] [(-73 -48 -64 -8) -73] [(29 90 40 -92) -92] [(-7 21 80 -89) -89] [(-91 22 53 21) -91] [(51 -80 7 59) -80] [(93 20 -83 49) -83] [(10 26 71 -40) -40] [(38 10 -91 -7) -91] [(-27 -32 -61 81) -61])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 88                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: 7                  
Correct output: 14                  | Program output: 48                 
Correct output: 20                  | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 85                 
Correct output: 3                   | Program output: 16                 
Correct output: 54                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 97                 
Correct output: 24                  | Program output: 54                 
Correct output: 45                  | Program output: 62                 
Correct output: 36                  | Program output: 65                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 40                 
Correct output: 14                  | Program output: 98                 
Correct output: 13                  | Program output: 24                 
Correct output: 6                   | Program output: 47                 
Correct output: 35                  | Program output: 35                 
Correct output: 78                  | Program output: 97                 
Correct output: -92                 | Program output: -23                
Correct output: -64                 | Program output: -51                
Correct output: -80                 | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 77                 
Correct output: -76                 | Program output: -4                 
Correct output: 12                  | Program output: 19                 
Correct output: -91                 | Program output: 87                 
Correct output: 12                  | Program output: 12                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: 6                  
Correct output: -70                 | Program output: 31                 
Correct output: -64                 | Program output: -63                
Correct output: -90                 | Program output: 69                 
Correct output: -31                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 22                 
Correct output: -92                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: 84                 
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: 57                 
Correct output: -76                 | Program output: 69                 
Correct output: -48                 | Program output: -4                 
Correct output: -31                 | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: -100                | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -10                 | Program output: 19                 
Correct output: -91                 | Program output: -58                
Correct output: -66                 | Program output: -45                
Correct output: -45                 | Program output: 90                 
Correct output: -67                 | Program output: 3                  
Correct output: -92                 | Program output: 49                 
Correct output: -54                 | Program output: 81                 
Correct output: -95                 | Program output: -30                
Correct output: -58                 | Program output: 89                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 89                 
Correct output: -92                 | Program output: -83                
Correct output: -58                 | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -41                
Correct output: -7                  | Program output: 52                 
Correct output: -35                 | Program output: -11                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 29                 
Correct output: -89                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: 51                 
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: 10                 
Correct output: -91                 | Program output: 38                 
Correct output: -61                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -44} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 2, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction tag_boolean_205} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_733} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_267} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Lexicase best program: (boolean_invert_second_then_and -44 integer_shove integer_gt boolean_swap exec_dup () boolean_flush exec_k_when_autoconstructing (in1 exec_noop) (integer_yankdup exec_dup_times () in3) in3 tag_boolean_205 integer_shove boolean_or boolean_dup_times integer_gt integer_stackdepth integer_shove integer_flush print_integer integer_pop integer_lte integer_fromboolean boolean_flush in3 boolean_yank integer_div integer_dup_items integer_yankdup in1 print_integer exec_shove () exec_while (boolean_yankdup exec_yank in2 exec_s (exec_do*times (in3 exec_stackdepth exec_dup (exec_do*count (integer_min exec_y_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup tagged_733 integer_mod) exec_swap (in2 exec_do*times (integer_div boolean_flush exec_stackdepth integer_add integer_inc integer_lte) boolean_pop exec_rot (integer_gt exec_eq) (exec_do*range (tag_integer_267 integer_yankdup exec_yank integer_flush exec_dup_items integer_sub exec_shove (integer_flush boolean_swap exec_when () integer_mult exec_when (exec_dup_times (in3) boolean_eq boolean_yank) boolean_rot))) ()) ())))) () ()))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 108
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction -44} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 2, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction tag_boolean_205} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_733} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_267} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 1, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_rot})
Zero cases best program: (boolean_invert_second_then_and -44 integer_shove integer_gt boolean_swap exec_dup () boolean_flush exec_k_when_autoconstructing (in1 exec_noop) (integer_yankdup exec_dup_times () in3) in3 tag_boolean_205 integer_shove boolean_or boolean_dup_times integer_gt integer_stackdepth integer_shove integer_flush print_integer integer_pop integer_lte integer_fromboolean boolean_flush in3 boolean_yank integer_div integer_dup_items integer_yankdup in1 print_integer exec_shove () exec_while (boolean_yankdup exec_yank in2 exec_s (exec_do*times (in3 exec_stackdepth exec_dup (exec_do*count (integer_min exec_y_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup tagged_733 integer_mod) exec_swap (in2 exec_do*times (integer_div boolean_flush exec_stackdepth integer_add integer_inc integer_lte) boolean_pop exec_rot (integer_gt exec_eq) (exec_do*range (tag_integer_267 integer_yankdup exec_yank integer_flush exec_dup_items integer_sub exec_shove (integer_flush boolean_swap exec_when () integer_mult exec_when (exec_dup_times (in3) boolean_eq boolean_yank) boolean_rot))) ()) ())))) () ()))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 108
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 3 11 11 3 1 3 12 1)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (4 4 3 11 11 3 1 3 12 1)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_swap} {:close 0, :instruction 36} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction tag_exec_861} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_yank} {:close 1, :instruction in4} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction tagged_410} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1})
Best program: (boolean_swap boolean_dup_times integer_fromboolean in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult exec_eq) exec_k_when_autoconstructing (in3) () integer_rot integer_gt integer_swap 36 boolean_rot boolean_pop exec_if (exec_do*while (exec_stackdepth integer_yankdup) print_integer integer_yankdup) (boolean_invert_second_then_and boolean_empty) integer_dup_times integer_dec integer_shove exec_do*range (exec_flush print_integer) boolean_yank exec_dup_items boolean_not boolean_dup_times integer_max exec_swap (in4 integer_empty integer_fromboolean boolean_shove tag_exec_861 () boolean_shove) (integer_inc exec_pop (integer_pop exec_eq integer_yankdup boolean_dup boolean_rot boolean_yankdup boolean_invert_second_then_and integer_lte boolean_eq) boolean_rot print_boolean integer_flush boolean_invert_second_then_and exec_do*times (integer_yank) in4) in3 exec_dup_items integer_dup boolean_or in1 boolean_rot exec_yank boolean_flush integer_dup_items boolean_not in4 integer_mod exec_do*while () integer_rot exec_flush tagged_410 boolean_swap print_exec () boolean_rot integer_div integer_flush boolean_frominteger integer_gt boolean_stackdepth integer_yankdup in1)
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 87
Size: 104
Percent parens: 0.163
--- Population Statistics ---
Average total errors in population: 9.947
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.997 0.989 0.989 0.997 0.999 0.997 0.988 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.203
Average program size in population (points): 70.463
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 494706
--- Timings ---
Current time: 1559584465045 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 28.9%
Fitness Testing:      1.8 seconds, 67.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -8                 
Correct output: -99                 | Program output: -30                
Correct output: -52                 | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 76                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 86                 
Correct output: 38                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 37                 
Correct output: 45                  | Program output: 69                 
Correct output: 28                  | Program output: 88                 
Correct output: 8                   | Program output: 48                 
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 55                 
Correct output: 35                  | Program output: 36                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: 16                 
Correct output: -64                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 77                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 42                 
Correct output: -11                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: 95                 
Correct output: -70                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 3                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: 45                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: 13                 
Correct output: -27                 | Program output: -23                
Correct output: -70                 | Program output: 59                 
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: 86                 
Correct output: -45                 | Program output: 50                 
Correct output: -67                 | Program output: 87                 
Correct output: -92                 | Program output: -16                
Correct output: -54                 | Program output: 19                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 18                 
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: 51                 
Correct output: -93                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 90                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: 13                 
Correct output: -45                 | Program output: -22                
Correct output: -73                 | Program output: -48                
Correct output: -92                 | Program output: 90                 
Correct output: -89                 | Program output: 21                 
Correct output: -91                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 20                 
Correct output: -40                 | Program output: 26                 
Correct output: -91                 | Program output: 10                 
Correct output: -61                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Lexicase best errors: [1 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Zero cases best errors: [1 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 436 158 423 438 158 264 423 439 159)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (439 436 158 423 438 158 264 423 439 159)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Errors: [1 1 0 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 45
Size: 60
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.663
Median total errors in population: 6
Error averages by case: (0.561 0.564 0.842 0.577 0.562 0.842 0.736 0.577 0.561 0.841)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.673
Average program size in population (points): 83.736
Average percent parens in population: 0.216
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1065006
--- Timings ---
Current time: 1559584468377 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 44.4%
Fitness Testing:      2.6 seconds, 45.9%
Report:               0.5 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -8                 
Correct output: -99                 | Program output: -30                
Correct output: -52                 | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 76                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 86                 
Correct output: 38                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 37                 
Correct output: 45                  | Program output: 69                 
Correct output: 28                  | Program output: 88                 
Correct output: 8                   | Program output: 48                 
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 55                 
Correct output: 35                  | Program output: 36                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: 16                 
Correct output: -64                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 77                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 42                 
Correct output: -11                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: 95                 
Correct output: -70                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 3                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: 45                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: 13                 
Correct output: -27                 | Program output: -23                
Correct output: -70                 | Program output: 59                 
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: 86                 
Correct output: -45                 | Program output: 50                 
Correct output: -67                 | Program output: 87                 
Correct output: -92                 | Program output: -16                
Correct output: -54                 | Program output: 19                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 18                 
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: 51                 
Correct output: -93                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 90                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: 13                 
Correct output: -45                 | Program output: -22                
Correct output: -73                 | Program output: -48                
Correct output: -92                 | Program output: 90                 
Correct output: -89                 | Program output: 21                 
Correct output: -91                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 20                 
Correct output: -40                 | Program output: 26                 
Correct output: -91                 | Program output: 10                 
Correct output: -61                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Lexicase best errors: [0 1 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Zero cases best errors: [0 1 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 318 411 121 411 318 731 318 855 410)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (533 318 411 121 411 318 731 318 855 410)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_183} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop tagged_183 exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (integer_gte integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Errors: [0 1 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.574
Median total errors in population: 5
Error averages by case: (0.467 0.682 0.589 0.879 0.589 0.682 0.269 0.682 0.145 0.59)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.525
Average program size in population (points): 76.846
Average percent parens in population: 0.229
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9935
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1945349
--- Timings ---
Current time: 1559584472587 milliseconds
Total Time:           9.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 49.0%
Fitness Testing:      3.5 seconds, 37.1%
Report:               1.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -8                 
Correct output: -99                 | Program output: -30                
Correct output: -52                 | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 76                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 86                 
Correct output: 38                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 37                 
Correct output: 45                  | Program output: 69                 
Correct output: 28                  | Program output: 88                 
Correct output: 8                   | Program output: 48                 
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 55                 
Correct output: 35                  | Program output: 36                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: 16                 
Correct output: -64                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 77                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 42                 
Correct output: -11                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: 95                 
Correct output: -70                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 3                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: 45                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: 13                 
Correct output: -27                 | Program output: -23                
Correct output: -70                 | Program output: 59                 
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: 86                 
Correct output: -45                 | Program output: 50                 
Correct output: -67                 | Program output: 87                 
Correct output: -92                 | Program output: -16                
Correct output: -54                 | Program output: 19                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 18                 
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: 51                 
Correct output: -93                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 90                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: 13                 
Correct output: -45                 | Program output: -22                
Correct output: -73                 | Program output: -48                
Correct output: -92                 | Program output: 90                 
Correct output: -89                 | Program output: 21                 
Correct output: -91                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 20                 
Correct output: -40                 | Program output: 26                 
Correct output: -91                 | Program output: 10                 
Correct output: -61                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Lexicase best errors: [0 1 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Zero cases best errors: [0 1 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 1 1 337 403 404 111 1 404 447)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (402 1 1 337 403 404 111 1 404 447)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_733} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction tag_integer_267} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_flush})
Best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth exec_yank in2 exec_s (exec_do*times (print_integer exec_stackdepth exec_dup (exec_do*count (integer_min exec_y_when_autoconstructing (integer_fromboolean integer_eq boolean_yankdup tagged_733 integer_mod) exec_swap (in2 exec_do*times (integer_div boolean_flush exec_stackdepth integer_add integer_inc integer_lte) boolean_pop exec_rot (integer_gt exec_eq) (exec_do*range (tag_integer_267 integer_yankdup exec_yank integer_flush exec_dup_items integer_sub exec_shove (integer_flush))) ()) ())))) () ())))))
Errors: [0 1 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 7.489
Median total errors in population: 8
Error averages by case: (0.598 0.999 0.999 0.663 0.597 0.596 0.889 0.999 0.596 0.553)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.545
Average program size in population (points): 74.635
Average percent parens in population: 0.232
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.48025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2830503
--- Timings ---
Current time: 1559584475994 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 49.6%
Fitness Testing:      4.3 seconds, 32.3%
Report:               2.3 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 88                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 92                 
Correct output: 14                  | Program output: 48                 
Correct output: 7                   | Program output: 97                 
Correct output: 8                   | Program output: 38                 
Correct output: 38                  | Program output: 50                 
Correct output: 14                  | Program output: 89                 
Correct output: 24                  | Program output: 76                 
Correct output: 45                  | Program output: 67                 
Correct output: 36                  | Program output: 36                 
Correct output: 45                  | Program output: 87                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 9                  
Correct output: 14                  | Program output: 99                 
Correct output: 13                  | Program output: 21                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 78                 
Correct output: 78                  | Program output: 82                 
Correct output: -92                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -32                
Correct output: -72                 | Program output: -14                
Correct output: -100                | Program output: 48                 
Correct output: -76                 | Program output: 19                 
Correct output: 12                  | Program output: 12                 
Correct output: -91                 | Program output: 23                 
Correct output: 12                  | Program output: 70                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -63                
Correct output: -70                 | Program output: -45                
Correct output: -64                 | Program output: 84                 
Correct output: -90                 | Program output: 23                 
Correct output: -31                 | Program output: -31                
Correct output: -70                 | Program output: 60                 
Correct output: -95                 | Program output: -48                
Correct output: -92                 | Program output: -71                
Correct output: -88                 | Program output: -83                
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: 74                 
Correct output: -56                 | Program output: 17                 
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -2                 
Correct output: -31                 | Program output: 67                 
Correct output: 25                  | Program output: 30                 
Correct output: -100                | Program output: 45                 
Correct output: -87                 | Program output: 93                 
Correct output: -27                 | Program output: 38                 
Correct output: -70                 | Program output: 27                 
Correct output: -10                 | Program output: 25                 
Correct output: -91                 | Program output: -90                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: 95                 
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: -18                
Correct output: -95                 | Program output: -40                
Correct output: -58                 | Program output: -28                
Correct output: -61                 | Program output: 85                 
Correct output: -18                 | Program output: 68                 
Correct output: -56                 | Program output: 23                 
Correct output: -93                 | Program output: 55                 
Correct output: -61                 | Program output: 4                  
Correct output: -92                 | Program output: -45                
Correct output: -58                 | Program output: 84                 
Correct output: -47                 | Program output: -16                
Correct output: -95                 | Program output: -40                
Correct output: -7                  | Program output: 68                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: 81                 
Correct output: -73                 | Program output: -64                
Correct output: -92                 | Program output: 40                 
Correct output: -89                 | Program output: 80                 
Correct output: -91                 | Program output: 53                 
Correct output: -80                 | Program output: 7                  
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: 71                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_invert_first_then_and boolean_yankdup exec_dup_times (boolean_invert_second_then_and) exec_s (boolean_invert_first_then_and exec_rot (exec_k (boolean_dup_items exec_yank exec_flush) (boolean_yankdup) in3 boolean_yank boolean_stackdepth) () (in3 print_integer) integer_yank boolean_pop exec_do*times () boolean_invert_second_then_and) (exec_y_when_autoconstructing (boolean_dup_times)) (exec_noop exec_empty exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_xor) exec_do*count (exec_do*while (integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))))
Lexicase best errors: [1 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_invert_first_then_and boolean_yankdup exec_dup_times (boolean_invert_second_then_and) exec_s (boolean_invert_first_then_and exec_rot (exec_k (boolean_dup_items exec_yank exec_flush) (boolean_yankdup) in3 boolean_yank boolean_stackdepth) () (in3 print_integer) integer_yank boolean_pop exec_do*times () boolean_invert_second_then_and) (exec_y_when_autoconstructing (boolean_dup_times)) (exec_noop exec_empty exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_xor) exec_do*count (exec_do*while (integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))))
Zero cases best errors: [1 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (374 127 274 509 128 770 875 885 129 368)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (374 127 274 509 128 770 875 885 129 368)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_max} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (exec_when (boolean_frominteger boolean_stackdepth integer_dec) exec_do*range () integer_empty integer_shove in3 print_integer boolean_yankdup in3 integer_max integer_inc boolean_not exec_do*range (exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Errors: [1 0 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.561
Median total errors in population: 5
Error averages by case: (0.626 0.873 0.726 0.491 0.872 0.23 0.125 0.115 0.871 0.632)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.298
Average program size in population (points): 64.95
Average percent parens in population: 0.241
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.839125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3836960
--- Timings ---
Current time: 1559584479459 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.8 seconds, 51.5%
Fitness Testing:      5.2 seconds, 30.5%
Report:               3.0 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -8                 
Correct output: -99                 | Program output: -30                
Correct output: -52                 | Program output: 7                  
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 76                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 86                 
Correct output: 38                  | Program output: 97                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 37                 
Correct output: 45                  | Program output: 69                 
Correct output: 28                  | Program output: 88                 
Correct output: 8                   | Program output: 48                 
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 55                 
Correct output: 35                  | Program output: 36                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: 16                 
Correct output: -64                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: 49                 
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 77                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 42                 
Correct output: -11                 | Program output: -7                 
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: 95                 
Correct output: -70                 | Program output: 70                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 3                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: 45                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: 13                 
Correct output: -27                 | Program output: -23                
Correct output: -70                 | Program output: 59                 
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: 86                 
Correct output: -45                 | Program output: 50                 
Correct output: -67                 | Program output: 87                 
Correct output: -92                 | Program output: -16                
Correct output: -54                 | Program output: 19                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 18                 
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: 51                 
Correct output: -93                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: 90                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: 13                 
Correct output: -45                 | Program output: -22                
Correct output: -73                 | Program output: -48                
Correct output: -92                 | Program output: 90                 
Correct output: -89                 | Program output: 21                 
Correct output: -91                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 20                 
Correct output: -40                 | Program output: 26                 
Correct output: -91                 | Program output: 10                 
Correct output: -61                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_stackdepth boolean_swap boolean_not integer_lt integer_div integer_pop boolean_yankdup exec_y_when_autoconstructing () in4 boolean_not exec_dup () integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Lexicase best errors: [0 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_stackdepth boolean_swap boolean_not integer_lt integer_div integer_pop boolean_yankdup exec_y_when_autoconstructing () in4 boolean_not exec_dup () integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Zero cases best errors: [0 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 403 241 1000 161 241 1000 1000 1000 884)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (161 403 241 0 161 241 0 0 0 884)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 boolean_not exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_y_when_autoconstructing (exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_swap integer_max integer_dup_times))))))
Errors: [1 0 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.909
Median total errors in population: 9
Error averages by case: (0.839 0.597 0.759 1.0 0.839 0.759 1.0 1.0 1.0 0.116)
Error minima by case: (0 0 0 1 0 0 1 1 1 0)
Average genome size in population (length): 45.713
Average program size in population (points): 60.222
Average percent parens in population: 0.237
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.3953125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4669717
--- Timings ---
Current time: 1559584482769 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.7 seconds, 53.0%
Fitness Testing:      6.0 seconds, 29.5%
Report:               3.5 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 637
Test mean error for best: 0.63700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 88                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -8                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: 7                  
Correct output: 14                  | Program output: 48                 
Correct output: 20                  | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 85                 
Correct output: 3                   | Program output: 16                 
Correct output: 54                  | Program output: 57                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 97                 
Correct output: 24                  | Program output: 54                 
Correct output: 45                  | Program output: 62                 
Correct output: 36                  | Program output: 65                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 40                 
Correct output: 14                  | Program output: 98                 
Correct output: 13                  | Program output: 24                 
Correct output: 6                   | Program output: 47                 
Correct output: 35                  | Program output: 35                 
Correct output: 78                  | Program output: 97                 
Correct output: -92                 | Program output: -23                
Correct output: -64                 | Program output: -51                
Correct output: -80                 | Program output: 18                 
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 77                 
Correct output: -76                 | Program output: -4                 
Correct output: 12                  | Program output: 19                 
Correct output: -91                 | Program output: 87                 
Correct output: 12                  | Program output: 12                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: 6                  
Correct output: -70                 | Program output: 31                 
Correct output: -64                 | Program output: -63                
Correct output: -90                 | Program output: 69                 
Correct output: -31                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 22                 
Correct output: -92                 | Program output: -21                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: 84                 
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: 57                 
Correct output: -76                 | Program output: 69                 
Correct output: -48                 | Program output: -4                 
Correct output: -31                 | Program output: 45                 
Correct output: 25                  | Program output: 98                 
Correct output: -100                | Program output: -40                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -10                 | Program output: 19                 
Correct output: -91                 | Program output: -58                
Correct output: -66                 | Program output: -45                
Correct output: -45                 | Program output: 90                 
Correct output: -67                 | Program output: 3                  
Correct output: -92                 | Program output: 49                 
Correct output: -54                 | Program output: 81                 
Correct output: -95                 | Program output: -30                
Correct output: -58                 | Program output: 89                 
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 54                 
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: 89                 
Correct output: -92                 | Program output: -83                
Correct output: -58                 | Program output: 100                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -41                
Correct output: -7                  | Program output: 52                 
Correct output: -35                 | Program output: -11                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 29                 
Correct output: -89                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: 51                 
Correct output: -83                 | Program output: 93                 
Correct output: -40                 | Program output: 10                 
Correct output: -91                 | Program output: 38                 
Correct output: -61                 | Program output: -27                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_swap boolean_dup_times integer_fromboolean in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))))
Lexicase best errors: [0 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_swap boolean_dup_times integer_fromboolean in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (exec_dup (integer_add exec_do*while (exec_if (boolean_or integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))))
Zero cases best errors: [0 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 900 2 443 3 902 443 903 5)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (3 4 900 2 443 3 902 443 903 5)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_635} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (boolean_swap boolean_dup_times integer_fromboolean in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult exec_eq) exec_k_when_autoconstructing (in3) () integer_rot integer_gt boolean_or integer_min integer_empty exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop exec_do*while (tagged_635 integer_stackdepth exec_empty exec_while (exec_y (exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))))
Errors: [0 0 1 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 63
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.392
Median total errors in population: 7
Error averages by case: (0.997 0.996 0.1 0.998 0.557 0.997 0.098 0.557 0.097 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.274
Average program size in population (points): 62.159
Average percent parens in population: 0.255
Minimum age in population: 6.0
Maximum age in population: 10.65625
Average age in population: 8.7511875
Median age in population: 8.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5838105
--- Timings ---
Current time: 1559584486224 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.0 seconds, 54.0%
Fitness Testing:      6.9 seconds, 28.8%
Report:               4.1 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 38                 
Correct output: 38                  | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 36                 
Correct output: 45                  | Program output: 69                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 9                  
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 36                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 12                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -70                 | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 3                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: 13                 
Correct output: -27                 | Program output: -23                
Correct output: -70                 | Program output: 27                 
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: 87                 
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 18                 
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: 23                 
Correct output: -93                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -22                
Correct output: -73                 | Program output: -64                
Correct output: -92                 | Program output: 40                 
Correct output: -89                 | Program output: 21                 
Correct output: -91                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in4 boolean_not exec_dup () integer_add exec_do*while (exec_if (boolean_or integer_min) (in2 in3 boolean_or integer_min) integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () integer_dup integer_swap integer_max integer_dup_times))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in4 boolean_not exec_dup () integer_add exec_do*while (exec_if (boolean_or integer_min) (in2 in3 boolean_or integer_min) integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () integer_dup integer_swap integer_max integer_dup_times))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 192 410 194 454 192 413 197 192 196)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (292 192 410 194 454 192 413 197 192 196)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_142} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (integer_flush exec_dup_items exec_noop boolean_rot tagged_142 boolean_invert_second_then_and exec_yankdup exec_dup_times (in2 integer_rot exec_do*while (exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))))
Errors: [1 0 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.268
Median total errors in population: 8
Error averages by case: (0.708 0.808 0.59 0.806 0.546 0.808 0.587 0.803 0.808 0.804)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.621
Average program size in population (points): 59.861
Average percent parens in population: 0.254
Minimum age in population: 7.75
Maximum age in population: 12.265625
Average age in population: 10.5465625
Median age in population: 10.5859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6679260
--- Timings ---
Current time: 1559584489074 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 55.2%
Fitness Testing:      7.7 seconds, 28.6%
Report:               4.3 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: 72                 
Correct output: -76                 | Program output: 33                 
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 38                 
Correct output: 38                  | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 36                 
Correct output: 45                  | Program output: 69                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 9                  
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 36                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 12                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 42                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -70                 | Program output: 60                 
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 3                  
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: 13                 
Correct output: -27                 | Program output: -23                
Correct output: -70                 | Program output: 27                 
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: 87                 
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: 18                 
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: 23                 
Correct output: -93                 | Program output: -69                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -16                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -22                
Correct output: -73                 | Program output: -64                
Correct output: -92                 | Program output: 40                 
Correct output: -89                 | Program output: 21                 
Correct output: -91                 | Program output: 22                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: 26                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 in3 boolean_or integer_min integer_empty exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_stackdepth boolean_swap boolean_not exec_do*times (integer_div) integer_pop boolean_yankdup exec_y_when_autoconstructing () in2 in3 boolean_or integer_min integer_empty exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (integer_gte integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger boolean_xor) exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times)))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (495 879 314 737 738 99 736 802 740 738)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (495 879 314 737 738 99 736 802 740 738)
Population mean number of perfect (error zero) cases: 6.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction tagged_142} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (integer_flush exec_dup_items exec_noop boolean_rot tagged_142 boolean_invert_second_then_and exec_yankdup exec_dup_times (in2 integer_rot exec_do*while (exec_if () (in3 integer_min) integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank) exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1) integer_eq boolean_rot exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 73
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 3.722
Median total errors in population: 2
Error averages by case: (0.505 0.121 0.686 0.263 0.262 0.901 0.264 0.198 0.26 0.262)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.439
Average program size in population (points): 60.166
Average percent parens in population: 0.243
Minimum age in population: 9.0
Maximum age in population: 13.5234375
Average age in population: 11.9982578125
Median age in population: 12.140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7571511
--- Timings ---
Current time: 1559584493399 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.9 seconds, 56.4%
Fitness Testing:      8.5 seconds, 28.3%
Report:               4.5 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 9                  
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 12                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 29                 
Correct output: -89                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Lexicase best program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Zero cases best program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (703 701 705 757 705 757 933 363 334 561)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (703 701 705 757 705 757 933 363 334 561)
Population mean number of perfect (error zero) cases: 6.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 1, :instruction integer_min} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_empty} {:close 1, :instruction -59} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_times})
Best program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 53
Size: 71
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.481
Median total errors in population: 2
Error averages by case: (0.297 0.299 0.295 0.243 0.295 0.243 0.067 0.637 0.666 0.439)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.851
Average program size in population (points): 62.572
Average percent parens in population: 0.249
Minimum age in population: 11.90625
Maximum age in population: 15.421875
Average age in population: 13.45517578125
Median age in population: 13.494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.011
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8447958
--- Timings ---
Current time: 1559584496517 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 55.0%
Fitness Testing:      9.3 seconds, 27.2%
Report:               6.0 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 71


Auto-simplifying with starting size: 71
step: 0
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 500
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1000
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 1500
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2000
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 2500
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3000
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 3500
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4000
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 4500
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

step: 5000
program: (boolean_swap boolean_dup_times boolean_not in1 exec_s_when_autoconstructing () (boolean_invert_first_then_and integer_max) (integer_mult in2) boolean_stackdepth boolean_not exec_dup () integer_add exec_do*while (boolean_or integer_min) exec_if (in3 integer_min) (integer_empty) exec_k_when_autoconstructing (boolean_invert_second_then_and) (print_integer) exec_empty exec_while (exec_y (boolean_pop integer_pop boolean_empty -59) boolean_eq integer_yank exec_y (boolean_stackdepth integer_empty boolean_dup_items integer_empty print_integer) boolean_frominteger exec_noop) exec_do*count (in1 integer_eq boolean_rot) exec_dup_times (exec_do*count (boolean_empty integer_eq exec_while () exec_dup_times (integer_swap integer_max integer_dup_times))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 71

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 201
Test mean error for best: 0.20100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 40                  | Program output: 40                 
Correct output: -66                 | Program output: -35                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: 14                  | Program output: 14                 
Correct output: 20                  | Program output: 20                 
Correct output: -59                 | Program output: -59                
Correct output: -76                 | Program output: -76                
Correct output: 78                  | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -76                 | Program output: -76                
Correct output: 85                  | Program output: 85                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 54                  | Program output: 54                 
Correct output: 14                  | Program output: 14                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 24                  | Program output: 34                 
Correct output: 45                  | Program output: 45                 
Correct output: 36                  | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 28                  | Program output: 78                 
Correct output: 8                   | Program output: 9                  
Correct output: 14                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 6                   | Program output: 6                  
Correct output: 35                  | Program output: 35                 
Correct output: 78                  | Program output: 78                 
Correct output: -92                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -76                 | Program output: -76                
Correct output: 12                  | Program output: 12                 
Correct output: -91                 | Program output: -9                 
Correct output: 12                  | Program output: 12                 
Correct output: -11                 | Program output: -11                
Correct output: -87                 | Program output: -87                
Correct output: -70                 | Program output: -70                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -31                 | Program output: -31                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -92                 | Program output: -74                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -56                 | Program output: -56                
Correct output: -76                 | Program output: -76                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 35                 
Correct output: 25                  | Program output: 25                 
Correct output: -100                | Program output: -56                
Correct output: -87                 | Program output: -87                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -10                 | Program output: -10                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -45                 | Program output: -45                
Correct output: -67                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: -18                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -61                 | Program output: -61                
Correct output: -18                 | Program output: 36                 
Correct output: -56                 | Program output: -56                
Correct output: -93                 | Program output: -93                
Correct output: -61                 | Program output: -61                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 29                 
Correct output: -89                 | Program output: -7                 
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -40                 | Program output: 10                 
Correct output: -91                 | Program output: -91                
Correct output: -61                 | Program output: -61                
;;******************************
