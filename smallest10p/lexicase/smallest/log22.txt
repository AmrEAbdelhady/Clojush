Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-13 68 68 68] -13] [[-73 -73 -18 -73] -73] [[59 22 22 22] 22] [[48 48 48 32] 32] [[81 -57 -57 -57] -57] [[-76 -76 97 -76] -76] [[-32 -52 -52 -52] -52] [[-33 -75 -75 -75] -75] [[-9 -9 -9 96] -9] [[-24 -24 93 -24] -24] [(-37 -37 -37 -37) -37] [(-72 -72 -72 -72) -72] [(100 100 100 100) 100] [(58 58 58 58) 58] [(87 87 87 87) 87] [(63 44 32 1) 1] [(1 60 7 55) 1] [(9 74 38 60) 9] [(89 31 97 63) 31] [(42 74 99 18) 18] [(2 70 3 14) 2] [(35 35 57 65) 35] [(49 73 23 52) 23] [(80 11 40 11) 11] [(67 69 53 43) 43] [(25 16 61 76) 16] [(33 23 39 89) 23] [(70 48 77 84) 48] [(90 32 39 13) 13] [(17 55 23 90) 17] [(81 5 25 22) 5] [(100 87 60 1) 1] [(94 44 30 93) 30] [(55 25 72 77) 25] [(79 30 29 0) 0] [(40 -79 -77 68) -79] [(-76 -39 78 70) -76] [(56 -59 -46 26) -59] [(10 30 10 -47) -47] [(-50 72 3 -31) -50] [(-95 93 30 6) -95] [(-56 -1 -91 67) -91] [(72 -85 62 -71) -85] [(-36 -98 -16 5) -98] [(8 77 85 -27) -27] [(1 91 22 12) 1] [(-70 -55 1 70) -70] [(-26 65 44 78) -26] [(15 62 60 73) 15] [(-92 -52 52 42) -92] [(31 32 65 55) 31] [(-44 47 -61 31) -61] [(-97 97 68 -76) -97] [(50 -72 61 52) -72] [(-6 -78 -75 -5) -78] [(-10 24 2 92) -10] [(-81 -59 2 -79) -81] [(-6 89 -73 -73) -73] [(-61 32 69 17) -61] [(23 -97 -88 -89) -97] [(49 -68 74 -78) -78] [(11 90 29 79) 11] [(-85 90 -42 90) -85] [(56 -54 57 -58) -58] [(-88 54 26 53) -88] [(-98 52 67 3) -98] [(-80 15 -32 -89) -89] [(-20 -98 88 -69) -98] [(94 -91 76 1) -91] [(4 -70 -51 21) -70] [(28 -77 73 49) -77] [(19 5 37 54) 5] [(-96 -91 -76 48) -96] [(-19 -70 -45 30) -70] [(-58 94 29 -74) -74] [(44 50 73 75) 44] [(-63 -100 -85 54) -100] [(85 23 -96 33) -96] [(-90 -43 -60 -52) -90] [(-38 -61 -84 25) -84] [(63 -23 -37 9) -37] [(90 86 33 38) 33] [(92 -69 19 56) -69] [(-41 9 -92 58) -92] [(11 80 -8 -3) -8] [(73 -15 -23 -61) -61] [(-7 -68 -81 -11) -81] [(-13 -30 -22 -61) -61] [(-36 -14 -57 58) -57] [(-73 4 -6 99) -73] [(-9 9 -27 82) -27] [(-77 -80 -81 -29) -81] [(79 -20 21 -39) -39] [(-77 -38 92 86) -77] [(-81 3 -65 -30) -81])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-13 68 68 68] -13]
Train Case:   6 | Input/Output: [[-73 -73 -18 -73] -73]
Train Case:   7 | Input/Output: [[59 22 22 22] 22]
Train Case:   8 | Input/Output: [[48 48 48 32] 32]
Train Case:   9 | Input/Output: [[81 -57 -57 -57] -57]
Train Case:  10 | Input/Output: [[-76 -76 97 -76] -76]
Train Case:  11 | Input/Output: [[-32 -52 -52 -52] -52]
Train Case:  12 | Input/Output: [[-33 -75 -75 -75] -75]
Train Case:  13 | Input/Output: [[-9 -9 -9 96] -9]
Train Case:  14 | Input/Output: [[-24 -24 93 -24] -24]
Train Case:  15 | Input/Output: [(-37 -37 -37 -37) -37]
Train Case:  16 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  17 | Input/Output: [(100 100 100 100) 100]
Train Case:  18 | Input/Output: [(58 58 58 58) 58]
Train Case:  19 | Input/Output: [(87 87 87 87) 87]
Train Case:  20 | Input/Output: [(63 44 32 1) 1]
Train Case:  21 | Input/Output: [(1 60 7 55) 1]
Train Case:  22 | Input/Output: [(9 74 38 60) 9]
Train Case:  23 | Input/Output: [(89 31 97 63) 31]
Train Case:  24 | Input/Output: [(42 74 99 18) 18]
Train Case:  25 | Input/Output: [(2 70 3 14) 2]
Train Case:  26 | Input/Output: [(35 35 57 65) 35]
Train Case:  27 | Input/Output: [(49 73 23 52) 23]
Train Case:  28 | Input/Output: [(80 11 40 11) 11]
Train Case:  29 | Input/Output: [(67 69 53 43) 43]
Train Case:  30 | Input/Output: [(25 16 61 76) 16]
Train Case:  31 | Input/Output: [(33 23 39 89) 23]
Train Case:  32 | Input/Output: [(70 48 77 84) 48]
Train Case:  33 | Input/Output: [(90 32 39 13) 13]
Train Case:  34 | Input/Output: [(17 55 23 90) 17]
Train Case:  35 | Input/Output: [(81 5 25 22) 5]
Train Case:  36 | Input/Output: [(100 87 60 1) 1]
Train Case:  37 | Input/Output: [(94 44 30 93) 30]
Train Case:  38 | Input/Output: [(55 25 72 77) 25]
Train Case:  39 | Input/Output: [(79 30 29 0) 0]
Train Case:  40 | Input/Output: [(40 -79 -77 68) -79]
Train Case:  41 | Input/Output: [(-76 -39 78 70) -76]
Train Case:  42 | Input/Output: [(56 -59 -46 26) -59]
Train Case:  43 | Input/Output: [(10 30 10 -47) -47]
Train Case:  44 | Input/Output: [(-50 72 3 -31) -50]
Train Case:  45 | Input/Output: [(-95 93 30 6) -95]
Train Case:  46 | Input/Output: [(-56 -1 -91 67) -91]
Train Case:  47 | Input/Output: [(72 -85 62 -71) -85]
Train Case:  48 | Input/Output: [(-36 -98 -16 5) -98]
Train Case:  49 | Input/Output: [(8 77 85 -27) -27]
Train Case:  50 | Input/Output: [(1 91 22 12) 1]
Train Case:  51 | Input/Output: [(-70 -55 1 70) -70]
Train Case:  52 | Input/Output: [(-26 65 44 78) -26]
Train Case:  53 | Input/Output: [(15 62 60 73) 15]
Train Case:  54 | Input/Output: [(-92 -52 52 42) -92]
Train Case:  55 | Input/Output: [(31 32 65 55) 31]
Train Case:  56 | Input/Output: [(-44 47 -61 31) -61]
Train Case:  57 | Input/Output: [(-97 97 68 -76) -97]
Train Case:  58 | Input/Output: [(50 -72 61 52) -72]
Train Case:  59 | Input/Output: [(-6 -78 -75 -5) -78]
Train Case:  60 | Input/Output: [(-10 24 2 92) -10]
Train Case:  61 | Input/Output: [(-81 -59 2 -79) -81]
Train Case:  62 | Input/Output: [(-6 89 -73 -73) -73]
Train Case:  63 | Input/Output: [(-61 32 69 17) -61]
Train Case:  64 | Input/Output: [(23 -97 -88 -89) -97]
Train Case:  65 | Input/Output: [(49 -68 74 -78) -78]
Train Case:  66 | Input/Output: [(11 90 29 79) 11]
Train Case:  67 | Input/Output: [(-85 90 -42 90) -85]
Train Case:  68 | Input/Output: [(56 -54 57 -58) -58]
Train Case:  69 | Input/Output: [(-88 54 26 53) -88]
Train Case:  70 | Input/Output: [(-98 52 67 3) -98]
Train Case:  71 | Input/Output: [(-80 15 -32 -89) -89]
Train Case:  72 | Input/Output: [(-20 -98 88 -69) -98]
Train Case:  73 | Input/Output: [(94 -91 76 1) -91]
Train Case:  74 | Input/Output: [(4 -70 -51 21) -70]
Train Case:  75 | Input/Output: [(28 -77 73 49) -77]
Train Case:  76 | Input/Output: [(19 5 37 54) 5]
Train Case:  77 | Input/Output: [(-96 -91 -76 48) -96]
Train Case:  78 | Input/Output: [(-19 -70 -45 30) -70]
Train Case:  79 | Input/Output: [(-58 94 29 -74) -74]
Train Case:  80 | Input/Output: [(44 50 73 75) 44]
Train Case:  81 | Input/Output: [(-63 -100 -85 54) -100]
Train Case:  82 | Input/Output: [(85 23 -96 33) -96]
Train Case:  83 | Input/Output: [(-90 -43 -60 -52) -90]
Train Case:  84 | Input/Output: [(-38 -61 -84 25) -84]
Train Case:  85 | Input/Output: [(63 -23 -37 9) -37]
Train Case:  86 | Input/Output: [(90 86 33 38) 33]
Train Case:  87 | Input/Output: [(92 -69 19 56) -69]
Train Case:  88 | Input/Output: [(-41 9 -92 58) -92]
Train Case:  89 | Input/Output: [(11 80 -8 -3) -8]
Train Case:  90 | Input/Output: [(73 -15 -23 -61) -61]
Train Case:  91 | Input/Output: [(-7 -68 -81 -11) -81]
Train Case:  92 | Input/Output: [(-13 -30 -22 -61) -61]
Train Case:  93 | Input/Output: [(-36 -14 -57 58) -57]
Train Case:  94 | Input/Output: [(-73 4 -6 99) -73]
Train Case:  95 | Input/Output: [(-9 9 -27 82) -27]
Train Case:  96 | Input/Output: [(-77 -80 -81 -29) -81]
Train Case:  97 | Input/Output: [(79 -20 21 -39) -39]
Train Case:  98 | Input/Output: [(-77 -38 92 86) -77]
Train Case:  99 | Input/Output: [(-81 3 -65 -30) -81]
Test Case:   0 | Input/Output: [[78 -96 -96 -96] -96]
Test Case:   1 | Input/Output: [[-56 -56 -29 -56] -56]
Test Case:   2 | Input/Output: [[-22 -22 87 -22] -22]
Test Case:   3 | Input/Output: [[-92 -92 20 -92] -92]
Test Case:   4 | Input/Output: [[-1 -1 -74 -1] -74]
Test Case:   5 | Input/Output: [[-95 -42 -42 -42] -95]
Test Case:   6 | Input/Output: [[84 84 84 68] 68]
Test Case:   7 | Input/Output: [[-40 -76 -40 -40] -76]
Test Case:   8 | Input/Output: [[40 82 40 40] 40]
Test Case:   9 | Input/Output: [[43 87 43 43] 43]
Test Case:  10 | Input/Output: [[75 75 -80 75] -80]
Test Case:  11 | Input/Output: [[2 -57 2 2] -57]
Test Case:  12 | Input/Output: [[-68 -63 -68 -68] -68]
Test Case:  13 | Input/Output: [[-49 -98 -98 -98] -98]
Test Case:  14 | Input/Output: [[-83 -83 37 -83] -83]
Test Case:  15 | Input/Output: [[-95 -95 -95 81] -95]
Test Case:  16 | Input/Output: [[-60 -68 -68 -68] -68]
Test Case:  17 | Input/Output: [[-2 -20 -2 -2] -20]
Test Case:  18 | Input/Output: [[-29 -6 -6 -6] -29]
Test Case:  19 | Input/Output: [[-14 -65 -14 -14] -65]
Test Case:  20 | Input/Output: [[76 -13 -13 -13] -13]
Test Case:  21 | Input/Output: [[-84 -84 -84 54] -84]
Test Case:  22 | Input/Output: [[39 55 55 55] 39]
Test Case:  23 | Input/Output: [[7 10 10 10] 7]
Test Case:  24 | Input/Output: [[-58 -58 -58 -99] -99]
Test Case:  25 | Input/Output: [[16 40 40 40] 16]
Test Case:  26 | Input/Output: [[33 11 33 33] 11]
Test Case:  27 | Input/Output: [[88 88 88 63] 63]
Test Case:  28 | Input/Output: [[72 -1 -1 -1] -1]
Test Case:  29 | Input/Output: [[-94 -94 -94 -52] -94]
Test Case:  30 | Input/Output: [[-57 -57 -60 -57] -60]
Test Case:  31 | Input/Output: [[-56 -56 -56 99] -56]
Test Case:  32 | Input/Output: [[88 88 69 88] 69]
Test Case:  33 | Input/Output: [[-64 -64 -99 -64] -99]
Test Case:  34 | Input/Output: [[58 66 58 58] 58]
Test Case:  35 | Input/Output: [[-69 13 -69 -69] -69]
Test Case:  36 | Input/Output: [[96 45 96 96] 45]
Test Case:  37 | Input/Output: [[51 51 -67 51] -67]
Test Case:  38 | Input/Output: [[39 39 39 64] 39]
Test Case:  39 | Input/Output: [[100 -30 -30 -30] -30]
Test Case:  40 | Input/Output: [[62 -4 62 62] -4]
Test Case:  41 | Input/Output: [[76 -36 76 76] -36]
Test Case:  42 | Input/Output: [[-65 -65 17 -65] -65]
Test Case:  43 | Input/Output: [[73 73 73 14] 14]
Test Case:  44 | Input/Output: [[33 33 -76 33] -76]
Test Case:  45 | Input/Output: [[-61 -61 -54 -61] -61]
Test Case:  46 | Input/Output: [[-92 -92 43 -92] -92]
Test Case:  47 | Input/Output: [[-49 -49 53 -49] -49]
Test Case:  48 | Input/Output: [[-18 -43 -43 -43] -43]
Test Case:  49 | Input/Output: [[-4 -36 -36 -36] -36]
Test Case:  50 | Input/Output: [[-4 -4 -4 -10] -10]
Test Case:  51 | Input/Output: [[56 56 -37 56] -37]
Test Case:  52 | Input/Output: [[-37 -37 53 -37] -37]
Test Case:  53 | Input/Output: [[-72 -72 -72 34] -72]
Test Case:  54 | Input/Output: [[78 78 78 -98] -98]
Test Case:  55 | Input/Output: [[79 79 79 54] 54]
Test Case:  56 | Input/Output: [[-95 79 -95 -95] -95]
Test Case:  57 | Input/Output: [[-58 74 74 74] -58]
Test Case:  58 | Input/Output: [[-40 -81 -81 -81] -81]
Test Case:  59 | Input/Output: [[-35 20 20 20] -35]
Test Case:  60 | Input/Output: [[90 51 90 90] 51]
Test Case:  61 | Input/Output: [[-69 -72 -72 -72] -72]
Test Case:  62 | Input/Output: [[81 81 37 81] 37]
Test Case:  63 | Input/Output: [[-40 -3 -40 -40] -40]
Test Case:  64 | Input/Output: [[-74 -74 -5 -74] -74]
Test Case:  65 | Input/Output: [[-22 -22 92 -22] -22]
Test Case:  66 | Input/Output: [[32 -47 32 32] -47]
Test Case:  67 | Input/Output: [[39 39 -100 39] -100]
Test Case:  68 | Input/Output: [[16 16 16 -97] -97]
Test Case:  69 | Input/Output: [[9 53 53 53] 9]
Test Case:  70 | Input/Output: [[-39 -39 -84 -39] -84]
Test Case:  71 | Input/Output: [[-15 -73 -15 -15] -73]
Test Case:  72 | Input/Output: [[-88 -88 -93 -88] -93]
Test Case:  73 | Input/Output: [[36 36 36 88] 36]
Test Case:  74 | Input/Output: [[65 -38 65 65] -38]
Test Case:  75 | Input/Output: [[52 52 30 52] 30]
Test Case:  76 | Input/Output: [[69 69 69 99] 69]
Test Case:  77 | Input/Output: [[-35 -70 -70 -70] -70]
Test Case:  78 | Input/Output: [[15 15 15 74] 15]
Test Case:  79 | Input/Output: [[15 37 15 15] 15]
Test Case:  80 | Input/Output: [[50 50 -32 50] -32]
Test Case:  81 | Input/Output: [[-70 -70 -70 -29] -70]
Test Case:  82 | Input/Output: [[98 98 -15 98] -15]
Test Case:  83 | Input/Output: [[-57 -57 -57 56] -57]
Test Case:  84 | Input/Output: [[20 17 17 17] 17]
Test Case:  85 | Input/Output: [[-4 -4 -4 -61] -61]
Test Case:  86 | Input/Output: [[-27 -27 -27 43] -27]
Test Case:  87 | Input/Output: [[0 0 7 0] 0]
Test Case:  88 | Input/Output: [[-47 30 -47 -47] -47]
Test Case:  89 | Input/Output: [[-53 -53 -54 -53] -54]
Test Case:  90 | Input/Output: [[94 94 18 94] 18]
Test Case:  91 | Input/Output: [[63 56 63 63] 56]
Test Case:  92 | Input/Output: [[56 56 99 56] 56]
Test Case:  93 | Input/Output: [[98 98 -86 98] -86]
Test Case:  94 | Input/Output: [[87 87 -26 87] -26]
Test Case:  95 | Input/Output: [[-96 -96 -96 -34] -96]
Test Case:  96 | Input/Output: [[-92 -92 7 -92] -92]
Test Case:  97 | Input/Output: [[29 29 -70 29] -70]
Test Case:  98 | Input/Output: [[35 35 -9 35] -9]
Test Case:  99 | Input/Output: [[87 14 87 87] 14]
Test Case: 100 | Input/Output: [(34 34 34 34) 34]
Test Case: 101 | Input/Output: [(40 40 40 40) 40]
Test Case: 102 | Input/Output: [(76 76 76 76) 76]
Test Case: 103 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 104 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 105 | Input/Output: [(21 21 21 21) 21]
Test Case: 106 | Input/Output: [(74 74 74 74) 74]
Test Case: 107 | Input/Output: [(82 82 82 82) 82]
Test Case: 108 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 109 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 110 | Input/Output: [(51 51 51 51) 51]
Test Case: 111 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 112 | Input/Output: [(42 42 42 42) 42]
Test Case: 113 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 114 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 115 | Input/Output: [(84 84 84 84) 84]
Test Case: 116 | Input/Output: [(38 38 38 38) 38]
Test Case: 117 | Input/Output: [(67 67 67 67) 67]
Test Case: 118 | Input/Output: [(17 17 17 17) 17]
Test Case: 119 | Input/Output: [(70 70 70 70) 70]
Test Case: 120 | Input/Output: [(54 54 54 54) 54]
Test Case: 121 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 122 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 123 | Input/Output: [(92 92 92 92) 92]
Test Case: 124 | Input/Output: [(100 100 100 100) 100]
Test Case: 125 | Input/Output: [(6 6 6 6) 6]
Test Case: 126 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 127 | Input/Output: [(23 23 23 23) 23]
Test Case: 128 | Input/Output: [(1 1 1 1) 1]
Test Case: 129 | Input/Output: [(18 18 18 18) 18]
Test Case: 130 | Input/Output: [(78 78 78 78) 78]
Test Case: 131 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 132 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 133 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 134 | Input/Output: [(41 41 41 41) 41]
Test Case: 135 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 136 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 137 | Input/Output: [(37 37 37 37) 37]
Test Case: 138 | Input/Output: [(85 85 85 85) 85]
Test Case: 139 | Input/Output: [(92 92 92 92) 92]
Test Case: 140 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 141 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 142 | Input/Output: [(60 60 60 60) 60]
Test Case: 143 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 144 | Input/Output: [(58 58 58 58) 58]
Test Case: 145 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 146 | Input/Output: [(1 1 1 1) 1]
Test Case: 147 | Input/Output: [(47 47 47 47) 47]
Test Case: 148 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 149 | Input/Output: [(6 6 6 6) 6]
Test Case: 150 | Input/Output: [(20 20 20 20) 20]
Test Case: 151 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 152 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 153 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 154 | Input/Output: [(84 84 84 84) 84]
Test Case: 155 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 156 | Input/Output: [(5 5 5 5) 5]
Test Case: 157 | Input/Output: [(55 55 55 55) 55]
Test Case: 158 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 159 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 160 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 161 | Input/Output: [(36 36 36 36) 36]
Test Case: 162 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 163 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 164 | Input/Output: [(55 55 55 55) 55]
Test Case: 165 | Input/Output: [(90 90 90 90) 90]
Test Case: 166 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 167 | Input/Output: [(98 98 98 98) 98]
Test Case: 168 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 169 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 170 | Input/Output: [(38 38 38 38) 38]
Test Case: 171 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 172 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 173 | Input/Output: [(33 33 33 33) 33]
Test Case: 174 | Input/Output: [(20 20 20 20) 20]
Test Case: 175 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 176 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 177 | Input/Output: [(89 89 89 89) 89]
Test Case: 178 | Input/Output: [(61 61 61 61) 61]
Test Case: 179 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 180 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 181 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 182 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 183 | Input/Output: [(74 74 74 74) 74]
Test Case: 184 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 185 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 186 | Input/Output: [(44 44 44 44) 44]
Test Case: 187 | Input/Output: [(43 43 43 43) 43]
Test Case: 188 | Input/Output: [(96 96 96 96) 96]
Test Case: 189 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 190 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 191 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 192 | Input/Output: [(40 40 40 40) 40]
Test Case: 193 | Input/Output: [(93 93 93 93) 93]
Test Case: 194 | Input/Output: [(72 72 72 72) 72]
Test Case: 195 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 196 | Input/Output: [(28 28 28 28) 28]
Test Case: 197 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 198 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 199 | Input/Output: [(67 67 67 67) 67]
Test Case: 200 | Input/Output: [(26 27 86 24) 24]
Test Case: 201 | Input/Output: [(38 53 60 23) 23]
Test Case: 202 | Input/Output: [(2 59 69 37) 2]
Test Case: 203 | Input/Output: [(84 5 10 45) 5]
Test Case: 204 | Input/Output: [(51 93 85 1) 1]
Test Case: 205 | Input/Output: [(94 48 3 2) 2]
Test Case: 206 | Input/Output: [(85 69 76 95) 69]
Test Case: 207 | Input/Output: [(95 56 98 76) 56]
Test Case: 208 | Input/Output: [(25 57 58 50) 25]
Test Case: 209 | Input/Output: [(16 56 39 72) 16]
Test Case: 210 | Input/Output: [(1 53 100 7) 1]
Test Case: 211 | Input/Output: [(77 29 51 26) 26]
Test Case: 212 | Input/Output: [(96 3 65 87) 3]
Test Case: 213 | Input/Output: [(90 57 33 45) 33]
Test Case: 214 | Input/Output: [(66 71 67 38) 38]
Test Case: 215 | Input/Output: [(34 81 88 69) 34]
Test Case: 216 | Input/Output: [(95 59 91 33) 33]
Test Case: 217 | Input/Output: [(33 93 11 14) 11]
Test Case: 218 | Input/Output: [(67 6 21 31) 6]
Test Case: 219 | Input/Output: [(62 3 45 63) 3]
Test Case: 220 | Input/Output: [(31 41 75 82) 31]
Test Case: 221 | Input/Output: [(84 12 67 100) 12]
Test Case: 222 | Input/Output: [(94 49 57 45) 45]
Test Case: 223 | Input/Output: [(38 79 90 95) 38]
Test Case: 224 | Input/Output: [(82 59 52 91) 52]
Test Case: 225 | Input/Output: [(30 69 38 55) 30]
Test Case: 226 | Input/Output: [(62 38 41 45) 38]
Test Case: 227 | Input/Output: [(52 21 11 63) 11]
Test Case: 228 | Input/Output: [(47 100 61 93) 47]
Test Case: 229 | Input/Output: [(76 37 68 11) 11]
Test Case: 230 | Input/Output: [(93 33 81 70) 33]
Test Case: 231 | Input/Output: [(20 24 24 29) 20]
Test Case: 232 | Input/Output: [(9 65 24 13) 9]
Test Case: 233 | Input/Output: [(84 69 54 47) 47]
Test Case: 234 | Input/Output: [(83 92 50 86) 50]
Test Case: 235 | Input/Output: [(52 92 16 62) 16]
Test Case: 236 | Input/Output: [(97 41 22 77) 22]
Test Case: 237 | Input/Output: [(80 46 64 65) 46]
Test Case: 238 | Input/Output: [(73 45 55 56) 45]
Test Case: 239 | Input/Output: [(19 57 91 91) 19]
Test Case: 240 | Input/Output: [(74 40 59 24) 24]
Test Case: 241 | Input/Output: [(24 80 32 54) 24]
Test Case: 242 | Input/Output: [(5 30 83 22) 5]
Test Case: 243 | Input/Output: [(69 29 27 31) 27]
Test Case: 244 | Input/Output: [(24 31 1 33) 1]
Test Case: 245 | Input/Output: [(88 84 97 77) 77]
Test Case: 246 | Input/Output: [(39 20 26 24) 20]
Test Case: 247 | Input/Output: [(27 42 38 8) 8]
Test Case: 248 | Input/Output: [(57 6 17 51) 6]
Test Case: 249 | Input/Output: [(8 63 28 67) 8]
Test Case: 250 | Input/Output: [(4 10 99 81) 4]
Test Case: 251 | Input/Output: [(53 77 93 45) 45]
Test Case: 252 | Input/Output: [(92 9 28 10) 9]
Test Case: 253 | Input/Output: [(85 64 99 87) 64]
Test Case: 254 | Input/Output: [(75 44 32 48) 32]
Test Case: 255 | Input/Output: [(8 33 61 46) 8]
Test Case: 256 | Input/Output: [(100 92 50 95) 50]
Test Case: 257 | Input/Output: [(41 34 12 99) 12]
Test Case: 258 | Input/Output: [(39 99 42 3) 3]
Test Case: 259 | Input/Output: [(84 12 72 33) 12]
Test Case: 260 | Input/Output: [(51 54 82 81) 51]
Test Case: 261 | Input/Output: [(11 76 65 10) 10]
Test Case: 262 | Input/Output: [(64 99 76 19) 19]
Test Case: 263 | Input/Output: [(83 100 95 63) 63]
Test Case: 264 | Input/Output: [(72 22 27 36) 22]
Test Case: 265 | Input/Output: [(21 79 92 28) 21]
Test Case: 266 | Input/Output: [(11 79 2 67) 2]
Test Case: 267 | Input/Output: [(88 71 1 84) 1]
Test Case: 268 | Input/Output: [(89 4 82 22) 4]
Test Case: 269 | Input/Output: [(86 8 24 42) 8]
Test Case: 270 | Input/Output: [(24 74 34 39) 24]
Test Case: 271 | Input/Output: [(14 9 71 55) 9]
Test Case: 272 | Input/Output: [(60 90 72 52) 52]
Test Case: 273 | Input/Output: [(20 94 14 13) 13]
Test Case: 274 | Input/Output: [(51 53 79 98) 51]
Test Case: 275 | Input/Output: [(84 28 67 10) 10]
Test Case: 276 | Input/Output: [(9 32 22 72) 9]
Test Case: 277 | Input/Output: [(32 53 68 4) 4]
Test Case: 278 | Input/Output: [(41 28 11 10) 10]
Test Case: 279 | Input/Output: [(25 76 43 87) 25]
Test Case: 280 | Input/Output: [(27 27 21 40) 21]
Test Case: 281 | Input/Output: [(98 65 79 8) 8]
Test Case: 282 | Input/Output: [(77 26 58 61) 26]
Test Case: 283 | Input/Output: [(44 73 95 34) 34]
Test Case: 284 | Input/Output: [(53 95 78 0) 0]
Test Case: 285 | Input/Output: [(39 94 12 84) 12]
Test Case: 286 | Input/Output: [(16 63 97 52) 16]
Test Case: 287 | Input/Output: [(3 77 91 58) 3]
Test Case: 288 | Input/Output: [(88 72 41 1) 1]
Test Case: 289 | Input/Output: [(3 27 97 40) 3]
Test Case: 290 | Input/Output: [(47 78 35 79) 35]
Test Case: 291 | Input/Output: [(94 50 12 75) 12]
Test Case: 292 | Input/Output: [(13 8 68 57) 8]
Test Case: 293 | Input/Output: [(32 10 87 59) 10]
Test Case: 294 | Input/Output: [(30 99 49 84) 30]
Test Case: 295 | Input/Output: [(9 51 55 9) 9]
Test Case: 296 | Input/Output: [(74 16 46 43) 16]
Test Case: 297 | Input/Output: [(22 16 6 6) 6]
Test Case: 298 | Input/Output: [(11 12 36 4) 4]
Test Case: 299 | Input/Output: [(5 8 11 34) 5]
Test Case: 300 | Input/Output: [(19 99 69 53) 19]
Test Case: 301 | Input/Output: [(25 65 19 71) 19]
Test Case: 302 | Input/Output: [(97 77 77 19) 19]
Test Case: 303 | Input/Output: [(53 36 35 57) 35]
Test Case: 304 | Input/Output: [(94 27 26 13) 13]
Test Case: 305 | Input/Output: [(46 77 30 82) 30]
Test Case: 306 | Input/Output: [(54 75 69 85) 54]
Test Case: 307 | Input/Output: [(79 20 47 42) 20]
Test Case: 308 | Input/Output: [(78 44 17 63) 17]
Test Case: 309 | Input/Output: [(14 64 89 84) 14]
Test Case: 310 | Input/Output: [(44 5 37 77) 5]
Test Case: 311 | Input/Output: [(30 71 27 92) 27]
Test Case: 312 | Input/Output: [(94 40 78 97) 40]
Test Case: 313 | Input/Output: [(71 42 39 5) 5]
Test Case: 314 | Input/Output: [(57 12 20 20) 12]
Test Case: 315 | Input/Output: [(36 42 23 100) 23]
Test Case: 316 | Input/Output: [(24 18 0 52) 0]
Test Case: 317 | Input/Output: [(99 42 52 48) 42]
Test Case: 318 | Input/Output: [(73 91 72 41) 41]
Test Case: 319 | Input/Output: [(78 40 82 14) 14]
Test Case: 320 | Input/Output: [(87 60 40 34) 34]
Test Case: 321 | Input/Output: [(55 91 6 3) 3]
Test Case: 322 | Input/Output: [(5 49 89 77) 5]
Test Case: 323 | Input/Output: [(64 96 10 69) 10]
Test Case: 324 | Input/Output: [(56 32 70 64) 32]
Test Case: 325 | Input/Output: [(43 66 60 60) 43]
Test Case: 326 | Input/Output: [(30 29 25 22) 22]
Test Case: 327 | Input/Output: [(85 68 83 20) 20]
Test Case: 328 | Input/Output: [(96 38 44 36) 36]
Test Case: 329 | Input/Output: [(22 26 26 37) 22]
Test Case: 330 | Input/Output: [(57 57 100 66) 57]
Test Case: 331 | Input/Output: [(20 53 97 51) 20]
Test Case: 332 | Input/Output: [(70 88 13 49) 13]
Test Case: 333 | Input/Output: [(100 52 43 100) 43]
Test Case: 334 | Input/Output: [(49 42 34 28) 28]
Test Case: 335 | Input/Output: [(72 87 39 55) 39]
Test Case: 336 | Input/Output: [(74 12 40 49) 12]
Test Case: 337 | Input/Output: [(2 89 22 53) 2]
Test Case: 338 | Input/Output: [(14 76 82 67) 14]
Test Case: 339 | Input/Output: [(60 80 77 42) 42]
Test Case: 340 | Input/Output: [(15 49 24 28) 15]
Test Case: 341 | Input/Output: [(60 94 82 9) 9]
Test Case: 342 | Input/Output: [(27 47 1 24) 1]
Test Case: 343 | Input/Output: [(4 12 30 99) 4]
Test Case: 344 | Input/Output: [(30 8 37 55) 8]
Test Case: 345 | Input/Output: [(81 70 31 18) 18]
Test Case: 346 | Input/Output: [(90 29 47 31) 29]
Test Case: 347 | Input/Output: [(27 33 70 5) 5]
Test Case: 348 | Input/Output: [(67 61 18 49) 18]
Test Case: 349 | Input/Output: [(34 0 77 50) 0]
Test Case: 350 | Input/Output: [(11 26 88 59) 11]
Test Case: 351 | Input/Output: [(2 91 4 73) 2]
Test Case: 352 | Input/Output: [(26 62 97 49) 26]
Test Case: 353 | Input/Output: [(20 24 46 59) 20]
Test Case: 354 | Input/Output: [(83 79 75 9) 9]
Test Case: 355 | Input/Output: [(75 48 88 38) 38]
Test Case: 356 | Input/Output: [(59 12 18 48) 12]
Test Case: 357 | Input/Output: [(79 91 3 59) 3]
Test Case: 358 | Input/Output: [(71 44 59 24) 24]
Test Case: 359 | Input/Output: [(55 50 65 20) 20]
Test Case: 360 | Input/Output: [(18 41 43 1) 1]
Test Case: 361 | Input/Output: [(62 18 34 77) 18]
Test Case: 362 | Input/Output: [(75 56 56 54) 54]
Test Case: 363 | Input/Output: [(89 79 58 89) 58]
Test Case: 364 | Input/Output: [(12 54 38 39) 12]
Test Case: 365 | Input/Output: [(19 74 60 64) 19]
Test Case: 366 | Input/Output: [(14 79 28 15) 14]
Test Case: 367 | Input/Output: [(63 49 21 37) 21]
Test Case: 368 | Input/Output: [(43 88 36 92) 36]
Test Case: 369 | Input/Output: [(49 37 11 33) 11]
Test Case: 370 | Input/Output: [(58 62 11 75) 11]
Test Case: 371 | Input/Output: [(19 77 48 42) 19]
Test Case: 372 | Input/Output: [(34 45 40 21) 21]
Test Case: 373 | Input/Output: [(11 28 18 93) 11]
Test Case: 374 | Input/Output: [(88 11 9 64) 9]
Test Case: 375 | Input/Output: [(75 35 38 60) 35]
Test Case: 376 | Input/Output: [(79 48 24 4) 4]
Test Case: 377 | Input/Output: [(86 92 47 30) 30]
Test Case: 378 | Input/Output: [(30 31 0 25) 0]
Test Case: 379 | Input/Output: [(50 92 36 64) 36]
Test Case: 380 | Input/Output: [(42 73 22 94) 22]
Test Case: 381 | Input/Output: [(86 40 30 55) 30]
Test Case: 382 | Input/Output: [(32 94 57 80) 32]
Test Case: 383 | Input/Output: [(100 59 16 34) 16]
Test Case: 384 | Input/Output: [(75 11 82 61) 11]
Test Case: 385 | Input/Output: [(67 78 41 93) 41]
Test Case: 386 | Input/Output: [(89 27 21 88) 21]
Test Case: 387 | Input/Output: [(21 29 69 55) 21]
Test Case: 388 | Input/Output: [(61 18 84 98) 18]
Test Case: 389 | Input/Output: [(83 50 64 50) 50]
Test Case: 390 | Input/Output: [(85 60 37 37) 37]
Test Case: 391 | Input/Output: [(62 99 21 60) 21]
Test Case: 392 | Input/Output: [(35 70 95 46) 35]
Test Case: 393 | Input/Output: [(81 63 32 95) 32]
Test Case: 394 | Input/Output: [(22 93 7 0) 0]
Test Case: 395 | Input/Output: [(55 76 35 65) 35]
Test Case: 396 | Input/Output: [(61 22 45 92) 22]
Test Case: 397 | Input/Output: [(68 27 89 58) 27]
Test Case: 398 | Input/Output: [(1 7 52 65) 1]
Test Case: 399 | Input/Output: [(23 18 79 46) 18]
Test Case: 400 | Input/Output: [(-39 -2 -45 92) -45]
Test Case: 401 | Input/Output: [(5 -90 -63 40) -90]
Test Case: 402 | Input/Output: [(-57 -25 -47 86) -57]
Test Case: 403 | Input/Output: [(61 -94 -20 -77) -94]
Test Case: 404 | Input/Output: [(31 7 -1 -95) -95]
Test Case: 405 | Input/Output: [(-6 -52 -54 -60) -60]
Test Case: 406 | Input/Output: [(-3 -52 94 -28) -52]
Test Case: 407 | Input/Output: [(-33 -81 0 31) -81]
Test Case: 408 | Input/Output: [(40 71 48 31) 31]
Test Case: 409 | Input/Output: [(-52 -23 -3 20) -52]
Test Case: 410 | Input/Output: [(100 -84 38 -77) -84]
Test Case: 411 | Input/Output: [(47 18 -54 -14) -54]
Test Case: 412 | Input/Output: [(-37 52 -31 -48) -48]
Test Case: 413 | Input/Output: [(24 15 -96 -47) -96]
Test Case: 414 | Input/Output: [(-48 -57 -77 -48) -77]
Test Case: 415 | Input/Output: [(-92 7 -31 -1) -92]
Test Case: 416 | Input/Output: [(100 -100 96 -6) -100]
Test Case: 417 | Input/Output: [(67 17 80 -60) -60]
Test Case: 418 | Input/Output: [(60 49 31 -11) -11]
Test Case: 419 | Input/Output: [(5 50 64 -94) -94]
Test Case: 420 | Input/Output: [(-47 82 -44 85) -47]
Test Case: 421 | Input/Output: [(18 89 -94 -48) -94]
Test Case: 422 | Input/Output: [(88 -10 41 70) -10]
Test Case: 423 | Input/Output: [(91 18 83 -4) -4]
Test Case: 424 | Input/Output: [(-49 -76 -97 70) -97]
Test Case: 425 | Input/Output: [(-40 75 6 -46) -46]
Test Case: 426 | Input/Output: [(85 -14 64 -12) -14]
Test Case: 427 | Input/Output: [(-73 -79 -14 92) -79]
Test Case: 428 | Input/Output: [(-45 -98 20 -33) -98]
Test Case: 429 | Input/Output: [(20 61 65 45) 20]
Test Case: 430 | Input/Output: [(44 56 14 -57) -57]
Test Case: 431 | Input/Output: [(1 -53 -37 43) -53]
Test Case: 432 | Input/Output: [(-88 -8 -34 55) -88]
Test Case: 433 | Input/Output: [(96 89 30 -100) -100]
Test Case: 434 | Input/Output: [(89 51 92 -69) -69]
Test Case: 435 | Input/Output: [(-60 67 74 100) -60]
Test Case: 436 | Input/Output: [(-19 -36 49 -60) -60]
Test Case: 437 | Input/Output: [(-49 97 -45 51) -49]
Test Case: 438 | Input/Output: [(26 49 57 27) 26]
Test Case: 439 | Input/Output: [(66 -87 0 5) -87]
Test Case: 440 | Input/Output: [(-72 55 -41 14) -72]
Test Case: 441 | Input/Output: [(-7 1 60 75) -7]
Test Case: 442 | Input/Output: [(-43 48 -67 -67) -67]
Test Case: 443 | Input/Output: [(-10 54 59 43) -10]
Test Case: 444 | Input/Output: [(33 86 26 19) 19]
Test Case: 445 | Input/Output: [(-73 -7 98 40) -73]
Test Case: 446 | Input/Output: [(-33 78 15 62) -33]
Test Case: 447 | Input/Output: [(-51 50 17 13) -51]
Test Case: 448 | Input/Output: [(4 77 31 27) 4]
Test Case: 449 | Input/Output: [(-44 14 -9 -89) -89]
Test Case: 450 | Input/Output: [(-92 -3 -57 -97) -97]
Test Case: 451 | Input/Output: [(-39 59 -80 49) -80]
Test Case: 452 | Input/Output: [(69 28 63 20) 20]
Test Case: 453 | Input/Output: [(-38 -29 -97 -5) -97]
Test Case: 454 | Input/Output: [(96 -34 -6 -55) -55]
Test Case: 455 | Input/Output: [(41 -79 51 78) -79]
Test Case: 456 | Input/Output: [(-97 -84 -71 -35) -97]
Test Case: 457 | Input/Output: [(29 31 -23 -40) -40]
Test Case: 458 | Input/Output: [(-9 53 43 -6) -9]
Test Case: 459 | Input/Output: [(-61 64 25 53) -61]
Test Case: 460 | Input/Output: [(10 17 80 -39) -39]
Test Case: 461 | Input/Output: [(-90 28 53 40) -90]
Test Case: 462 | Input/Output: [(-21 20 100 -68) -68]
Test Case: 463 | Input/Output: [(-69 -57 85 28) -69]
Test Case: 464 | Input/Output: [(-7 84 -97 -89) -97]
Test Case: 465 | Input/Output: [(71 14 -17 19) -17]
Test Case: 466 | Input/Output: [(75 86 23 87) 23]
Test Case: 467 | Input/Output: [(-82 21 -50 66) -82]
Test Case: 468 | Input/Output: [(31 11 6 96) 6]
Test Case: 469 | Input/Output: [(-75 69 -91 99) -91]
Test Case: 470 | Input/Output: [(46 -82 -49 84) -82]
Test Case: 471 | Input/Output: [(31 47 -16 -75) -75]
Test Case: 472 | Input/Output: [(-67 31 56 75) -67]
Test Case: 473 | Input/Output: [(72 40 82 60) 40]
Test Case: 474 | Input/Output: [(-1 79 72 -67) -67]
Test Case: 475 | Input/Output: [(48 100 -27 -88) -88]
Test Case: 476 | Input/Output: [(5 -18 -71 -62) -71]
Test Case: 477 | Input/Output: [(2 -84 -79 -9) -84]
Test Case: 478 | Input/Output: [(73 54 -29 -12) -29]
Test Case: 479 | Input/Output: [(-35 71 74 -2) -35]
Test Case: 480 | Input/Output: [(13 -38 45 32) -38]
Test Case: 481 | Input/Output: [(-36 -58 20 -12) -58]
Test Case: 482 | Input/Output: [(-55 -87 69 -19) -87]
Test Case: 483 | Input/Output: [(8 96 -33 -24) -33]
Test Case: 484 | Input/Output: [(36 80 -79 45) -79]
Test Case: 485 | Input/Output: [(57 69 65 48) 48]
Test Case: 486 | Input/Output: [(-98 -35 94 82) -98]
Test Case: 487 | Input/Output: [(23 44 90 58) 23]
Test Case: 488 | Input/Output: [(-14 50 43 -45) -45]
Test Case: 489 | Input/Output: [(71 71 19 -59) -59]
Test Case: 490 | Input/Output: [(-51 -39 -44 21) -51]
Test Case: 491 | Input/Output: [(-66 75 -15 53) -66]
Test Case: 492 | Input/Output: [(-91 -93 26 49) -93]
Test Case: 493 | Input/Output: [(-1 -97 59 41) -97]
Test Case: 494 | Input/Output: [(-57 -44 -35 72) -57]
Test Case: 495 | Input/Output: [(13 84 93 14) 13]
Test Case: 496 | Input/Output: [(-80 -76 -8 23) -80]
Test Case: 497 | Input/Output: [(86 -31 27 -29) -31]
Test Case: 498 | Input/Output: [(18 -64 -17 -39) -64]
Test Case: 499 | Input/Output: [(84 -44 -56 -7) -56]
Test Case: 500 | Input/Output: [(67 85 -97 87) -97]
Test Case: 501 | Input/Output: [(92 -52 -38 43) -52]
Test Case: 502 | Input/Output: [(-89 18 10 59) -89]
Test Case: 503 | Input/Output: [(75 -25 -8 68) -25]
Test Case: 504 | Input/Output: [(-80 -42 11 3) -80]
Test Case: 505 | Input/Output: [(-89 -49 -75 -88) -89]
Test Case: 506 | Input/Output: [(-35 -74 -31 46) -74]
Test Case: 507 | Input/Output: [(-85 3 -95 50) -95]
Test Case: 508 | Input/Output: [(-14 31 32 36) -14]
Test Case: 509 | Input/Output: [(-3 -96 -39 64) -96]
Test Case: 510 | Input/Output: [(62 -78 66 -93) -93]
Test Case: 511 | Input/Output: [(-37 -57 -67 30) -67]
Test Case: 512 | Input/Output: [(-94 63 -35 -63) -94]
Test Case: 513 | Input/Output: [(-58 -35 -65 -11) -65]
Test Case: 514 | Input/Output: [(-59 -8 30 -82) -82]
Test Case: 515 | Input/Output: [(68 30 -81 -98) -98]
Test Case: 516 | Input/Output: [(-24 34 95 0) -24]
Test Case: 517 | Input/Output: [(57 62 4 -51) -51]
Test Case: 518 | Input/Output: [(2 -72 -99 -83) -99]
Test Case: 519 | Input/Output: [(-29 3 -66 74) -66]
Test Case: 520 | Input/Output: [(74 -40 43 94) -40]
Test Case: 521 | Input/Output: [(60 -33 56 -100) -100]
Test Case: 522 | Input/Output: [(-71 37 44 -66) -71]
Test Case: 523 | Input/Output: [(-18 50 -97 74) -97]
Test Case: 524 | Input/Output: [(-44 59 -39 -73) -73]
Test Case: 525 | Input/Output: [(-85 15 -97 -46) -97]
Test Case: 526 | Input/Output: [(89 22 -1 -37) -37]
Test Case: 527 | Input/Output: [(95 5 -7 12) -7]
Test Case: 528 | Input/Output: [(65 72 1 47) 1]
Test Case: 529 | Input/Output: [(-21 29 -81 64) -81]
Test Case: 530 | Input/Output: [(95 -5 -91 25) -91]
Test Case: 531 | Input/Output: [(-37 -97 60 88) -97]
Test Case: 532 | Input/Output: [(-100 -22 -8 63) -100]
Test Case: 533 | Input/Output: [(56 -38 9 30) -38]
Test Case: 534 | Input/Output: [(-79 77 -37 -3) -79]
Test Case: 535 | Input/Output: [(99 -34 94 70) -34]
Test Case: 536 | Input/Output: [(-49 -59 -9 51) -59]
Test Case: 537 | Input/Output: [(62 35 35 -13) -13]
Test Case: 538 | Input/Output: [(-74 90 48 -40) -74]
Test Case: 539 | Input/Output: [(15 -31 -79 -36) -79]
Test Case: 540 | Input/Output: [(1 70 -25 -67) -67]
Test Case: 541 | Input/Output: [(93 70 -38 22) -38]
Test Case: 542 | Input/Output: [(5 -18 76 -2) -18]
Test Case: 543 | Input/Output: [(63 -67 -46 -97) -97]
Test Case: 544 | Input/Output: [(-54 -79 -33 13) -79]
Test Case: 545 | Input/Output: [(-59 -73 -21 -32) -73]
Test Case: 546 | Input/Output: [(-32 90 -8 -64) -64]
Test Case: 547 | Input/Output: [(6 63 -52 -46) -52]
Test Case: 548 | Input/Output: [(47 84 88 -59) -59]
Test Case: 549 | Input/Output: [(-22 54 53 72) -22]
Test Case: 550 | Input/Output: [(-64 -48 46 -5) -64]
Test Case: 551 | Input/Output: [(-79 -21 57 30) -79]
Test Case: 552 | Input/Output: [(87 -17 86 84) -17]
Test Case: 553 | Input/Output: [(-97 -94 33 100) -97]
Test Case: 554 | Input/Output: [(-56 -21 -6 94) -56]
Test Case: 555 | Input/Output: [(-37 -68 74 79) -68]
Test Case: 556 | Input/Output: [(30 21 -96 -76) -96]
Test Case: 557 | Input/Output: [(63 96 98 -51) -51]
Test Case: 558 | Input/Output: [(-47 3 -29 26) -47]
Test Case: 559 | Input/Output: [(30 46 -95 19) -95]
Test Case: 560 | Input/Output: [(1 -30 -83 78) -83]
Test Case: 561 | Input/Output: [(-68 -4 73 1) -68]
Test Case: 562 | Input/Output: [(85 75 -41 65) -41]
Test Case: 563 | Input/Output: [(99 73 77 89) 73]
Test Case: 564 | Input/Output: [(-9 44 45 -16) -16]
Test Case: 565 | Input/Output: [(-86 -12 75 -52) -86]
Test Case: 566 | Input/Output: [(21 -23 82 77) -23]
Test Case: 567 | Input/Output: [(-5 0 10 -36) -36]
Test Case: 568 | Input/Output: [(-81 41 -19 28) -81]
Test Case: 569 | Input/Output: [(-50 41 59 7) -50]
Test Case: 570 | Input/Output: [(0 -46 -73 -45) -73]
Test Case: 571 | Input/Output: [(26 -97 7 73) -97]
Test Case: 572 | Input/Output: [(63 -12 -88 -18) -88]
Test Case: 573 | Input/Output: [(23 100 85 -97) -97]
Test Case: 574 | Input/Output: [(90 47 55 46) 46]
Test Case: 575 | Input/Output: [(8 29 -14 44) -14]
Test Case: 576 | Input/Output: [(51 -41 -90 -46) -90]
Test Case: 577 | Input/Output: [(0 -51 4 -45) -51]
Test Case: 578 | Input/Output: [(7 -32 95 95) -32]
Test Case: 579 | Input/Output: [(53 68 49 -35) -35]
Test Case: 580 | Input/Output: [(81 -42 89 49) -42]
Test Case: 581 | Input/Output: [(19 38 38 -83) -83]
Test Case: 582 | Input/Output: [(5 -70 49 -100) -100]
Test Case: 583 | Input/Output: [(58 39 1 43) 1]
Test Case: 584 | Input/Output: [(-71 53 -27 74) -71]
Test Case: 585 | Input/Output: [(13 13 -78 -16) -78]
Test Case: 586 | Input/Output: [(-83 50 67 -37) -83]
Test Case: 587 | Input/Output: [(-59 71 -37 -85) -85]
Test Case: 588 | Input/Output: [(32 15 -62 97) -62]
Test Case: 589 | Input/Output: [(-80 -84 -70 -84) -84]
Test Case: 590 | Input/Output: [(15 -43 48 83) -43]
Test Case: 591 | Input/Output: [(-90 -45 40 19) -90]
Test Case: 592 | Input/Output: [(-14 70 -84 12) -84]
Test Case: 593 | Input/Output: [(-57 89 -4 -83) -83]
Test Case: 594 | Input/Output: [(2 -88 2 -61) -88]
Test Case: 595 | Input/Output: [(34 39 85 -58) -58]
Test Case: 596 | Input/Output: [(-22 66 1 89) -22]
Test Case: 597 | Input/Output: [(91 -54 29 54) -54]
Test Case: 598 | Input/Output: [(-30 27 -54 5) -54]
Test Case: 599 | Input/Output: [(-49 40 74 33) -49]
Test Case: 600 | Input/Output: [(-80 83 -96 35) -96]
Test Case: 601 | Input/Output: [(-82 25 -48 -90) -90]
Test Case: 602 | Input/Output: [(57 -7 68 -46) -46]
Test Case: 603 | Input/Output: [(63 -12 -31 -65) -65]
Test Case: 604 | Input/Output: [(100 33 19 55) 19]
Test Case: 605 | Input/Output: [(-93 -83 -3 63) -93]
Test Case: 606 | Input/Output: [(93 -41 43 76) -41]
Test Case: 607 | Input/Output: [(-10 -93 -74 21) -93]
Test Case: 608 | Input/Output: [(-30 -66 28 47) -66]
Test Case: 609 | Input/Output: [(-44 85 11 -10) -44]
Test Case: 610 | Input/Output: [(76 20 24 57) 20]
Test Case: 611 | Input/Output: [(39 -32 -37 28) -37]
Test Case: 612 | Input/Output: [(-60 92 91 -83) -83]
Test Case: 613 | Input/Output: [(76 91 -97 63) -97]
Test Case: 614 | Input/Output: [(64 29 -69 99) -69]
Test Case: 615 | Input/Output: [(-79 39 -86 -48) -86]
Test Case: 616 | Input/Output: [(92 -22 -26 67) -26]
Test Case: 617 | Input/Output: [(99 60 -46 -45) -46]
Test Case: 618 | Input/Output: [(17 -64 -61 57) -64]
Test Case: 619 | Input/Output: [(-86 -45 27 3) -86]
Test Case: 620 | Input/Output: [(66 65 42 -14) -14]
Test Case: 621 | Input/Output: [(79 -98 -19 -59) -98]
Test Case: 622 | Input/Output: [(-90 42 -53 -98) -98]
Test Case: 623 | Input/Output: [(-9 78 66 -56) -56]
Test Case: 624 | Input/Output: [(87 32 22 -37) -37]
Test Case: 625 | Input/Output: [(45 -69 20 -53) -69]
Test Case: 626 | Input/Output: [(4 -73 77 36) -73]
Test Case: 627 | Input/Output: [(78 -7 25 52) -7]
Test Case: 628 | Input/Output: [(-34 -47 -35 18) -47]
Test Case: 629 | Input/Output: [(-100 13 31 71) -100]
Test Case: 630 | Input/Output: [(98 -8 41 95) -8]
Test Case: 631 | Input/Output: [(-51 -82 6 -21) -82]
Test Case: 632 | Input/Output: [(55 -46 22 22) -46]
Test Case: 633 | Input/Output: [(39 -83 -78 94) -83]
Test Case: 634 | Input/Output: [(-32 25 81 -68) -68]
Test Case: 635 | Input/Output: [(-83 25 66 -35) -83]
Test Case: 636 | Input/Output: [(70 -28 -87 46) -87]
Test Case: 637 | Input/Output: [(60 63 17 -66) -66]
Test Case: 638 | Input/Output: [(-36 76 -4 -82) -82]
Test Case: 639 | Input/Output: [(-56 25 25 -62) -62]
Test Case: 640 | Input/Output: [(-31 -30 -86 57) -86]
Test Case: 641 | Input/Output: [(4 73 -64 63) -64]
Test Case: 642 | Input/Output: [(-87 -28 75 -89) -89]
Test Case: 643 | Input/Output: [(-69 -86 -43 38) -86]
Test Case: 644 | Input/Output: [(-67 -96 -77 -6) -96]
Test Case: 645 | Input/Output: [(3 10 -78 23) -78]
Test Case: 646 | Input/Output: [(82 -8 -44 66) -44]
Test Case: 647 | Input/Output: [(12 47 10 -11) -11]
Test Case: 648 | Input/Output: [(49 -14 29 65) -14]
Test Case: 649 | Input/Output: [(13 -44 32 -83) -83]
Test Case: 650 | Input/Output: [(68 -89 -90 26) -90]
Test Case: 651 | Input/Output: [(81 -29 -59 57) -59]
Test Case: 652 | Input/Output: [(33 -62 -45 -59) -62]
Test Case: 653 | Input/Output: [(-3 21 -37 -40) -40]
Test Case: 654 | Input/Output: [(-13 -56 -4 78) -56]
Test Case: 655 | Input/Output: [(-40 -37 88 -71) -71]
Test Case: 656 | Input/Output: [(15 -14 -78 94) -78]
Test Case: 657 | Input/Output: [(83 18 7 -21) -21]
Test Case: 658 | Input/Output: [(33 29 -6 -30) -30]
Test Case: 659 | Input/Output: [(15 -35 -73 21) -73]
Test Case: 660 | Input/Output: [(-82 -3 6 -59) -82]
Test Case: 661 | Input/Output: [(12 85 16 11) 11]
Test Case: 662 | Input/Output: [(86 10 50 -4) -4]
Test Case: 663 | Input/Output: [(20 81 -12 49) -12]
Test Case: 664 | Input/Output: [(89 97 -19 34) -19]
Test Case: 665 | Input/Output: [(48 1 53 52) 1]
Test Case: 666 | Input/Output: [(7 19 11 91) 7]
Test Case: 667 | Input/Output: [(95 -32 -33 -81) -81]
Test Case: 668 | Input/Output: [(45 -61 76 -26) -61]
Test Case: 669 | Input/Output: [(-27 91 26 -51) -51]
Test Case: 670 | Input/Output: [(-62 -94 -6 -40) -94]
Test Case: 671 | Input/Output: [(-69 22 -88 46) -88]
Test Case: 672 | Input/Output: [(-62 82 -37 37) -62]
Test Case: 673 | Input/Output: [(41 89 73 -29) -29]
Test Case: 674 | Input/Output: [(64 44 -58 -82) -82]
Test Case: 675 | Input/Output: [(89 48 31 -78) -78]
Test Case: 676 | Input/Output: [(47 1 98 36) 1]
Test Case: 677 | Input/Output: [(-97 -80 68 91) -97]
Test Case: 678 | Input/Output: [(-4 -23 2 -86) -86]
Test Case: 679 | Input/Output: [(67 55 31 -21) -21]
Test Case: 680 | Input/Output: [(-20 -68 32 65) -68]
Test Case: 681 | Input/Output: [(-18 38 94 91) -18]
Test Case: 682 | Input/Output: [(22 4 100 -23) -23]
Test Case: 683 | Input/Output: [(67 35 -90 -78) -90]
Test Case: 684 | Input/Output: [(-81 -19 -35 -43) -81]
Test Case: 685 | Input/Output: [(-50 99 -73 51) -73]
Test Case: 686 | Input/Output: [(-58 -76 -59 28) -76]
Test Case: 687 | Input/Output: [(-24 43 -73 20) -73]
Test Case: 688 | Input/Output: [(47 87 -46 23) -46]
Test Case: 689 | Input/Output: [(24 74 21 8) 8]
Test Case: 690 | Input/Output: [(57 -81 -20 -76) -81]
Test Case: 691 | Input/Output: [(-89 66 65 -14) -89]
Test Case: 692 | Input/Output: [(28 -35 14 7) -35]
Test Case: 693 | Input/Output: [(48 41 73 87) 41]
Test Case: 694 | Input/Output: [(-67 -20 91 -88) -88]
Test Case: 695 | Input/Output: [(24 0 -97 -29) -97]
Test Case: 696 | Input/Output: [(-2 -47 3 -30) -47]
Test Case: 697 | Input/Output: [(93 -7 -48 -14) -48]
Test Case: 698 | Input/Output: [(37 -59 -40 -20) -59]
Test Case: 699 | Input/Output: [(-64 -99 -46 90) -99]
Test Case: 700 | Input/Output: [(-98 52 -2 51) -98]
Test Case: 701 | Input/Output: [(73 -60 -76 -98) -98]
Test Case: 702 | Input/Output: [(-51 90 82 53) -51]
Test Case: 703 | Input/Output: [(-98 -62 -18 -2) -98]
Test Case: 704 | Input/Output: [(-28 -84 -52 14) -84]
Test Case: 705 | Input/Output: [(5 51 85 63) 5]
Test Case: 706 | Input/Output: [(-92 22 -21 -8) -92]
Test Case: 707 | Input/Output: [(-89 -76 -24 -74) -89]
Test Case: 708 | Input/Output: [(-65 90 85 -48) -65]
Test Case: 709 | Input/Output: [(80 -8 69 -33) -33]
Test Case: 710 | Input/Output: [(73 -11 41 -58) -58]
Test Case: 711 | Input/Output: [(-16 40 62 35) -16]
Test Case: 712 | Input/Output: [(90 46 68 -44) -44]
Test Case: 713 | Input/Output: [(57 -56 -55 -18) -56]
Test Case: 714 | Input/Output: [(65 76 62 78) 62]
Test Case: 715 | Input/Output: [(-89 71 45 68) -89]
Test Case: 716 | Input/Output: [(69 49 -4 17) -4]
Test Case: 717 | Input/Output: [(-74 31 68 -32) -74]
Test Case: 718 | Input/Output: [(30 -27 -5 -29) -29]
Test Case: 719 | Input/Output: [(-76 -71 9 -33) -76]
Test Case: 720 | Input/Output: [(-75 6 -65 -57) -75]
Test Case: 721 | Input/Output: [(82 -41 -19 -42) -42]
Test Case: 722 | Input/Output: [(9 -26 -54 37) -54]
Test Case: 723 | Input/Output: [(1 21 25 -96) -96]
Test Case: 724 | Input/Output: [(-98 -5 2 14) -98]
Test Case: 725 | Input/Output: [(55 45 82 75) 45]
Test Case: 726 | Input/Output: [(11 29 -68 -64) -68]
Test Case: 727 | Input/Output: [(-1 -47 20 -18) -47]
Test Case: 728 | Input/Output: [(23 -33 -21 -70) -70]
Test Case: 729 | Input/Output: [(95 63 87 54) 54]
Test Case: 730 | Input/Output: [(83 18 -58 -20) -58]
Test Case: 731 | Input/Output: [(53 23 -72 71) -72]
Test Case: 732 | Input/Output: [(-67 7 47 2) -67]
Test Case: 733 | Input/Output: [(29 14 -14 100) -14]
Test Case: 734 | Input/Output: [(-89 84 56 -20) -89]
Test Case: 735 | Input/Output: [(58 60 -2 46) -2]
Test Case: 736 | Input/Output: [(52 -66 36 21) -66]
Test Case: 737 | Input/Output: [(-82 -46 -43 -56) -82]
Test Case: 738 | Input/Output: [(-11 27 -33 56) -33]
Test Case: 739 | Input/Output: [(31 -18 23 -78) -78]
Test Case: 740 | Input/Output: [(6 45 98 -26) -26]
Test Case: 741 | Input/Output: [(66 -2 -12 -67) -67]
Test Case: 742 | Input/Output: [(36 55 94 -8) -8]
Test Case: 743 | Input/Output: [(89 89 73 -63) -63]
Test Case: 744 | Input/Output: [(-4 -17 29 -93) -93]
Test Case: 745 | Input/Output: [(-20 44 35 67) -20]
Test Case: 746 | Input/Output: [(18 10 -67 4) -67]
Test Case: 747 | Input/Output: [(81 -64 19 7) -64]
Test Case: 748 | Input/Output: [(-24 14 55 -7) -24]
Test Case: 749 | Input/Output: [(-95 16 -48 76) -95]
Test Case: 750 | Input/Output: [(99 -19 -19 -58) -58]
Test Case: 751 | Input/Output: [(61 -35 72 37) -35]
Test Case: 752 | Input/Output: [(43 78 24 -59) -59]
Test Case: 753 | Input/Output: [(-98 -24 16 -79) -98]
Test Case: 754 | Input/Output: [(-77 74 30 -69) -77]
Test Case: 755 | Input/Output: [(-77 -97 92 -89) -97]
Test Case: 756 | Input/Output: [(-15 -93 26 79) -93]
Test Case: 757 | Input/Output: [(52 -81 75 47) -81]
Test Case: 758 | Input/Output: [(86 16 -63 85) -63]
Test Case: 759 | Input/Output: [(47 57 -11 99) -11]
Test Case: 760 | Input/Output: [(23 -46 -20 45) -46]
Test Case: 761 | Input/Output: [(16 47 -67 86) -67]
Test Case: 762 | Input/Output: [(-19 -70 -49 -75) -75]
Test Case: 763 | Input/Output: [(-98 -33 -17 -86) -98]
Test Case: 764 | Input/Output: [(79 30 -25 -45) -45]
Test Case: 765 | Input/Output: [(17 97 81 80) 17]
Test Case: 766 | Input/Output: [(-48 52 -50 -61) -61]
Test Case: 767 | Input/Output: [(70 87 -66 56) -66]
Test Case: 768 | Input/Output: [(-28 -1 -49 48) -49]
Test Case: 769 | Input/Output: [(37 -54 -21 -12) -54]
Test Case: 770 | Input/Output: [(-95 14 -4 -36) -95]
Test Case: 771 | Input/Output: [(-83 50 -23 95) -83]
Test Case: 772 | Input/Output: [(-18 58 18 -25) -25]
Test Case: 773 | Input/Output: [(-60 -51 -1 85) -60]
Test Case: 774 | Input/Output: [(-83 30 41 21) -83]
Test Case: 775 | Input/Output: [(-100 32 -87 56) -100]
Test Case: 776 | Input/Output: [(-2 -91 3 61) -91]
Test Case: 777 | Input/Output: [(75 -58 86 -72) -72]
Test Case: 778 | Input/Output: [(-33 -50 62 -55) -55]
Test Case: 779 | Input/Output: [(-33 94 -8 73) -33]
Test Case: 780 | Input/Output: [(12 -55 18 63) -55]
Test Case: 781 | Input/Output: [(88 14 44 73) 14]
Test Case: 782 | Input/Output: [(-95 77 -21 51) -95]
Test Case: 783 | Input/Output: [(32 70 90 -31) -31]
Test Case: 784 | Input/Output: [(-70 -64 -23 -63) -70]
Test Case: 785 | Input/Output: [(-22 96 5 1) -22]
Test Case: 786 | Input/Output: [(-70 -24 36 60) -70]
Test Case: 787 | Input/Output: [(71 31 15 50) 15]
Test Case: 788 | Input/Output: [(-40 57 -30 31) -40]
Test Case: 789 | Input/Output: [(82 -23 -30 -2) -30]
Test Case: 790 | Input/Output: [(28 20 53 -5) -5]
Test Case: 791 | Input/Output: [(12 -91 33 13) -91]
Test Case: 792 | Input/Output: [(-44 -65 -31 -51) -65]
Test Case: 793 | Input/Output: [(89 57 7 -39) -39]
Test Case: 794 | Input/Output: [(-22 2 2 -40) -40]
Test Case: 795 | Input/Output: [(-12 -21 -91 -72) -91]
Test Case: 796 | Input/Output: [(10 -1 -77 30) -77]
Test Case: 797 | Input/Output: [(-75 -35 70 66) -75]
Test Case: 798 | Input/Output: [(-37 -49 -93 79) -93]
Test Case: 799 | Input/Output: [(17 -40 22 60) -40]
Test Case: 800 | Input/Output: [(-31 57 85 -26) -31]
Test Case: 801 | Input/Output: [(18 -10 -31 -21) -31]
Test Case: 802 | Input/Output: [(-38 -76 -44 -15) -76]
Test Case: 803 | Input/Output: [(73 -6 -15 24) -15]
Test Case: 804 | Input/Output: [(89 77 -39 -99) -99]
Test Case: 805 | Input/Output: [(-58 100 -91 -82) -91]
Test Case: 806 | Input/Output: [(74 57 20 -59) -59]
Test Case: 807 | Input/Output: [(-46 88 68 27) -46]
Test Case: 808 | Input/Output: [(48 -72 -21 57) -72]
Test Case: 809 | Input/Output: [(-70 6 -53 89) -70]
Test Case: 810 | Input/Output: [(-22 26 -81 12) -81]
Test Case: 811 | Input/Output: [(-17 -76 80 -10) -76]
Test Case: 812 | Input/Output: [(81 57 -49 98) -49]
Test Case: 813 | Input/Output: [(63 66 -66 4) -66]
Test Case: 814 | Input/Output: [(-69 -37 42 91) -69]
Test Case: 815 | Input/Output: [(95 56 -79 -71) -79]
Test Case: 816 | Input/Output: [(-66 -68 98 -48) -68]
Test Case: 817 | Input/Output: [(-76 -89 -54 87) -89]
Test Case: 818 | Input/Output: [(53 95 12 -24) -24]
Test Case: 819 | Input/Output: [(37 47 64 70) 37]
Test Case: 820 | Input/Output: [(-23 -92 -76 -10) -92]
Test Case: 821 | Input/Output: [(-15 54 24 -25) -25]
Test Case: 822 | Input/Output: [(43 86 83 -86) -86]
Test Case: 823 | Input/Output: [(84 82 67 62) 62]
Test Case: 824 | Input/Output: [(-62 -14 -86 -22) -86]
Test Case: 825 | Input/Output: [(-4 -91 -68 74) -91]
Test Case: 826 | Input/Output: [(-4 -17 -96 -54) -96]
Test Case: 827 | Input/Output: [(-57 -64 -44 49) -64]
Test Case: 828 | Input/Output: [(-40 5 47 55) -40]
Test Case: 829 | Input/Output: [(-6 79 -26 91) -26]
Test Case: 830 | Input/Output: [(42 -94 -61 -49) -94]
Test Case: 831 | Input/Output: [(3 -81 -65 58) -81]
Test Case: 832 | Input/Output: [(-13 49 83 51) -13]
Test Case: 833 | Input/Output: [(-96 10 -92 -93) -96]
Test Case: 834 | Input/Output: [(-26 -68 62 -27) -68]
Test Case: 835 | Input/Output: [(-81 -76 -96 23) -96]
Test Case: 836 | Input/Output: [(67 -56 0 -13) -56]
Test Case: 837 | Input/Output: [(-87 -92 87 -98) -98]
Test Case: 838 | Input/Output: [(-86 -76 -40 -22) -86]
Test Case: 839 | Input/Output: [(-22 -10 19 76) -22]
Test Case: 840 | Input/Output: [(-60 -44 73 52) -60]
Test Case: 841 | Input/Output: [(38 76 -31 -56) -56]
Test Case: 842 | Input/Output: [(41 -24 -11 -67) -67]
Test Case: 843 | Input/Output: [(-18 -94 -16 -65) -94]
Test Case: 844 | Input/Output: [(33 -85 -11 -64) -85]
Test Case: 845 | Input/Output: [(-5 67 54 -11) -11]
Test Case: 846 | Input/Output: [(11 42 -55 94) -55]
Test Case: 847 | Input/Output: [(89 -14 37 -33) -33]
Test Case: 848 | Input/Output: [(63 80 93 -16) -16]
Test Case: 849 | Input/Output: [(-92 -3 -90 74) -92]
Test Case: 850 | Input/Output: [(34 -22 -61 58) -61]
Test Case: 851 | Input/Output: [(-83 46 -23 46) -83]
Test Case: 852 | Input/Output: [(-54 -43 29 64) -54]
Test Case: 853 | Input/Output: [(93 100 -49 60) -49]
Test Case: 854 | Input/Output: [(-75 -19 -7 85) -75]
Test Case: 855 | Input/Output: [(-68 -41 -70 -4) -70]
Test Case: 856 | Input/Output: [(-58 52 78 -96) -96]
Test Case: 857 | Input/Output: [(-52 90 68 -4) -52]
Test Case: 858 | Input/Output: [(-61 9 -96 -74) -96]
Test Case: 859 | Input/Output: [(-2 -72 55 17) -72]
Test Case: 860 | Input/Output: [(28 46 -50 -17) -50]
Test Case: 861 | Input/Output: [(-53 79 4 -17) -53]
Test Case: 862 | Input/Output: [(-80 6 54 -88) -88]
Test Case: 863 | Input/Output: [(-94 26 61 -87) -94]
Test Case: 864 | Input/Output: [(71 -32 -39 -27) -39]
Test Case: 865 | Input/Output: [(50 -20 44 -83) -83]
Test Case: 866 | Input/Output: [(71 -59 -95 -89) -95]
Test Case: 867 | Input/Output: [(-96 97 9 -57) -96]
Test Case: 868 | Input/Output: [(39 1 -82 -23) -82]
Test Case: 869 | Input/Output: [(-6 95 21 -25) -25]
Test Case: 870 | Input/Output: [(84 60 94 -11) -11]
Test Case: 871 | Input/Output: [(6 91 2 -97) -97]
Test Case: 872 | Input/Output: [(-70 -78 -10 -41) -78]
Test Case: 873 | Input/Output: [(20 98 -35 64) -35]
Test Case: 874 | Input/Output: [(49 90 0 -39) -39]
Test Case: 875 | Input/Output: [(-56 6 -33 -50) -56]
Test Case: 876 | Input/Output: [(83 22 45 37) 22]
Test Case: 877 | Input/Output: [(-95 32 21 -46) -95]
Test Case: 878 | Input/Output: [(-64 -83 4 65) -83]
Test Case: 879 | Input/Output: [(13 13 26 -70) -70]
Test Case: 880 | Input/Output: [(22 59 -31 22) -31]
Test Case: 881 | Input/Output: [(-66 -36 -9 22) -66]
Test Case: 882 | Input/Output: [(7 -82 5 -16) -82]
Test Case: 883 | Input/Output: [(78 -28 -46 -19) -46]
Test Case: 884 | Input/Output: [(53 -88 21 -16) -88]
Test Case: 885 | Input/Output: [(-96 -18 76 54) -96]
Test Case: 886 | Input/Output: [(5 -96 92 -60) -96]
Test Case: 887 | Input/Output: [(-16 -18 88 -60) -60]
Test Case: 888 | Input/Output: [(14 -21 40 35) -21]
Test Case: 889 | Input/Output: [(21 -67 16 39) -67]
Test Case: 890 | Input/Output: [(74 -85 -97 -13) -97]
Test Case: 891 | Input/Output: [(-98 -85 73 51) -98]
Test Case: 892 | Input/Output: [(-48 -71 35 -40) -71]
Test Case: 893 | Input/Output: [(19 -86 -25 18) -86]
Test Case: 894 | Input/Output: [(-56 -13 67 -91) -91]
Test Case: 895 | Input/Output: [(7 -90 14 -7) -90]
Test Case: 896 | Input/Output: [(41 32 89 8) 8]
Test Case: 897 | Input/Output: [(-55 45 43 60) -55]
Test Case: 898 | Input/Output: [(79 -62 96 -30) -62]
Test Case: 899 | Input/Output: [(-54 72 -55 5) -55]
Test Case: 900 | Input/Output: [(47 -23 45 78) -23]
Test Case: 901 | Input/Output: [(-43 19 -84 -45) -84]
Test Case: 902 | Input/Output: [(-46 11 -88 56) -88]
Test Case: 903 | Input/Output: [(-35 76 -71 -93) -93]
Test Case: 904 | Input/Output: [(-41 -19 55 -7) -41]
Test Case: 905 | Input/Output: [(-92 -1 -2 -96) -96]
Test Case: 906 | Input/Output: [(38 -34 -71 46) -71]
Test Case: 907 | Input/Output: [(8 -3 3 91) -3]
Test Case: 908 | Input/Output: [(-44 -84 -91 -97) -97]
Test Case: 909 | Input/Output: [(67 -94 53 32) -94]
Test Case: 910 | Input/Output: [(43 -66 -99 -83) -99]
Test Case: 911 | Input/Output: [(71 -35 -42 -12) -42]
Test Case: 912 | Input/Output: [(-21 86 -73 -100) -100]
Test Case: 913 | Input/Output: [(-25 86 -51 -38) -51]
Test Case: 914 | Input/Output: [(-47 -94 -39 27) -94]
Test Case: 915 | Input/Output: [(98 -51 -23 -43) -51]
Test Case: 916 | Input/Output: [(79 -47 -82 9) -82]
Test Case: 917 | Input/Output: [(-84 -79 -100 -71) -100]
Test Case: 918 | Input/Output: [(-74 -8 -80 -74) -80]
Test Case: 919 | Input/Output: [(-91 38 57 82) -91]
Test Case: 920 | Input/Output: [(70 -9 15 -54) -54]
Test Case: 921 | Input/Output: [(-60 24 -52 -78) -78]
Test Case: 922 | Input/Output: [(95 18 67 1) 1]
Test Case: 923 | Input/Output: [(-82 -5 58 -46) -82]
Test Case: 924 | Input/Output: [(81 -24 -31 -62) -62]
Test Case: 925 | Input/Output: [(-29 2 84 21) -29]
Test Case: 926 | Input/Output: [(57 -63 -53 -1) -63]
Test Case: 927 | Input/Output: [(-13 97 -59 20) -59]
Test Case: 928 | Input/Output: [(37 31 46 -85) -85]
Test Case: 929 | Input/Output: [(-29 16 -9 -37) -37]
Test Case: 930 | Input/Output: [(-82 -51 -10 53) -82]
Test Case: 931 | Input/Output: [(-21 -14 -22 26) -22]
Test Case: 932 | Input/Output: [(58 56 -1 96) -1]
Test Case: 933 | Input/Output: [(-18 -80 -62 -1) -80]
Test Case: 934 | Input/Output: [(-70 -47 -3 -28) -70]
Test Case: 935 | Input/Output: [(-61 -8 98 67) -61]
Test Case: 936 | Input/Output: [(-40 46 86 -33) -40]
Test Case: 937 | Input/Output: [(-62 40 -98 -28) -98]
Test Case: 938 | Input/Output: [(-68 -88 3 45) -88]
Test Case: 939 | Input/Output: [(-64 58 82 -80) -80]
Test Case: 940 | Input/Output: [(61 89 -5 11) -5]
Test Case: 941 | Input/Output: [(-8 33 28 61) -8]
Test Case: 942 | Input/Output: [(-94 39 -81 -91) -94]
Test Case: 943 | Input/Output: [(90 -37 -37 -42) -42]
Test Case: 944 | Input/Output: [(-73 -80 15 8) -80]
Test Case: 945 | Input/Output: [(-38 99 -26 -29) -38]
Test Case: 946 | Input/Output: [(89 -33 -99 -55) -99]
Test Case: 947 | Input/Output: [(86 -25 -6 48) -25]
Test Case: 948 | Input/Output: [(23 27 -61 -94) -94]
Test Case: 949 | Input/Output: [(96 -70 -83 8) -83]
Test Case: 950 | Input/Output: [(28 28 85 34) 28]
Test Case: 951 | Input/Output: [(74 -4 -7 22) -7]
Test Case: 952 | Input/Output: [(33 80 -36 -52) -52]
Test Case: 953 | Input/Output: [(-100 -38 -49 81) -100]
Test Case: 954 | Input/Output: [(-52 -34 -80 -89) -89]
Test Case: 955 | Input/Output: [(23 2 -54 83) -54]
Test Case: 956 | Input/Output: [(87 0 71 -79) -79]
Test Case: 957 | Input/Output: [(53 -32 -46 -86) -86]
Test Case: 958 | Input/Output: [(60 -10 6 6) -10]
Test Case: 959 | Input/Output: [(71 -57 -40 -69) -69]
Test Case: 960 | Input/Output: [(63 59 9 49) 9]
Test Case: 961 | Input/Output: [(-53 -65 88 -65) -65]
Test Case: 962 | Input/Output: [(56 -43 81 -42) -43]
Test Case: 963 | Input/Output: [(-77 1 -61 41) -77]
Test Case: 964 | Input/Output: [(-44 -39 81 74) -44]
Test Case: 965 | Input/Output: [(-18 5 46 95) -18]
Test Case: 966 | Input/Output: [(44 33 -52 -33) -52]
Test Case: 967 | Input/Output: [(69 -42 43 -94) -94]
Test Case: 968 | Input/Output: [(91 6 27 64) 6]
Test Case: 969 | Input/Output: [(-67 98 68 -81) -81]
Test Case: 970 | Input/Output: [(61 -67 17 -100) -100]
Test Case: 971 | Input/Output: [(24 -30 40 90) -30]
Test Case: 972 | Input/Output: [(78 63 2 -30) -30]
Test Case: 973 | Input/Output: [(64 61 0 10) 0]
Test Case: 974 | Input/Output: [(-82 -38 28 78) -82]
Test Case: 975 | Input/Output: [(-82 -55 -81 -76) -82]
Test Case: 976 | Input/Output: [(-49 23 -26 -88) -88]
Test Case: 977 | Input/Output: [(-32 -44 94 -63) -63]
Test Case: 978 | Input/Output: [(26 77 85 76) 26]
Test Case: 979 | Input/Output: [(96 -31 -23 38) -31]
Test Case: 980 | Input/Output: [(-37 -64 81 50) -64]
Test Case: 981 | Input/Output: [(68 95 -38 76) -38]
Test Case: 982 | Input/Output: [(-2 -19 54 85) -19]
Test Case: 983 | Input/Output: [(32 1 74 -88) -88]
Test Case: 984 | Input/Output: [(81 28 34 -30) -30]
Test Case: 985 | Input/Output: [(-59 33 -84 81) -84]
Test Case: 986 | Input/Output: [(-51 -76 -61 -36) -76]
Test Case: 987 | Input/Output: [(55 42 91 24) 24]
Test Case: 988 | Input/Output: [(-27 73 -55 60) -55]
Test Case: 989 | Input/Output: [(78 -71 -42 53) -71]
Test Case: 990 | Input/Output: [(9 10 35 -75) -75]
Test Case: 991 | Input/Output: [(85 86 -10 -55) -55]
Test Case: 992 | Input/Output: [(66 99 -24 -76) -76]
Test Case: 993 | Input/Output: [(-23 -76 10 31) -76]
Test Case: 994 | Input/Output: [(-16 83 -70 -17) -70]
Test Case: 995 | Input/Output: [(89 -76 66 74) -76]
Test Case: 996 | Input/Output: [(5 -90 -43 69) -90]
Test Case: 997 | Input/Output: [(-5 62 41 53) -5]
Test Case: 998 | Input/Output: [(88 -78 44 97) -78]
Test Case: 999 | Input/Output: [(-68 -54 -20 63) -68]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -12 -20 -111 -96 -17 -49 -44 -72 110 55 52 -82 120 -21 -69 -23
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-13 68 68 68] -13] [[-73 -73 -18 -73] -73] [[59 22 22 22] 22] [[48 48 48 32] 32] [[81 -57 -57 -57] -57] [[-76 -76 97 -76] -76] [[-32 -52 -52 -52] -52] [[-33 -75 -75 -75] -75] [[-9 -9 -9 96] -9] [[-24 -24 93 -24] -24] [(-37 -37 -37 -37) -37] [(-72 -72 -72 -72) -72] [(100 100 100 100) 100] [(58 58 58 58) 58] [(87 87 87 87) 87] [(63 44 32 1) 1] [(1 60 7 55) 1] [(9 74 38 60) 9] [(89 31 97 63) 31] [(42 74 99 18) 18] [(2 70 3 14) 2] [(35 35 57 65) 35] [(49 73 23 52) 23] [(80 11 40 11) 11] [(67 69 53 43) 43] [(25 16 61 76) 16] [(33 23 39 89) 23] [(70 48 77 84) 48] [(90 32 39 13) 13] [(17 55 23 90) 17] [(81 5 25 22) 5] [(100 87 60 1) 1] [(94 44 30 93) 30] [(55 25 72 77) 25] [(79 30 29 0) 0] [(40 -79 -77 68) -79] [(-76 -39 78 70) -76] [(56 -59 -46 26) -59] [(10 30 10 -47) -47] [(-50 72 3 -31) -50] [(-95 93 30 6) -95] [(-56 -1 -91 67) -91] [(72 -85 62 -71) -85] [(-36 -98 -16 5) -98] [(8 77 85 -27) -27] [(1 91 22 12) 1] [(-70 -55 1 70) -70] [(-26 65 44 78) -26] [(15 62 60 73) 15] [(-92 -52 52 42) -92] [(31 32 65 55) 31] [(-44 47 -61 31) -61] [(-97 97 68 -76) -97] [(50 -72 61 52) -72] [(-6 -78 -75 -5) -78] [(-10 24 2 92) -10] [(-81 -59 2 -79) -81] [(-6 89 -73 -73) -73] [(-61 32 69 17) -61] [(23 -97 -88 -89) -97] [(49 -68 74 -78) -78] [(11 90 29 79) 11] [(-85 90 -42 90) -85] [(56 -54 57 -58) -58] [(-88 54 26 53) -88] [(-98 52 67 3) -98] [(-80 15 -32 -89) -89] [(-20 -98 88 -69) -98] [(94 -91 76 1) -91] [(4 -70 -51 21) -70] [(28 -77 73 49) -77] [(19 5 37 54) 5] [(-96 -91 -76 48) -96] [(-19 -70 -45 30) -70] [(-58 94 29 -74) -74] [(44 50 73 75) 44] [(-63 -100 -85 54) -100] [(85 23 -96 33) -96] [(-90 -43 -60 -52) -90] [(-38 -61 -84 25) -84] [(63 -23 -37 9) -37] [(90 86 33 38) 33] [(92 -69 19 56) -69] [(-41 9 -92 58) -92] [(11 80 -8 -3) -8] [(73 -15 -23 -61) -61] [(-7 -68 -81 -11) -81] [(-13 -30 -22 -61) -61] [(-36 -14 -57 58) -57] [(-73 4 -6 99) -73] [(-9 9 -27 82) -27] [(-77 -80 -81 -29) -81] [(79 -20 21 -39) -39] [(-77 -38 92 86) -77] [(-81 3 -65 -30) -81])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -32                
Correct output: -75                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 89                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 49                 
Correct output: 11                  | Program output: 80                 
Correct output: 43                  | Program output: 67                 
Correct output: 16                  | Program output: 25                 
Correct output: 23                  | Program output: 33                 
Correct output: 48                  | Program output: 70                 
Correct output: 13                  | Program output: 90                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 81                 
Correct output: 1                   | Program output: 100                
Correct output: 30                  | Program output: 94                 
Correct output: 25                  | Program output: 55                 
Correct output: 0                   | Program output: 79                 
Correct output: -79                 | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 56                 
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -56                
Correct output: -85                 | Program output: 72                 
Correct output: -98                 | Program output: -36                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: 50                 
Correct output: -78                 | Program output: -6                 
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: 23                 
Correct output: -78                 | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -20                
Correct output: -91                 | Program output: 94                 
Correct output: -70                 | Program output: 4                  
Correct output: -77                 | Program output: 28                 
Correct output: 5                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -19                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -63                
Correct output: -96                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -38                
Correct output: -37                 | Program output: 63                 
Correct output: 33                  | Program output: 90                 
Correct output: -69                 | Program output: 92                 
Correct output: -92                 | Program output: -41                
Correct output: -8                  | Program output: 11                 
Correct output: -61                 | Program output: 73                 
Correct output: -81                 | Program output: -7                 
Correct output: -61                 | Program output: -13                
Correct output: -57                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -9                 
Correct output: -81                 | Program output: -77                
Correct output: -39                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Lexicase best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ())) ()))) () ())
Lexicase best errors: [1 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 91
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Zero cases best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ())) ()))) () ())
Zero cases best errors: [1 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 91
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 7 4 3 18 1000 1000 6 8 8)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (8 7 4 3 18 0 0 6 8 8)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 1, :instruction tag_boolean_846} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_k} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_xor} {:close 1, :instruction 10})
Best program: (boolean_dup_items exec_shove (print_boolean) boolean_stackdepth print_boolean in1 print_integer integer_mult exec_eq boolean_not exec_y_when_autoconstructing () integer_flush exec_do*range (tag_boolean_846) boolean_dup_items exec_while (in3) exec_y_when_autoconstructing (boolean_dup_times) exec_k (integer_lte) (boolean_swap exec_while (integer_yank boolean_dup) exec_eq boolean_and boolean_swap boolean_stackdepth boolean_stackdepth integer_gt integer_swap exec_do*count (integer_mult integer_empty integer_fromboolean boolean_and boolean_and boolean_stackdepth boolean_invert_first_then_and) boolean_dup_times) print_integer boolean_invert_second_then_and integer_mult exec_k () (exec_s_when_autoconstructing (boolean_frominteger exec_when (boolean_xor 10)) () ()))
Errors: [0 0 1 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 9.938
Median total errors in population: 10
Error averages by case: (0.992 0.993 0.996 0.997 0.982 1.0 1.0 0.994 0.992 0.992)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 50.322
Average program size in population (points): 69.217
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 449783
--- Timings ---
Current time: 1559582808863 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 28.4%
Fitness Testing:      1.8 seconds, 67.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Lexicase best program: (integer_dup_items exec_eq integer_inc exec_swap (boolean_and exec_shove ()) (in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (integer_lt exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ())) ()))) () ()))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 90
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Zero cases best program: (integer_dup_items exec_eq integer_inc exec_swap (boolean_and exec_shove ()) (in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (integer_lt exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ())) ()))) () ()))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 90
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 402 217 1000 1 217 216 403 217 161)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (217 402 217 0 1 217 216 403 217 161)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Best program: (boolean_frominteger integer_gt boolean_dup_items exec_k_when_autoconstructing (integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_yank integer_add print_integer integer_yank integer_max)))))))
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 40
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 7.949
Median total errors in population: 8
Error averages by case: (0.783 0.598 0.783 1.0 0.999 0.783 0.784 0.597 0.783 0.839)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 50.46
Average program size in population (points): 69.923
Average percent parens in population: 0.278
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1003833
--- Timings ---
Current time: 1559582811455 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 44.5%
Fitness Testing:      2.5 seconds, 46.5%
Report:               0.4 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -32                
Correct output: -75                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 89                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 49                 
Correct output: 11                  | Program output: 80                 
Correct output: 43                  | Program output: 67                 
Correct output: 16                  | Program output: 25                 
Correct output: 23                  | Program output: 33                 
Correct output: 48                  | Program output: 70                 
Correct output: 13                  | Program output: 90                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 81                 
Correct output: 1                   | Program output: 100                
Correct output: 30                  | Program output: 94                 
Correct output: 25                  | Program output: 55                 
Correct output: 0                   | Program output: 79                 
Correct output: -79                 | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 56                 
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -56                
Correct output: -85                 | Program output: 72                 
Correct output: -98                 | Program output: -36                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: 50                 
Correct output: -78                 | Program output: -6                 
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: 23                 
Correct output: -78                 | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -20                
Correct output: -91                 | Program output: 94                 
Correct output: -70                 | Program output: 4                  
Correct output: -77                 | Program output: 28                 
Correct output: 5                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -19                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -63                
Correct output: -96                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -38                
Correct output: -37                 | Program output: 63                 
Correct output: 33                  | Program output: 90                 
Correct output: -69                 | Program output: 92                 
Correct output: -92                 | Program output: -41                
Correct output: -8                  | Program output: 11                 
Correct output: -61                 | Program output: 73                 
Correct output: -81                 | Program output: -7                 
Correct output: -61                 | Program output: -13                
Correct output: -57                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -9                 
Correct output: -81                 | Program output: -77                
Correct output: -39                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction tagged_600} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_373} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap})
Lexicase best program: (in2 integer_dec boolean_yankdup integer_add integer_shove exec_rot () (boolean_not exec_do*while (exec_do*range (exec_do*while (in1 print_integer exec_dup (exec_do*times () tagged_600 exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_add exec_while (boolean_dup boolean_stackdepth) exec_if (integer_gt boolean_frominteger) (exec_dup (tag_boolean_373 boolean_dup in1 integer_eq) integer_mod integer_div integer_mult integer_gte) exec_dup () in1 exec_stackdepth boolean_eq boolean_dup_items) (boolean_invert_second_then_and) exec_yank integer_dec integer_fromboolean exec_dup_items exec_dup_times (exec_dup_items) boolean_yank in3 exec_do*while (boolean_invert_first_then_and boolean_rot exec_k_when_autoconstructing (boolean_swap) ())) () ()))))) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 75
Percent parens: 0.307
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction tagged_600} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_boolean_373} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap})
Zero cases best program: (in2 integer_dec boolean_yankdup integer_add integer_shove exec_rot () (boolean_not exec_do*while (exec_do*range (exec_do*while (in1 print_integer exec_dup (exec_do*times () tagged_600 exec_s_when_autoconstructing (exec_k_when_autoconstructing (integer_add exec_while (boolean_dup boolean_stackdepth) exec_if (integer_gt boolean_frominteger) (exec_dup (tag_boolean_373 boolean_dup in1 integer_eq) integer_mod integer_div integer_mult integer_gte) exec_dup () in1 exec_stackdepth boolean_eq boolean_dup_items) (boolean_invert_second_then_and) exec_yank integer_dec integer_fromboolean exec_dup_items exec_dup_times (exec_dup_items) boolean_yank in3 exec_do*while (boolean_invert_first_then_and boolean_rot exec_k_when_autoconstructing (boolean_swap) ())) () ()))))) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 75
Percent parens: 0.307
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 796 5 789 789 501 100 98 100 194)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (191 796 5 789 789 501 100 98 100 194)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_eq} {:close 1, :instruction exec_s} {:close 0, :instruction print_newline} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_483} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_sub} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_gte} {:close 0, :instruction tag_boolean_455} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_550} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_boolean_319} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult})
Best program: (exec_k_when_autoconstructing (exec_k () (integer_sub boolean_frominteger) exec_yankdup print_integer) (in1) integer_swap integer_dup_times print_integer integer_lt integer_gt in3 integer_yank boolean_eq exec_s () (print_newline integer_mult) (integer_dup_items tag_integer_483 integer_empty exec_flush integer_yank exec_yank boolean_dup_times integer_gt boolean_yankdup integer_add exec_when (integer_eq exec_flush integer_dup_items exec_k_when_autoconstructing () (exec_k_when_autoconstructing (print_newline integer_fromboolean boolean_and exec_rot (in2 exec_dup_times (print_exec (exec_yank exec_yankdup) boolean_invert_second_then_and integer_pop) integer_yankdup integer_sub) () (exec_do*times () exec_k () (boolean_yank integer_fromboolean integer_yank integer_gt integer_gte) tag_boolean_455 boolean_shove) boolean_flush integer_gt) (exec_noop exec_dup_times ()) exec_while (integer_dup exec_s (exec_rot (integer_swap) (integer_max integer_dup_items exec_s_when_autoconstructing (boolean_eq boolean_xor integer_mod tagged_550 integer_div exec_dup_items tag_boolean_319 exec_y_when_autoconstructing (integer_div boolean_xor exec_yank in4 boolean_or integer_yankdup) integer_shove integer_mult) () ()) ()) () ())))))
Errors: [0 0 1 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 84
Size: 117
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.437
Median total errors in population: 6
Error averages by case: (0.809 0.204 0.995 0.211 0.211 0.499 0.9 0.902 0.9 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.467
Average program size in population (points): 62.718
Average percent parens in population: 0.286
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.924
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1347362
--- Timings ---
Current time: 1559582814304 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 55.2%
Fitness Testing:      2.9 seconds, 35.7%
Report:               0.6 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Lexicase best program: (in3 boolean_yank exec_empty exec_k_when_autoconstructing (integer_dup exec_while () boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_empty integer_max) ())) ())) ()))) ())
Lexicase best errors: [1 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Zero cases best program: (in3 boolean_yank exec_empty exec_k_when_autoconstructing (integer_dup exec_while () boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_empty integer_max) ())) ())) ()))) ())
Zero cases best errors: [1 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 137 267 623 623 183 188 283 282 299)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (138 137 267 623 623 183 188 283 282 299)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_182} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Best program: (boolean_frominteger integer_gt boolean_dup_items exec_k_when_autoconstructing (integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_yank integer_add integer_eq integer_add exec_empty boolean_invert_first_then_and) exec_empty integer_dup tag_integer_182 integer_div boolean_not integer_dup_times integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))))))
Errors: [0 0 1 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 60
Size: 73
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 6.977
Median total errors in population: 7
Error averages by case: (0.862 0.863 0.733 0.377 0.377 0.817 0.812 0.717 0.718 0.701)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.188
Average program size in population (points): 54.358
Average percent parens in population: 0.295
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44125
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1732413
--- Timings ---
Current time: 1559582816809 milliseconds
Total Time:          10.7 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 59.2%
Fitness Testing:      3.3 seconds, 31.1%
Report:               0.9 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Lexicase best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq) boolean_and exec_shove () in2 exec_rot () (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48) exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty exec_swap (tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count () exec_empty exec_eq) exec_eq 40))) ()))) ()) ()))) ())
Lexicase best errors: [1 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.312
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 1, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Zero cases best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq) boolean_and exec_shove () in2 exec_rot () (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48) exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty exec_swap (tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count () exec_empty exec_eq) exec_eq 40))) ()))) ()) ()))) ())
Zero cases best errors: [1 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.312
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 640 257 257 259 259 384 127 242 127)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (256 640 257 257 259 259 384 127 242 127)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_max})
Best program: (boolean_frominteger integer_gt boolean_dup_items exec_k_when_autoconstructing (integer_min boolean_or) (exec_rot (exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop) exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_yank integer_add print_integer integer_yank) integer_max)))) () ()))
Errors: [1 0 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 7.192
Median total errors in population: 7
Error averages by case: (0.744 0.36 0.743 0.743 0.741 0.741 0.616 0.873 0.758 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.127
Average program size in population (points): 55.607
Average percent parens in population: 0.289
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.901
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2088861
--- Timings ---
Current time: 1559582819455 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.4 seconds, 62.9%
Fitness Testing:      3.7 seconds, 27.8%
Report:               1.1 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times})
Lexicase best program: (integer_dup_items boolean_not in1 integer_rot exec_dup_items exec_while (boolean_swap boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 exec_y (exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) boolean_flush) boolean_and exec_do*times ()))) () ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times})
Zero cases best program: (integer_dup_items boolean_not in1 integer_rot exec_dup_items exec_while (boolean_swap boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 exec_y (exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) boolean_flush) boolean_and exec_do*times ()))) () ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 902 902 351 351 354 447 197 807 351)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (197 902 902 351 351 354 447 197 807 351)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times})
Best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq in2 print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times ()) ()))) () ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 43
Percent parens: 0.395
--- Population Statistics ---
Average total errors in population: 5.141
Median total errors in population: 5
Error averages by case: (0.803 0.098 0.098 0.649 0.649 0.646 0.553 0.803 0.193 0.649)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.088
Average program size in population (points): 50.155
Average percent parens in population: 0.295
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.3846875
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2388308
--- Timings ---
Current time: 1559582822395 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 66.3%
Fitness Testing:      4.1 seconds, 24.8%
Report:               1.3 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3})
Lexicase best program: (tagged_90 boolean_dup_items integer_lte integer_eq boolean_pop boolean_and integer_rot in2 exec_do*while (integer_yankdup boolean_eq exec_empty) boolean_or integer_max exec_do*while (integer_dup_times integer_flush in4 exec_eq exec_empty) exec_k (boolean_stackdepth integer_swap) (integer_min integer_mult boolean_shove) exec_yank boolean_pop boolean_dup in4 integer_yankdup integer_swap exec_k_when_autoconstructing () (exec_stackdepth in2 boolean_rot exec_y_when_autoconstructing (print_integer integer_mult boolean_dup exec_eq) integer_mod boolean_dup) integer_eq exec_s_when_autoconstructing (boolean_and) (exec_s (boolean_invert_first_then_and integer_yank integer_swap in3) () ()) ())
Lexicase best errors: [1 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in3})
Zero cases best program: (tagged_90 boolean_dup_items integer_lte integer_eq boolean_pop boolean_and integer_rot in2 exec_do*while (integer_yankdup boolean_eq exec_empty) boolean_or integer_max exec_do*while (integer_dup_times integer_flush in4 exec_eq exec_empty) exec_k (boolean_stackdepth integer_swap) (integer_min integer_mult boolean_shove) exec_yank boolean_pop boolean_dup in4 integer_yankdup integer_swap exec_k_when_autoconstructing () (exec_stackdepth in2 boolean_rot exec_y_when_autoconstructing (print_integer integer_mult boolean_dup exec_eq) integer_mod boolean_dup) integer_eq exec_s_when_autoconstructing (boolean_and) (exec_s (boolean_invert_first_then_and integer_yank integer_swap in3) () ()) ())
Zero cases best errors: [1 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (248 1000 649 647 896 1000 3 1000 640 248)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (248 0 649 647 896 0 3 0 640 248)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq})
Best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_gt boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_y_when_autoconstructing (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_dup_items boolean_stackdepth exec_pop (exec_if (integer_eq integer_add integer_lt boolean_invert_first_then_and) (exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq)))))) ())) ()))) () ())
Errors: [1 1 0 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 62
Size: 89
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 6.669
Median total errors in population: 6
Error averages by case: (0.752 1.0 0.351 0.353 0.104 1.0 0.997 1.0 0.36 0.752)
Error minima by case: (0 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 38.274
Average program size in population (points): 55.035
Average percent parens in population: 0.294
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 8.94990625
Median age in population: 9.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2622334
--- Timings ---
Current time: 1559582825571 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 69.4%
Fitness Testing:      4.3 seconds, 22.1%
Report:               1.5 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Lexicase best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (integer_stackdepth integer_dup tag_integer_167 integer_add boolean_not integer_add integer_div boolean_empty exec_rot (boolean_invert_second_then_and) (in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 boolean_frominteger integer_add boolean_frominteger) boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ()))) ())) () ()))) () ())
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 107
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Zero cases best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (integer_stackdepth integer_dup tag_integer_167 integer_add boolean_not integer_add integer_div boolean_empty exec_rot (boolean_invert_second_then_and) (in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 boolean_frominteger integer_add boolean_frominteger) boolean_invert_second_then_and) in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ()))) ())) () ()))) () ())
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 107
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (632 174 272 273 1000 1000 459 460 636 904)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (632 174 272 273 0 0 459 460 636 904)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction 40})
Best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () () exec_dup () exec_do*while (exec_do*count (exec_flush exec_y_when_autoconstructing (integer_yankdup integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and) (exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add) integer_gt integer_shove integer_yank boolean_dup_items in2 exec_do*count (exec_empty exec_eq) exec_eq 40))))) ())) ())))) () ())
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 92
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.19
Median total errors in population: 6
Error averages by case: (0.368 0.826 0.728 0.727 1.0 1.0 0.541 0.54 0.364 0.096)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 36.847
Average program size in population (points): 52.622
Average percent parens in population: 0.290
Minimum age in population: 7.5
Maximum age in population: 12.703125
Average age in population: 10.532953125
Median age in population: 10.5703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2857888
--- Timings ---
Current time: 1559582827704 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.2 seconds, 70.2%
Fitness Testing:      4.6 seconds, 21.3%
Report:               1.7 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Lexicase best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_yank integer_add print_integer integer_yank integer_max)))))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Zero cases best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_yank integer_add print_integer integer_yank integer_max)))))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (600 698 187 280 417 692 277 1000 3 189)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (600 698 187 280 417 692 277 0 3 189)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq})
Best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_dec integer_eq boolean_invert_second_then_and exec_shove ()) in2 in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod exec_y_when_autoconstructing () integer_rot) (exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (boolean_pop boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq) ())) ())) ()))) () ()))
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 48
Size: 77
Percent parens: 0.377
--- Population Statistics ---
Average total errors in population: 6.657
Median total errors in population: 6
Error averages by case: (0.4 0.302 0.813 0.72 0.583 0.308 0.723 1.0 0.997 0.811)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 35.989
Average program size in population (points): 51.226
Average percent parens in population: 0.288
Minimum age in population: 9.0
Maximum age in population: 14.421875
Average age in population: 12.0492421875
Median age in population: 12.109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3093606
--- Timings ---
Current time: 1559582830210 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.2 seconds, 71.3%
Fitness Testing:      4.9 seconds, 20.2%
Report:               1.9 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Lexicase best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_yankdup) (boolean_empty exec_yank boolean_flush tag_exec_687 (integer_lte) in3 integer_gte boolean_pop in2 exec_s (print_integer boolean_swap) (boolean_shove exec_eq boolean_invert_first_then_and integer_empty integer_max) ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Zero cases best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_yankdup) (boolean_empty exec_yank boolean_flush tag_exec_687 (integer_lte) in3 integer_gte boolean_pop in2 exec_s (print_integer boolean_swap) (boolean_shove exec_eq boolean_invert_first_then_and integer_empty integer_max) ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 2 240 242 277 240 802 275 275 1000)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (284 2 240 242 277 240 802 275 275 0)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_y} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 2, :instruction exec_s} {:close 0, :instruction tagged_262} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank})
Best program: (exec_dup_times (integer_pop exec_s_when_autoconstructing (in1 integer_rot) (exec_dup_items exec_while (boolean_swap boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 exec_y (exec_dup () exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_k_when_autoconstructing () (integer_eq integer_add exec_empty boolean_invert_first_then_and) exec_empty integer_dup integer_empty exec_pop () exec_s () () (tagged_262 boolean_dup_times exec_s (exec_stackdepth) () (exec_rot (exec_do*range (exec_stackdepth integer_div) boolean_not integer_add integer_div boolean_empty) (boolean_invert_second_then_and boolean_invert_second_then_and) (in3 exec_dup_times (print_exec (integer_fromboolean exec_do*times (in3 integer_eq integer_add integer_gt integer_shove integer_yank)))))))) ())) () ()))) () ()) ()))
Errors: [1 1 1 1 0 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 69
Size: 110
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 7.363
Median total errors in population: 6
Error averages by case: (0.716 0.998 0.76 0.758 0.723 0.76 0.198 0.725 0.725 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 33.574
Average program size in population (points): 47.44
Average percent parens in population: 0.284
Minimum age in population: 10.0
Maximum age in population: 15.7578125
Average age in population: 13.6010390625
Median age in population: 13.650390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3342305
--- Timings ---
Current time: 1559582832659 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.1 seconds, 72.0%
Fitness Testing:      5.1 seconds, 19.4%
Report:               2.2 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -18                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 97                 
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: 93                 
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 32                 
Correct output: 1                   | Program output: 7                  
Correct output: 9                   | Program output: 38                 
Correct output: 31                  | Program output: 97                 
Correct output: 18                  | Program output: 99                 
Correct output: 2                   | Program output: 3                  
Correct output: 35                  | Program output: 57                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 40                 
Correct output: 43                  | Program output: 53                 
Correct output: 16                  | Program output: 61                 
Correct output: 23                  | Program output: 39                 
Correct output: 48                  | Program output: 77                 
Correct output: 13                  | Program output: 39                 
Correct output: 17                  | Program output: 23                 
Correct output: 5                   | Program output: 25                 
Correct output: 1                   | Program output: 60                 
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 72                 
Correct output: 0                   | Program output: 29                 
Correct output: -79                 | Program output: -77                
Correct output: -76                 | Program output: 78                 
Correct output: -59                 | Program output: -46                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: 3                  
Correct output: -95                 | Program output: 30                 
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 62                 
Correct output: -98                 | Program output: -16                
Correct output: -27                 | Program output: 85                 
Correct output: 1                   | Program output: 22                 
Correct output: -70                 | Program output: 1                  
Correct output: -26                 | Program output: 44                 
Correct output: 15                  | Program output: 60                 
Correct output: -92                 | Program output: 52                 
Correct output: 31                  | Program output: 65                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: 68                 
Correct output: -72                 | Program output: 61                 
Correct output: -78                 | Program output: -75                
Correct output: -10                 | Program output: 2                  
Correct output: -81                 | Program output: 2                  
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: 69                 
Correct output: -97                 | Program output: -88                
Correct output: -78                 | Program output: 74                 
Correct output: 11                  | Program output: 29                 
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: 57                 
Correct output: -88                 | Program output: 26                 
Correct output: -98                 | Program output: 67                 
Correct output: -89                 | Program output: -32                
Correct output: -98                 | Program output: 88                 
Correct output: -91                 | Program output: 76                 
Correct output: -70                 | Program output: -51                
Correct output: -77                 | Program output: 73                 
Correct output: 5                   | Program output: 37                 
Correct output: -96                 | Program output: -76                
Correct output: -70                 | Program output: -45                
Correct output: -74                 | Program output: 29                 
Correct output: 44                  | Program output: 73                 
Correct output: -100                | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -6                 
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: 21                 
Correct output: -77                 | Program output: 92                 
Correct output: -81                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_s})
Lexicase best program: (in1 exec_rot () (exec_do*while (boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_yankdup) boolean_empty exec_yank print_integer tag_exec_687 (integer_lte) in3 integer_gte boolean_pop integer_div exec_s (print_integer boolean_swap exec_y_when_autoconstructing (integer_yankdup) integer_div) (exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_k_when_autoconstructing (integer_eq integer_add exec_empty boolean_invert_first_then_and exec_empty integer_dup integer_empty exec_pop (exec_s () () ())) ())) ())) ()) ()) ())
Lexicase best errors: [1 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_s})
Zero cases best program: (in1 exec_rot () (exec_do*while (boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_yankdup) boolean_empty exec_yank print_integer tag_exec_687 (integer_lte) in3 integer_gte boolean_pop integer_div exec_s (print_integer boolean_swap exec_y_when_autoconstructing (integer_yankdup) integer_div) (exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_k_when_autoconstructing (integer_eq integer_add exec_empty boolean_invert_first_then_and exec_empty integer_dup integer_empty exec_pop (exec_s () () ())) ())) ())) ()) ()) ())
Zero cases best errors: [1 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 900 189 190 711 343 346 188 363 400)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (0 900 189 190 711 343 346 188 363 400)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_s})
Best program: (boolean_frominteger integer_gt boolean_or integer_mod tagged_231 boolean_not boolean_yankdup boolean_empty exec_yank print_integer tag_exec_687 (integer_lte) in3 integer_gte boolean_pop integer_div boolean_swap print_integer boolean_swap exec_y_when_autoconstructing (integer_yankdup) integer_div exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_k_when_autoconstructing (integer_eq integer_add boolean_yankdup boolean_invert_first_then_and exec_empty integer_dup integer_empty exec_pop (exec_s () () ())) ())) ())) ())
Errors: [1 0 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.37
Median total errors in population: 6
Error averages by case: (1.0 0.1 0.811 0.81 0.289 0.657 0.654 0.812 0.637 0.6)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.872
Average program size in population (points): 52.431
Average percent parens in population: 0.307
Minimum age in population: 12.25
Maximum age in population: 17.3984375
Average age in population: 14.872865234375
Median age in population: 14.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3621054
--- Timings ---
Current time: 1559582835150 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 72.6%
Fitness Testing:      5.4 seconds, 18.8%
Report:               2.4 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -32                
Correct output: -75                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 89                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 49                 
Correct output: 11                  | Program output: 80                 
Correct output: 43                  | Program output: 67                 
Correct output: 16                  | Program output: 25                 
Correct output: 23                  | Program output: 33                 
Correct output: 48                  | Program output: 70                 
Correct output: 13                  | Program output: 90                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 81                 
Correct output: 1                   | Program output: 100                
Correct output: 30                  | Program output: 94                 
Correct output: 25                  | Program output: 55                 
Correct output: 0                   | Program output: 79                 
Correct output: -79                 | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 56                 
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -56                
Correct output: -85                 | Program output: 72                 
Correct output: -98                 | Program output: -36                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: 50                 
Correct output: -78                 | Program output: -6                 
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: 23                 
Correct output: -78                 | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -20                
Correct output: -91                 | Program output: 94                 
Correct output: -70                 | Program output: 4                  
Correct output: -77                 | Program output: 28                 
Correct output: 5                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -19                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -63                
Correct output: -96                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -38                
Correct output: -37                 | Program output: 63                 
Correct output: 33                  | Program output: 90                 
Correct output: -69                 | Program output: 92                 
Correct output: -92                 | Program output: -41                
Correct output: -8                  | Program output: 11                 
Correct output: -61                 | Program output: 73                 
Correct output: -81                 | Program output: -7                 
Correct output: -61                 | Program output: -13                
Correct output: -57                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -9                 
Correct output: -81                 | Program output: -77                
Correct output: -39                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Lexicase best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not exec_empty) (integer_div exec_s (print_integer boolean_swap) (boolean_shove exec_eq boolean_invert_first_then_and) (integer_empty integer_max)))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Zero cases best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not exec_empty) (integer_div exec_s (print_integer boolean_swap) (boolean_shove exec_eq boolean_invert_first_then_and) (integer_empty integer_max)))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (901 276 276 493 215 399 1000 1000 8 407)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (901 276 276 493 215 399 0 0 8 407)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_max})
Best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not exec_empty) (integer_div) exec_s (print_integer boolean_swap boolean_shove exec_eq boolean_invert_first_then_and) (integer_empty) (integer_max))
Errors: [0 0 0 0 1 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.025
Median total errors in population: 7
Error averages by case: (0.099 0.724 0.724 0.507 0.785 0.601 1.0 1.0 0.992 0.593)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 36.763
Average program size in population (points): 54.389
Average percent parens in population: 0.316
Minimum age in population: 13.578125
Maximum age in population: 18.4208984375
Average age in population: 16.222373046875
Median age in population: 16.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3932911
--- Timings ---
Current time: 1559582837581 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 72.9%
Fitness Testing:      5.8 seconds, 18.3%
Report:               2.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 32                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: 96                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 55                 
Correct output: 9                   | Program output: 60                 
Correct output: 31                  | Program output: 63                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 14                 
Correct output: 35                  | Program output: 65                 
Correct output: 23                  | Program output: 52                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 43                 
Correct output: 16                  | Program output: 76                 
Correct output: 23                  | Program output: 89                 
Correct output: 48                  | Program output: 84                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 90                 
Correct output: 5                   | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 30                  | Program output: 93                 
Correct output: 25                  | Program output: 77                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: 68                 
Correct output: -76                 | Program output: 70                 
Correct output: -59                 | Program output: 26                 
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -31                
Correct output: -95                 | Program output: 6                  
Correct output: -91                 | Program output: 67                 
Correct output: -85                 | Program output: -71                
Correct output: -98                 | Program output: 5                  
Correct output: -27                 | Program output: -27                
Correct output: 1                   | Program output: 12                 
Correct output: -70                 | Program output: 70                 
Correct output: -26                 | Program output: 78                 
Correct output: 15                  | Program output: 73                 
Correct output: -92                 | Program output: 42                 
Correct output: 31                  | Program output: 55                 
Correct output: -61                 | Program output: 31                 
Correct output: -97                 | Program output: -76                
Correct output: -72                 | Program output: 52                 
Correct output: -78                 | Program output: -5                 
Correct output: -10                 | Program output: 92                 
Correct output: -81                 | Program output: -79                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: 17                 
Correct output: -97                 | Program output: -89                
Correct output: -78                 | Program output: -78                
Correct output: 11                  | Program output: 79                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: 53                 
Correct output: -98                 | Program output: 3                  
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -69                
Correct output: -91                 | Program output: 1                  
Correct output: -70                 | Program output: 21                 
Correct output: -77                 | Program output: 49                 
Correct output: 5                   | Program output: 54                 
Correct output: -96                 | Program output: 48                 
Correct output: -70                 | Program output: 30                 
Correct output: -74                 | Program output: -74                
Correct output: 44                  | Program output: 75                 
Correct output: -100                | Program output: 54                 
Correct output: -96                 | Program output: 33                 
Correct output: -90                 | Program output: -52                
Correct output: -84                 | Program output: 25                 
Correct output: -37                 | Program output: 9                  
Correct output: 33                  | Program output: 38                 
Correct output: -69                 | Program output: 56                 
Correct output: -92                 | Program output: 58                 
Correct output: -8                  | Program output: -3                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -11                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: 58                 
Correct output: -73                 | Program output: 99                 
Correct output: -27                 | Program output: 82                 
Correct output: -81                 | Program output: -29                
Correct output: -39                 | Program output: -39                
Correct output: -77                 | Program output: 86                 
Correct output: -81                 | Program output: -30                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 46})
Lexicase best program: (tagged_90 boolean_dup_items integer_lte integer_eq boolean_pop boolean_and integer_rot in2 exec_do*while (integer_yankdup boolean_eq exec_empty) boolean_or integer_max exec_do*while (integer_dup_times integer_flush in4 integer_gte boolean_pop integer_div exec_s (print_integer boolean_swap) (exec_y_when_autoconstructing (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (46)) ()))) ()))
Lexicase best errors: [1 0 1 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 46})
Zero cases best program: (tagged_90 boolean_dup_items integer_lte integer_eq boolean_pop boolean_and integer_rot in2 exec_do*while (integer_yankdup boolean_eq exec_empty) boolean_or integer_max exec_do*while (integer_dup_times integer_flush in4 integer_gte boolean_pop integer_div exec_s (print_integer boolean_swap) (exec_y_when_autoconstructing (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (46)) ()))) ()))
Zero cases best errors: [1 0 1 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 1 391 391 328 1 392 175 1 328)
Population mean number of elite cases: 2.18
Count of perfect (error zero) individuals by case: (175 1 391 391 328 1 392 175 1 328)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 46})
Best program: (tagged_90 boolean_dup_items integer_lte integer_eq boolean_pop boolean_and integer_rot in2 exec_do*while (integer_yankdup boolean_eq exec_empty) boolean_or integer_max exec_do*while (integer_dup_times integer_flush in4 integer_gte boolean_pop integer_div exec_s (print_integer boolean_swap) (exec_y_when_autoconstructing (exec_swap () (exec_dup () exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (46)) ()))) ()))
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 53
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.817
Median total errors in population: 8
Error averages by case: (0.825 0.999 0.609 0.609 0.672 0.999 0.608 0.825 0.999 0.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.541
Average program size in population (points): 52.472
Average percent parens in population: 0.314
Minimum age in population: 15.03515625
Maximum age in population: 19.78125
Average age in population: 17.624830078125
Median age in population: 17.70703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4236444
--- Timings ---
Current time: 1559582840058 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.9 seconds, 73.3%
Fitness Testing:      6.1 seconds, 18.0%
Report:               2.9 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -32                
Correct output: -75                 | Program output: -33                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 63                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 89                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 49                 
Correct output: 11                  | Program output: 80                 
Correct output: 43                  | Program output: 67                 
Correct output: 16                  | Program output: 25                 
Correct output: 23                  | Program output: 33                 
Correct output: 48                  | Program output: 70                 
Correct output: 13                  | Program output: 90                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 81                 
Correct output: 1                   | Program output: 100                
Correct output: 30                  | Program output: 94                 
Correct output: 25                  | Program output: 55                 
Correct output: 0                   | Program output: 79                 
Correct output: -79                 | Program output: 40                 
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: 56                 
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -56                
Correct output: -85                 | Program output: 72                 
Correct output: -98                 | Program output: -36                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: 50                 
Correct output: -78                 | Program output: -6                 
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: 23                 
Correct output: -78                 | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -20                
Correct output: -91                 | Program output: 94                 
Correct output: -70                 | Program output: 4                  
Correct output: -77                 | Program output: 28                 
Correct output: 5                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -19                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -63                
Correct output: -96                 | Program output: 85                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -38                
Correct output: -37                 | Program output: 63                 
Correct output: 33                  | Program output: 90                 
Correct output: -69                 | Program output: 92                 
Correct output: -92                 | Program output: -41                
Correct output: -8                  | Program output: 11                 
Correct output: -61                 | Program output: 73                 
Correct output: -81                 | Program output: -7                 
Correct output: -61                 | Program output: -13                
Correct output: -57                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -9                 
Correct output: -81                 | Program output: -77                
Correct output: -39                 | Program output: 79                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Lexicase best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not exec_empty) (integer_div exec_s (print_integer boolean_swap) (boolean_shove exec_eq boolean_invert_first_then_and) (integer_empty integer_max)))
Lexicase best errors: [1 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max})
Zero cases best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod tagged_231 boolean_not exec_empty) (integer_div exec_s (print_integer boolean_swap) (boolean_shove exec_eq boolean_invert_first_then_and) (integer_empty integer_max)))
Zero cases best errors: [1 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 201 137 172 171 372 171 218 202 120)
Population mean number of elite cases: 2.17
Count of perfect (error zero) individuals by case: (402 201 137 172 171 372 171 218 202 120)
Population mean number of perfect (error zero) cases: 2.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Best program: (in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod integer_dup exec_while () boolean_rot print_integer in1 integer_dup_times exec_dup (exec_swap () (integer_dec) exec_do*while (boolean_stackdepth exec_flush exec_y_when_autoconstructing (integer_yankdup) integer_div) exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth in2 exec_if (integer_eq integer_add integer_yank integer_max) ()) ())) ())) ())
Errors: [1 1 1 0 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 53
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 7.834
Median total errors in population: 7
Error averages by case: (0.598 0.799 0.863 0.828 0.829 0.628 0.829 0.782 0.798 0.88)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.767
Average program size in population (points): 52.042
Average percent parens in population: 0.307
Minimum age in population: 16.6640625
Maximum age in population: 21.119384765625
Average age in population: 19.49398876953125
Median age in population: 19.5283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4548977
--- Timings ---
Current time: 1559582842828 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.1 seconds, 73.8%
Fitness Testing:      6.4 seconds, 17.5%
Report:               3.1 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 60                 
Correct output: 9                   | Program output: 74                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 70                 
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 69                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 30                 
Correct output: -50                 | Program output: 72                 
Correct output: -95                 | Program output: 93                 
Correct output: -91                 | Program output: -1                 
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 91                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 65                 
Correct output: 15                  | Program output: 62                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: 47                 
Correct output: -97                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 24                 
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: 89                 
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 90                 
Correct output: -85                 | Program output: 90                 
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 54                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: 15                 
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 94                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -43                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: 9                  
Correct output: -8                  | Program output: 80                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -14                
Correct output: -73                 | Program output: 4                  
Correct output: -27                 | Program output: 9                  
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: 3                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Lexicase best program: (tagged_90 boolean_dup_items integer_lte in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_swap integer_add print_integer integer_yank integer_max)))))))
Lexicase best errors: [0 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_90} {:close 0, :instruction boolean_dup_items} {:close 3, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_max})
Zero cases best program: (tagged_90 boolean_dup_items integer_lte in1 exec_rot () (integer_empty boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove exec_eq exec_dup () print_integer integer_pop exec_dup (exec_pop (in1 exec_dup_times (print_newline integer_shove boolean_yank exec_yankdup exec_do*times (integer_swap integer_add print_integer integer_yank integer_max)))))))
Zero cases best errors: [0 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (752 846 138 1 479 343 553 288 191 534)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (752 846 138 1 479 343 553 288 191 534)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction 48} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction tag_integer_167} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_rot})
Best program: (exec_y_when_autoconstructing () integer_rot exec_dup_items exec_while (integer_eq boolean_and exec_shove ()) in2 exec_rot (integer_eq boolean_rot print_integer in1 integer_dup_times integer_rot boolean_stackdepth) (exec_dup () exec_do*while (boolean_stackdepth integer_yank exec_y_when_autoconstructing (integer_yankdup) in3 exec_rot () (boolean_and exec_do*times (48 exec_s_when_autoconstructing () (integer_mult boolean_stackdepth exec_pop (exec_if (integer_eq integer_add exec_empty boolean_invert_first_then_and exec_empty integer_dup tag_integer_167 integer_div boolean_not integer_add integer_div boolean_empty boolean_invert_second_then_and boolean_invert_second_then_and in3 exec_dup_times (print_exec (boolean_rot))) ())) ())) ())) ())
Errors: [0 0 1 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 5.875
Median total errors in population: 7
Error averages by case: (0.248 0.154 0.862 0.999 0.521 0.657 0.447 0.712 0.809 0.466)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.885
Average program size in population (points): 49.591
Average percent parens in population: 0.309
Minimum age in population: 17.6640625
Maximum age in population: 22.88916015625
Average age in population: 20.91922985839844
Median age in population: 20.977294921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4869053
--- Timings ---
Current time: 1559582845394 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.9 seconds, 74.0%
Fitness Testing:      6.7 seconds, 17.2%
Report:               3.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 89                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 40                 
Correct output: 43                  | Program output: 53                 
Correct output: 16                  | Program output: 25                 
Correct output: 23                  | Program output: 33                 
Correct output: 48                  | Program output: 70                 
Correct output: 13                  | Program output: 39                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 25                 
Correct output: 1                   | Program output: 60                 
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 55                 
Correct output: 0                   | Program output: 29                 
Correct output: -79                 | Program output: -77                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -46                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: 62                 
Correct output: -98                 | Program output: -36                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: 50                 
Correct output: -78                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -88                
Correct output: -78                 | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: 56                 
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -20                
Correct output: -91                 | Program output: 76                 
Correct output: -70                 | Program output: -51                
Correct output: -77                 | Program output: 28                 
Correct output: 5                   | Program output: 19                 
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -45                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: 19                 
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -22                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: 21                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not in3) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not in3) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 157 18 640 286 235 282 286 198 671)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (198 157 18 640 286 235 282 286 198 671)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not in3) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_shove integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Errors: [0 1 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 41
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.029
Median total errors in population: 7
Error averages by case: (0.802 0.843 0.982 0.36 0.714 0.765 0.718 0.714 0.802 0.329)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.347
Average program size in population (points): 48.032
Average percent parens in population: 0.300
Minimum age in population: 19.03369140625
Maximum age in population: 24.60205078125
Average age in population: 21.95618597412109
Median age in population: 21.99810791015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5191345
--- Timings ---
Current time: 1559582847854 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 73.8%
Fitness Testing:      7.1 seconds, 17.0%
Report:               3.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 68                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 32                 
Correct output: 1                   | Program output: 7                  
Correct output: 9                   | Program output: 38                 
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 74                 
Correct output: 2                   | Program output: 3                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 23                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 60                 
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -39                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: 3                  
Correct output: -95                 | Program output: 30                 
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 77                 
Correct output: 1                   | Program output: 22                 
Correct output: -70                 | Program output: -55                
Correct output: -26                 | Program output: 44                 
Correct output: 15                  | Program output: 60                 
Correct output: -92                 | Program output: -52                
Correct output: 31                  | Program output: 32                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: 68                 
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: 2                  
Correct output: -81                 | Program output: -59                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: 32                 
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 29                 
Correct output: -85                 | Program output: -42                
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: 26                 
Correct output: -98                 | Program output: 52                 
Correct output: -89                 | Program output: -32                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: 29                 
Correct output: 44                  | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -60                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -6                 
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -38                
Correct output: -81                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not in3) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not in3) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 349 359 378 362 270 380 859 374 378)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (97 349 359 378 362 270 380 859 374 378)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not in3) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.194
Median total errors in population: 6
Error averages by case: (0.903 0.651 0.641 0.622 0.638 0.73 0.62 0.141 0.626 0.622)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.781
Average program size in population (points): 44.587
Average percent parens in population: 0.284
Minimum age in population: 20.673095703125
Maximum age in population: 25.425048828125
Average age in population: 22.90862399291992
Median age in population: 22.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 258
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 258
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.007
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5538726
--- Timings ---
Current time: 1559582850268 milliseconds
Total Time:          44.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.6 seconds, 73.9%
Fitness Testing:      7.4 seconds, 16.8%
Report:               4.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 437
Test mean error for best: 0.43700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -41                
Correct output: -8                  | Program output: 11                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -9                 
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (774 552 389 341 361 233 843 131 905 338)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (774 552 389 341 361 233 843 131 905 338)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop exec_s (boolean_and boolean_or integer_mod integer_min boolean_or) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 in2 integer_shove integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 5.133
Median total errors in population: 5
Error averages by case: (0.226 0.448 0.611 0.659 0.639 0.767 0.157 0.869 0.095 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.121
Average program size in population (points): 43.281
Average percent parens in population: 0.278
Minimum age in population: 22.8125
Maximum age in population: 26.425048828125
Average age in population: 24.18387152099609
Median age in population: 24.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 261
Genome diversity (% unique genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5912283
--- Timings ---
Current time: 1559582852639 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 73.9%
Fitness Testing:      7.8 seconds, 16.7%
Report:               4.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 437
Test mean error for best: 0.43700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 49                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 87                 
Correct output: 30                  | Program output: 44                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 30                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -56                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -6                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: 23                 
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -61                
Correct output: -37                 | Program output: -23                
Correct output: 33                  | Program output: 86                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -41                
Correct output: -8                  | Program output: 11                 
Correct output: -61                 | Program output: -15                
Correct output: -81                 | Program output: -68                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -36                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -9                 
Correct output: -81                 | Program output: -80                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod print_integer tag_exec_687 (integer_lte) in4 integer_gte boolean_pop integer_div) (in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1))))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_687} {:close 1, :instruction integer_lte} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod print_integer tag_exec_687 (integer_lte) in4 integer_gte boolean_pop integer_div) (in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1))))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (875 6 899 904 166 688 6 688 688 689)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (875 6 899 904 166 688 6 688 688 689)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_not boolean_yank) (integer_div exec_s (boolean_and boolean_or integer_mod integer_min integer_div) (integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))) ()))
Errors: [0 1 0 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 29
Size: 40
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 4.391
Median total errors in population: 3
Error averages by case: (0.125 0.994 0.101 0.096 0.834 0.312 0.994 0.312 0.312 0.311)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.149
Average program size in population (points): 35.317
Average percent parens in population: 0.286
Minimum age in population: 24.3125
Maximum age in population: 27.15530395507812
Average age in population: 25.70623942565918
Median age in population: 25.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.345
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.34
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6208454
--- Timings ---
Current time: 1559582855061 milliseconds
Total Time:          48.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.3 seconds, 74.1%
Fitness Testing:      8.1 seconds, 16.5%
Report:               4.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 223
Test mean error for best: 0.22300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 60                 
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (879 349 345 349 1000 518 519 529 889 346)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (879 349 345 349 0 518 519 529 889 346)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.277
Median total errors in population: 5
Error averages by case: (0.121 0.651 0.655 0.651 1.0 0.482 0.481 0.471 0.111 0.654)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 25.948
Average program size in population (points): 36.308
Average percent parens in population: 0.283
Minimum age in population: 25.3125
Maximum age in population: 28.77320098876953
Average age in population: 27.15165106964111
Median age in population: 27.23390197753906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.391
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.39
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6511590
--- Timings ---
Current time: 1559582857355 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.0 seconds, 74.2%
Fitness Testing:      8.4 seconds, 16.4%
Report:               4.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 223
Test mean error for best: 0.22300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 60                 
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 1 866 2 956 873 955 845 957 955)
Population mean number of elite cases: 7.29
Count of perfect (error zero) individuals by case: (880 1 866 2 956 873 955 845 957 955)
Population mean number of perfect (error zero) cases: 7.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 2.71
Median total errors in population: 2
Error averages by case: (0.12 0.999 0.134 0.998 0.044 0.127 0.045 0.155 0.043 0.045)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.025
Average program size in population (points): 32.034
Average percent parens in population: 0.250
Minimum age in population: 28.92802047729492
Maximum age in population: 29.92802047729492
Average age in population: 29.42202047729492
Median age in population: 28.92802047729492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 690
Genome diversity (% unique genomes):	 0.27
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 693
Syntactic diversity (% unique Push programs):	 0.267
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6818514
--- Timings ---
Current time: 1559582859633 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 74.3%
Fitness Testing:      8.7 seconds, 16.2%
Report:               4.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 223
Test mean error for best: 0.22300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 48                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 42                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 53                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 60                 
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 29                 
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: 10                 
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: 8                  
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -68                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -54                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -58                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -23                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -30                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -20                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_yank in1))))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 31
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_yank in1))))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 31
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 442 723 640 874 443 443 707 266 639)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (438 442 723 640 874 443 443 707 266 639)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_231} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod tagged_231 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.385
Median total errors in population: 6
Error averages by case: (0.562 0.558 0.277 0.36 0.126 0.557 0.557 0.293 0.734 0.361)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.954
Average program size in population (points): 31.635
Average percent parens in population: 0.243
Minimum age in population: 29.92802047729492
Maximum age in population: 31.92802047729492
Average age in population: 30.87502047729492
Median age in population: 30.92802047729492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 287
Genome diversity (% unique genomes):	 0.373
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.371
Total error diversity:				 0.01
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7113289
--- Timings ---
Current time: 1559582861896 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.6 seconds, 74.5%
Fitness Testing:      9.0 seconds, 16.1%
Report:               5.2 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 32                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 43                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: -27                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -39                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Lexicase best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Zero cases best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (934 466 935 419 460 462 835 937 420 934)
Population mean number of elite cases: 6.80
Count of perfect (error zero) individuals by case: (934 466 935 419 460 462 835 937 420 934)
Population mean number of perfect (error zero) cases: 6.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction in1})
Best program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 3.198
Median total errors in population: 3
Error averages by case: (0.066 0.534 0.065 0.581 0.54 0.538 0.165 0.063 0.58 0.066)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.977
Average program size in population (points): 31.953
Average percent parens in population: 0.250
Minimum age in population: 30.92802047729492
Maximum age in population: 33.92802047729492
Average age in population: 32.89877047729492
Median age in population: 32.92802047729492
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 331
Genome diversity (% unique genomes):	 0.36
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.011
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7426777
--- Timings ---
Current time: 1559582864218 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 74.6%
Fitness Testing:      9.3 seconds, 16.0%
Report:               5.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 22
Successful program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 33


Auto-simplifying with starting size: 33
step: 0
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 500
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 1000
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 1500
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 2000
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 2500
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 3000
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 3500
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 4000
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 4500
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 5000
program: (in1 exec_rot () (exec_noop boolean_and boolean_or integer_mod in4 boolean_swap in3) (integer_div integer_div exec_y_when_autoconstructing (exec_stackdepth boolean_or exec_yankdup in2 integer_min integer_min integer_min exec_dup () print_integer integer_pop exec_dup (exec_pop (in1)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: 32                  | Program output: 32                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -52                 | Program output: -52                
Correct output: -75                 | Program output: -75                
Correct output: -9                  | Program output: -9                 
Correct output: -24                 | Program output: -24                
Correct output: -37                 | Program output: -37                
Correct output: -72                 | Program output: -72                
Correct output: 100                 | Program output: 100                
Correct output: 58                  | Program output: 58                 
Correct output: 87                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 31                  | Program output: 31                 
Correct output: 18                  | Program output: 18                 
Correct output: 2                   | Program output: 2                  
Correct output: 35                  | Program output: 35                 
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 43                  | Program output: 43                 
Correct output: 16                  | Program output: 16                 
Correct output: 23                  | Program output: 23                 
Correct output: 48                  | Program output: 48                 
Correct output: 13                  | Program output: 13                 
Correct output: 17                  | Program output: 17                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 30                  | Program output: 30                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -85                 | Program output: -85                
Correct output: -98                 | Program output: -98                
Correct output: -27                 | Program output: -27                
Correct output: 1                   | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: -26                 | Program output: -26                
Correct output: 15                  | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 31                  | Program output: 31                 
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -72                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -10                 | Program output: -10                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -61                 | Program output: -61                
Correct output: -97                 | Program output: -97                
Correct output: -78                 | Program output: -78                
Correct output: 11                  | Program output: 11                 
Correct output: -85                 | Program output: -85                
Correct output: -58                 | Program output: -58                
Correct output: -88                 | Program output: -88                
Correct output: -98                 | Program output: -98                
Correct output: -89                 | Program output: -89                
Correct output: -98                 | Program output: -98                
Correct output: -91                 | Program output: -91                
Correct output: -70                 | Program output: -70                
Correct output: -77                 | Program output: -77                
Correct output: 5                   | Program output: 5                  
Correct output: -96                 | Program output: -96                
Correct output: -70                 | Program output: -70                
Correct output: -74                 | Program output: -74                
Correct output: 44                  | Program output: 44                 
Correct output: -100                | Program output: -100               
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -84                 | Program output: -84                
Correct output: -37                 | Program output: -37                
Correct output: 33                  | Program output: 33                 
Correct output: -69                 | Program output: -69                
Correct output: -92                 | Program output: -92                
Correct output: -8                  | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -73                 | Program output: -73                
Correct output: -27                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -39                 | Program output: -39                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
;;******************************
