Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[73 -53 73 73] -53] [[-61 84 -61 -61] -61] [[-44 59 59 59] -44] [[-50 -6 -50 -50] -50] [[-4 -24 -4 -4] -24] [[-12 -12 -12 11] -12] [[-27 -4 -4 -4] -27] [[-10 -1 -10 -10] -10] [[-78 1 -78 -78] -78] [[35 35 35 -37] -37] [(71 71 71 71) 71] [(49 49 49 49) 49] [(-10 -10 -10 -10) -10] [(-27 -27 -27 -27) -27] [(-38 -38 -38 -38) -38] [(37 45 91 70) 37] [(7 67 28 21) 7] [(68 15 13 1) 1] [(34 3 71 49) 3] [(85 15 67 7) 7] [(88 32 96 99) 32] [(77 12 79 9) 9] [(32 59 59 8) 8] [(12 45 33 2) 2] [(78 54 50 0) 0] [(25 97 24 24) 24] [(37 72 23 11) 11] [(52 0 58 38) 0] [(63 94 1 57) 1] [(71 75 90 59) 59] [(75 65 42 97) 42] [(66 13 25 31) 13] [(44 65 30 95) 30] [(11 35 21 50) 11] [(32 39 77 0) 0] [(-75 33 43 97) -75] [(82 -94 84 -33) -94] [(-63 25 -17 73) -63] [(27 -52 -3 1) -52] [(-74 91 62 63) -74] [(10 -60 -43 -69) -69] [(-95 -55 -9 -22) -95] [(65 29 -7 43) -7] [(-10 57 -33 -93) -93] [(60 73 92 12) 12] [(-100 -57 -62 -14) -100] [(-8 60 90 -22) -22] [(-47 16 -50 -68) -68] [(-23 -76 44 66) -76] [(97 46 -10 42) -10] [(14 96 44 -69) -69] [(88 60 98 -43) -43] [(29 -54 -15 21) -54] [(-78 -78 21 92) -78] [(80 74 -63 85) -63] [(-52 46 7 -34) -52] [(18 56 -92 21) -92] [(47 -91 46 -93) -93] [(13 21 91 13) 13] [(-93 75 -13 -75) -93] [(-51 51 -76 -54) -76] [(53 -17 -30 21) -30] [(14 38 59 56) 14] [(-60 -80 -3 -44) -80] [(48 10 -98 -59) -98] [(30 -52 72 0) -52] [(-35 -60 -72 28) -72] [(-64 25 -82 68) -82] [(85 46 -90 38) -90] [(-71 -71 -39 33) -71] [(-5 78 23 46) -5] [(66 -65 51 -52) -65] [(1 -91 83 14) -91] [(34 -26 16 32) -26] [(-8 -61 51 -63) -63] [(30 11 96 7) 7] [(69 41 -99 19) -99] [(67 33 -90 -20) -90] [(-30 20 -56 97) -56] [(-95 -8 33 -78) -95] [(80 -73 34 -26) -73] [(68 -68 60 77) -68] [(-13 62 76 -72) -72] [(84 -95 -53 -69) -95] [(-50 39 -57 -49) -57] [(-65 2 79 -37) -65] [(-10 -98 96 64) -98] [(92 8 27 83) 8] [(-3 37 -47 -34) -47] [(83 83 94 -20) -20] [(76 66 -1 -91) -91] [(-76 -83 -42 11) -83] [(91 -95 -74 -82) -95] [(-16 57 -20 -10) -20] [(14 17 68 -46) -46])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[73 -53 73 73] -53]
Train Case:   6 | Input/Output: [[-61 84 -61 -61] -61]
Train Case:   7 | Input/Output: [[-44 59 59 59] -44]
Train Case:   8 | Input/Output: [[-50 -6 -50 -50] -50]
Train Case:   9 | Input/Output: [[-4 -24 -4 -4] -24]
Train Case:  10 | Input/Output: [[-12 -12 -12 11] -12]
Train Case:  11 | Input/Output: [[-27 -4 -4 -4] -27]
Train Case:  12 | Input/Output: [[-10 -1 -10 -10] -10]
Train Case:  13 | Input/Output: [[-78 1 -78 -78] -78]
Train Case:  14 | Input/Output: [[35 35 35 -37] -37]
Train Case:  15 | Input/Output: [(71 71 71 71) 71]
Train Case:  16 | Input/Output: [(49 49 49 49) 49]
Train Case:  17 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  18 | Input/Output: [(-27 -27 -27 -27) -27]
Train Case:  19 | Input/Output: [(-38 -38 -38 -38) -38]
Train Case:  20 | Input/Output: [(37 45 91 70) 37]
Train Case:  21 | Input/Output: [(7 67 28 21) 7]
Train Case:  22 | Input/Output: [(68 15 13 1) 1]
Train Case:  23 | Input/Output: [(34 3 71 49) 3]
Train Case:  24 | Input/Output: [(85 15 67 7) 7]
Train Case:  25 | Input/Output: [(88 32 96 99) 32]
Train Case:  26 | Input/Output: [(77 12 79 9) 9]
Train Case:  27 | Input/Output: [(32 59 59 8) 8]
Train Case:  28 | Input/Output: [(12 45 33 2) 2]
Train Case:  29 | Input/Output: [(78 54 50 0) 0]
Train Case:  30 | Input/Output: [(25 97 24 24) 24]
Train Case:  31 | Input/Output: [(37 72 23 11) 11]
Train Case:  32 | Input/Output: [(52 0 58 38) 0]
Train Case:  33 | Input/Output: [(63 94 1 57) 1]
Train Case:  34 | Input/Output: [(71 75 90 59) 59]
Train Case:  35 | Input/Output: [(75 65 42 97) 42]
Train Case:  36 | Input/Output: [(66 13 25 31) 13]
Train Case:  37 | Input/Output: [(44 65 30 95) 30]
Train Case:  38 | Input/Output: [(11 35 21 50) 11]
Train Case:  39 | Input/Output: [(32 39 77 0) 0]
Train Case:  40 | Input/Output: [(-75 33 43 97) -75]
Train Case:  41 | Input/Output: [(82 -94 84 -33) -94]
Train Case:  42 | Input/Output: [(-63 25 -17 73) -63]
Train Case:  43 | Input/Output: [(27 -52 -3 1) -52]
Train Case:  44 | Input/Output: [(-74 91 62 63) -74]
Train Case:  45 | Input/Output: [(10 -60 -43 -69) -69]
Train Case:  46 | Input/Output: [(-95 -55 -9 -22) -95]
Train Case:  47 | Input/Output: [(65 29 -7 43) -7]
Train Case:  48 | Input/Output: [(-10 57 -33 -93) -93]
Train Case:  49 | Input/Output: [(60 73 92 12) 12]
Train Case:  50 | Input/Output: [(-100 -57 -62 -14) -100]
Train Case:  51 | Input/Output: [(-8 60 90 -22) -22]
Train Case:  52 | Input/Output: [(-47 16 -50 -68) -68]
Train Case:  53 | Input/Output: [(-23 -76 44 66) -76]
Train Case:  54 | Input/Output: [(97 46 -10 42) -10]
Train Case:  55 | Input/Output: [(14 96 44 -69) -69]
Train Case:  56 | Input/Output: [(88 60 98 -43) -43]
Train Case:  57 | Input/Output: [(29 -54 -15 21) -54]
Train Case:  58 | Input/Output: [(-78 -78 21 92) -78]
Train Case:  59 | Input/Output: [(80 74 -63 85) -63]
Train Case:  60 | Input/Output: [(-52 46 7 -34) -52]
Train Case:  61 | Input/Output: [(18 56 -92 21) -92]
Train Case:  62 | Input/Output: [(47 -91 46 -93) -93]
Train Case:  63 | Input/Output: [(13 21 91 13) 13]
Train Case:  64 | Input/Output: [(-93 75 -13 -75) -93]
Train Case:  65 | Input/Output: [(-51 51 -76 -54) -76]
Train Case:  66 | Input/Output: [(53 -17 -30 21) -30]
Train Case:  67 | Input/Output: [(14 38 59 56) 14]
Train Case:  68 | Input/Output: [(-60 -80 -3 -44) -80]
Train Case:  69 | Input/Output: [(48 10 -98 -59) -98]
Train Case:  70 | Input/Output: [(30 -52 72 0) -52]
Train Case:  71 | Input/Output: [(-35 -60 -72 28) -72]
Train Case:  72 | Input/Output: [(-64 25 -82 68) -82]
Train Case:  73 | Input/Output: [(85 46 -90 38) -90]
Train Case:  74 | Input/Output: [(-71 -71 -39 33) -71]
Train Case:  75 | Input/Output: [(-5 78 23 46) -5]
Train Case:  76 | Input/Output: [(66 -65 51 -52) -65]
Train Case:  77 | Input/Output: [(1 -91 83 14) -91]
Train Case:  78 | Input/Output: [(34 -26 16 32) -26]
Train Case:  79 | Input/Output: [(-8 -61 51 -63) -63]
Train Case:  80 | Input/Output: [(30 11 96 7) 7]
Train Case:  81 | Input/Output: [(69 41 -99 19) -99]
Train Case:  82 | Input/Output: [(67 33 -90 -20) -90]
Train Case:  83 | Input/Output: [(-30 20 -56 97) -56]
Train Case:  84 | Input/Output: [(-95 -8 33 -78) -95]
Train Case:  85 | Input/Output: [(80 -73 34 -26) -73]
Train Case:  86 | Input/Output: [(68 -68 60 77) -68]
Train Case:  87 | Input/Output: [(-13 62 76 -72) -72]
Train Case:  88 | Input/Output: [(84 -95 -53 -69) -95]
Train Case:  89 | Input/Output: [(-50 39 -57 -49) -57]
Train Case:  90 | Input/Output: [(-65 2 79 -37) -65]
Train Case:  91 | Input/Output: [(-10 -98 96 64) -98]
Train Case:  92 | Input/Output: [(92 8 27 83) 8]
Train Case:  93 | Input/Output: [(-3 37 -47 -34) -47]
Train Case:  94 | Input/Output: [(83 83 94 -20) -20]
Train Case:  95 | Input/Output: [(76 66 -1 -91) -91]
Train Case:  96 | Input/Output: [(-76 -83 -42 11) -83]
Train Case:  97 | Input/Output: [(91 -95 -74 -82) -95]
Train Case:  98 | Input/Output: [(-16 57 -20 -10) -20]
Train Case:  99 | Input/Output: [(14 17 68 -46) -46]
Test Case:   0 | Input/Output: [[-7 34 34 34] -7]
Test Case:   1 | Input/Output: [[-67 -36 -36 -36] -67]
Test Case:   2 | Input/Output: [[77 77 -41 77] -41]
Test Case:   3 | Input/Output: [[12 87 12 12] 12]
Test Case:   4 | Input/Output: [[88 -81 88 88] -81]
Test Case:   5 | Input/Output: [[-91 -17 -17 -17] -91]
Test Case:   6 | Input/Output: [[8 74 74 74] 8]
Test Case:   7 | Input/Output: [[5 5 5 -22] -22]
Test Case:   8 | Input/Output: [[-9 79 79 79] -9]
Test Case:   9 | Input/Output: [[62 62 9 62] 9]
Test Case:  10 | Input/Output: [[-2 78 -2 -2] -2]
Test Case:  11 | Input/Output: [[-40 -88 -88 -88] -88]
Test Case:  12 | Input/Output: [[78 -47 78 78] -47]
Test Case:  13 | Input/Output: [[-40 -40 -59 -40] -59]
Test Case:  14 | Input/Output: [[-22 98 -22 -22] -22]
Test Case:  15 | Input/Output: [[7 7 80 7] 7]
Test Case:  16 | Input/Output: [[-5 -97 -97 -97] -97]
Test Case:  17 | Input/Output: [[79 79 79 35] 35]
Test Case:  18 | Input/Output: [[23 -8 -8 -8] -8]
Test Case:  19 | Input/Output: [[-30 63 -30 -30] -30]
Test Case:  20 | Input/Output: [[53 53 6 53] 6]
Test Case:  21 | Input/Output: [[-4 82 82 82] -4]
Test Case:  22 | Input/Output: [[-74 76 -74 -74] -74]
Test Case:  23 | Input/Output: [[-93 53 53 53] -93]
Test Case:  24 | Input/Output: [[-10 23 23 23] -10]
Test Case:  25 | Input/Output: [[-91 71 -91 -91] -91]
Test Case:  26 | Input/Output: [[13 45 13 13] 13]
Test Case:  27 | Input/Output: [[43 22 22 22] 22]
Test Case:  28 | Input/Output: [[91 2 91 91] 2]
Test Case:  29 | Input/Output: [[84 84 -1 84] -1]
Test Case:  30 | Input/Output: [[66 66 66 37] 37]
Test Case:  31 | Input/Output: [[27 36 27 27] 27]
Test Case:  32 | Input/Output: [[-55 -55 -17 -55] -55]
Test Case:  33 | Input/Output: [[69 69 2 69] 2]
Test Case:  34 | Input/Output: [[3 66 66 66] 3]
Test Case:  35 | Input/Output: [[-47 -62 -62 -62] -62]
Test Case:  36 | Input/Output: [[-15 -15 -12 -15] -15]
Test Case:  37 | Input/Output: [[-32 -32 -32 31] -32]
Test Case:  38 | Input/Output: [[57 12 57 57] 12]
Test Case:  39 | Input/Output: [[-72 -72 30 -72] -72]
Test Case:  40 | Input/Output: [[-12 -12 -12 -81] -81]
Test Case:  41 | Input/Output: [[-77 80 -77 -77] -77]
Test Case:  42 | Input/Output: [[-88 -88 -88 -51] -88]
Test Case:  43 | Input/Output: [[-70 85 85 85] -70]
Test Case:  44 | Input/Output: [[67 67 -55 67] -55]
Test Case:  45 | Input/Output: [[23 23 23 -8] -8]
Test Case:  46 | Input/Output: [[2 -72 -72 -72] -72]
Test Case:  47 | Input/Output: [[-29 77 77 77] -29]
Test Case:  48 | Input/Output: [[1 1 1 5] 1]
Test Case:  49 | Input/Output: [[-4 100 100 100] -4]
Test Case:  50 | Input/Output: [[75 99 75 75] 75]
Test Case:  51 | Input/Output: [[87 87 87 -8] -8]
Test Case:  52 | Input/Output: [[93 -11 93 93] -11]
Test Case:  53 | Input/Output: [[100 100 100 50] 50]
Test Case:  54 | Input/Output: [[-64 -64 44 -64] -64]
Test Case:  55 | Input/Output: [[50 50 50 15] 15]
Test Case:  56 | Input/Output: [[20 20 20 -58] -58]
Test Case:  57 | Input/Output: [[50 -13 50 50] -13]
Test Case:  58 | Input/Output: [[63 63 63 100] 63]
Test Case:  59 | Input/Output: [[81 13 81 81] 13]
Test Case:  60 | Input/Output: [[-20 -20 50 -20] -20]
Test Case:  61 | Input/Output: [[-23 -23 -23 -14] -23]
Test Case:  62 | Input/Output: [[-79 -79 38 -79] -79]
Test Case:  63 | Input/Output: [[-75 -75 93 -75] -75]
Test Case:  64 | Input/Output: [[-38 -38 -38 84] -38]
Test Case:  65 | Input/Output: [[27 -54 -54 -54] -54]
Test Case:  66 | Input/Output: [[92 54 92 92] 54]
Test Case:  67 | Input/Output: [[81 -61 81 81] -61]
Test Case:  68 | Input/Output: [[41 41 41 -66] -66]
Test Case:  69 | Input/Output: [[8 -20 8 8] -20]
Test Case:  70 | Input/Output: [[-93 -53 -53 -53] -93]
Test Case:  71 | Input/Output: [[-58 -58 -58 -44] -58]
Test Case:  72 | Input/Output: [[76 -14 -14 -14] -14]
Test Case:  73 | Input/Output: [[-11 -68 -68 -68] -68]
Test Case:  74 | Input/Output: [[-20 41 41 41] -20]
Test Case:  75 | Input/Output: [[44 -36 -36 -36] -36]
Test Case:  76 | Input/Output: [[84 84 -19 84] -19]
Test Case:  77 | Input/Output: [[63 -47 63 63] -47]
Test Case:  78 | Input/Output: [[40 -76 -76 -76] -76]
Test Case:  79 | Input/Output: [[74 74 74 4] 4]
Test Case:  80 | Input/Output: [[59 16 16 16] 16]
Test Case:  81 | Input/Output: [[-74 65 65 65] -74]
Test Case:  82 | Input/Output: [[65 -96 65 65] -96]
Test Case:  83 | Input/Output: [[-14 -14 -14 -76] -76]
Test Case:  84 | Input/Output: [[-24 -24 -24 62] -24]
Test Case:  85 | Input/Output: [[40 -36 40 40] -36]
Test Case:  86 | Input/Output: [[60 60 60 -66] -66]
Test Case:  87 | Input/Output: [[-65 -86 -86 -86] -86]
Test Case:  88 | Input/Output: [[9 82 82 82] 9]
Test Case:  89 | Input/Output: [[-10 -10 90 -10] -10]
Test Case:  90 | Input/Output: [[-15 82 -15 -15] -15]
Test Case:  91 | Input/Output: [[-62 -88 -62 -62] -88]
Test Case:  92 | Input/Output: [[82 -36 82 82] -36]
Test Case:  93 | Input/Output: [[53 -18 53 53] -18]
Test Case:  94 | Input/Output: [[78 79 79 79] 78]
Test Case:  95 | Input/Output: [[85 85 85 7] 7]
Test Case:  96 | Input/Output: [[-70 -70 -70 98] -70]
Test Case:  97 | Input/Output: [[-53 -53 -53 -94] -94]
Test Case:  98 | Input/Output: [[24 13 13 13] 13]
Test Case:  99 | Input/Output: [[-56 90 90 90] -56]
Test Case: 100 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 101 | Input/Output: [(64 64 64 64) 64]
Test Case: 102 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 103 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 104 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 105 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 106 | Input/Output: [(27 27 27 27) 27]
Test Case: 107 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 108 | Input/Output: [(68 68 68 68) 68]
Test Case: 109 | Input/Output: [(9 9 9 9) 9]
Test Case: 110 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 111 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 112 | Input/Output: [(89 89 89 89) 89]
Test Case: 113 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 114 | Input/Output: [(95 95 95 95) 95]
Test Case: 115 | Input/Output: [(62 62 62 62) 62]
Test Case: 116 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 117 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 118 | Input/Output: [(36 36 36 36) 36]
Test Case: 119 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 120 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 121 | Input/Output: [(88 88 88 88) 88]
Test Case: 122 | Input/Output: [(10 10 10 10) 10]
Test Case: 123 | Input/Output: [(59 59 59 59) 59]
Test Case: 124 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 125 | Input/Output: [(15 15 15 15) 15]
Test Case: 126 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 127 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 128 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 129 | Input/Output: [(19 19 19 19) 19]
Test Case: 130 | Input/Output: [(40 40 40 40) 40]
Test Case: 131 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 132 | Input/Output: [(68 68 68 68) 68]
Test Case: 133 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 134 | Input/Output: [(37 37 37 37) 37]
Test Case: 135 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 136 | Input/Output: [(31 31 31 31) 31]
Test Case: 137 | Input/Output: [(72 72 72 72) 72]
Test Case: 138 | Input/Output: [(92 92 92 92) 92]
Test Case: 139 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 140 | Input/Output: [(88 88 88 88) 88]
Test Case: 141 | Input/Output: [(9 9 9 9) 9]
Test Case: 142 | Input/Output: [(74 74 74 74) 74]
Test Case: 143 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 144 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 145 | Input/Output: [(4 4 4 4) 4]
Test Case: 146 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 147 | Input/Output: [(77 77 77 77) 77]
Test Case: 148 | Input/Output: [(59 59 59 59) 59]
Test Case: 149 | Input/Output: [(88 88 88 88) 88]
Test Case: 150 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 151 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 152 | Input/Output: [(21 21 21 21) 21]
Test Case: 153 | Input/Output: [(79 79 79 79) 79]
Test Case: 154 | Input/Output: [(71 71 71 71) 71]
Test Case: 155 | Input/Output: [(17 17 17 17) 17]
Test Case: 156 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 157 | Input/Output: [(68 68 68 68) 68]
Test Case: 158 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 159 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 160 | Input/Output: [(69 69 69 69) 69]
Test Case: 161 | Input/Output: [(58 58 58 58) 58]
Test Case: 162 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 163 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 164 | Input/Output: [(70 70 70 70) 70]
Test Case: 165 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 166 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 167 | Input/Output: [(61 61 61 61) 61]
Test Case: 168 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 169 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 170 | Input/Output: [(8 8 8 8) 8]
Test Case: 171 | Input/Output: [(66 66 66 66) 66]
Test Case: 172 | Input/Output: [(37 37 37 37) 37]
Test Case: 173 | Input/Output: [(75 75 75 75) 75]
Test Case: 174 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 175 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 176 | Input/Output: [(82 82 82 82) 82]
Test Case: 177 | Input/Output: [(62 62 62 62) 62]
Test Case: 178 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 179 | Input/Output: [(91 91 91 91) 91]
Test Case: 180 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 181 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 182 | Input/Output: [(2 2 2 2) 2]
Test Case: 183 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(60 60 60 60) 60]
Test Case: 186 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 187 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 188 | Input/Output: [(29 29 29 29) 29]
Test Case: 189 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 190 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 191 | Input/Output: [(45 45 45 45) 45]
Test Case: 192 | Input/Output: [(93 93 93 93) 93]
Test Case: 193 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 194 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 195 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 196 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 197 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 198 | Input/Output: [(65 65 65 65) 65]
Test Case: 199 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 200 | Input/Output: [(15 0 41 7) 0]
Test Case: 201 | Input/Output: [(3 72 80 46) 3]
Test Case: 202 | Input/Output: [(18 71 5 76) 5]
Test Case: 203 | Input/Output: [(38 40 54 47) 38]
Test Case: 204 | Input/Output: [(23 74 81 39) 23]
Test Case: 205 | Input/Output: [(47 65 60 56) 47]
Test Case: 206 | Input/Output: [(18 38 20 13) 13]
Test Case: 207 | Input/Output: [(84 53 9 73) 9]
Test Case: 208 | Input/Output: [(98 58 13 3) 3]
Test Case: 209 | Input/Output: [(28 49 82 24) 24]
Test Case: 210 | Input/Output: [(86 68 86 44) 44]
Test Case: 211 | Input/Output: [(16 42 34 21) 16]
Test Case: 212 | Input/Output: [(28 17 4 44) 4]
Test Case: 213 | Input/Output: [(42 13 78 70) 13]
Test Case: 214 | Input/Output: [(8 72 68 92) 8]
Test Case: 215 | Input/Output: [(61 71 62 78) 61]
Test Case: 216 | Input/Output: [(18 93 39 24) 18]
Test Case: 217 | Input/Output: [(94 55 33 11) 11]
Test Case: 218 | Input/Output: [(63 33 86 13) 13]
Test Case: 219 | Input/Output: [(85 47 17 33) 17]
Test Case: 220 | Input/Output: [(34 91 73 5) 5]
Test Case: 221 | Input/Output: [(58 84 82 89) 58]
Test Case: 222 | Input/Output: [(94 55 39 26) 26]
Test Case: 223 | Input/Output: [(23 98 2 18) 2]
Test Case: 224 | Input/Output: [(65 9 64 77) 9]
Test Case: 225 | Input/Output: [(94 57 62 59) 57]
Test Case: 226 | Input/Output: [(39 48 49 22) 22]
Test Case: 227 | Input/Output: [(59 55 27 86) 27]
Test Case: 228 | Input/Output: [(89 9 59 11) 9]
Test Case: 229 | Input/Output: [(91 54 59 27) 27]
Test Case: 230 | Input/Output: [(89 98 43 60) 43]
Test Case: 231 | Input/Output: [(41 94 3 53) 3]
Test Case: 232 | Input/Output: [(70 78 42 37) 37]
Test Case: 233 | Input/Output: [(87 46 10 28) 10]
Test Case: 234 | Input/Output: [(53 43 1 99) 1]
Test Case: 235 | Input/Output: [(22 44 91 52) 22]
Test Case: 236 | Input/Output: [(11 38 62 97) 11]
Test Case: 237 | Input/Output: [(74 54 72 9) 9]
Test Case: 238 | Input/Output: [(94 7 41 11) 7]
Test Case: 239 | Input/Output: [(97 20 17 12) 12]
Test Case: 240 | Input/Output: [(74 57 22 71) 22]
Test Case: 241 | Input/Output: [(80 17 92 61) 17]
Test Case: 242 | Input/Output: [(82 14 18 78) 14]
Test Case: 243 | Input/Output: [(25 22 35 56) 22]
Test Case: 244 | Input/Output: [(8 43 27 36) 8]
Test Case: 245 | Input/Output: [(44 24 20 16) 16]
Test Case: 246 | Input/Output: [(3 92 2 21) 2]
Test Case: 247 | Input/Output: [(18 63 44 81) 18]
Test Case: 248 | Input/Output: [(48 94 17 86) 17]
Test Case: 249 | Input/Output: [(62 87 73 50) 50]
Test Case: 250 | Input/Output: [(13 51 74 25) 13]
Test Case: 251 | Input/Output: [(68 26 61 43) 26]
Test Case: 252 | Input/Output: [(59 20 42 1) 1]
Test Case: 253 | Input/Output: [(64 81 4 36) 4]
Test Case: 254 | Input/Output: [(53 52 44 79) 44]
Test Case: 255 | Input/Output: [(70 71 86 28) 28]
Test Case: 256 | Input/Output: [(8 99 96 10) 8]
Test Case: 257 | Input/Output: [(34 2 87 79) 2]
Test Case: 258 | Input/Output: [(3 98 30 23) 3]
Test Case: 259 | Input/Output: [(95 24 54 43) 24]
Test Case: 260 | Input/Output: [(54 82 30 79) 30]
Test Case: 261 | Input/Output: [(37 57 35 73) 35]
Test Case: 262 | Input/Output: [(85 40 23 82) 23]
Test Case: 263 | Input/Output: [(22 83 49 4) 4]
Test Case: 264 | Input/Output: [(96 41 54 37) 37]
Test Case: 265 | Input/Output: [(79 11 30 69) 11]
Test Case: 266 | Input/Output: [(82 96 93 67) 67]
Test Case: 267 | Input/Output: [(24 1 45 45) 1]
Test Case: 268 | Input/Output: [(48 11 70 17) 11]
Test Case: 269 | Input/Output: [(40 90 100 24) 24]
Test Case: 270 | Input/Output: [(73 29 71 90) 29]
Test Case: 271 | Input/Output: [(78 60 99 63) 60]
Test Case: 272 | Input/Output: [(91 60 57 39) 39]
Test Case: 273 | Input/Output: [(67 21 83 72) 21]
Test Case: 274 | Input/Output: [(64 61 30 23) 23]
Test Case: 275 | Input/Output: [(73 83 39 71) 39]
Test Case: 276 | Input/Output: [(70 79 2 74) 2]
Test Case: 277 | Input/Output: [(61 44 39 23) 23]
Test Case: 278 | Input/Output: [(7 69 89 90) 7]
Test Case: 279 | Input/Output: [(50 20 25 93) 20]
Test Case: 280 | Input/Output: [(83 29 74 34) 29]
Test Case: 281 | Input/Output: [(100 6 94 81) 6]
Test Case: 282 | Input/Output: [(99 57 14 13) 13]
Test Case: 283 | Input/Output: [(61 70 77 63) 61]
Test Case: 284 | Input/Output: [(6 9 56 47) 6]
Test Case: 285 | Input/Output: [(5 58 76 87) 5]
Test Case: 286 | Input/Output: [(46 74 100 99) 46]
Test Case: 287 | Input/Output: [(28 38 12 49) 12]
Test Case: 288 | Input/Output: [(37 36 45 50) 36]
Test Case: 289 | Input/Output: [(98 21 65 90) 21]
Test Case: 290 | Input/Output: [(26 6 29 58) 6]
Test Case: 291 | Input/Output: [(11 86 66 74) 11]
Test Case: 292 | Input/Output: [(75 69 38 51) 38]
Test Case: 293 | Input/Output: [(73 41 94 23) 23]
Test Case: 294 | Input/Output: [(98 36 19 6) 6]
Test Case: 295 | Input/Output: [(58 91 92 72) 58]
Test Case: 296 | Input/Output: [(83 29 8 80) 8]
Test Case: 297 | Input/Output: [(58 56 81 66) 56]
Test Case: 298 | Input/Output: [(14 22 96 30) 14]
Test Case: 299 | Input/Output: [(41 61 61 13) 13]
Test Case: 300 | Input/Output: [(0 99 37 76) 0]
Test Case: 301 | Input/Output: [(33 90 41 21) 21]
Test Case: 302 | Input/Output: [(15 21 76 61) 15]
Test Case: 303 | Input/Output: [(29 13 74 22) 13]
Test Case: 304 | Input/Output: [(70 1 72 35) 1]
Test Case: 305 | Input/Output: [(95 69 37 31) 31]
Test Case: 306 | Input/Output: [(61 41 83 71) 41]
Test Case: 307 | Input/Output: [(77 32 9 22) 9]
Test Case: 308 | Input/Output: [(15 51 82 48) 15]
Test Case: 309 | Input/Output: [(25 82 13 82) 13]
Test Case: 310 | Input/Output: [(8 87 24 24) 8]
Test Case: 311 | Input/Output: [(57 88 89 58) 57]
Test Case: 312 | Input/Output: [(21 54 9 28) 9]
Test Case: 313 | Input/Output: [(11 49 75 89) 11]
Test Case: 314 | Input/Output: [(76 84 48 77) 48]
Test Case: 315 | Input/Output: [(51 12 46 47) 12]
Test Case: 316 | Input/Output: [(18 3 80 68) 3]
Test Case: 317 | Input/Output: [(75 24 24 87) 24]
Test Case: 318 | Input/Output: [(27 47 22 37) 22]
Test Case: 319 | Input/Output: [(4 71 52 92) 4]
Test Case: 320 | Input/Output: [(11 68 57 27) 11]
Test Case: 321 | Input/Output: [(35 89 20 64) 20]
Test Case: 322 | Input/Output: [(26 40 29 100) 26]
Test Case: 323 | Input/Output: [(9 51 60 25) 9]
Test Case: 324 | Input/Output: [(61 75 56 24) 24]
Test Case: 325 | Input/Output: [(81 14 28 53) 14]
Test Case: 326 | Input/Output: [(73 0 90 13) 0]
Test Case: 327 | Input/Output: [(77 44 92 25) 25]
Test Case: 328 | Input/Output: [(6 25 48 32) 6]
Test Case: 329 | Input/Output: [(60 42 38 79) 38]
Test Case: 330 | Input/Output: [(13 18 54 98) 13]
Test Case: 331 | Input/Output: [(11 57 5 93) 5]
Test Case: 332 | Input/Output: [(70 47 78 69) 47]
Test Case: 333 | Input/Output: [(75 57 8 18) 8]
Test Case: 334 | Input/Output: [(41 84 60 42) 41]
Test Case: 335 | Input/Output: [(71 72 24 56) 24]
Test Case: 336 | Input/Output: [(55 67 88 5) 5]
Test Case: 337 | Input/Output: [(72 65 74 62) 62]
Test Case: 338 | Input/Output: [(51 3 41 44) 3]
Test Case: 339 | Input/Output: [(88 73 30 59) 30]
Test Case: 340 | Input/Output: [(73 82 18 12) 12]
Test Case: 341 | Input/Output: [(49 73 54 15) 15]
Test Case: 342 | Input/Output: [(52 12 43 86) 12]
Test Case: 343 | Input/Output: [(94 16 15 41) 15]
Test Case: 344 | Input/Output: [(69 45 91 53) 45]
Test Case: 345 | Input/Output: [(70 50 17 86) 17]
Test Case: 346 | Input/Output: [(39 68 72 60) 39]
Test Case: 347 | Input/Output: [(46 68 36 22) 22]
Test Case: 348 | Input/Output: [(81 90 89 77) 77]
Test Case: 349 | Input/Output: [(35 90 83 34) 34]
Test Case: 350 | Input/Output: [(80 2 75 79) 2]
Test Case: 351 | Input/Output: [(60 41 29 37) 29]
Test Case: 352 | Input/Output: [(29 26 38 70) 26]
Test Case: 353 | Input/Output: [(75 20 14 49) 14]
Test Case: 354 | Input/Output: [(41 15 5 52) 5]
Test Case: 355 | Input/Output: [(46 72 7 34) 7]
Test Case: 356 | Input/Output: [(71 75 25 5) 5]
Test Case: 357 | Input/Output: [(6 44 78 20) 6]
Test Case: 358 | Input/Output: [(64 25 34 60) 25]
Test Case: 359 | Input/Output: [(67 39 72 0) 0]
Test Case: 360 | Input/Output: [(7 68 42 7) 7]
Test Case: 361 | Input/Output: [(24 45 83 70) 24]
Test Case: 362 | Input/Output: [(18 17 81 89) 17]
Test Case: 363 | Input/Output: [(85 96 97 17) 17]
Test Case: 364 | Input/Output: [(26 40 12 80) 12]
Test Case: 365 | Input/Output: [(71 42 18 69) 18]
Test Case: 366 | Input/Output: [(27 93 56 44) 27]
Test Case: 367 | Input/Output: [(12 94 55 60) 12]
Test Case: 368 | Input/Output: [(38 40 22 13) 13]
Test Case: 369 | Input/Output: [(2 48 35 55) 2]
Test Case: 370 | Input/Output: [(89 86 41 92) 41]
Test Case: 371 | Input/Output: [(77 38 50 32) 32]
Test Case: 372 | Input/Output: [(100 48 17 60) 17]
Test Case: 373 | Input/Output: [(21 23 21 99) 21]
Test Case: 374 | Input/Output: [(80 61 45 16) 16]
Test Case: 375 | Input/Output: [(90 70 50 46) 46]
Test Case: 376 | Input/Output: [(99 82 19 55) 19]
Test Case: 377 | Input/Output: [(85 87 19 54) 19]
Test Case: 378 | Input/Output: [(35 90 59 23) 23]
Test Case: 379 | Input/Output: [(91 48 89 88) 48]
Test Case: 380 | Input/Output: [(63 22 33 31) 22]
Test Case: 381 | Input/Output: [(17 7 51 38) 7]
Test Case: 382 | Input/Output: [(56 26 90 44) 26]
Test Case: 383 | Input/Output: [(20 28 99 69) 20]
Test Case: 384 | Input/Output: [(95 7 87 77) 7]
Test Case: 385 | Input/Output: [(48 5 45 70) 5]
Test Case: 386 | Input/Output: [(72 61 1 35) 1]
Test Case: 387 | Input/Output: [(29 89 69 56) 29]
Test Case: 388 | Input/Output: [(59 57 10 26) 10]
Test Case: 389 | Input/Output: [(45 60 76 9) 9]
Test Case: 390 | Input/Output: [(95 23 86 68) 23]
Test Case: 391 | Input/Output: [(7 61 19 50) 7]
Test Case: 392 | Input/Output: [(69 26 3 33) 3]
Test Case: 393 | Input/Output: [(1 59 31 56) 1]
Test Case: 394 | Input/Output: [(35 63 60 82) 35]
Test Case: 395 | Input/Output: [(22 15 62 49) 15]
Test Case: 396 | Input/Output: [(87 96 82 68) 68]
Test Case: 397 | Input/Output: [(41 82 23 55) 23]
Test Case: 398 | Input/Output: [(60 25 27 17) 17]
Test Case: 399 | Input/Output: [(52 2 24 50) 2]
Test Case: 400 | Input/Output: [(-45 60 93 -86) -86]
Test Case: 401 | Input/Output: [(54 86 -9 27) -9]
Test Case: 402 | Input/Output: [(70 84 99 -19) -19]
Test Case: 403 | Input/Output: [(20 10 38 -36) -36]
Test Case: 404 | Input/Output: [(78 85 -48 44) -48]
Test Case: 405 | Input/Output: [(5 41 42 -31) -31]
Test Case: 406 | Input/Output: [(-62 63 71 26) -62]
Test Case: 407 | Input/Output: [(99 -57 -72 -43) -72]
Test Case: 408 | Input/Output: [(-26 -11 -34 83) -34]
Test Case: 409 | Input/Output: [(-31 19 75 -8) -31]
Test Case: 410 | Input/Output: [(-11 95 42 -47) -47]
Test Case: 411 | Input/Output: [(15 -47 -19 -96) -96]
Test Case: 412 | Input/Output: [(52 74 74 -18) -18]
Test Case: 413 | Input/Output: [(-93 48 -64 26) -93]
Test Case: 414 | Input/Output: [(56 -38 41 17) -38]
Test Case: 415 | Input/Output: [(-68 90 69 43) -68]
Test Case: 416 | Input/Output: [(-38 -78 51 -39) -78]
Test Case: 417 | Input/Output: [(-64 -63 -13 -10) -64]
Test Case: 418 | Input/Output: [(-74 25 42 -23) -74]
Test Case: 419 | Input/Output: [(26 -5 -61 49) -61]
Test Case: 420 | Input/Output: [(-61 -5 -99 7) -99]
Test Case: 421 | Input/Output: [(-5 81 -65 -49) -65]
Test Case: 422 | Input/Output: [(-51 91 98 26) -51]
Test Case: 423 | Input/Output: [(-12 84 -98 13) -98]
Test Case: 424 | Input/Output: [(33 -66 44 9) -66]
Test Case: 425 | Input/Output: [(-49 8 -96 40) -96]
Test Case: 426 | Input/Output: [(-89 -68 -51 -9) -89]
Test Case: 427 | Input/Output: [(-42 -96 -75 -9) -96]
Test Case: 428 | Input/Output: [(58 90 47 -20) -20]
Test Case: 429 | Input/Output: [(94 52 34 62) 34]
Test Case: 430 | Input/Output: [(80 -63 68 -37) -63]
Test Case: 431 | Input/Output: [(17 -75 -17 21) -75]
Test Case: 432 | Input/Output: [(-2 -27 93 77) -27]
Test Case: 433 | Input/Output: [(-44 64 18 -29) -44]
Test Case: 434 | Input/Output: [(-14 94 50 -8) -14]
Test Case: 435 | Input/Output: [(-98 -62 -59 32) -98]
Test Case: 436 | Input/Output: [(-76 -27 -93 44) -93]
Test Case: 437 | Input/Output: [(-28 99 19 41) -28]
Test Case: 438 | Input/Output: [(16 -68 90 -29) -68]
Test Case: 439 | Input/Output: [(-20 89 -48 1) -48]
Test Case: 440 | Input/Output: [(78 -79 39 -14) -79]
Test Case: 441 | Input/Output: [(-67 6 -80 88) -80]
Test Case: 442 | Input/Output: [(-23 -5 58 37) -23]
Test Case: 443 | Input/Output: [(-14 -4 54 -66) -66]
Test Case: 444 | Input/Output: [(52 -73 45 81) -73]
Test Case: 445 | Input/Output: [(-50 -15 6 77) -50]
Test Case: 446 | Input/Output: [(-96 -94 48 2) -96]
Test Case: 447 | Input/Output: [(92 69 33 79) 33]
Test Case: 448 | Input/Output: [(97 19 8 13) 8]
Test Case: 449 | Input/Output: [(49 -99 -91 74) -99]
Test Case: 450 | Input/Output: [(87 -67 27 -88) -88]
Test Case: 451 | Input/Output: [(70 61 -11 6) -11]
Test Case: 452 | Input/Output: [(40 79 -64 98) -64]
Test Case: 453 | Input/Output: [(30 -36 -18 22) -36]
Test Case: 454 | Input/Output: [(32 89 85 -22) -22]
Test Case: 455 | Input/Output: [(42 4 -82 -22) -82]
Test Case: 456 | Input/Output: [(-10 -44 -27 -85) -85]
Test Case: 457 | Input/Output: [(62 -8 26 96) -8]
Test Case: 458 | Input/Output: [(13 -85 -82 -17) -85]
Test Case: 459 | Input/Output: [(-63 94 20 15) -63]
Test Case: 460 | Input/Output: [(38 -86 88 46) -86]
Test Case: 461 | Input/Output: [(-18 19 9 15) -18]
Test Case: 462 | Input/Output: [(11 49 -91 -33) -91]
Test Case: 463 | Input/Output: [(-73 -21 1 -37) -73]
Test Case: 464 | Input/Output: [(30 72 -85 10) -85]
Test Case: 465 | Input/Output: [(-93 -68 -40 -12) -93]
Test Case: 466 | Input/Output: [(-90 22 -80 9) -90]
Test Case: 467 | Input/Output: [(36 16 91 -52) -52]
Test Case: 468 | Input/Output: [(-82 34 63 49) -82]
Test Case: 469 | Input/Output: [(-39 69 70 9) -39]
Test Case: 470 | Input/Output: [(-13 -41 18 -51) -51]
Test Case: 471 | Input/Output: [(80 -36 -57 -20) -57]
Test Case: 472 | Input/Output: [(-84 65 -38 -11) -84]
Test Case: 473 | Input/Output: [(-66 9 28 89) -66]
Test Case: 474 | Input/Output: [(-16 34 89 -80) -80]
Test Case: 475 | Input/Output: [(-21 79 69 -35) -35]
Test Case: 476 | Input/Output: [(71 -31 1 -88) -88]
Test Case: 477 | Input/Output: [(78 -69 -92 -31) -92]
Test Case: 478 | Input/Output: [(53 -78 -14 -34) -78]
Test Case: 479 | Input/Output: [(77 82 -10 -39) -39]
Test Case: 480 | Input/Output: [(5 -41 1 70) -41]
Test Case: 481 | Input/Output: [(90 77 75 15) 15]
Test Case: 482 | Input/Output: [(-65 -80 75 2) -80]
Test Case: 483 | Input/Output: [(17 -69 -72 -23) -72]
Test Case: 484 | Input/Output: [(95 -26 -38 -78) -78]
Test Case: 485 | Input/Output: [(43 99 74 -72) -72]
Test Case: 486 | Input/Output: [(24 6 -13 -53) -53]
Test Case: 487 | Input/Output: [(45 -7 -11 -97) -97]
Test Case: 488 | Input/Output: [(-97 -80 -16 -68) -97]
Test Case: 489 | Input/Output: [(3 -28 -56 54) -56]
Test Case: 490 | Input/Output: [(29 -36 96 8) -36]
Test Case: 491 | Input/Output: [(78 71 100 -50) -50]
Test Case: 492 | Input/Output: [(41 96 -76 -84) -84]
Test Case: 493 | Input/Output: [(-37 48 12 -3) -37]
Test Case: 494 | Input/Output: [(-6 31 -1 37) -6]
Test Case: 495 | Input/Output: [(33 75 41 -90) -90]
Test Case: 496 | Input/Output: [(-5 36 87 87) -5]
Test Case: 497 | Input/Output: [(0 34 -76 8) -76]
Test Case: 498 | Input/Output: [(-13 3 49 6) -13]
Test Case: 499 | Input/Output: [(80 -70 55 -97) -97]
Test Case: 500 | Input/Output: [(93 38 -78 55) -78]
Test Case: 501 | Input/Output: [(-53 -10 -8 -49) -53]
Test Case: 502 | Input/Output: [(69 -98 -77 50) -98]
Test Case: 503 | Input/Output: [(31 58 -69 -80) -80]
Test Case: 504 | Input/Output: [(85 -18 34 -40) -40]
Test Case: 505 | Input/Output: [(-64 -30 -8 35) -64]
Test Case: 506 | Input/Output: [(-2 50 46 25) -2]
Test Case: 507 | Input/Output: [(63 100 31 83) 31]
Test Case: 508 | Input/Output: [(-61 45 84 72) -61]
Test Case: 509 | Input/Output: [(36 18 -84 58) -84]
Test Case: 510 | Input/Output: [(-85 -24 -78 -27) -85]
Test Case: 511 | Input/Output: [(-48 -86 -30 -75) -86]
Test Case: 512 | Input/Output: [(-34 -54 45 -31) -54]
Test Case: 513 | Input/Output: [(41 -8 49 15) -8]
Test Case: 514 | Input/Output: [(-85 -58 82 -52) -85]
Test Case: 515 | Input/Output: [(48 93 20 -18) -18]
Test Case: 516 | Input/Output: [(62 23 80 -45) -45]
Test Case: 517 | Input/Output: [(77 15 -55 -12) -55]
Test Case: 518 | Input/Output: [(100 -56 -47 49) -56]
Test Case: 519 | Input/Output: [(91 34 47 -75) -75]
Test Case: 520 | Input/Output: [(-31 99 -88 12) -88]
Test Case: 521 | Input/Output: [(-17 38 82 95) -17]
Test Case: 522 | Input/Output: [(-95 58 60 94) -95]
Test Case: 523 | Input/Output: [(68 -91 -2 -40) -91]
Test Case: 524 | Input/Output: [(-29 -2 -16 39) -29]
Test Case: 525 | Input/Output: [(-30 -89 -22 -93) -93]
Test Case: 526 | Input/Output: [(40 -71 -78 -79) -79]
Test Case: 527 | Input/Output: [(0 94 82 58) 0]
Test Case: 528 | Input/Output: [(6 -46 62 -75) -75]
Test Case: 529 | Input/Output: [(-6 62 -86 -94) -94]
Test Case: 530 | Input/Output: [(97 95 53 37) 37]
Test Case: 531 | Input/Output: [(-88 22 23 85) -88]
Test Case: 532 | Input/Output: [(-97 -57 -64 -51) -97]
Test Case: 533 | Input/Output: [(-81 -94 5 -31) -94]
Test Case: 534 | Input/Output: [(-89 -6 -2 -91) -91]
Test Case: 535 | Input/Output: [(26 -62 41 38) -62]
Test Case: 536 | Input/Output: [(-28 54 5 35) -28]
Test Case: 537 | Input/Output: [(-9 -96 74 -26) -96]
Test Case: 538 | Input/Output: [(91 -61 -19 -43) -61]
Test Case: 539 | Input/Output: [(-49 67 0 -75) -75]
Test Case: 540 | Input/Output: [(-75 72 -44 13) -75]
Test Case: 541 | Input/Output: [(-33 -93 -79 60) -93]
Test Case: 542 | Input/Output: [(-19 -25 14 21) -25]
Test Case: 543 | Input/Output: [(-57 -96 -60 81) -96]
Test Case: 544 | Input/Output: [(77 -62 -93 -28) -93]
Test Case: 545 | Input/Output: [(-32 15 -2 94) -32]
Test Case: 546 | Input/Output: [(69 85 20 59) 20]
Test Case: 547 | Input/Output: [(-29 -73 29 -64) -73]
Test Case: 548 | Input/Output: [(-6 -18 -86 42) -86]
Test Case: 549 | Input/Output: [(-29 79 -87 -30) -87]
Test Case: 550 | Input/Output: [(68 -79 72 -79) -79]
Test Case: 551 | Input/Output: [(-84 23 -83 -25) -84]
Test Case: 552 | Input/Output: [(30 84 -22 63) -22]
Test Case: 553 | Input/Output: [(-55 29 97 -86) -86]
Test Case: 554 | Input/Output: [(77 -99 85 -43) -99]
Test Case: 555 | Input/Output: [(87 -32 80 -48) -48]
Test Case: 556 | Input/Output: [(57 -94 54 -66) -94]
Test Case: 557 | Input/Output: [(-57 72 -3 6) -57]
Test Case: 558 | Input/Output: [(25 67 30 32) 25]
Test Case: 559 | Input/Output: [(25 -76 67 35) -76]
Test Case: 560 | Input/Output: [(-65 -24 -31 -16) -65]
Test Case: 561 | Input/Output: [(-45 -83 -79 -57) -83]
Test Case: 562 | Input/Output: [(-75 -85 95 -46) -85]
Test Case: 563 | Input/Output: [(0 49 35 -84) -84]
Test Case: 564 | Input/Output: [(6 -34 96 24) -34]
Test Case: 565 | Input/Output: [(88 -100 -77 -40) -100]
Test Case: 566 | Input/Output: [(-35 -84 30 87) -84]
Test Case: 567 | Input/Output: [(75 55 -65 36) -65]
Test Case: 568 | Input/Output: [(-34 49 68 13) -34]
Test Case: 569 | Input/Output: [(-90 -81 -52 64) -90]
Test Case: 570 | Input/Output: [(29 42 73 44) 29]
Test Case: 571 | Input/Output: [(-4 -19 73 99) -19]
Test Case: 572 | Input/Output: [(-12 87 -3 3) -12]
Test Case: 573 | Input/Output: [(7 19 78 -84) -84]
Test Case: 574 | Input/Output: [(-42 -63 32 -93) -93]
Test Case: 575 | Input/Output: [(66 -90 -48 -9) -90]
Test Case: 576 | Input/Output: [(-30 -81 92 -67) -81]
Test Case: 577 | Input/Output: [(53 -97 53 60) -97]
Test Case: 578 | Input/Output: [(-69 -10 10 96) -69]
Test Case: 579 | Input/Output: [(-85 71 -88 84) -88]
Test Case: 580 | Input/Output: [(-48 -95 -88 24) -95]
Test Case: 581 | Input/Output: [(4 65 -59 80) -59]
Test Case: 582 | Input/Output: [(54 74 12 -84) -84]
Test Case: 583 | Input/Output: [(43 52 69 76) 43]
Test Case: 584 | Input/Output: [(-97 42 -62 -32) -97]
Test Case: 585 | Input/Output: [(-71 -25 45 -77) -77]
Test Case: 586 | Input/Output: [(-30 -5 -53 -10) -53]
Test Case: 587 | Input/Output: [(43 65 -15 -27) -27]
Test Case: 588 | Input/Output: [(8 -80 93 -35) -80]
Test Case: 589 | Input/Output: [(-66 3 -17 -51) -66]
Test Case: 590 | Input/Output: [(28 1 57 43) 1]
Test Case: 591 | Input/Output: [(-50 -46 82 -6) -50]
Test Case: 592 | Input/Output: [(-67 46 10 29) -67]
Test Case: 593 | Input/Output: [(-31 17 -63 16) -63]
Test Case: 594 | Input/Output: [(73 74 78 -53) -53]
Test Case: 595 | Input/Output: [(16 46 21 -24) -24]
Test Case: 596 | Input/Output: [(27 -79 -62 -4) -79]
Test Case: 597 | Input/Output: [(-58 60 26 -6) -58]
Test Case: 598 | Input/Output: [(28 86 74 -12) -12]
Test Case: 599 | Input/Output: [(-16 0 86 27) -16]
Test Case: 600 | Input/Output: [(-55 89 44 -69) -69]
Test Case: 601 | Input/Output: [(-6 -79 0 -60) -79]
Test Case: 602 | Input/Output: [(-18 -64 85 -8) -64]
Test Case: 603 | Input/Output: [(-93 65 74 77) -93]
Test Case: 604 | Input/Output: [(-84 64 0 -33) -84]
Test Case: 605 | Input/Output: [(-98 65 83 30) -98]
Test Case: 606 | Input/Output: [(75 -2 -68 53) -68]
Test Case: 607 | Input/Output: [(79 -90 40 94) -90]
Test Case: 608 | Input/Output: [(-85 -6 -78 -64) -85]
Test Case: 609 | Input/Output: [(-58 -19 -88 92) -88]
Test Case: 610 | Input/Output: [(-24 31 14 12) -24]
Test Case: 611 | Input/Output: [(-97 -15 -100 34) -100]
Test Case: 612 | Input/Output: [(26 -22 -62 43) -62]
Test Case: 613 | Input/Output: [(-90 -80 -54 0) -90]
Test Case: 614 | Input/Output: [(-96 2 87 -13) -96]
Test Case: 615 | Input/Output: [(0 23 48 76) 0]
Test Case: 616 | Input/Output: [(25 54 -37 69) -37]
Test Case: 617 | Input/Output: [(13 11 27 45) 11]
Test Case: 618 | Input/Output: [(51 14 51 21) 14]
Test Case: 619 | Input/Output: [(9 5 -46 27) -46]
Test Case: 620 | Input/Output: [(43 -51 41 -82) -82]
Test Case: 621 | Input/Output: [(89 94 -12 28) -12]
Test Case: 622 | Input/Output: [(7 59 66 27) 7]
Test Case: 623 | Input/Output: [(-74 -32 -36 11) -74]
Test Case: 624 | Input/Output: [(61 -79 92 38) -79]
Test Case: 625 | Input/Output: [(26 27 -18 33) -18]
Test Case: 626 | Input/Output: [(-24 87 34 -34) -34]
Test Case: 627 | Input/Output: [(-47 48 -83 -20) -83]
Test Case: 628 | Input/Output: [(31 -92 -63 -44) -92]
Test Case: 629 | Input/Output: [(-21 4 34 13) -21]
Test Case: 630 | Input/Output: [(-23 -11 -57 85) -57]
Test Case: 631 | Input/Output: [(72 -66 -23 89) -66]
Test Case: 632 | Input/Output: [(-84 -29 87 -69) -84]
Test Case: 633 | Input/Output: [(2 -52 -4 59) -52]
Test Case: 634 | Input/Output: [(28 19 -2 78) -2]
Test Case: 635 | Input/Output: [(-40 37 97 64) -40]
Test Case: 636 | Input/Output: [(-67 -72 -100 30) -100]
Test Case: 637 | Input/Output: [(82 -2 -63 -47) -63]
Test Case: 638 | Input/Output: [(98 -4 -29 -67) -67]
Test Case: 639 | Input/Output: [(66 -55 53 62) -55]
Test Case: 640 | Input/Output: [(-26 -6 -76 -72) -76]
Test Case: 641 | Input/Output: [(75 79 78 -68) -68]
Test Case: 642 | Input/Output: [(85 -69 56 -1) -69]
Test Case: 643 | Input/Output: [(-9 100 38 4) -9]
Test Case: 644 | Input/Output: [(62 5 -35 -62) -62]
Test Case: 645 | Input/Output: [(1 66 33 -35) -35]
Test Case: 646 | Input/Output: [(-96 9 -43 95) -96]
Test Case: 647 | Input/Output: [(-43 -4 -35 -79) -79]
Test Case: 648 | Input/Output: [(-18 35 25 56) -18]
Test Case: 649 | Input/Output: [(79 98 -71 -14) -71]
Test Case: 650 | Input/Output: [(-82 -95 -44 -90) -95]
Test Case: 651 | Input/Output: [(71 -69 17 62) -69]
Test Case: 652 | Input/Output: [(24 99 -68 -41) -68]
Test Case: 653 | Input/Output: [(24 -14 -28 58) -28]
Test Case: 654 | Input/Output: [(0 -20 59 5) -20]
Test Case: 655 | Input/Output: [(29 19 28 -45) -45]
Test Case: 656 | Input/Output: [(-92 -85 36 47) -92]
Test Case: 657 | Input/Output: [(47 -90 -66 28) -90]
Test Case: 658 | Input/Output: [(-73 10 -57 -18) -73]
Test Case: 659 | Input/Output: [(39 56 -7 -52) -52]
Test Case: 660 | Input/Output: [(-85 -19 11 29) -85]
Test Case: 661 | Input/Output: [(80 78 71 -52) -52]
Test Case: 662 | Input/Output: [(70 74 -12 19) -12]
Test Case: 663 | Input/Output: [(87 25 -55 -84) -84]
Test Case: 664 | Input/Output: [(-8 54 -51 78) -51]
Test Case: 665 | Input/Output: [(-46 38 73 -52) -52]
Test Case: 666 | Input/Output: [(-75 75 -50 -71) -75]
Test Case: 667 | Input/Output: [(-11 -52 -54 91) -54]
Test Case: 668 | Input/Output: [(66 -19 67 62) -19]
Test Case: 669 | Input/Output: [(-53 0 62 71) -53]
Test Case: 670 | Input/Output: [(8 -28 -23 56) -28]
Test Case: 671 | Input/Output: [(-78 65 -88 15) -88]
Test Case: 672 | Input/Output: [(-30 -23 -72 33) -72]
Test Case: 673 | Input/Output: [(-35 57 16 -83) -83]
Test Case: 674 | Input/Output: [(-93 -56 -49 -44) -93]
Test Case: 675 | Input/Output: [(41 37 66 -91) -91]
Test Case: 676 | Input/Output: [(-13 -61 -7 52) -61]
Test Case: 677 | Input/Output: [(30 37 -4 -20) -20]
Test Case: 678 | Input/Output: [(87 -14 -36 -18) -36]
Test Case: 679 | Input/Output: [(-77 -89 -52 -28) -89]
Test Case: 680 | Input/Output: [(41 -32 27 70) -32]
Test Case: 681 | Input/Output: [(62 6 70 -71) -71]
Test Case: 682 | Input/Output: [(47 -71 38 97) -71]
Test Case: 683 | Input/Output: [(-85 -68 -62 -15) -85]
Test Case: 684 | Input/Output: [(13 83 68 78) 13]
Test Case: 685 | Input/Output: [(13 -41 8 -56) -56]
Test Case: 686 | Input/Output: [(-97 -51 80 87) -97]
Test Case: 687 | Input/Output: [(54 93 41 7) 7]
Test Case: 688 | Input/Output: [(85 -87 -39 -39) -87]
Test Case: 689 | Input/Output: [(-33 64 91 39) -33]
Test Case: 690 | Input/Output: [(57 52 91 -20) -20]
Test Case: 691 | Input/Output: [(-49 75 -53 58) -53]
Test Case: 692 | Input/Output: [(29 -7 6 81) -7]
Test Case: 693 | Input/Output: [(73 46 75 -10) -10]
Test Case: 694 | Input/Output: [(-45 28 85 -41) -45]
Test Case: 695 | Input/Output: [(54 26 -96 -76) -96]
Test Case: 696 | Input/Output: [(30 44 -80 96) -80]
Test Case: 697 | Input/Output: [(-42 91 77 85) -42]
Test Case: 698 | Input/Output: [(57 -1 -39 -1) -39]
Test Case: 699 | Input/Output: [(15 36 2 -100) -100]
Test Case: 700 | Input/Output: [(-15 38 57 -61) -61]
Test Case: 701 | Input/Output: [(79 -89 69 -93) -93]
Test Case: 702 | Input/Output: [(-9 29 -69 12) -69]
Test Case: 703 | Input/Output: [(48 -49 -66 -19) -66]
Test Case: 704 | Input/Output: [(-56 -86 27 -59) -86]
Test Case: 705 | Input/Output: [(55 -54 51 -48) -54]
Test Case: 706 | Input/Output: [(87 -6 -34 -4) -34]
Test Case: 707 | Input/Output: [(-100 -28 15 48) -100]
Test Case: 708 | Input/Output: [(-17 98 -50 23) -50]
Test Case: 709 | Input/Output: [(3 -8 -76 57) -76]
Test Case: 710 | Input/Output: [(69 -95 5 -69) -95]
Test Case: 711 | Input/Output: [(-78 27 9 50) -78]
Test Case: 712 | Input/Output: [(-97 14 82 -93) -97]
Test Case: 713 | Input/Output: [(-41 35 -2 -55) -55]
Test Case: 714 | Input/Output: [(91 78 -79 -21) -79]
Test Case: 715 | Input/Output: [(-22 60 42 -22) -22]
Test Case: 716 | Input/Output: [(-13 -15 -46 79) -46]
Test Case: 717 | Input/Output: [(26 -89 -100 -20) -100]
Test Case: 718 | Input/Output: [(7 68 52 69) 7]
Test Case: 719 | Input/Output: [(-90 87 -1 43) -90]
Test Case: 720 | Input/Output: [(-93 -55 -46 99) -93]
Test Case: 721 | Input/Output: [(-89 71 63 9) -89]
Test Case: 722 | Input/Output: [(-100 36 18 -6) -100]
Test Case: 723 | Input/Output: [(-65 88 44 -73) -73]
Test Case: 724 | Input/Output: [(-33 24 11 -27) -33]
Test Case: 725 | Input/Output: [(61 -84 5 84) -84]
Test Case: 726 | Input/Output: [(-42 -23 42 -92) -92]
Test Case: 727 | Input/Output: [(-32 -77 -2 5) -77]
Test Case: 728 | Input/Output: [(-59 -73 69 -43) -73]
Test Case: 729 | Input/Output: [(-34 9 -68 -16) -68]
Test Case: 730 | Input/Output: [(90 -41 13 10) -41]
Test Case: 731 | Input/Output: [(50 -89 63 99) -89]
Test Case: 732 | Input/Output: [(-99 33 -85 -33) -99]
Test Case: 733 | Input/Output: [(45 -34 -99 -80) -99]
Test Case: 734 | Input/Output: [(-94 93 97 -75) -94]
Test Case: 735 | Input/Output: [(-48 5 89 -26) -48]
Test Case: 736 | Input/Output: [(-37 -16 -80 29) -80]
Test Case: 737 | Input/Output: [(70 -75 -71 56) -75]
Test Case: 738 | Input/Output: [(-63 92 48 -59) -63]
Test Case: 739 | Input/Output: [(7 91 73 -56) -56]
Test Case: 740 | Input/Output: [(-78 -26 83 -34) -78]
Test Case: 741 | Input/Output: [(39 -29 -2 -97) -97]
Test Case: 742 | Input/Output: [(84 57 -14 8) -14]
Test Case: 743 | Input/Output: [(49 20 46 -83) -83]
Test Case: 744 | Input/Output: [(36 78 -61 -54) -61]
Test Case: 745 | Input/Output: [(3 89 68 -95) -95]
Test Case: 746 | Input/Output: [(99 16 77 75) 16]
Test Case: 747 | Input/Output: [(1 7 0 -75) -75]
Test Case: 748 | Input/Output: [(-77 100 33 -66) -77]
Test Case: 749 | Input/Output: [(6 77 -59 80) -59]
Test Case: 750 | Input/Output: [(-42 -40 -29 -14) -42]
Test Case: 751 | Input/Output: [(35 -9 78 -36) -36]
Test Case: 752 | Input/Output: [(-99 36 11 91) -99]
Test Case: 753 | Input/Output: [(88 49 89 36) 36]
Test Case: 754 | Input/Output: [(53 64 -82 70) -82]
Test Case: 755 | Input/Output: [(94 16 -33 90) -33]
Test Case: 756 | Input/Output: [(-84 -14 94 53) -84]
Test Case: 757 | Input/Output: [(55 75 30 92) 30]
Test Case: 758 | Input/Output: [(-78 -16 40 44) -78]
Test Case: 759 | Input/Output: [(16 6 -66 -29) -66]
Test Case: 760 | Input/Output: [(53 62 31 9) 9]
Test Case: 761 | Input/Output: [(94 80 62 -44) -44]
Test Case: 762 | Input/Output: [(-72 93 -12 -52) -72]
Test Case: 763 | Input/Output: [(51 -61 20 -65) -65]
Test Case: 764 | Input/Output: [(8 83 -65 71) -65]
Test Case: 765 | Input/Output: [(85 45 -56 2) -56]
Test Case: 766 | Input/Output: [(-98 -56 -79 92) -98]
Test Case: 767 | Input/Output: [(-3 -8 13 15) -8]
Test Case: 768 | Input/Output: [(88 92 -60 8) -60]
Test Case: 769 | Input/Output: [(-29 -49 -1 -80) -80]
Test Case: 770 | Input/Output: [(-42 40 -98 -83) -98]
Test Case: 771 | Input/Output: [(66 -11 88 -7) -11]
Test Case: 772 | Input/Output: [(11 -81 -23 -47) -81]
Test Case: 773 | Input/Output: [(59 -38 93 -11) -38]
Test Case: 774 | Input/Output: [(-91 -65 -100 -3) -100]
Test Case: 775 | Input/Output: [(-54 -22 89 -82) -82]
Test Case: 776 | Input/Output: [(34 97 -66 -19) -66]
Test Case: 777 | Input/Output: [(-77 -25 -31 -86) -86]
Test Case: 778 | Input/Output: [(-73 26 44 30) -73]
Test Case: 779 | Input/Output: [(-36 51 -48 -5) -48]
Test Case: 780 | Input/Output: [(-87 -27 1 90) -87]
Test Case: 781 | Input/Output: [(-92 80 -74 80) -92]
Test Case: 782 | Input/Output: [(38 -63 -60 91) -63]
Test Case: 783 | Input/Output: [(15 48 -14 -33) -33]
Test Case: 784 | Input/Output: [(-91 -18 -43 -90) -91]
Test Case: 785 | Input/Output: [(-30 -19 57 -80) -80]
Test Case: 786 | Input/Output: [(-30 -39 -50 76) -50]
Test Case: 787 | Input/Output: [(-41 1 11 -55) -55]
Test Case: 788 | Input/Output: [(-60 1 29 -43) -60]
Test Case: 789 | Input/Output: [(62 -19 83 8) -19]
Test Case: 790 | Input/Output: [(18 88 57 -95) -95]
Test Case: 791 | Input/Output: [(16 -25 -61 66) -61]
Test Case: 792 | Input/Output: [(34 76 -49 77) -49]
Test Case: 793 | Input/Output: [(-90 -54 -48 -10) -90]
Test Case: 794 | Input/Output: [(75 -77 90 -5) -77]
Test Case: 795 | Input/Output: [(33 97 45 20) 20]
Test Case: 796 | Input/Output: [(13 -23 98 -53) -53]
Test Case: 797 | Input/Output: [(62 -38 -96 -44) -96]
Test Case: 798 | Input/Output: [(95 25 -65 -54) -65]
Test Case: 799 | Input/Output: [(-37 35 58 -47) -47]
Test Case: 800 | Input/Output: [(-45 -86 20 -67) -86]
Test Case: 801 | Input/Output: [(-45 8 90 -96) -96]
Test Case: 802 | Input/Output: [(62 94 -54 8) -54]
Test Case: 803 | Input/Output: [(26 -91 -60 30) -91]
Test Case: 804 | Input/Output: [(95 -11 -26 54) -26]
Test Case: 805 | Input/Output: [(94 -74 1 52) -74]
Test Case: 806 | Input/Output: [(56 25 79 40) 25]
Test Case: 807 | Input/Output: [(33 -31 33 66) -31]
Test Case: 808 | Input/Output: [(-70 33 17 -63) -70]
Test Case: 809 | Input/Output: [(88 9 25 -15) -15]
Test Case: 810 | Input/Output: [(-90 -17 95 16) -90]
Test Case: 811 | Input/Output: [(44 -23 -93 -65) -93]
Test Case: 812 | Input/Output: [(-38 59 71 -62) -62]
Test Case: 813 | Input/Output: [(96 12 74 51) 12]
Test Case: 814 | Input/Output: [(-20 68 -13 -44) -44]
Test Case: 815 | Input/Output: [(92 -78 -11 30) -78]
Test Case: 816 | Input/Output: [(74 53 -55 -81) -81]
Test Case: 817 | Input/Output: [(2 87 55 84) 2]
Test Case: 818 | Input/Output: [(-44 -37 47 3) -44]
Test Case: 819 | Input/Output: [(-14 -48 -76 -80) -80]
Test Case: 820 | Input/Output: [(24 26 66 -65) -65]
Test Case: 821 | Input/Output: [(-9 75 -60 94) -60]
Test Case: 822 | Input/Output: [(-7 97 2 49) -7]
Test Case: 823 | Input/Output: [(48 -12 -80 -31) -80]
Test Case: 824 | Input/Output: [(-76 -80 34 85) -80]
Test Case: 825 | Input/Output: [(-41 -32 74 59) -41]
Test Case: 826 | Input/Output: [(47 80 -78 -49) -78]
Test Case: 827 | Input/Output: [(85 -76 61 -71) -76]
Test Case: 828 | Input/Output: [(58 51 38 -2) -2]
Test Case: 829 | Input/Output: [(8 35 -13 75) -13]
Test Case: 830 | Input/Output: [(87 -84 -88 -84) -88]
Test Case: 831 | Input/Output: [(-43 -11 -92 68) -92]
Test Case: 832 | Input/Output: [(30 90 -85 8) -85]
Test Case: 833 | Input/Output: [(44 61 49 -53) -53]
Test Case: 834 | Input/Output: [(-99 -69 82 -97) -99]
Test Case: 835 | Input/Output: [(-36 17 37 -71) -71]
Test Case: 836 | Input/Output: [(-69 28 0 69) -69]
Test Case: 837 | Input/Output: [(-65 52 -30 -52) -65]
Test Case: 838 | Input/Output: [(13 -93 97 -52) -93]
Test Case: 839 | Input/Output: [(95 17 -15 58) -15]
Test Case: 840 | Input/Output: [(-78 -2 -84 47) -84]
Test Case: 841 | Input/Output: [(88 36 41 -40) -40]
Test Case: 842 | Input/Output: [(-97 -59 20 -57) -97]
Test Case: 843 | Input/Output: [(-30 -83 14 -13) -83]
Test Case: 844 | Input/Output: [(-29 58 68 2) -29]
Test Case: 845 | Input/Output: [(-2 60 -64 17) -64]
Test Case: 846 | Input/Output: [(-70 -40 17 -42) -70]
Test Case: 847 | Input/Output: [(-77 75 97 -79) -79]
Test Case: 848 | Input/Output: [(48 48 -93 93) -93]
Test Case: 849 | Input/Output: [(91 -42 -20 -93) -93]
Test Case: 850 | Input/Output: [(-93 87 54 -78) -93]
Test Case: 851 | Input/Output: [(70 -38 -67 -100) -100]
Test Case: 852 | Input/Output: [(-66 27 -76 -96) -96]
Test Case: 853 | Input/Output: [(-4 -57 42 -90) -90]
Test Case: 854 | Input/Output: [(-47 -17 61 39) -47]
Test Case: 855 | Input/Output: [(78 58 -62 -43) -62]
Test Case: 856 | Input/Output: [(12 -66 44 -37) -66]
Test Case: 857 | Input/Output: [(34 -27 51 -56) -56]
Test Case: 858 | Input/Output: [(-78 -64 -86 -39) -86]
Test Case: 859 | Input/Output: [(54 9 100 -86) -86]
Test Case: 860 | Input/Output: [(-40 96 -11 35) -40]
Test Case: 861 | Input/Output: [(-38 -58 100 -49) -58]
Test Case: 862 | Input/Output: [(29 84 -26 78) -26]
Test Case: 863 | Input/Output: [(-89 35 -42 83) -89]
Test Case: 864 | Input/Output: [(79 -25 64 68) -25]
Test Case: 865 | Input/Output: [(100 21 76 7) 7]
Test Case: 866 | Input/Output: [(28 23 49 -74) -74]
Test Case: 867 | Input/Output: [(-51 1 -64 -21) -64]
Test Case: 868 | Input/Output: [(-84 -77 -79 82) -84]
Test Case: 869 | Input/Output: [(-14 54 -77 -50) -77]
Test Case: 870 | Input/Output: [(-32 -31 49 -76) -76]
Test Case: 871 | Input/Output: [(-84 40 -14 76) -84]
Test Case: 872 | Input/Output: [(68 49 -23 -13) -23]
Test Case: 873 | Input/Output: [(-17 43 9 -43) -43]
Test Case: 874 | Input/Output: [(-4 55 -4 -80) -80]
Test Case: 875 | Input/Output: [(42 -25 30 98) -25]
Test Case: 876 | Input/Output: [(14 68 39 73) 14]
Test Case: 877 | Input/Output: [(-86 72 30 -24) -86]
Test Case: 878 | Input/Output: [(70 -27 79 -90) -90]
Test Case: 879 | Input/Output: [(-98 -87 56 88) -98]
Test Case: 880 | Input/Output: [(-4 -39 -55 -22) -55]
Test Case: 881 | Input/Output: [(-62 -79 50 -38) -79]
Test Case: 882 | Input/Output: [(-94 66 -59 35) -94]
Test Case: 883 | Input/Output: [(-28 54 43 -52) -52]
Test Case: 884 | Input/Output: [(30 -94 -96 -31) -96]
Test Case: 885 | Input/Output: [(74 -22 -35 -49) -49]
Test Case: 886 | Input/Output: [(-57 48 18 -23) -57]
Test Case: 887 | Input/Output: [(31 -2 -11 -84) -84]
Test Case: 888 | Input/Output: [(-60 68 64 61) -60]
Test Case: 889 | Input/Output: [(38 22 37 27) 22]
Test Case: 890 | Input/Output: [(-74 90 100 70) -74]
Test Case: 891 | Input/Output: [(-47 -69 79 69) -69]
Test Case: 892 | Input/Output: [(91 -36 -72 -98) -98]
Test Case: 893 | Input/Output: [(-63 -25 88 -70) -70]
Test Case: 894 | Input/Output: [(14 4 53 1) 1]
Test Case: 895 | Input/Output: [(-53 -4 -73 -70) -73]
Test Case: 896 | Input/Output: [(2 -30 11 -78) -78]
Test Case: 897 | Input/Output: [(87 -93 -56 -13) -93]
Test Case: 898 | Input/Output: [(-45 81 -91 -32) -91]
Test Case: 899 | Input/Output: [(97 -83 -96 69) -96]
Test Case: 900 | Input/Output: [(66 72 -15 5) -15]
Test Case: 901 | Input/Output: [(-83 -53 6 86) -83]
Test Case: 902 | Input/Output: [(0 -56 -17 67) -56]
Test Case: 903 | Input/Output: [(81 91 -6 27) -6]
Test Case: 904 | Input/Output: [(62 82 -51 -29) -51]
Test Case: 905 | Input/Output: [(7 -14 14 89) -14]
Test Case: 906 | Input/Output: [(61 22 45 -53) -53]
Test Case: 907 | Input/Output: [(74 -27 -89 -11) -89]
Test Case: 908 | Input/Output: [(91 -22 -73 -83) -83]
Test Case: 909 | Input/Output: [(-33 12 27 28) -33]
Test Case: 910 | Input/Output: [(58 -32 -48 -18) -48]
Test Case: 911 | Input/Output: [(85 67 82 54) 54]
Test Case: 912 | Input/Output: [(83 27 99 88) 27]
Test Case: 913 | Input/Output: [(51 99 -33 -28) -33]
Test Case: 914 | Input/Output: [(-56 -67 -16 -65) -67]
Test Case: 915 | Input/Output: [(-89 23 -53 -51) -89]
Test Case: 916 | Input/Output: [(66 91 -10 -1) -10]
Test Case: 917 | Input/Output: [(81 -76 -6 -78) -78]
Test Case: 918 | Input/Output: [(-65 53 -97 -74) -97]
Test Case: 919 | Input/Output: [(-70 26 33 93) -70]
Test Case: 920 | Input/Output: [(-40 68 -66 -3) -66]
Test Case: 921 | Input/Output: [(-64 98 89 55) -64]
Test Case: 922 | Input/Output: [(17 -3 49 -4) -4]
Test Case: 923 | Input/Output: [(89 -47 99 24) -47]
Test Case: 924 | Input/Output: [(-92 -45 -96 -70) -96]
Test Case: 925 | Input/Output: [(-90 46 -81 32) -90]
Test Case: 926 | Input/Output: [(65 89 20 34) 20]
Test Case: 927 | Input/Output: [(1 -13 96 -76) -76]
Test Case: 928 | Input/Output: [(3 -64 -86 -73) -86]
Test Case: 929 | Input/Output: [(-70 85 97 65) -70]
Test Case: 930 | Input/Output: [(32 86 -23 25) -23]
Test Case: 931 | Input/Output: [(54 53 -97 -61) -97]
Test Case: 932 | Input/Output: [(81 49 -73 7) -73]
Test Case: 933 | Input/Output: [(39 -31 35 -67) -67]
Test Case: 934 | Input/Output: [(-39 17 -11 -23) -39]
Test Case: 935 | Input/Output: [(-12 -51 39 41) -51]
Test Case: 936 | Input/Output: [(-45 -80 11 -1) -80]
Test Case: 937 | Input/Output: [(-58 -100 -24 -76) -100]
Test Case: 938 | Input/Output: [(4 93 -7 42) -7]
Test Case: 939 | Input/Output: [(-98 -66 65 -60) -98]
Test Case: 940 | Input/Output: [(-81 -26 14 56) -81]
Test Case: 941 | Input/Output: [(-94 0 -37 -12) -94]
Test Case: 942 | Input/Output: [(31 -17 -52 -9) -52]
Test Case: 943 | Input/Output: [(43 49 -96 -32) -96]
Test Case: 944 | Input/Output: [(-4 -68 93 -59) -68]
Test Case: 945 | Input/Output: [(-7 -74 74 5) -74]
Test Case: 946 | Input/Output: [(4 65 17 71) 4]
Test Case: 947 | Input/Output: [(86 -31 -20 -44) -44]
Test Case: 948 | Input/Output: [(-9 -10 -95 68) -95]
Test Case: 949 | Input/Output: [(-78 89 -91 -46) -91]
Test Case: 950 | Input/Output: [(-36 3 24 -67) -67]
Test Case: 951 | Input/Output: [(85 -71 83 36) -71]
Test Case: 952 | Input/Output: [(22 59 -13 12) -13]
Test Case: 953 | Input/Output: [(0 -12 91 -12) -12]
Test Case: 954 | Input/Output: [(40 -39 34 -88) -88]
Test Case: 955 | Input/Output: [(-96 -55 19 90) -96]
Test Case: 956 | Input/Output: [(74 -43 -87 -100) -100]
Test Case: 957 | Input/Output: [(-38 13 -44 -29) -44]
Test Case: 958 | Input/Output: [(51 -35 65 -73) -73]
Test Case: 959 | Input/Output: [(-35 -47 20 65) -47]
Test Case: 960 | Input/Output: [(3 85 31 -94) -94]
Test Case: 961 | Input/Output: [(-65 -18 -91 -45) -91]
Test Case: 962 | Input/Output: [(5 -9 67 30) -9]
Test Case: 963 | Input/Output: [(-87 21 96 -36) -87]
Test Case: 964 | Input/Output: [(32 -39 45 -69) -69]
Test Case: 965 | Input/Output: [(-29 -13 11 91) -29]
Test Case: 966 | Input/Output: [(-61 -26 7 4) -61]
Test Case: 967 | Input/Output: [(-44 55 90 98) -44]
Test Case: 968 | Input/Output: [(84 71 27 -22) -22]
Test Case: 969 | Input/Output: [(59 -44 5 -44) -44]
Test Case: 970 | Input/Output: [(8 89 -78 80) -78]
Test Case: 971 | Input/Output: [(16 -60 2 -74) -74]
Test Case: 972 | Input/Output: [(-10 40 -11 -99) -99]
Test Case: 973 | Input/Output: [(-20 -29 -9 37) -29]
Test Case: 974 | Input/Output: [(16 70 76 36) 16]
Test Case: 975 | Input/Output: [(0 -33 81 -10) -33]
Test Case: 976 | Input/Output: [(88 75 -75 17) -75]
Test Case: 977 | Input/Output: [(-37 -41 -21 -26) -41]
Test Case: 978 | Input/Output: [(43 93 16 11) 11]
Test Case: 979 | Input/Output: [(15 -26 55 -55) -55]
Test Case: 980 | Input/Output: [(22 35 88 12) 12]
Test Case: 981 | Input/Output: [(71 -26 -81 4) -81]
Test Case: 982 | Input/Output: [(52 97 -16 22) -16]
Test Case: 983 | Input/Output: [(-3 68 -27 -35) -35]
Test Case: 984 | Input/Output: [(-5 14 84 13) -5]
Test Case: 985 | Input/Output: [(-16 90 -53 -84) -84]
Test Case: 986 | Input/Output: [(85 70 25 -96) -96]
Test Case: 987 | Input/Output: [(91 -72 97 -59) -72]
Test Case: 988 | Input/Output: [(-96 -77 77 94) -96]
Test Case: 989 | Input/Output: [(10 -90 -61 14) -90]
Test Case: 990 | Input/Output: [(-35 -67 59 55) -67]
Test Case: 991 | Input/Output: [(-8 -63 56 -48) -63]
Test Case: 992 | Input/Output: [(36 -20 96 65) -20]
Test Case: 993 | Input/Output: [(49 72 -20 -4) -20]
Test Case: 994 | Input/Output: [(-86 8 -60 51) -86]
Test Case: 995 | Input/Output: [(-40 -59 -92 -32) -92]
Test Case: 996 | Input/Output: [(2 -21 -42 -62) -62]
Test Case: 997 | Input/Output: [(-59 45 69 -34) -59]
Test Case: 998 | Input/Output: [(-85 -82 38 64) -85]
Test Case: 999 | Input/Output: [(93 -92 -26 -76) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 90 117 37 18 30 27 -98 99 48 -8 15 -126 15 -94 63 55
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[73 -53 73 73] -53] [[-61 84 -61 -61] -61] [[-44 59 59 59] -44] [[-50 -6 -50 -50] -50] [[-4 -24 -4 -4] -24] [[-12 -12 -12 11] -12] [[-27 -4 -4 -4] -27] [[-10 -1 -10 -10] -10] [[-78 1 -78 -78] -78] [[35 35 35 -37] -37] [(71 71 71 71) 71] [(49 49 49 49) 49] [(-10 -10 -10 -10) -10] [(-27 -27 -27 -27) -27] [(-38 -38 -38 -38) -38] [(37 45 91 70) 37] [(7 67 28 21) 7] [(68 15 13 1) 1] [(34 3 71 49) 3] [(85 15 67 7) 7] [(88 32 96 99) 32] [(77 12 79 9) 9] [(32 59 59 8) 8] [(12 45 33 2) 2] [(78 54 50 0) 0] [(25 97 24 24) 24] [(37 72 23 11) 11] [(52 0 58 38) 0] [(63 94 1 57) 1] [(71 75 90 59) 59] [(75 65 42 97) 42] [(66 13 25 31) 13] [(44 65 30 95) 30] [(11 35 21 50) 11] [(32 39 77 0) 0] [(-75 33 43 97) -75] [(82 -94 84 -33) -94] [(-63 25 -17 73) -63] [(27 -52 -3 1) -52] [(-74 91 62 63) -74] [(10 -60 -43 -69) -69] [(-95 -55 -9 -22) -95] [(65 29 -7 43) -7] [(-10 57 -33 -93) -93] [(60 73 92 12) 12] [(-100 -57 -62 -14) -100] [(-8 60 90 -22) -22] [(-47 16 -50 -68) -68] [(-23 -76 44 66) -76] [(97 46 -10 42) -10] [(14 96 44 -69) -69] [(88 60 98 -43) -43] [(29 -54 -15 21) -54] [(-78 -78 21 92) -78] [(80 74 -63 85) -63] [(-52 46 7 -34) -52] [(18 56 -92 21) -92] [(47 -91 46 -93) -93] [(13 21 91 13) 13] [(-93 75 -13 -75) -93] [(-51 51 -76 -54) -76] [(53 -17 -30 21) -30] [(14 38 59 56) 14] [(-60 -80 -3 -44) -80] [(48 10 -98 -59) -98] [(30 -52 72 0) -52] [(-35 -60 -72 28) -72] [(-64 25 -82 68) -82] [(85 46 -90 38) -90] [(-71 -71 -39 33) -71] [(-5 78 23 46) -5] [(66 -65 51 -52) -65] [(1 -91 83 14) -91] [(34 -26 16 32) -26] [(-8 -61 51 -63) -63] [(30 11 96 7) 7] [(69 41 -99 19) -99] [(67 33 -90 -20) -90] [(-30 20 -56 97) -56] [(-95 -8 33 -78) -95] [(80 -73 34 -26) -73] [(68 -68 60 77) -68] [(-13 62 76 -72) -72] [(84 -95 -53 -69) -95] [(-50 39 -57 -49) -57] [(-65 2 79 -37) -65] [(-10 -98 96 64) -98] [(92 8 27 83) 8] [(-3 37 -47 -34) -47] [(83 83 94 -20) -20] [(76 66 -1 -91) -91] [(-76 -83 -42 11) -83] [(91 -95 -74 -82) -95] [(-16 57 -20 -10) -20] [(14 17 68 -46) -46])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 68                 
Correct output: 3                   | Program output: 34                 
Correct output: 7                   | Program output: 85                 
Correct output: 32                  | Program output: 88                 
Correct output: 9                   | Program output: 77                 
Correct output: 8                   | Program output: 32                 
Correct output: 2                   | Program output: 12                 
Correct output: 0                   | Program output: 78                 
Correct output: 24                  | Program output: 25                 
Correct output: 11                  | Program output: 37                 
Correct output: 0                   | Program output: 52                 
Correct output: 1                   | Program output: 63                 
Correct output: 59                  | Program output: 71                 
Correct output: 42                  | Program output: 75                 
Correct output: 13                  | Program output: 66                 
Correct output: 30                  | Program output: 44                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: 82                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 27                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 10                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: 65                 
Correct output: -93                 | Program output: -10                
Correct output: 12                  | Program output: 60                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -8                 
Correct output: -68                 | Program output: -47                
Correct output: -76                 | Program output: -23                
Correct output: -10                 | Program output: 97                 
Correct output: -69                 | Program output: 14                 
Correct output: -43                 | Program output: 88                 
Correct output: -54                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 80                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 18                 
Correct output: -93                 | Program output: 47                 
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -51                
Correct output: -30                 | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -60                
Correct output: -98                 | Program output: 48                 
Correct output: -52                 | Program output: 30                 
Correct output: -72                 | Program output: -35                
Correct output: -82                 | Program output: -64                
Correct output: -90                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: 66                 
Correct output: -91                 | Program output: 1                  
Correct output: -26                 | Program output: 34                 
Correct output: -63                 | Program output: -8                 
Correct output: 7                   | Program output: 30                 
Correct output: -99                 | Program output: 69                 
Correct output: -90                 | Program output: 67                 
Correct output: -56                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: 80                 
Correct output: -68                 | Program output: 68                 
Correct output: -72                 | Program output: -13                
Correct output: -95                 | Program output: 84                 
Correct output: -57                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -10                
Correct output: 8                   | Program output: 92                 
Correct output: -47                 | Program output: -3                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 76                 
Correct output: -83                 | Program output: -76                
Correct output: -95                 | Program output: 91                 
Correct output: -20                 | Program output: -16                
Correct output: -46                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_357} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger})
Lexicase best program: (in1 print_integer integer_lte tag_integer_357 boolean_dup_items integer_yankdup integer_flush integer_dec integer_inc exec_eq exec_yank boolean_yankdup boolean_frominteger)
Lexicase best errors: [1 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.071
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_357} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger})
Zero cases best program: (in1 print_integer integer_lte tag_integer_357 boolean_dup_items integer_yankdup integer_flush integer_dec integer_inc exec_eq exec_yank boolean_yankdup boolean_frominteger)
Zero cases best errors: [1 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 4 4 1 1 4 5 4 2 4)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 4 4 1 1 4 5 4 2 4)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_empty})
Best program: (in1 boolean_invert_first_then_and exec_do*while () print_integer integer_fromboolean print_integer boolean_not exec_while (integer_dup_items integer_dup_times integer_eq exec_yankdup integer_yank integer_flush integer_eq) boolean_shove exec_s_when_autoconstructing (exec_dup_times (exec_empty integer_fromboolean exec_dup (exec_rot () (integer_empty) (integer_swap) integer_add exec_k_when_autoconstructing (in1 exec_flush integer_yankdup) (boolean_xor boolean_dup_items) integer_add exec_yank exec_shove () in2 boolean_rot integer_fromboolean integer_empty integer_empty))) () ())
Errors: [1 0 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 9.97
Median total errors in population: 10
Error averages by case: (0.999 0.996 0.996 0.999 0.999 0.996 0.995 0.996 0.998 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.595
Average program size in population (points): 69.592
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 460759
--- Timings ---
Current time: 1559582738456 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.8 seconds, 27.8%
Fitness Testing:      1.9 seconds, 68.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 68                 
Correct output: 3                   | Program output: 34                 
Correct output: 7                   | Program output: 85                 
Correct output: 32                  | Program output: 88                 
Correct output: 9                   | Program output: 77                 
Correct output: 8                   | Program output: 32                 
Correct output: 2                   | Program output: 12                 
Correct output: 0                   | Program output: 78                 
Correct output: 24                  | Program output: 25                 
Correct output: 11                  | Program output: 37                 
Correct output: 0                   | Program output: 52                 
Correct output: 1                   | Program output: 63                 
Correct output: 59                  | Program output: 71                 
Correct output: 42                  | Program output: 75                 
Correct output: 13                  | Program output: 66                 
Correct output: 30                  | Program output: 44                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: 82                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 27                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 10                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: 65                 
Correct output: -93                 | Program output: -10                
Correct output: 12                  | Program output: 60                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -8                 
Correct output: -68                 | Program output: -47                
Correct output: -76                 | Program output: -23                
Correct output: -10                 | Program output: 97                 
Correct output: -69                 | Program output: 14                 
Correct output: -43                 | Program output: 88                 
Correct output: -54                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 80                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 18                 
Correct output: -93                 | Program output: 47                 
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -51                
Correct output: -30                 | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -60                
Correct output: -98                 | Program output: 48                 
Correct output: -52                 | Program output: 30                 
Correct output: -72                 | Program output: -35                
Correct output: -82                 | Program output: -64                
Correct output: -90                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: 66                 
Correct output: -91                 | Program output: 1                  
Correct output: -26                 | Program output: 34                 
Correct output: -63                 | Program output: -8                 
Correct output: 7                   | Program output: 30                 
Correct output: -99                 | Program output: 69                 
Correct output: -90                 | Program output: 67                 
Correct output: -56                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: 80                 
Correct output: -68                 | Program output: 68                 
Correct output: -72                 | Program output: -13                
Correct output: -95                 | Program output: 84                 
Correct output: -57                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -10                
Correct output: 8                   | Program output: 92                 
Correct output: -47                 | Program output: -3                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 76                 
Correct output: -83                 | Program output: -76                
Correct output: -95                 | Program output: 91                 
Correct output: -20                 | Program output: -16                
Correct output: -46                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Lexicase best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ()))
Lexicase best errors: [1 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Zero cases best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ()))
Zero cases best errors: [1 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 209 490 88 950 578 163 209 209 490)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (163 209 490 88 950 578 163 209 209 490)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_357} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_frominteger})
Best program: (in1 print_integer integer_lte tag_integer_357 boolean_dup_items integer_yankdup integer_flush integer_dec integer_inc exec_eq exec_yank boolean_yankdup boolean_frominteger)
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.451
Median total errors in population: 6
Error averages by case: (0.837 0.791 0.51 0.912 0.05 0.422 0.837 0.791 0.791 0.51)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.435
Average program size in population (points): 43.894
Average percent parens in population: 0.241
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.477
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.38
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 941963
--- Timings ---
Current time: 1559582741202 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 42.5%
Fitness Testing:      2.8 seconds, 48.8%
Report:               0.4 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Lexicase best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ())))
Lexicase best errors: [1 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Zero cases best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ())))
Zero cases best errors: [1 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (282 140 315 282 315 315 315 950 282 140)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (282 140 315 282 315 315 315 950 282 140)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ()))
Errors: [1 1 0 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.664
Median total errors in population: 6
Error averages by case: (0.718 0.86 0.685 0.718 0.685 0.685 0.685 0.05 0.718 0.86)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.668
Average program size in population (points): 44.495
Average percent parens in population: 0.278
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9565
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1445683
--- Timings ---
Current time: 1559582744791 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.8 seconds, 53.0%
Fitness Testing:      3.6 seconds, 39.4%
Report:               0.6 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Lexicase best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty boolean_dup_times boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub)))) ()))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Zero cases best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty boolean_dup_times boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub)))) ()))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 1 420 420 960 1 331 420 208 331)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (208 1 420 420 960 1 331 420 208 331)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ()))
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.7
Median total errors in population: 7
Error averages by case: (0.792 0.999 0.58 0.58 0.04 0.999 0.669 0.58 0.792 0.669)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.756
Average program size in population (points): 48.239
Average percent parens in population: 0.259
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.46375
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2059126
--- Timings ---
Current time: 1559582748323 milliseconds
Total Time:          12.6 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.0 seconds, 55.5%
Fitness Testing:      4.4 seconds, 35.2%
Report:               1.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Lexicase best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items integer_sub exec_if (integer_swap boolean_and integer_dec in1 boolean_or integer_rot) ())
Lexicase best errors: [0 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.160
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Zero cases best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items integer_sub exec_if (integer_swap boolean_and integer_dec in1 boolean_or integer_rot) ())
Zero cases best errors: [0 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.160
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 313 313 220 313 219 240 313 173 240)
Population mean number of elite cases: 2.66
Count of perfect (error zero) individuals by case: (313 313 313 220 313 219 240 313 173 240)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Best program: (in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and integer_max exec_yank boolean_invert_second_then_and tagged_685 exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ()))
Errors: [0 0 0 1 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.343
Median total errors in population: 8
Error averages by case: (0.687 0.687 0.687 0.78 0.687 0.781 0.76 0.687 0.827 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.45
Average program size in population (points): 45.065
Average percent parens in population: 0.263
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.858625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2608835
--- Timings ---
Current time: 1559582751527 milliseconds
Total Time:          15.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 56.8%
Fitness Testing:      5.1 seconds, 32.7%
Report:               1.5 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_swap () (exec_dup_items) boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_rot) integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor integer_sub) (print_integer integer_swap boolean_and integer_dup_times in1 boolean_or integer_rot))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_swap () (exec_dup_items) boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_rot) integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor integer_sub) (print_integer integer_swap boolean_and integer_dup_times in1 boolean_or integer_rot))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 277 88 88 88 86 193 193 193 193)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (193 277 88 88 88 86 193 193 193 193)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 1, :instruction tagged_685} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Best program: (in3 print_integer integer_add boolean_stackdepth boolean_invert_second_then_and exec_shove (exec_y_when_autoconstructing (exec_do*while (boolean_swap) integer_add tagged_685) exec_noop integer_dup_items exec_while (exec_pop (boolean_dup_items) exec_s () (exec_do*while (integer_empty exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub))))) ())))
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 40
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 8.408
Median total errors in population: 10
Error averages by case: (0.807 0.723 0.912 0.912 0.912 0.914 0.807 0.807 0.807 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.443
Average program size in population (points): 42.411
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.3839375
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3202580
--- Timings ---
Current time: 1559582754719 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 57.9%
Fitness Testing:      5.9 seconds, 30.7%
Report:               2.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_919} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_min in3 exec_if (boolean_rot boolean_not print_integer integer_add boolean_swap integer_max integer_empty exec_dup (exec_flush) boolean_xor) (boolean_flush exec_k_when_autoconstructing (integer_stackdepth integer_div exec_stackdepth boolean_shove integer_lt) (boolean_pop boolean_yank integer_add tag_exec_919 () exec_y_when_autoconstructing ()) boolean_flush exec_empty) exec_k () (boolean_dup_items boolean_invert_first_then_and integer_max integer_gte integer_lte boolean_invert_second_then_and))
Lexicase best errors: [1 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 1, :instruction tag_exec_919} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_min in3 exec_if (boolean_rot boolean_not print_integer integer_add boolean_swap integer_max integer_empty exec_dup (exec_flush) boolean_xor) (boolean_flush exec_k_when_autoconstructing (integer_stackdepth integer_div exec_stackdepth boolean_shove integer_lt) (boolean_pop boolean_yank integer_add tag_exec_919 () exec_y_when_autoconstructing ()) boolean_flush exec_empty) exec_k () (boolean_dup_items boolean_invert_first_then_and integer_max integer_gte integer_lte boolean_invert_second_then_and))
Zero cases best errors: [1 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 475 476 475 1000 1000 1000 456 1000)
Population mean number of elite cases: 7.88
Count of perfect (error zero) individuals by case: (0 0 475 476 475 0 0 0 456 0)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_pop boolean_xor integer_sub) print_integer integer_swap boolean_and integer_dec in1 boolean_or integer_rot) ())
Errors: [1 1 0 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 15
Size: 19
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 8.118
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.525 0.524 0.525 1.0 1.0 1.0 0.544 1.0)
Error minima by case: (1 1 0 0 0 1 1 1 0 1)
Average genome size in population (length): 30.991
Average program size in population (points): 43.499
Average percent parens in population: 0.276
Minimum age in population: 6.0
Maximum age in population: 10.5625
Average age in population: 8.71415625
Median age in population: 8.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3626962
--- Timings ---
Current time: 1559582757750 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 59.6%
Fitness Testing:      6.4 seconds, 29.5%
Report:               2.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Lexicase best program: (in3 print_integer integer_add boolean_stackdepth boolean_invert_second_then_and boolean_invert_first_then_and exec_s (exec_do*while (exec_if (exec_eq) (exec_while (integer_gte integer_min) integer_gte -81 exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub)))))) () ())
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 34
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub})
Zero cases best program: (in3 print_integer integer_add boolean_stackdepth boolean_invert_second_then_and boolean_invert_first_then_and exec_s (exec_do*while (exec_if (exec_eq) (exec_while (integer_gte integer_min) integer_gte -81 exec_dup_times (boolean_swap exec_if (integer_gt) (boolean_pop exec_dup (integer_sub)))))) () ())
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 34
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 711 1 711 712 213 711 212 1 1)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (0 711 1 711 712 213 711 212 1 1)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction 67} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction 66} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if})
Best program: (in3 print_boolean print_integer exec_swap (integer_lt integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (boolean_invert_second_then_and boolean_swap integer_min) integer_gte -81 exec_dup_times (exec_noop) 67 exec_s (exec_eq) (integer_div exec_while () exec_if () (66 integer_pop integer_div integer_dec) integer_yank) (boolean_and exec_y_when_autoconstructing (integer_sub) exec_yankdup exec_if (exec_stackdepth exec_k_when_autoconstructing () (exec_dup () exec_rot (integer_lt exec_do*times () integer_dec exec_if () ()) () ())) ()))) () ()) ()) ())
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 72
Percent parens: 0.417
--- Population Statistics ---
Average total errors in population: 6.727
Median total errors in population: 6
Error averages by case: (1.0 0.289 0.999 0.289 0.288 0.787 0.289 0.788 0.999 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.349
Average program size in population (points): 47.555
Average percent parens in population: 0.291
Minimum age in population: 7.5
Maximum age in population: 12.34375
Average age in population: 10.2579375
Median age in population: 10.3359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4132039
--- Timings ---
Current time: 1559582760382 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.8 seconds, 59.4%
Fitness Testing:      7.1 seconds, 28.5%
Report:               2.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (541 130 161 161 130 130 130 410 130 913)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (541 130 161 161 130 130 130 410 130 913)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_or integer_rot))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 7.164
Median total errors in population: 7
Error averages by case: (0.459 0.87 0.839 0.839 0.87 0.87 0.87 0.59 0.87 0.087)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.057
Average program size in population (points): 37.693
Average percent parens in population: 0.266
Minimum age in population: 9.25
Maximum age in population: 13.4921875
Average age in population: 11.6379609375
Median age in population: 11.69921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4608174
--- Timings ---
Current time: 1559582763081 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.4 seconds, 59.9%
Fitness Testing:      7.7 seconds, 28.1%
Report:               3.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 196 628 197 628 628 945 945 629 197)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (119 196 628 197 628 628 945 945 629 197)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Errors: [1 1 0 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 4.888
Median total errors in population: 4
Error averages by case: (0.881 0.804 0.372 0.803 0.372 0.372 0.055 0.055 0.371 0.803)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.129
Average program size in population (points): 27.973
Average percent parens in population: 0.187
Minimum age in population: 10.5625
Maximum age in population: 14.86328125
Average age in population: 13.25137109375
Median age in population: 13.31640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 370
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 410
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5200292
--- Timings ---
Current time: 1559582766641 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 60.3%
Fitness Testing:      8.5 seconds, 27.5%
Report:               3.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Lexicase best errors: [1 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Zero cases best errors: [1 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 109 108 358 1 483 483 1 483 483)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (358 109 108 358 1 483 483 1 483 483)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot))
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 7.133
Median total errors in population: 8
Error averages by case: (0.642 0.891 0.892 0.642 0.999 0.517 0.517 0.999 0.517 0.517)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.366
Average program size in population (points): 28.794
Average percent parens in population: 0.204
Minimum age in population: 11.5625
Maximum age in population: 16.564453125
Average age in population: 14.77353125
Median age in population: 14.8232421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 226
Genome diversity (% unique genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5726462
--- Timings ---
Current time: 1559582769513 milliseconds
Total Time:          33.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.4 seconds, 60.4%
Fitness Testing:      9.2 seconds, 27.2%
Report:               4.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: 84                 
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -6                 
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: 1                  
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 45                 
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 12                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 24                  | Program output: 97                 
Correct output: 11                  | Program output: 72                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 94                 
Correct output: 59                  | Program output: 75                 
Correct output: 42                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 65                 
Correct output: 11                  | Program output: 35                 
Correct output: 0                   | Program output: 39                 
Correct output: -75                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: 91                 
Correct output: -69                 | Program output: -60                
Correct output: -95                 | Program output: -55                
Correct output: -7                  | Program output: 29                 
Correct output: -93                 | Program output: 57                 
Correct output: 12                  | Program output: 73                 
Correct output: -100                | Program output: -57                
Correct output: -22                 | Program output: 60                 
Correct output: -68                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 46                 
Correct output: -69                 | Program output: 96                 
Correct output: -43                 | Program output: 60                 
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 74                 
Correct output: -52                 | Program output: 46                 
Correct output: -92                 | Program output: 56                 
Correct output: -93                 | Program output: -91                
Correct output: 13                  | Program output: 21                 
Correct output: -93                 | Program output: 75                 
Correct output: -76                 | Program output: 51                 
Correct output: -30                 | Program output: -17                
Correct output: 14                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -60                
Correct output: -82                 | Program output: 25                 
Correct output: -90                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: 78                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -61                
Correct output: 7                   | Program output: 11                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 33                 
Correct output: -56                 | Program output: 20                 
Correct output: -95                 | Program output: -8                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 39                 
Correct output: -65                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: 37                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 66                 
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 57                 
Correct output: -46                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Lexicase best program: (exec_swap () (boolean_pop) boolean_yankdup exec_k_when_autoconstructing (integer_mult boolean_rot) (integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor boolean_rot) print_integer integer_swap boolean_and integer_dec in1 boolean_or integer_rot)
Lexicase best errors: [1 1 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Zero cases best program: (exec_swap () (boolean_pop) boolean_yankdup exec_k_when_autoconstructing (integer_mult boolean_rot) (integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor boolean_rot) print_integer integer_swap boolean_and integer_dec in1 boolean_or integer_rot)
Zero cases best errors: [1 1 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 350 458 266 192 193 350 192 133 133)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (350 350 458 266 192 193 350 192 133 133)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_add} {:close 0, :instruction tag_exec_919} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_swap () (exec_dup_items) boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_rot) integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor integer_min) (print_integer exec_pop (boolean_dup_items) exec_stackdepth boolean_shove integer_lt) boolean_pop boolean_yank integer_add tag_exec_919 (exec_y_when_autoconstructing () boolean_flush exec_empty) exec_k () (boolean_dup_items exec_s_when_autoconstructing () () ()))
Errors: [1 1 0 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.383
Median total errors in population: 7
Error averages by case: (0.65 0.65 0.542 0.734 0.808 0.807 0.65 0.808 0.867 0.867)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.521
Average program size in population (points): 26.291
Average percent parens in population: 0.199
Minimum age in population: 12.5625
Maximum age in population: 18.0615234375
Average age in population: 16.059521484375
Median age in population: 16.134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.497
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6176443
--- Timings ---
Current time: 1559582772205 milliseconds
Total Time:          36.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.3 seconds, 60.8%
Fitness Testing:      9.8 seconds, 26.5%
Report:               4.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: 84                 
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -6                 
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: 1                  
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 45                 
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 12                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 24                  | Program output: 97                 
Correct output: 11                  | Program output: 72                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 94                 
Correct output: 59                  | Program output: 75                 
Correct output: 42                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 65                 
Correct output: 11                  | Program output: 35                 
Correct output: 0                   | Program output: 39                 
Correct output: -75                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: 91                 
Correct output: -69                 | Program output: -60                
Correct output: -95                 | Program output: -55                
Correct output: -7                  | Program output: 29                 
Correct output: -93                 | Program output: 57                 
Correct output: 12                  | Program output: 73                 
Correct output: -100                | Program output: -57                
Correct output: -22                 | Program output: 60                 
Correct output: -68                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 46                 
Correct output: -69                 | Program output: 96                 
Correct output: -43                 | Program output: 60                 
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 74                 
Correct output: -52                 | Program output: 46                 
Correct output: -92                 | Program output: 56                 
Correct output: -93                 | Program output: -91                
Correct output: 13                  | Program output: 21                 
Correct output: -93                 | Program output: 75                 
Correct output: -76                 | Program output: 51                 
Correct output: -30                 | Program output: -17                
Correct output: 14                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -60                
Correct output: -82                 | Program output: 25                 
Correct output: -90                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: 78                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -61                
Correct output: 7                   | Program output: 11                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 33                 
Correct output: -56                 | Program output: 20                 
Correct output: -95                 | Program output: -8                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 39                 
Correct output: -65                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: 37                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 66                 
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 57                 
Correct output: -46                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth exec_dup (integer_add) integer_pop in2 exec_do*range (integer_lte) integer_mod boolean_and exec_k_when_autoconstructing (integer_sub) (print_integer print_integer integer_swap boolean_and integer_dec in1 boolean_or integer_rot))
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth exec_dup (integer_add) integer_pop in2 exec_do*range (integer_lte) integer_mod boolean_and exec_k_when_autoconstructing (integer_sub) (print_integer print_integer integer_swap boolean_and integer_dec in1 boolean_or integer_rot))
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 301 301 112 112 354 354 354 177 354)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (355 301 301 112 112 354 354 354 177 354)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap})
Best program: (exec_swap (exec_dup_items) (boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_rot) integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor integer_sub) (print_integer) integer_swap boolean_and integer_dec in1 boolean_or integer_swap))
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.226
Median total errors in population: 8
Error averages by case: (0.645 0.699 0.699 0.888 0.888 0.646 0.646 0.646 0.823 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.159
Average program size in population (points): 29.086
Average percent parens in population: 0.218
Minimum age in population: 14.765625
Maximum age in population: 19.3125
Average age in population: 17.57432470703125
Median age in population: 17.6240234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6654900
--- Timings ---
Current time: 1559582775261 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 61.7%
Fitness Testing:     10.4 seconds, 26.1%
Report:               4.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_841})
Lexicase best program: (integer_min exec_s_when_autoconstructing (boolean_stackdepth integer_dup_times) (in4 print_integer exec_do*while () boolean_swap integer_add exec_y (integer_swap exec_dup_items exec_dup (exec_s_when_autoconstructing () (boolean_frominteger exec_do*times () exec_do*while () integer_min integer_yank integer_yankdup) (exec_stackdepth exec_flush boolean_or boolean_stackdepth exec_flush exec_do*range (boolean_yank integer_lt exec_dup_times (integer_yankdup integer_gt boolean_dup_items exec_do*times (exec_stackdepth integer_swap exec_if (boolean_shove integer_min boolean_eq) (exec_k_when_autoconstructing (exec_empty boolean_flush) (boolean_pop exec_s_when_autoconstructing () (integer_yank print_boolean tagged_841) ()))))))))) ())
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction tagged_841})
Zero cases best program: (integer_min exec_s_when_autoconstructing (boolean_stackdepth integer_dup_times) (in4 print_integer exec_do*while () boolean_swap integer_add exec_y (integer_swap exec_dup_items exec_dup (exec_s_when_autoconstructing () (boolean_frominteger exec_do*times () exec_do*while () integer_min integer_yank integer_yankdup) (exec_stackdepth exec_flush boolean_or boolean_stackdepth exec_flush exec_do*range (boolean_yank integer_lt exec_dup_times (integer_yankdup integer_gt boolean_dup_items exec_do*times (exec_stackdepth integer_swap exec_if (boolean_shove integer_min boolean_eq) (exec_k_when_autoconstructing (exec_empty boolean_flush) (boolean_pop exec_s_when_autoconstructing () (integer_yank print_boolean tagged_841) ()))))))))) ())
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (451 928 200 200 194 193 91 447 200 200)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (451 928 200 200 194 193 91 447 200 200)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_swap boolean_and integer_dec) in1 boolean_shove integer_rot)
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 6.896
Median total errors in population: 7
Error averages by case: (0.549 0.072 0.8 0.8 0.806 0.807 0.909 0.553 0.8 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.154
Average program size in population (points): 27.723
Average percent parens in population: 0.220
Minimum age in population: 15.765625
Maximum age in population: 20.839111328125
Average age in population: 19.03484619140625
Median age in population: 19.1103515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7040613
--- Timings ---
Current time: 1559582778444 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 62.8%
Fitness Testing:     10.8 seconds, 25.4%
Report:               5.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction 67} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction 66} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_yank})
Lexicase best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_while (integer_add integer_min) integer_gte -81 exec_dup_times (exec_noop) 67 exec_s (exec_eq) (integer_div exec_while () exec_if () (66 integer_pop integer_div integer_dec) integer_yank) ()))) () ()) ())) ())
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.408
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_add} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction 67} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 1, :instruction exec_if} {:close 0, :instruction 66} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_yank})
Zero cases best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_while (integer_add integer_min) integer_gte -81 exec_dup_times (exec_noop) 67 exec_s (exec_eq) (integer_div exec_while () exec_if () (66 integer_pop integer_div integer_dec) integer_yank) ()))) () ()) ())) ())
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.408
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 217 100 100 220 100 219 100 949 413)
Population mean number of elite cases: 2.52
Count of perfect (error zero) individuals by case: (100 217 100 100 220 100 219 100 949 413)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_pop boolean_shove exec_s (exec_do*while (exec_if (exec_eq) (exec_while (boolean_swap boolean_invert_second_then_and) exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot)))) () ())) ())
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 7.482
Median total errors in population: 8
Error averages by case: (0.9 0.783 0.9 0.9 0.78 0.9 0.781 0.9 0.051 0.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.334
Average program size in population (points): 25.815
Average percent parens in population: 0.197
Minimum age in population: 16.765625
Maximum age in population: 22.43701171875
Average age in population: 20.56421337890625
Median age in population: 20.63580322265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7517365
--- Timings ---
Current time: 1559582782012 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.1 seconds, 63.2%
Fitness Testing:     11.4 seconds, 24.8%
Report:               5.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_728} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Lexicase best program: (in3 print_boolean print_integer integer_rot exec_yank boolean_invert_second_then_and tagged_728 integer_dec in1 boolean_or integer_rot)
Lexicase best errors: [0 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 12
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_728} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Zero cases best program: (in3 print_boolean print_integer integer_rot exec_yank boolean_invert_second_then_and tagged_728 integer_dec in1 boolean_or integer_rot)
Zero cases best errors: [0 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 12
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (519 117 946 518 308 117 519 519 519 117)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (519 117 946 518 308 117 519 519 519 117)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction tag_boolean_13} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_sub})
Best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_pop boolean_eq exec_s (exec_do*while (exec_if (exec_eq) (exec_while (boolean_swap tag_boolean_13) boolean_yankdup boolean_swap integer_yankdup integer_gte boolean_pop exec_dup (integer_sub)))) () ())) ())
Errors: [0 1 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 33
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.801
Median total errors in population: 4
Error averages by case: (0.481 0.883 0.054 0.482 0.692 0.883 0.481 0.481 0.481 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.822
Average program size in population (points): 31.051
Average percent parens in population: 0.246
Minimum age in population: 19.13671875
Maximum age in population: 24.1453857421875
Average age in population: 22.02622174072266
Median age in population: 22.07650756835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8080302
--- Timings ---
Current time: 1559582785733 milliseconds
Total Time:          49.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.3 seconds, 63.2%
Fitness Testing:     12.1 seconds, 24.4%
Report:               6.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times exec_shove () exec_while (print_integer integer_swap print_newline integer_dec in1 boolean_shove integer_rot))
Lexicase best errors: [1 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times exec_shove () exec_while (print_integer integer_swap print_newline integer_dec in1 boolean_shove integer_rot))
Zero cases best errors: [1 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 304 531 304 304 68 531 68 46 304)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (531 304 531 304 304 68 531 68 46 304)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and print_integer integer_swap boolean_and exec_pop (in1 boolean_shove integer_rot))
Errors: [1 0 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 21
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.009
Median total errors in population: 7
Error averages by case: (0.469 0.696 0.469 0.696 0.696 0.932 0.469 0.932 0.954 0.696)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.599
Average program size in population (points): 30.386
Average percent parens in population: 0.236
Minimum age in population: 20.86962890625
Maximum age in population: 25.48995971679688
Average age in population: 23.54992071533203
Median age in population: 23.59011840820312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8741141
--- Timings ---
Current time: 1559582789068 milliseconds
Total Time:          53.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.2 seconds, 62.4%
Fitness Testing:     13.0 seconds, 24.4%
Report:               6.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: 84                 
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -6                 
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: 1                  
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 45                 
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 12                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 24                  | Program output: 97                 
Correct output: 11                  | Program output: 72                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 94                 
Correct output: 59                  | Program output: 75                 
Correct output: 42                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 65                 
Correct output: 11                  | Program output: 35                 
Correct output: 0                   | Program output: 39                 
Correct output: -75                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: 91                 
Correct output: -69                 | Program output: -60                
Correct output: -95                 | Program output: -55                
Correct output: -7                  | Program output: 29                 
Correct output: -93                 | Program output: 57                 
Correct output: 12                  | Program output: 73                 
Correct output: -100                | Program output: -57                
Correct output: -22                 | Program output: 60                 
Correct output: -68                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 46                 
Correct output: -69                 | Program output: 96                 
Correct output: -43                 | Program output: 60                 
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 74                 
Correct output: -52                 | Program output: 46                 
Correct output: -92                 | Program output: 56                 
Correct output: -93                 | Program output: -91                
Correct output: 13                  | Program output: 21                 
Correct output: -93                 | Program output: 75                 
Correct output: -76                 | Program output: 51                 
Correct output: -30                 | Program output: -17                
Correct output: 14                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -60                
Correct output: -82                 | Program output: 25                 
Correct output: -90                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: 78                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -61                
Correct output: 7                   | Program output: 11                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 33                 
Correct output: -56                 | Program output: 20                 
Correct output: -95                 | Program output: -8                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 39                 
Correct output: -65                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: 37                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 66                 
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 57                 
Correct output: -46                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1})
Lexicase best program: (integer_min boolean_pop exec_swap () (boolean_pop) exec_swap (exec_k_when_autoconstructing (integer_mult boolean_rot) (integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor boolean_rot) print_integer integer_swap boolean_and integer_dec in1) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1})
Zero cases best program: (integer_min boolean_pop exec_swap () (boolean_pop) exec_swap (exec_k_when_autoconstructing (integer_mult boolean_rot) (integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor boolean_rot) print_integer integer_swap boolean_and integer_dec in1) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 940 940 365 268 307 179 365 179 307)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (179 940 940 365 268 307 179 365 179 307)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Best program: (exec_swap () (exec_dup_items) boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_rot) integer_pop in2 exec_dup (integer_lte) integer_mod boolean_and boolean_xor integer_sub) (print_integer integer_swap boolean_rot integer_dec in1 boolean_or integer_rot))
Errors: [0 0 0 1 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.971
Median total errors in population: 6
Error averages by case: (0.821 0.06 0.06 0.635 0.732 0.693 0.821 0.635 0.821 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.636
Average program size in population (points): 28.527
Average percent parens in population: 0.223
Minimum age in population: 21.86962890625
Maximum age in population: 27.15583801269531
Average age in population: 25.01229150390625
Median age in population: 25.10334777832031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9292549
--- Timings ---
Current time: 1559582791965 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.2 seconds, 62.2%
Fitness Testing:     13.8 seconds, 24.3%
Report:               7.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: 11                 
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 70                 
Correct output: 7                   | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 49                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 57                 
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 97                 
Correct output: 13                  | Program output: 31                 
Correct output: 30                  | Program output: 95                 
Correct output: 11                  | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: 97                 
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: 73                 
Correct output: -52                 | Program output: 1                  
Correct output: -74                 | Program output: 63                 
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -22                
Correct output: -7                  | Program output: 43                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -14                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: 66                 
Correct output: -10                 | Program output: 42                 
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: 21                 
Correct output: -78                 | Program output: 92                 
Correct output: -63                 | Program output: 85                 
Correct output: -52                 | Program output: -34                
Correct output: -92                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -75                
Correct output: -76                 | Program output: -54                
Correct output: -30                 | Program output: 21                 
Correct output: 14                  | Program output: 56                 
Correct output: -80                 | Program output: -44                
Correct output: -98                 | Program output: -59                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: 28                 
Correct output: -82                 | Program output: 68                 
Correct output: -90                 | Program output: 38                 
Correct output: -71                 | Program output: 33                 
Correct output: -5                  | Program output: 46                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 14                 
Correct output: -26                 | Program output: 32                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -20                
Correct output: -56                 | Program output: 97                 
Correct output: -95                 | Program output: -78                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -49                
Correct output: -65                 | Program output: -37                
Correct output: -98                 | Program output: 64                 
Correct output: 8                   | Program output: 83                 
Correct output: -47                 | Program output: -34                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: 11                 
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -10                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth boolean_yankdup in4 print_integer exec_y (boolean_pop boolean_stackdepth integer_dup_times) boolean_invert_second_then_and exec_do*times (print_integer integer_swap boolean_and integer_dec exec_when (boolean_shove integer_rot)))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth boolean_yankdup in4 print_integer exec_y (boolean_pop boolean_stackdepth integer_dup_times) boolean_invert_second_then_and exec_do*times (print_integer integer_swap boolean_and integer_dec exec_when (boolean_shove integer_rot)))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 223 932 467 241 464 1 451 223 242)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (240 223 932 467 241 464 1 451 223 242)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in4 print_integer exec_y () boolean_pop boolean_stackdepth integer_dup_times boolean_invert_second_then_and exec_while (print_integer integer_rot))
Errors: [0 1 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.516
Median total errors in population: 7
Error averages by case: (0.76 0.777 0.068 0.533 0.759 0.536 0.999 0.549 0.777 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.752
Average program size in population (points): 29.135
Average percent parens in population: 0.241
Minimum age in population: 22.86962890625
Maximum age in population: 28.79921722412109
Average age in population: 26.46314269256592
Median age in population: 26.52852630615234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9756054
--- Timings ---
Current time: 1559582795704 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.7 seconds, 63.0%
Fitness Testing:     14.3 seconds, 24.0%
Report:               7.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 68                 
Correct output: 3                   | Program output: 34                 
Correct output: 7                   | Program output: 85                 
Correct output: 32                  | Program output: 88                 
Correct output: 9                   | Program output: 77                 
Correct output: 8                   | Program output: 32                 
Correct output: 2                   | Program output: 12                 
Correct output: 0                   | Program output: 78                 
Correct output: 24                  | Program output: 25                 
Correct output: 11                  | Program output: 37                 
Correct output: 0                   | Program output: 52                 
Correct output: 1                   | Program output: 63                 
Correct output: 59                  | Program output: 71                 
Correct output: 42                  | Program output: 75                 
Correct output: 13                  | Program output: 66                 
Correct output: 30                  | Program output: 44                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: 82                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 27                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 10                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: 65                 
Correct output: -93                 | Program output: -10                
Correct output: 12                  | Program output: 60                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -8                 
Correct output: -68                 | Program output: -47                
Correct output: -76                 | Program output: -23                
Correct output: -10                 | Program output: 97                 
Correct output: -69                 | Program output: 14                 
Correct output: -43                 | Program output: 88                 
Correct output: -54                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 80                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 18                 
Correct output: -93                 | Program output: 47                 
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -51                
Correct output: -30                 | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -60                
Correct output: -98                 | Program output: 48                 
Correct output: -52                 | Program output: 30                 
Correct output: -72                 | Program output: -35                
Correct output: -82                 | Program output: -64                
Correct output: -90                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: 66                 
Correct output: -91                 | Program output: 1                  
Correct output: -26                 | Program output: 34                 
Correct output: -63                 | Program output: -8                 
Correct output: 7                   | Program output: 30                 
Correct output: -99                 | Program output: 69                 
Correct output: -90                 | Program output: 67                 
Correct output: -56                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: 80                 
Correct output: -68                 | Program output: 68                 
Correct output: -72                 | Program output: -13                
Correct output: -95                 | Program output: 84                 
Correct output: -57                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -10                
Correct output: 8                   | Program output: 92                 
Correct output: -47                 | Program output: -3                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 76                 
Correct output: -83                 | Program output: -76                
Correct output: -95                 | Program output: 91                 
Correct output: -20                 | Program output: -16                
Correct output: -46                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in1 print_integer exec_y () boolean_or integer_rot)
Lexicase best errors: [1 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in1 print_integer exec_y () boolean_or integer_rot)
Zero cases best errors: [1 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 160 231 722 160 217 940 608 217 376)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (332 160 231 722 160 217 940 608 217 376)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Best program: (integer_min boolean_pop boolean_stackdepth integer_dup_times in1 print_integer exec_y () boolean_or integer_rot)
Errors: [1 0 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.037
Median total errors in population: 6
Error averages by case: (0.668 0.84 0.769 0.278 0.84 0.783 0.06 0.392 0.783 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.256
Average program size in population (points): 25.359
Average percent parens in population: 0.222
Minimum age in population: 24.95878601074219
Maximum age in population: 30.08418273925781
Average age in population: 28.0891121635437
Median age in population: 28.10441589355469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10339751
--- Timings ---
Current time: 1559582799159 milliseconds
Total Time:          63.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.8 seconds, 62.9%
Fitness Testing:     15.1 seconds, 23.9%
Report:               8.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot})
Lexicase best program: (in3 print_boolean print_integer exec_swap (exec_do*times (boolean_or integer_sub) print_integer integer_swap boolean_and integer_dec in1 boolean_not integer_rot) ())
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 18
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot})
Zero cases best program: (in3 print_boolean print_integer exec_swap (exec_do*times (boolean_or integer_sub) print_integer integer_swap boolean_and integer_dec in1 boolean_not integer_rot) ())
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 18
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (267 129 128 147 267 682 266 956 147 147)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (267 129 128 147 267 682 266 956 147 147)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 2, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction tagged_104} {:close 0, :instruction print_integer})
Best program: (exec_swap () (exec_dup_items) boolean_yankdup exec_k_when_autoconstructing (in2 exec_dup (integer_lte) integer_lt integer_dec boolean_xor integer_add integer_shove boolean_and) (exec_rot (in4 integer_dup_items) () (boolean_stackdepth integer_mult exec_k_when_autoconstructing (in3 tagged_104 print_integer) ())))
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.864
Median total errors in population: 6
Error averages by case: (0.733 0.871 0.872 0.853 0.733 0.318 0.734 0.044 0.853 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.177
Average program size in population (points): 21.315
Average percent parens in population: 0.219
Minimum age in population: 25.95878601074219
Maximum age in population: 31.47052764892578
Average age in population: 29.61416123962402
Median age in population: 29.71712875366211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 325
Genome diversity (% unique genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 341
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10895890
--- Timings ---
Current time: 1559582802407 milliseconds
Total Time:          66.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.1 seconds, 62.9%
Fitness Testing:     15.9 seconds, 23.7%
Report:               8.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: 84                 
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -6                 
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -1                 
Correct output: -78                 | Program output: 1                  
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 45                 
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 15                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 12                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 45                 
Correct output: 0                   | Program output: 54                 
Correct output: 24                  | Program output: 97                 
Correct output: 11                  | Program output: 72                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 94                 
Correct output: 59                  | Program output: 75                 
Correct output: 42                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 65                 
Correct output: 11                  | Program output: 35                 
Correct output: 0                   | Program output: 39                 
Correct output: -75                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: 25                 
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: 91                 
Correct output: -69                 | Program output: -60                
Correct output: -95                 | Program output: -55                
Correct output: -7                  | Program output: 29                 
Correct output: -93                 | Program output: 57                 
Correct output: 12                  | Program output: 73                 
Correct output: -100                | Program output: -57                
Correct output: -22                 | Program output: 60                 
Correct output: -68                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: 46                 
Correct output: -69                 | Program output: 96                 
Correct output: -43                 | Program output: 60                 
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 74                 
Correct output: -52                 | Program output: 46                 
Correct output: -92                 | Program output: 56                 
Correct output: -93                 | Program output: -91                
Correct output: 13                  | Program output: 21                 
Correct output: -93                 | Program output: 75                 
Correct output: -76                 | Program output: 51                 
Correct output: -30                 | Program output: -17                
Correct output: 14                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -60                
Correct output: -82                 | Program output: 25                 
Correct output: -90                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: 78                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -61                
Correct output: 7                   | Program output: 11                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 33                 
Correct output: -56                 | Program output: 20                 
Correct output: -95                 | Program output: -8                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: 39                 
Correct output: -65                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: 37                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 66                 
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 57                 
Correct output: -46                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k})
Lexicase best program: (exec_swap () (boolean_flush boolean_stackdepth boolean_invert_second_then_and boolean_rot) integer_pop in2 boolean_xor integer_lte integer_max boolean_and boolean_xor integer_sub print_integer integer_swap integer_rot integer_dec in1 integer_flush exec_k () ())
Lexicase best errors: [1 1 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k})
Zero cases best program: (exec_swap () (boolean_flush boolean_stackdepth boolean_invert_second_then_and boolean_rot) integer_pop in2 boolean_xor integer_lte integer_max boolean_and boolean_xor integer_sub print_integer integer_swap integer_rot integer_dec in1 integer_flush exec_k () ())
Zero cases best errors: [1 1 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 652 281 932 281 354 281 1 297 281)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (297 652 281 932 281 354 281 1 297 281)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_rot})
Best program: (exec_swap () (exec_dup_items) boolean_yankdup exec_k_when_autoconstructing (exec_dup (boolean_rot) integer_pop in2 exec_dup (integer_lte) integer_lte boolean_and boolean_xor integer_sub) (print_integer integer_swap boolean_and boolean_xor integer_rot))
Errors: [1 1 0 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.343
Median total errors in population: 6
Error averages by case: (0.703 0.348 0.719 0.068 0.719 0.646 0.719 0.999 0.703 0.719)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.526
Average program size in population (points): 29.035
Average percent parens in population: 0.243
Minimum age in population: 27.72999572753906
Maximum age in population: 32.90656471252441
Average age in population: 31.03670542430878
Median age in population: 31.09349250793457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 11433640
--- Timings ---
Current time: 1559582805323 milliseconds
Total Time:          69.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.2 seconds, 63.3%
Fitness Testing:     16.5 seconds, 23.6%
Report:               9.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 91                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 71                 
Correct output: 7                   | Program output: 67                 
Correct output: 32                  | Program output: 96                 
Correct output: 9                   | Program output: 79                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 58                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 90                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 77                 
Correct output: -75                 | Program output: 43                 
Correct output: -94                 | Program output: 84                 
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -43                
Correct output: -95                 | Program output: -9                 
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 92                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 90                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: 44                 
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 98                 
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: 21                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: 46                 
Correct output: 13                  | Program output: 91                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 59                 
Correct output: -80                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 72                 
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -39                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: 51                 
Correct output: -91                 | Program output: 83                 
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: 51                 
Correct output: 7                   | Program output: 96                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: 33                 
Correct output: -73                 | Program output: 34                 
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: 76                 
Correct output: -95                 | Program output: -53                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 79                 
Correct output: -98                 | Program output: 96                 
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 94                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -42                
Correct output: -95                 | Program output: -74                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec})
Lexicase best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_dec)) ())
Lexicase best errors: [1 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec})
Zero cases best program: (in3 print_boolean print_integer exec_swap (exec_y (integer_dec)) ())
Zero cases best errors: [1 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (366 635 143 143 291 124 925 124 144 289)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (366 635 143 143 291 124 925 124 144 289)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div})
Best program: (in4 integer_min in3 exec_if (boolean_rot boolean_not print_integer integer_add boolean_swap) (integer_max integer_empty exec_dup (exec_flush) boolean_xor) boolean_flush integer_gt boolean_invert_second_then_and integer_div)
Errors: [1 0 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 22
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.816
Median total errors in population: 7
Error averages by case: (0.634 0.365 0.857 0.857 0.709 0.876 0.075 0.876 0.856 0.711)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.708
Average program size in population (points): 29.997
Average percent parens in population: 0.256
Minimum age in population: 29.13121032714844
Maximum age in population: 34.64207220077515
Average age in population: 32.58973348855972
Median age in population: 32.69281005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 11965113
--- Timings ---
Current time: 1559582808157 milliseconds
Total Time:          72.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.3 seconds, 63.6%
Fitness Testing:     17.2 seconds, 23.6%
Report:               9.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 68                 
Correct output: 3                   | Program output: 34                 
Correct output: 7                   | Program output: 85                 
Correct output: 32                  | Program output: 88                 
Correct output: 9                   | Program output: 77                 
Correct output: 8                   | Program output: 32                 
Correct output: 2                   | Program output: 12                 
Correct output: 0                   | Program output: 78                 
Correct output: 24                  | Program output: 25                 
Correct output: 11                  | Program output: 37                 
Correct output: 0                   | Program output: 52                 
Correct output: 1                   | Program output: 63                 
Correct output: 59                  | Program output: 71                 
Correct output: 42                  | Program output: 75                 
Correct output: 13                  | Program output: 66                 
Correct output: 30                  | Program output: 44                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 32                 
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: 82                 
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 27                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 10                 
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: 65                 
Correct output: -93                 | Program output: -10                
Correct output: 12                  | Program output: 60                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -8                 
Correct output: -68                 | Program output: -47                
Correct output: -76                 | Program output: -23                
Correct output: -10                 | Program output: 97                 
Correct output: -69                 | Program output: 14                 
Correct output: -43                 | Program output: 88                 
Correct output: -54                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: 80                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: 18                 
Correct output: -93                 | Program output: 47                 
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -51                
Correct output: -30                 | Program output: 53                 
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -60                
Correct output: -98                 | Program output: 48                 
Correct output: -52                 | Program output: 30                 
Correct output: -72                 | Program output: -35                
Correct output: -82                 | Program output: -64                
Correct output: -90                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: 66                 
Correct output: -91                 | Program output: 1                  
Correct output: -26                 | Program output: 34                 
Correct output: -63                 | Program output: -8                 
Correct output: 7                   | Program output: 30                 
Correct output: -99                 | Program output: 69                 
Correct output: -90                 | Program output: 67                 
Correct output: -56                 | Program output: -30                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: 80                 
Correct output: -68                 | Program output: 68                 
Correct output: -72                 | Program output: -13                
Correct output: -95                 | Program output: 84                 
Correct output: -57                 | Program output: -50                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -10                
Correct output: 8                   | Program output: 92                 
Correct output: -47                 | Program output: -3                 
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: 76                 
Correct output: -83                 | Program output: -76                
Correct output: -95                 | Program output: 91                 
Correct output: -20                 | Program output: -16                
Correct output: -46                 | Program output: 14                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min in3 integer_min in1 exec_if (boolean_or boolean_yank print_integer exec_swap (exec_y (integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (print_boolean exec_eq) exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot)) ()) () ()) ())) ()) ())
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min in3 integer_min in1 exec_if (boolean_or boolean_yank print_integer exec_swap (exec_y (integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (print_boolean exec_eq) exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot)) ()) () ()) ())) ()) ())
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 601 248 248 248 129 129 377 809 353)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (128 601 248 248 248 129 129 377 809 353)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (integer_min in3 integer_min in1 exec_if (boolean_or boolean_yank print_integer exec_swap (exec_y (integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove integer_rot)) ()))) () ()) ())) ()) ())
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 44
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 6.73
Median total errors in population: 7
Error averages by case: (0.872 0.399 0.752 0.752 0.752 0.871 0.871 0.623 0.191 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.415
Average program size in population (points): 32.762
Average percent parens in population: 0.290
Minimum age in population: 31.23354911804199
Maximum age in population: 36.08439564704895
Average age in population: 34.21506517767906
Median age in population: 34.30211973190308
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 12592997
--- Timings ---
Current time: 1559582811909 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 63.9%
Fitness Testing:     18.0 seconds, 23.7%
Report:               9.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 448
Test mean error for best: 0.44800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -4                 
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: 35                 
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 45                 
Correct output: 7                   | Program output: 28                 
Correct output: 1                   | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 15                 
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 12                 
Correct output: 8                   | Program output: 59                 
Correct output: 2                   | Program output: 33                 
Correct output: 0                   | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 75                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 21                 
Correct output: 0                   | Program output: 39                 
Correct output: -75                 | Program output: 33                 
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: -17                
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: 62                 
Correct output: -69                 | Program output: -60                
Correct output: -95                 | Program output: -55                
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -33                
Correct output: 12                  | Program output: 73                 
Correct output: -100                | Program output: -62                
Correct output: -22                 | Program output: 60                 
Correct output: -68                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: 44                 
Correct output: -43                 | Program output: 60                 
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: 7                  
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -91                
Correct output: 13                  | Program output: 21                 
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 38                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: 23                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -61                
Correct output: 7                   | Program output: 11                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -8                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: 62                 
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: 83                 
Correct output: -91                 | Program output: -1                 
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81})
Lexicase best program: (integer_min in3 in2 integer_min integer_lte integer_mod boolean_and exec_k_when_autoconstructing (integer_sub) (print_integer exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (boolean_and integer_dec exec_eq) exec_while (boolean_swap integer_min) integer_gte -81) ()))) () ()) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.381
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81})
Zero cases best program: (integer_min in3 in2 integer_min integer_lte integer_mod boolean_and exec_k_when_autoconstructing (integer_sub) (print_integer exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (boolean_and integer_dec exec_eq) exec_while (boolean_swap integer_min) integer_gte -81) ()))) () ()) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.381
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 488 307 627 939 932 307 628 141 1)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (140 488 307 627 939 932 307 628 141 1)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction -81})
Best program: (integer_min in3 in2 integer_min integer_lte integer_mod boolean_and exec_k_when_autoconstructing (integer_sub) (print_integer exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (boolean_and integer_dec exec_eq) exec_while (boolean_swap integer_min) integer_gte -81) ()))) () ()) ()))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 26
Size: 42
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 5.49
Median total errors in population: 5
Error averages by case: (0.86 0.512 0.693 0.373 0.061 0.068 0.693 0.372 0.859 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.56
Average program size in population (points): 36.575
Average percent parens in population: 0.336
Minimum age in population: 33.00007367134094
Maximum age in population: 37.69499731063843
Average age in population: 35.78520997548103
Median age in population: 35.85022431612015
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 13214403
--- Timings ---
Current time: 1559582815056 milliseconds
Total Time:          79.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 63.8%
Fitness Testing:     18.7 seconds, 23.5%
Report:              10.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 195
Test mean error for best: 0.19500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -4                 
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 34                 
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 88                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 38                 
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 25                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -33                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -3                 
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: -23                
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: -52                
Correct output: -91                 | Program output: 1                  
Correct output: -26                 | Program output: 16                 
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -26                
Correct output: -68                 | Program output: 60                 
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -69                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -10                
Correct output: 8                   | Program output: 27                 
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -76                
Correct output: -95                 | Program output: -82                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove in1 boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 49
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove in1 boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 49
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (520 944 184 944 184 231 754 231 186 755)
Population mean number of elite cases: 4.93
Count of perfect (error zero) individuals by case: (520 944 184 944 184 231 754 231 186 755)
Population mean number of perfect (error zero) cases: 4.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove in1 boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 49
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 5.067
Median total errors in population: 5
Error averages by case: (0.48 0.056 0.816 0.056 0.816 0.769 0.246 0.769 0.814 0.245)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.314
Average program size in population (points): 38.487
Average percent parens in population: 0.359
Minimum age in population: 36.4389340877533
Maximum age in population: 38.86416792869568
Average age in population: 37.53358972764015
Median age in population: 37.4389340877533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 354
Genome diversity (% unique genomes):	 0.332
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 366
Syntactic diversity (% unique Push programs):	 0.312
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 13575781
--- Timings ---
Current time: 1559582817617 milliseconds
Total Time:          82.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.7 seconds, 64.2%
Fitness Testing:     19.1 seconds, 23.3%
Report:              10.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_min in3 in2 integer_min integer_lte integer_mod boolean_and boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove in1 boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 56
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_min in3 in2 integer_min integer_lte integer_mod boolean_and boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec in1 boolean_shove in1 boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 56
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (818 763 277 819 943 943 818 819 277 761)
Population mean number of elite cases: 7.24
Count of perfect (error zero) individuals by case: (818 763 277 819 943 943 818 819 277 761)
Population mean number of perfect (error zero) cases: 7.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot})
Best program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 2.762
Median total errors in population: 2
Error averages by case: (0.182 0.237 0.723 0.181 0.057 0.057 0.182 0.181 0.723 0.239)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.653
Average program size in population (points): 48.86
Average percent parens in population: 0.352
Minimum age in population: 38.1030912399292
Maximum age in population: 40.81570816040039
Average age in population: 39.88271520018578
Median age in population: 39.81570816040039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 407
Genome diversity (% unique genomes):	 0.399
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 425
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13820119
--- Timings ---
Current time: 1559582820090 milliseconds
Total Time:          84.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 64.6%
Fitness Testing:     19.4 seconds, 23.0%
Report:              10.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 26
Successful program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 51


Auto-simplifying with starting size: 51
step: 0
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 500
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1000
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1500
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2000
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2500
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3000
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3500
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4000
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4500
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 5000
program: (integer_min in3 in2 in3 integer_min boolean_shove in4 integer_min in3 integer_min in1 integer_min boolean_dup_times exec_if (boolean_or boolean_yank print_integer exec_swap (boolean_stackdepth integer_pop exec_k_when_autoconstructing (exec_s (exec_do*while (exec_if (exec_eq) (exec_s_when_autoconstructing (boolean_invert_second_then_and) (exec_while (print_integer integer_swap boolean_and integer_dec boolean_shove integer_rot)) ()))) () ()) ()) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: -61                 | Program output: -61                
Correct output: -44                 | Program output: -44                
Correct output: -50                 | Program output: -50                
Correct output: -24                 | Program output: -24                
Correct output: -12                 | Program output: -12                
Correct output: -27                 | Program output: -27                
Correct output: -10                 | Program output: -10                
Correct output: -78                 | Program output: -78                
Correct output: -37                 | Program output: -37                
Correct output: 71                  | Program output: 71                 
Correct output: 49                  | Program output: 49                 
Correct output: -10                 | Program output: -10                
Correct output: -27                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: 37                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 3                   | Program output: 3                  
Correct output: 7                   | Program output: 7                  
Correct output: 32                  | Program output: 32                 
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 24                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 59                  | Program output: 59                 
Correct output: 42                  | Program output: 42                 
Correct output: 13                  | Program output: 13                 
Correct output: 30                  | Program output: 30                 
Correct output: 11                  | Program output: 11                 
Correct output: 0                   | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -94                 | Program output: -94                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -95                 | Program output: -95                
Correct output: -7                  | Program output: -7                 
Correct output: -93                 | Program output: -93                
Correct output: 12                  | Program output: 12                 
Correct output: -100                | Program output: -100               
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: -76                 | Program output: -76                
Correct output: -10                 | Program output: -10                
Correct output: -69                 | Program output: -69                
Correct output: -43                 | Program output: -43                
Correct output: -54                 | Program output: -54                
Correct output: -78                 | Program output: -78                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -93                
Correct output: 13                  | Program output: 13                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: 14                  | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -72                 | Program output: -72                
Correct output: -82                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -71                 | Program output: -71                
Correct output: -5                  | Program output: -5                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -26                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -95                 | Program output: -95                
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
Correct output: -57                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -98                 | Program output: -98                
Correct output: 8                   | Program output: 8                  
Correct output: -47                 | Program output: -47                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -46                 | Program output: -46                
;;******************************
