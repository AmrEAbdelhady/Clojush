Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-40 -40 -37 -40] -40] [[-57 -75 -57 -57] -75] [[58 58 58 -70] -70] [[16 16 -37 16] -37] [[96 85 96 96] 85] [[1 1 1 -35] -35] [[-8 65 -8 -8] -8] [[48 48 48 -70] -70] [[13 13 -65 13] -65] [[-95 -51 -51 -51] -95] [(-5 -5 -5 -5) -5] [(12 12 12 12) 12] [(-3 -3 -3 -3) -3] [(89 89 89 89) 89] [(-80 -80 -80 -80) -80] [(53 44 85 65) 44] [(86 100 6 47) 6] [(10 32 94 60) 10] [(61 22 87 99) 22] [(23 92 56 10) 10] [(36 12 12 84) 12] [(92 82 97 82) 82] [(56 34 72 97) 34] [(59 2 7 43) 2] [(56 25 71 11) 11] [(18 100 64 14) 14] [(17 94 32 96) 17] [(73 28 19 17) 17] [(49 38 66 64) 38] [(63 76 89 66) 63] [(90 94 71 72) 71] [(66 17 66 3) 3] [(17 75 41 72) 17] [(30 56 65 66) 30] [(70 42 16 93) 16] [(59 5 -72 31) -72] [(-52 76 10 -9) -52] [(-6 70 -87 -46) -87] [(-30 -66 75 21) -66] [(67 13 34 -48) -48] [(-78 23 34 38) -78] [(77 -33 87 67) -33] [(77 -87 -21 94) -87] [(89 -41 -36 84) -41] [(70 43 95 -49) -49] [(-86 -77 -66 -43) -86] [(-91 19 60 -9) -91] [(15 -59 21 13) -59] [(76 30 1 21) 1] [(-42 37 68 -15) -42] [(5 -97 94 -55) -97] [(27 74 81 71) 27] [(62 31 63 -64) -64] [(96 74 -57 -34) -57] [(-17 86 -3 -75) -75] [(91 -16 -91 -95) -95] [(86 83 77 94) 77] [(-82 95 -1 -97) -97] [(67 22 37 89) 22] [(-90 -78 -75 -30) -90] [(26 25 5 -96) -96] [(-82 10 41 -86) -86] [(40 -7 -96 -30) -96] [(45 -41 -72 -14) -72] [(-14 63 54 -25) -25] [(2 13 -54 -58) -58] [(58 -94 98 7) -94] [(57 89 -97 47) -97] [(40 63 49 -88) -88] [(7 84 66 -48) -48] [(69 64 94 -97) -97] [(23 87 62 -29) -29] [(44 -84 97 -99) -99] [(65 89 -55 -64) -64] [(-59 -72 41 99) -72] [(6 59 25 -94) -94] [(-21 -84 -39 -91) -91] [(-97 70 -51 -11) -97] [(15 20 2 26) 2] [(-58 -39 -98 -65) -98] [(-94 -15 8 14) -94] [(-94 34 -25 -1) -94] [(-48 29 66 0) -48] [(-81 -14 42 78) -81] [(-41 -42 74 -9) -42] [(4 96 -50 -84) -84] [(44 -26 -8 -14) -26] [(-90 1 -69 31) -90] [(73 80 94 -60) -60] [(33 -6 48 2) -6] [(-98 -42 71 68) -98] [(41 -22 -47 -59) -59] [(21 3 13 4) 3] [(-79 -41 -31 -21) -79] [(-71 28 -66 6) -71])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-40 -40 -37 -40] -40]
Train Case:   6 | Input/Output: [[-57 -75 -57 -57] -75]
Train Case:   7 | Input/Output: [[58 58 58 -70] -70]
Train Case:   8 | Input/Output: [[16 16 -37 16] -37]
Train Case:   9 | Input/Output: [[96 85 96 96] 85]
Train Case:  10 | Input/Output: [[1 1 1 -35] -35]
Train Case:  11 | Input/Output: [[-8 65 -8 -8] -8]
Train Case:  12 | Input/Output: [[48 48 48 -70] -70]
Train Case:  13 | Input/Output: [[13 13 -65 13] -65]
Train Case:  14 | Input/Output: [[-95 -51 -51 -51] -95]
Train Case:  15 | Input/Output: [(-5 -5 -5 -5) -5]
Train Case:  16 | Input/Output: [(12 12 12 12) 12]
Train Case:  17 | Input/Output: [(-3 -3 -3 -3) -3]
Train Case:  18 | Input/Output: [(89 89 89 89) 89]
Train Case:  19 | Input/Output: [(-80 -80 -80 -80) -80]
Train Case:  20 | Input/Output: [(53 44 85 65) 44]
Train Case:  21 | Input/Output: [(86 100 6 47) 6]
Train Case:  22 | Input/Output: [(10 32 94 60) 10]
Train Case:  23 | Input/Output: [(61 22 87 99) 22]
Train Case:  24 | Input/Output: [(23 92 56 10) 10]
Train Case:  25 | Input/Output: [(36 12 12 84) 12]
Train Case:  26 | Input/Output: [(92 82 97 82) 82]
Train Case:  27 | Input/Output: [(56 34 72 97) 34]
Train Case:  28 | Input/Output: [(59 2 7 43) 2]
Train Case:  29 | Input/Output: [(56 25 71 11) 11]
Train Case:  30 | Input/Output: [(18 100 64 14) 14]
Train Case:  31 | Input/Output: [(17 94 32 96) 17]
Train Case:  32 | Input/Output: [(73 28 19 17) 17]
Train Case:  33 | Input/Output: [(49 38 66 64) 38]
Train Case:  34 | Input/Output: [(63 76 89 66) 63]
Train Case:  35 | Input/Output: [(90 94 71 72) 71]
Train Case:  36 | Input/Output: [(66 17 66 3) 3]
Train Case:  37 | Input/Output: [(17 75 41 72) 17]
Train Case:  38 | Input/Output: [(30 56 65 66) 30]
Train Case:  39 | Input/Output: [(70 42 16 93) 16]
Train Case:  40 | Input/Output: [(59 5 -72 31) -72]
Train Case:  41 | Input/Output: [(-52 76 10 -9) -52]
Train Case:  42 | Input/Output: [(-6 70 -87 -46) -87]
Train Case:  43 | Input/Output: [(-30 -66 75 21) -66]
Train Case:  44 | Input/Output: [(67 13 34 -48) -48]
Train Case:  45 | Input/Output: [(-78 23 34 38) -78]
Train Case:  46 | Input/Output: [(77 -33 87 67) -33]
Train Case:  47 | Input/Output: [(77 -87 -21 94) -87]
Train Case:  48 | Input/Output: [(89 -41 -36 84) -41]
Train Case:  49 | Input/Output: [(70 43 95 -49) -49]
Train Case:  50 | Input/Output: [(-86 -77 -66 -43) -86]
Train Case:  51 | Input/Output: [(-91 19 60 -9) -91]
Train Case:  52 | Input/Output: [(15 -59 21 13) -59]
Train Case:  53 | Input/Output: [(76 30 1 21) 1]
Train Case:  54 | Input/Output: [(-42 37 68 -15) -42]
Train Case:  55 | Input/Output: [(5 -97 94 -55) -97]
Train Case:  56 | Input/Output: [(27 74 81 71) 27]
Train Case:  57 | Input/Output: [(62 31 63 -64) -64]
Train Case:  58 | Input/Output: [(96 74 -57 -34) -57]
Train Case:  59 | Input/Output: [(-17 86 -3 -75) -75]
Train Case:  60 | Input/Output: [(91 -16 -91 -95) -95]
Train Case:  61 | Input/Output: [(86 83 77 94) 77]
Train Case:  62 | Input/Output: [(-82 95 -1 -97) -97]
Train Case:  63 | Input/Output: [(67 22 37 89) 22]
Train Case:  64 | Input/Output: [(-90 -78 -75 -30) -90]
Train Case:  65 | Input/Output: [(26 25 5 -96) -96]
Train Case:  66 | Input/Output: [(-82 10 41 -86) -86]
Train Case:  67 | Input/Output: [(40 -7 -96 -30) -96]
Train Case:  68 | Input/Output: [(45 -41 -72 -14) -72]
Train Case:  69 | Input/Output: [(-14 63 54 -25) -25]
Train Case:  70 | Input/Output: [(2 13 -54 -58) -58]
Train Case:  71 | Input/Output: [(58 -94 98 7) -94]
Train Case:  72 | Input/Output: [(57 89 -97 47) -97]
Train Case:  73 | Input/Output: [(40 63 49 -88) -88]
Train Case:  74 | Input/Output: [(7 84 66 -48) -48]
Train Case:  75 | Input/Output: [(69 64 94 -97) -97]
Train Case:  76 | Input/Output: [(23 87 62 -29) -29]
Train Case:  77 | Input/Output: [(44 -84 97 -99) -99]
Train Case:  78 | Input/Output: [(65 89 -55 -64) -64]
Train Case:  79 | Input/Output: [(-59 -72 41 99) -72]
Train Case:  80 | Input/Output: [(6 59 25 -94) -94]
Train Case:  81 | Input/Output: [(-21 -84 -39 -91) -91]
Train Case:  82 | Input/Output: [(-97 70 -51 -11) -97]
Train Case:  83 | Input/Output: [(15 20 2 26) 2]
Train Case:  84 | Input/Output: [(-58 -39 -98 -65) -98]
Train Case:  85 | Input/Output: [(-94 -15 8 14) -94]
Train Case:  86 | Input/Output: [(-94 34 -25 -1) -94]
Train Case:  87 | Input/Output: [(-48 29 66 0) -48]
Train Case:  88 | Input/Output: [(-81 -14 42 78) -81]
Train Case:  89 | Input/Output: [(-41 -42 74 -9) -42]
Train Case:  90 | Input/Output: [(4 96 -50 -84) -84]
Train Case:  91 | Input/Output: [(44 -26 -8 -14) -26]
Train Case:  92 | Input/Output: [(-90 1 -69 31) -90]
Train Case:  93 | Input/Output: [(73 80 94 -60) -60]
Train Case:  94 | Input/Output: [(33 -6 48 2) -6]
Train Case:  95 | Input/Output: [(-98 -42 71 68) -98]
Train Case:  96 | Input/Output: [(41 -22 -47 -59) -59]
Train Case:  97 | Input/Output: [(21 3 13 4) 3]
Train Case:  98 | Input/Output: [(-79 -41 -31 -21) -79]
Train Case:  99 | Input/Output: [(-71 28 -66 6) -71]
Test Case:   0 | Input/Output: [[98 98 98 98] 98]
Test Case:   1 | Input/Output: [[50 50 50 12] 12]
Test Case:   2 | Input/Output: [[71 71 71 32] 32]
Test Case:   3 | Input/Output: [[70 70 70 5] 5]
Test Case:   4 | Input/Output: [[-44 99 99 99] -44]
Test Case:   5 | Input/Output: [[-98 -98 80 -98] -98]
Test Case:   6 | Input/Output: [[44 44 44 -87] -87]
Test Case:   7 | Input/Output: [[95 95 50 95] 50]
Test Case:   8 | Input/Output: [[62 62 -67 62] -67]
Test Case:   9 | Input/Output: [[-6 -6 -54 -6] -54]
Test Case:  10 | Input/Output: [[-33 -63 -33 -33] -63]
Test Case:  11 | Input/Output: [[-64 -64 -38 -64] -64]
Test Case:  12 | Input/Output: [[-59 31 31 31] -59]
Test Case:  13 | Input/Output: [[-58 -96 -58 -58] -96]
Test Case:  14 | Input/Output: [[9 9 9 -70] -70]
Test Case:  15 | Input/Output: [[-30 -68 -30 -30] -68]
Test Case:  16 | Input/Output: [[-37 -71 -37 -37] -71]
Test Case:  17 | Input/Output: [[22 22 -67 22] -67]
Test Case:  18 | Input/Output: [[-86 -86 -55 -86] -86]
Test Case:  19 | Input/Output: [[26 26 26 26] 26]
Test Case:  20 | Input/Output: [[11 11 -85 11] -85]
Test Case:  21 | Input/Output: [[6 6 6 -78] -78]
Test Case:  22 | Input/Output: [[78 -54 78 78] -54]
Test Case:  23 | Input/Output: [[93 93 93 -22] -22]
Test Case:  24 | Input/Output: [[46 54 46 46] 46]
Test Case:  25 | Input/Output: [[70 70 -99 70] -99]
Test Case:  26 | Input/Output: [[7 77 7 7] 7]
Test Case:  27 | Input/Output: [[-75 -75 -75 -60] -75]
Test Case:  28 | Input/Output: [[75 44 44 44] 44]
Test Case:  29 | Input/Output: [[-1 -1 -1 51] -1]
Test Case:  30 | Input/Output: [[-64 -64 -83 -64] -83]
Test Case:  31 | Input/Output: [[-2 44 -2 -2] -2]
Test Case:  32 | Input/Output: [[-8 -61 -61 -61] -61]
Test Case:  33 | Input/Output: [[67 67 75 67] 67]
Test Case:  34 | Input/Output: [[-15 -15 24 -15] -15]
Test Case:  35 | Input/Output: [[-44 -44 -44 57] -44]
Test Case:  36 | Input/Output: [[-65 -65 19 -65] -65]
Test Case:  37 | Input/Output: [[-73 -73 -73 57] -73]
Test Case:  38 | Input/Output: [[42 42 42 42] 42]
Test Case:  39 | Input/Output: [[62 26 26 26] 26]
Test Case:  40 | Input/Output: [[-20 -65 -20 -20] -65]
Test Case:  41 | Input/Output: [[-42 -42 -42 -59] -59]
Test Case:  42 | Input/Output: [[-90 -90 -89 -90] -90]
Test Case:  43 | Input/Output: [[-42 -42 -42 52] -42]
Test Case:  44 | Input/Output: [[33 33 33 -87] -87]
Test Case:  45 | Input/Output: [[86 86 -14 86] -14]
Test Case:  46 | Input/Output: [[-45 -45 -45 -42] -45]
Test Case:  47 | Input/Output: [[-63 -98 -63 -63] -98]
Test Case:  48 | Input/Output: [[38 -96 38 38] -96]
Test Case:  49 | Input/Output: [[92 92 96 92] 92]
Test Case:  50 | Input/Output: [[54 -35 -35 -35] -35]
Test Case:  51 | Input/Output: [[-89 -89 -89 37] -89]
Test Case:  52 | Input/Output: [[73 73 -35 73] -35]
Test Case:  53 | Input/Output: [[-67 -67 -67 90] -67]
Test Case:  54 | Input/Output: [[-33 -42 -42 -42] -42]
Test Case:  55 | Input/Output: [[64 64 74 64] 64]
Test Case:  56 | Input/Output: [[-89 -89 -89 -83] -89]
Test Case:  57 | Input/Output: [[-41 -41 -30 -41] -41]
Test Case:  58 | Input/Output: [[-25 -25 7 -25] -25]
Test Case:  59 | Input/Output: [[-91 -53 -91 -91] -91]
Test Case:  60 | Input/Output: [[79 79 79 -32] -32]
Test Case:  61 | Input/Output: [[98 -62 98 98] -62]
Test Case:  62 | Input/Output: [[100 100 4 100] 4]
Test Case:  63 | Input/Output: [[73 73 73 -86] -86]
Test Case:  64 | Input/Output: [[-75 92 -75 -75] -75]
Test Case:  65 | Input/Output: [[98 73 98 98] 73]
Test Case:  66 | Input/Output: [[-34 -44 -34 -34] -44]
Test Case:  67 | Input/Output: [[-73 -73 84 -73] -73]
Test Case:  68 | Input/Output: [[-65 -65 -65 -81] -81]
Test Case:  69 | Input/Output: [[45 45 -60 45] -60]
Test Case:  70 | Input/Output: [[-95 37 -95 -95] -95]
Test Case:  71 | Input/Output: [[24 24 24 0] 0]
Test Case:  72 | Input/Output: [[-12 -12 -12 60] -12]
Test Case:  73 | Input/Output: [[-51 -51 -51 -85] -85]
Test Case:  74 | Input/Output: [[-38 -38 5 -38] -38]
Test Case:  75 | Input/Output: [[-7 -92 -92 -92] -92]
Test Case:  76 | Input/Output: [[-92 -92 -52 -92] -92]
Test Case:  77 | Input/Output: [[-10 -10 -80 -10] -80]
Test Case:  78 | Input/Output: [[-40 -40 -40 71] -40]
Test Case:  79 | Input/Output: [[65 -7 65 65] -7]
Test Case:  80 | Input/Output: [[19 19 -88 19] -88]
Test Case:  81 | Input/Output: [[-15 -97 -15 -15] -97]
Test Case:  82 | Input/Output: [[-8 -8 46 -8] -8]
Test Case:  83 | Input/Output: [[80 80 80 -7] -7]
Test Case:  84 | Input/Output: [[12 12 88 12] 12]
Test Case:  85 | Input/Output: [[-3 81 -3 -3] -3]
Test Case:  86 | Input/Output: [[33 33 90 33] 33]
Test Case:  87 | Input/Output: [[-84 91 -84 -84] -84]
Test Case:  88 | Input/Output: [[14 -73 -73 -73] -73]
Test Case:  89 | Input/Output: [[-35 -35 -63 -35] -63]
Test Case:  90 | Input/Output: [[4 4 4 70] 4]
Test Case:  91 | Input/Output: [[-37 39 39 39] -37]
Test Case:  92 | Input/Output: [[-83 -83 15 -83] -83]
Test Case:  93 | Input/Output: [[-76 -76 -76 -40] -76]
Test Case:  94 | Input/Output: [[-6 -5 -5 -5] -6]
Test Case:  95 | Input/Output: [[-37 -38 -38 -38] -38]
Test Case:  96 | Input/Output: [[-57 -13 -13 -13] -57]
Test Case:  97 | Input/Output: [[-83 -83 21 -83] -83]
Test Case:  98 | Input/Output: [[-22 -22 94 -22] -22]
Test Case:  99 | Input/Output: [[82 82 82 -96] -96]
Test Case: 100 | Input/Output: [(32 32 32 32) 32]
Test Case: 101 | Input/Output: [(31 31 31 31) 31]
Test Case: 102 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 103 | Input/Output: [(4 4 4 4) 4]
Test Case: 104 | Input/Output: [(51 51 51 51) 51]
Test Case: 105 | Input/Output: [(81 81 81 81) 81]
Test Case: 106 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 107 | Input/Output: [(92 92 92 92) 92]
Test Case: 108 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 109 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 110 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 111 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 112 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 113 | Input/Output: [(46 46 46 46) 46]
Test Case: 114 | Input/Output: [(12 12 12 12) 12]
Test Case: 115 | Input/Output: [(80 80 80 80) 80]
Test Case: 116 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 117 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 118 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 119 | Input/Output: [(86 86 86 86) 86]
Test Case: 120 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 121 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 122 | Input/Output: [(30 30 30 30) 30]
Test Case: 123 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 124 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 125 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 126 | Input/Output: [(80 80 80 80) 80]
Test Case: 127 | Input/Output: [(67 67 67 67) 67]
Test Case: 128 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 129 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 130 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 131 | Input/Output: [(58 58 58 58) 58]
Test Case: 132 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 133 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 134 | Input/Output: [(93 93 93 93) 93]
Test Case: 135 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 136 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 137 | Input/Output: [(78 78 78 78) 78]
Test Case: 138 | Input/Output: [(6 6 6 6) 6]
Test Case: 139 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 140 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 141 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 142 | Input/Output: [(89 89 89 89) 89]
Test Case: 143 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 144 | Input/Output: [(12 12 12 12) 12]
Test Case: 145 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 146 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 147 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 148 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 149 | Input/Output: [(30 30 30 30) 30]
Test Case: 150 | Input/Output: [(88 88 88 88) 88]
Test Case: 151 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 152 | Input/Output: [(13 13 13 13) 13]
Test Case: 153 | Input/Output: [(36 36 36 36) 36]
Test Case: 154 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 155 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 156 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 157 | Input/Output: [(15 15 15 15) 15]
Test Case: 158 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 159 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 160 | Input/Output: [(55 55 55 55) 55]
Test Case: 161 | Input/Output: [(92 92 92 92) 92]
Test Case: 162 | Input/Output: [(61 61 61 61) 61]
Test Case: 163 | Input/Output: [(68 68 68 68) 68]
Test Case: 164 | Input/Output: [(70 70 70 70) 70]
Test Case: 165 | Input/Output: [(76 76 76 76) 76]
Test Case: 166 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 167 | Input/Output: [(81 81 81 81) 81]
Test Case: 168 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 169 | Input/Output: [(20 20 20 20) 20]
Test Case: 170 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 171 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 172 | Input/Output: [(78 78 78 78) 78]
Test Case: 173 | Input/Output: [(41 41 41 41) 41]
Test Case: 174 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 175 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 176 | Input/Output: [(53 53 53 53) 53]
Test Case: 177 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 178 | Input/Output: [(95 95 95 95) 95]
Test Case: 179 | Input/Output: [(9 9 9 9) 9]
Test Case: 180 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 181 | Input/Output: [(54 54 54 54) 54]
Test Case: 182 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 183 | Input/Output: [(11 11 11 11) 11]
Test Case: 184 | Input/Output: [(23 23 23 23) 23]
Test Case: 185 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 186 | Input/Output: [(43 43 43 43) 43]
Test Case: 187 | Input/Output: [(20 20 20 20) 20]
Test Case: 188 | Input/Output: [(58 58 58 58) 58]
Test Case: 189 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 190 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 191 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 192 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 193 | Input/Output: [(44 44 44 44) 44]
Test Case: 194 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 195 | Input/Output: [(28 28 28 28) 28]
Test Case: 196 | Input/Output: [(41 41 41 41) 41]
Test Case: 197 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 198 | Input/Output: [(20 20 20 20) 20]
Test Case: 199 | Input/Output: [(41 41 41 41) 41]
Test Case: 200 | Input/Output: [(24 52 63 3) 3]
Test Case: 201 | Input/Output: [(86 37 61 38) 37]
Test Case: 202 | Input/Output: [(64 40 58 45) 40]
Test Case: 203 | Input/Output: [(50 17 55 47) 17]
Test Case: 204 | Input/Output: [(95 59 12 40) 12]
Test Case: 205 | Input/Output: [(50 70 87 2) 2]
Test Case: 206 | Input/Output: [(73 21 40 81) 21]
Test Case: 207 | Input/Output: [(49 95 97 38) 38]
Test Case: 208 | Input/Output: [(35 69 88 40) 35]
Test Case: 209 | Input/Output: [(100 53 86 65) 53]
Test Case: 210 | Input/Output: [(46 87 2 45) 2]
Test Case: 211 | Input/Output: [(43 75 61 27) 27]
Test Case: 212 | Input/Output: [(0 18 76 37) 0]
Test Case: 213 | Input/Output: [(23 21 28 3) 3]
Test Case: 214 | Input/Output: [(92 13 2 30) 2]
Test Case: 215 | Input/Output: [(97 95 12 4) 4]
Test Case: 216 | Input/Output: [(66 37 7 91) 7]
Test Case: 217 | Input/Output: [(81 73 50 77) 50]
Test Case: 218 | Input/Output: [(74 32 83 74) 32]
Test Case: 219 | Input/Output: [(62 33 81 80) 33]
Test Case: 220 | Input/Output: [(19 3 21 8) 3]
Test Case: 221 | Input/Output: [(73 14 79 70) 14]
Test Case: 222 | Input/Output: [(75 69 28 92) 28]
Test Case: 223 | Input/Output: [(95 52 96 16) 16]
Test Case: 224 | Input/Output: [(32 49 10 42) 10]
Test Case: 225 | Input/Output: [(88 2 63 15) 2]
Test Case: 226 | Input/Output: [(25 4 1 42) 1]
Test Case: 227 | Input/Output: [(55 4 11 63) 4]
Test Case: 228 | Input/Output: [(82 33 54 34) 33]
Test Case: 229 | Input/Output: [(52 22 93 12) 12]
Test Case: 230 | Input/Output: [(99 74 62 58) 58]
Test Case: 231 | Input/Output: [(33 70 33 100) 33]
Test Case: 232 | Input/Output: [(77 60 96 65) 60]
Test Case: 233 | Input/Output: [(78 79 53 50) 50]
Test Case: 234 | Input/Output: [(60 53 5 90) 5]
Test Case: 235 | Input/Output: [(61 70 71 60) 60]
Test Case: 236 | Input/Output: [(6 10 23 85) 6]
Test Case: 237 | Input/Output: [(87 13 69 93) 13]
Test Case: 238 | Input/Output: [(5 97 88 81) 5]
Test Case: 239 | Input/Output: [(42 9 21 38) 9]
Test Case: 240 | Input/Output: [(45 54 38 0) 0]
Test Case: 241 | Input/Output: [(55 1 1 73) 1]
Test Case: 242 | Input/Output: [(73 14 1 50) 1]
Test Case: 243 | Input/Output: [(85 30 58 17) 17]
Test Case: 244 | Input/Output: [(87 72 22 50) 22]
Test Case: 245 | Input/Output: [(37 87 45 20) 20]
Test Case: 246 | Input/Output: [(88 20 49 48) 20]
Test Case: 247 | Input/Output: [(39 2 91 31) 2]
Test Case: 248 | Input/Output: [(52 60 63 15) 15]
Test Case: 249 | Input/Output: [(41 61 21 83) 21]
Test Case: 250 | Input/Output: [(74 73 34 8) 8]
Test Case: 251 | Input/Output: [(42 48 66 5) 5]
Test Case: 252 | Input/Output: [(86 59 20 8) 8]
Test Case: 253 | Input/Output: [(95 27 94 27) 27]
Test Case: 254 | Input/Output: [(75 49 72 7) 7]
Test Case: 255 | Input/Output: [(47 25 24 60) 24]
Test Case: 256 | Input/Output: [(15 82 27 63) 15]
Test Case: 257 | Input/Output: [(12 65 76 88) 12]
Test Case: 258 | Input/Output: [(10 8 56 67) 8]
Test Case: 259 | Input/Output: [(5 74 17 1) 1]
Test Case: 260 | Input/Output: [(35 35 32 34) 32]
Test Case: 261 | Input/Output: [(4 50 67 41) 4]
Test Case: 262 | Input/Output: [(46 100 92 77) 46]
Test Case: 263 | Input/Output: [(46 50 99 42) 42]
Test Case: 264 | Input/Output: [(25 12 63 45) 12]
Test Case: 265 | Input/Output: [(83 100 84 34) 34]
Test Case: 266 | Input/Output: [(76 50 84 45) 45]
Test Case: 267 | Input/Output: [(31 17 61 100) 17]
Test Case: 268 | Input/Output: [(34 96 0 15) 0]
Test Case: 269 | Input/Output: [(100 3 93 23) 3]
Test Case: 270 | Input/Output: [(4 76 59 86) 4]
Test Case: 271 | Input/Output: [(39 22 22 86) 22]
Test Case: 272 | Input/Output: [(16 0 22 77) 0]
Test Case: 273 | Input/Output: [(24 28 33 3) 3]
Test Case: 274 | Input/Output: [(65 98 70 98) 65]
Test Case: 275 | Input/Output: [(27 11 39 100) 11]
Test Case: 276 | Input/Output: [(6 33 2 54) 2]
Test Case: 277 | Input/Output: [(48 37 60 2) 2]
Test Case: 278 | Input/Output: [(83 75 6 93) 6]
Test Case: 279 | Input/Output: [(48 28 79 1) 1]
Test Case: 280 | Input/Output: [(46 80 15 49) 15]
Test Case: 281 | Input/Output: [(27 63 61 2) 2]
Test Case: 282 | Input/Output: [(39 99 70 25) 25]
Test Case: 283 | Input/Output: [(63 98 39 67) 39]
Test Case: 284 | Input/Output: [(85 22 11 99) 11]
Test Case: 285 | Input/Output: [(100 88 84 73) 73]
Test Case: 286 | Input/Output: [(19 93 17 65) 17]
Test Case: 287 | Input/Output: [(55 40 100 26) 26]
Test Case: 288 | Input/Output: [(24 67 79 65) 24]
Test Case: 289 | Input/Output: [(93 96 42 64) 42]
Test Case: 290 | Input/Output: [(49 88 67 78) 49]
Test Case: 291 | Input/Output: [(74 30 65 50) 30]
Test Case: 292 | Input/Output: [(46 48 56 46) 46]
Test Case: 293 | Input/Output: [(53 55 81 7) 7]
Test Case: 294 | Input/Output: [(21 56 60 62) 21]
Test Case: 295 | Input/Output: [(28 14 84 78) 14]
Test Case: 296 | Input/Output: [(7 52 67 13) 7]
Test Case: 297 | Input/Output: [(46 45 88 13) 13]
Test Case: 298 | Input/Output: [(43 95 48 36) 36]
Test Case: 299 | Input/Output: [(56 91 8 32) 8]
Test Case: 300 | Input/Output: [(96 1 27 79) 1]
Test Case: 301 | Input/Output: [(33 76 19 59) 19]
Test Case: 302 | Input/Output: [(69 50 1 49) 1]
Test Case: 303 | Input/Output: [(30 4 45 57) 4]
Test Case: 304 | Input/Output: [(32 63 84 46) 32]
Test Case: 305 | Input/Output: [(81 39 50 61) 39]
Test Case: 306 | Input/Output: [(75 100 72 9) 9]
Test Case: 307 | Input/Output: [(52 62 24 17) 17]
Test Case: 308 | Input/Output: [(21 70 17 37) 17]
Test Case: 309 | Input/Output: [(3 53 77 26) 3]
Test Case: 310 | Input/Output: [(79 59 8 47) 8]
Test Case: 311 | Input/Output: [(32 17 89 10) 10]
Test Case: 312 | Input/Output: [(42 71 28 25) 25]
Test Case: 313 | Input/Output: [(84 74 69 25) 25]
Test Case: 314 | Input/Output: [(99 71 50 3) 3]
Test Case: 315 | Input/Output: [(83 26 70 52) 26]
Test Case: 316 | Input/Output: [(4 3 62 20) 3]
Test Case: 317 | Input/Output: [(94 75 15 66) 15]
Test Case: 318 | Input/Output: [(13 94 47 85) 13]
Test Case: 319 | Input/Output: [(86 9 79 27) 9]
Test Case: 320 | Input/Output: [(57 1 31 45) 1]
Test Case: 321 | Input/Output: [(26 31 38 26) 26]
Test Case: 322 | Input/Output: [(97 5 92 6) 5]
Test Case: 323 | Input/Output: [(92 1 75 2) 1]
Test Case: 324 | Input/Output: [(81 88 25 83) 25]
Test Case: 325 | Input/Output: [(30 23 73 10) 10]
Test Case: 326 | Input/Output: [(21 57 65 20) 20]
Test Case: 327 | Input/Output: [(26 42 91 89) 26]
Test Case: 328 | Input/Output: [(11 29 93 55) 11]
Test Case: 329 | Input/Output: [(47 50 93 59) 47]
Test Case: 330 | Input/Output: [(90 32 36 4) 4]
Test Case: 331 | Input/Output: [(51 11 50 1) 1]
Test Case: 332 | Input/Output: [(25 8 46 91) 8]
Test Case: 333 | Input/Output: [(39 57 24 19) 19]
Test Case: 334 | Input/Output: [(85 15 8 97) 8]
Test Case: 335 | Input/Output: [(49 14 49 40) 14]
Test Case: 336 | Input/Output: [(85 99 94 72) 72]
Test Case: 337 | Input/Output: [(85 63 69 53) 53]
Test Case: 338 | Input/Output: [(14 77 55 64) 14]
Test Case: 339 | Input/Output: [(23 4 54 8) 4]
Test Case: 340 | Input/Output: [(70 31 2 54) 2]
Test Case: 341 | Input/Output: [(34 39 62 5) 5]
Test Case: 342 | Input/Output: [(94 21 14 37) 14]
Test Case: 343 | Input/Output: [(55 33 24 75) 24]
Test Case: 344 | Input/Output: [(91 40 67 71) 40]
Test Case: 345 | Input/Output: [(98 63 49 10) 10]
Test Case: 346 | Input/Output: [(47 66 34 40) 34]
Test Case: 347 | Input/Output: [(100 5 25 90) 5]
Test Case: 348 | Input/Output: [(11 92 92 97) 11]
Test Case: 349 | Input/Output: [(69 8 87 83) 8]
Test Case: 350 | Input/Output: [(54 84 47 19) 19]
Test Case: 351 | Input/Output: [(77 96 37 87) 37]
Test Case: 352 | Input/Output: [(42 99 30 65) 30]
Test Case: 353 | Input/Output: [(68 11 69 38) 11]
Test Case: 354 | Input/Output: [(54 26 40 93) 26]
Test Case: 355 | Input/Output: [(36 75 0 17) 0]
Test Case: 356 | Input/Output: [(58 19 3 41) 3]
Test Case: 357 | Input/Output: [(6 40 94 95) 6]
Test Case: 358 | Input/Output: [(58 18 93 77) 18]
Test Case: 359 | Input/Output: [(47 57 9 99) 9]
Test Case: 360 | Input/Output: [(17 11 58 38) 11]
Test Case: 361 | Input/Output: [(93 74 20 36) 20]
Test Case: 362 | Input/Output: [(2 67 69 26) 2]
Test Case: 363 | Input/Output: [(78 90 78 69) 69]
Test Case: 364 | Input/Output: [(43 88 32 70) 32]
Test Case: 365 | Input/Output: [(9 41 52 59) 9]
Test Case: 366 | Input/Output: [(78 3 54 88) 3]
Test Case: 367 | Input/Output: [(73 31 72 82) 31]
Test Case: 368 | Input/Output: [(69 57 10 29) 10]
Test Case: 369 | Input/Output: [(5 67 85 61) 5]
Test Case: 370 | Input/Output: [(81 48 77 4) 4]
Test Case: 371 | Input/Output: [(66 35 3 95) 3]
Test Case: 372 | Input/Output: [(11 19 10 80) 10]
Test Case: 373 | Input/Output: [(62 79 60 4) 4]
Test Case: 374 | Input/Output: [(96 43 76 32) 32]
Test Case: 375 | Input/Output: [(67 63 69 95) 63]
Test Case: 376 | Input/Output: [(100 68 85 27) 27]
Test Case: 377 | Input/Output: [(4 100 76 25) 4]
Test Case: 378 | Input/Output: [(24 60 96 97) 24]
Test Case: 379 | Input/Output: [(24 9 52 61) 9]
Test Case: 380 | Input/Output: [(82 12 79 57) 12]
Test Case: 381 | Input/Output: [(27 38 56 15) 15]
Test Case: 382 | Input/Output: [(19 39 41 80) 19]
Test Case: 383 | Input/Output: [(64 62 70 50) 50]
Test Case: 384 | Input/Output: [(88 50 72 98) 50]
Test Case: 385 | Input/Output: [(57 98 43 50) 43]
Test Case: 386 | Input/Output: [(36 75 34 45) 34]
Test Case: 387 | Input/Output: [(85 10 58 38) 10]
Test Case: 388 | Input/Output: [(83 89 83 77) 77]
Test Case: 389 | Input/Output: [(9 40 23 28) 9]
Test Case: 390 | Input/Output: [(28 65 86 78) 28]
Test Case: 391 | Input/Output: [(29 24 67 67) 24]
Test Case: 392 | Input/Output: [(98 69 70 60) 60]
Test Case: 393 | Input/Output: [(98 27 65 45) 27]
Test Case: 394 | Input/Output: [(95 62 79 47) 47]
Test Case: 395 | Input/Output: [(18 76 40 71) 18]
Test Case: 396 | Input/Output: [(95 46 52 5) 5]
Test Case: 397 | Input/Output: [(62 79 61 79) 61]
Test Case: 398 | Input/Output: [(26 95 42 47) 26]
Test Case: 399 | Input/Output: [(75 59 33 75) 33]
Test Case: 400 | Input/Output: [(-63 -51 -10 46) -63]
Test Case: 401 | Input/Output: [(27 -25 -71 -77) -77]
Test Case: 402 | Input/Output: [(-43 -52 -86 38) -86]
Test Case: 403 | Input/Output: [(-17 36 17 25) -17]
Test Case: 404 | Input/Output: [(61 -68 33 -92) -92]
Test Case: 405 | Input/Output: [(-89 34 -73 54) -89]
Test Case: 406 | Input/Output: [(85 -31 -26 77) -31]
Test Case: 407 | Input/Output: [(86 62 88 32) 32]
Test Case: 408 | Input/Output: [(12 94 35 -40) -40]
Test Case: 409 | Input/Output: [(1 -52 23 -74) -74]
Test Case: 410 | Input/Output: [(-35 -93 -6 -60) -93]
Test Case: 411 | Input/Output: [(-23 94 -7 68) -23]
Test Case: 412 | Input/Output: [(26 -54 39 -2) -54]
Test Case: 413 | Input/Output: [(14 -64 -75 -8) -75]
Test Case: 414 | Input/Output: [(-20 -35 -87 -35) -87]
Test Case: 415 | Input/Output: [(72 94 45 -32) -32]
Test Case: 416 | Input/Output: [(-37 32 83 -99) -99]
Test Case: 417 | Input/Output: [(66 29 -14 -74) -74]
Test Case: 418 | Input/Output: [(74 -61 85 -77) -77]
Test Case: 419 | Input/Output: [(5 21 21 87) 5]
Test Case: 420 | Input/Output: [(65 4 -44 49) -44]
Test Case: 421 | Input/Output: [(-19 61 -58 98) -58]
Test Case: 422 | Input/Output: [(75 -100 -75 13) -100]
Test Case: 423 | Input/Output: [(63 80 -94 -27) -94]
Test Case: 424 | Input/Output: [(23 35 10 99) 10]
Test Case: 425 | Input/Output: [(-86 2 59 57) -86]
Test Case: 426 | Input/Output: [(30 -60 2 -32) -60]
Test Case: 427 | Input/Output: [(-96 55 96 14) -96]
Test Case: 428 | Input/Output: [(-28 -66 -72 66) -72]
Test Case: 429 | Input/Output: [(9 -45 -100 96) -100]
Test Case: 430 | Input/Output: [(-24 2 -72 91) -72]
Test Case: 431 | Input/Output: [(30 -7 44 4) -7]
Test Case: 432 | Input/Output: [(49 43 2 16) 2]
Test Case: 433 | Input/Output: [(-100 84 -46 23) -100]
Test Case: 434 | Input/Output: [(-64 93 27 39) -64]
Test Case: 435 | Input/Output: [(68 39 -59 -52) -59]
Test Case: 436 | Input/Output: [(94 95 -10 53) -10]
Test Case: 437 | Input/Output: [(-90 -2 -30 -64) -90]
Test Case: 438 | Input/Output: [(19 42 -58 22) -58]
Test Case: 439 | Input/Output: [(12 -15 35 -4) -15]
Test Case: 440 | Input/Output: [(-70 36 90 -57) -70]
Test Case: 441 | Input/Output: [(-44 -64 66 -95) -95]
Test Case: 442 | Input/Output: [(37 -2 -91 -22) -91]
Test Case: 443 | Input/Output: [(16 24 -2 -31) -31]
Test Case: 444 | Input/Output: [(-40 26 -70 62) -70]
Test Case: 445 | Input/Output: [(-48 48 56 -42) -48]
Test Case: 446 | Input/Output: [(-31 78 -73 -85) -85]
Test Case: 447 | Input/Output: [(-25 26 -26 34) -26]
Test Case: 448 | Input/Output: [(88 -73 -85 50) -85]
Test Case: 449 | Input/Output: [(20 -96 89 -50) -96]
Test Case: 450 | Input/Output: [(-95 38 34 -20) -95]
Test Case: 451 | Input/Output: [(-85 62 -64 50) -85]
Test Case: 452 | Input/Output: [(-11 -69 34 14) -69]
Test Case: 453 | Input/Output: [(-39 92 18 -55) -55]
Test Case: 454 | Input/Output: [(-28 25 42 -80) -80]
Test Case: 455 | Input/Output: [(-10 -91 -60 -1) -91]
Test Case: 456 | Input/Output: [(100 -85 99 84) -85]
Test Case: 457 | Input/Output: [(-2 3 -69 84) -69]
Test Case: 458 | Input/Output: [(-73 83 -11 66) -73]
Test Case: 459 | Input/Output: [(-24 -50 -57 0) -57]
Test Case: 460 | Input/Output: [(-18 63 93 -97) -97]
Test Case: 461 | Input/Output: [(67 38 98 69) 38]
Test Case: 462 | Input/Output: [(86 -21 88 -52) -52]
Test Case: 463 | Input/Output: [(-26 86 -30 -57) -57]
Test Case: 464 | Input/Output: [(-6 -2 25 -26) -26]
Test Case: 465 | Input/Output: [(-68 97 12 -68) -68]
Test Case: 466 | Input/Output: [(-21 -82 -54 28) -82]
Test Case: 467 | Input/Output: [(88 76 74 -74) -74]
Test Case: 468 | Input/Output: [(38 90 55 -51) -51]
Test Case: 469 | Input/Output: [(-78 66 -64 -64) -78]
Test Case: 470 | Input/Output: [(-91 14 23 -31) -91]
Test Case: 471 | Input/Output: [(-44 -75 -63 27) -75]
Test Case: 472 | Input/Output: [(4 43 14 -16) -16]
Test Case: 473 | Input/Output: [(-1 -22 -89 16) -89]
Test Case: 474 | Input/Output: [(-72 -72 27 77) -72]
Test Case: 475 | Input/Output: [(40 0 92 30) 0]
Test Case: 476 | Input/Output: [(54 64 -11 -16) -16]
Test Case: 477 | Input/Output: [(-69 -11 -17 98) -69]
Test Case: 478 | Input/Output: [(-15 -41 47 -35) -41]
Test Case: 479 | Input/Output: [(-64 -30 4 37) -64]
Test Case: 480 | Input/Output: [(44 -18 -26 -82) -82]
Test Case: 481 | Input/Output: [(72 -88 -29 -63) -88]
Test Case: 482 | Input/Output: [(33 93 22 57) 22]
Test Case: 483 | Input/Output: [(47 12 -84 55) -84]
Test Case: 484 | Input/Output: [(6 -78 -97 -23) -97]
Test Case: 485 | Input/Output: [(73 -28 82 52) -28]
Test Case: 486 | Input/Output: [(-10 -66 31 83) -66]
Test Case: 487 | Input/Output: [(63 12 46 -57) -57]
Test Case: 488 | Input/Output: [(-77 86 58 17) -77]
Test Case: 489 | Input/Output: [(49 54 -21 40) -21]
Test Case: 490 | Input/Output: [(43 95 -79 -7) -79]
Test Case: 491 | Input/Output: [(-9 -72 -67 -70) -72]
Test Case: 492 | Input/Output: [(18 3 -36 -43) -43]
Test Case: 493 | Input/Output: [(-32 7 63 -65) -65]
Test Case: 494 | Input/Output: [(73 100 -62 -31) -62]
Test Case: 495 | Input/Output: [(14 79 -75 -53) -75]
Test Case: 496 | Input/Output: [(83 59 -55 -25) -55]
Test Case: 497 | Input/Output: [(-61 -87 72 -78) -87]
Test Case: 498 | Input/Output: [(-35 97 -82 -68) -82]
Test Case: 499 | Input/Output: [(-97 57 -52 15) -97]
Test Case: 500 | Input/Output: [(80 -24 -14 -81) -81]
Test Case: 501 | Input/Output: [(-2 -16 -71 -58) -71]
Test Case: 502 | Input/Output: [(31 23 42 34) 23]
Test Case: 503 | Input/Output: [(12 -1 -26 74) -26]
Test Case: 504 | Input/Output: [(-46 10 53 40) -46]
Test Case: 505 | Input/Output: [(-10 -86 -100 -57) -100]
Test Case: 506 | Input/Output: [(98 27 81 -25) -25]
Test Case: 507 | Input/Output: [(-100 -68 -58 -45) -100]
Test Case: 508 | Input/Output: [(19 -8 -21 -18) -21]
Test Case: 509 | Input/Output: [(-68 -37 82 95) -68]
Test Case: 510 | Input/Output: [(-14 -35 29 -74) -74]
Test Case: 511 | Input/Output: [(71 -10 93 -39) -39]
Test Case: 512 | Input/Output: [(-53 7 -35 -2) -53]
Test Case: 513 | Input/Output: [(-91 -39 23 -66) -91]
Test Case: 514 | Input/Output: [(-40 4 -11 94) -40]
Test Case: 515 | Input/Output: [(-1 -100 11 -50) -100]
Test Case: 516 | Input/Output: [(23 13 -55 66) -55]
Test Case: 517 | Input/Output: [(-13 99 -82 37) -82]
Test Case: 518 | Input/Output: [(22 93 59 -96) -96]
Test Case: 519 | Input/Output: [(-62 -42 91 -26) -62]
Test Case: 520 | Input/Output: [(-28 30 -71 -64) -71]
Test Case: 521 | Input/Output: [(0 8 -77 42) -77]
Test Case: 522 | Input/Output: [(90 37 -63 -45) -63]
Test Case: 523 | Input/Output: [(-71 -55 -36 -53) -71]
Test Case: 524 | Input/Output: [(80 61 75 77) 61]
Test Case: 525 | Input/Output: [(61 -13 -86 89) -86]
Test Case: 526 | Input/Output: [(-49 -48 -64 -67) -67]
Test Case: 527 | Input/Output: [(-99 -1 21 9) -99]
Test Case: 528 | Input/Output: [(-19 -65 15 -50) -65]
Test Case: 529 | Input/Output: [(100 15 -61 -96) -96]
Test Case: 530 | Input/Output: [(76 -32 -54 -25) -54]
Test Case: 531 | Input/Output: [(-26 -79 70 -61) -79]
Test Case: 532 | Input/Output: [(-50 21 61 -49) -50]
Test Case: 533 | Input/Output: [(27 49 -90 23) -90]
Test Case: 534 | Input/Output: [(11 81 -61 30) -61]
Test Case: 535 | Input/Output: [(-78 99 -60 19) -78]
Test Case: 536 | Input/Output: [(83 -34 -63 9) -63]
Test Case: 537 | Input/Output: [(56 72 -100 0) -100]
Test Case: 538 | Input/Output: [(-55 85 46 -36) -55]
Test Case: 539 | Input/Output: [(16 60 -25 -19) -25]
Test Case: 540 | Input/Output: [(63 -30 -53 41) -53]
Test Case: 541 | Input/Output: [(53 79 -76 40) -76]
Test Case: 542 | Input/Output: [(69 82 -83 -9) -83]
Test Case: 543 | Input/Output: [(-39 72 -97 44) -97]
Test Case: 544 | Input/Output: [(83 17 -35 11) -35]
Test Case: 545 | Input/Output: [(-76 44 -95 -44) -95]
Test Case: 546 | Input/Output: [(40 -20 -66 -39) -66]
Test Case: 547 | Input/Output: [(96 -86 -67 -61) -86]
Test Case: 548 | Input/Output: [(77 61 90 -88) -88]
Test Case: 549 | Input/Output: [(13 -22 -50 96) -50]
Test Case: 550 | Input/Output: [(-67 -57 -73 94) -73]
Test Case: 551 | Input/Output: [(79 -64 -2 -95) -95]
Test Case: 552 | Input/Output: [(-29 -94 -82 -19) -94]
Test Case: 553 | Input/Output: [(-2 -72 -36 -81) -81]
Test Case: 554 | Input/Output: [(-4 -41 20 -92) -92]
Test Case: 555 | Input/Output: [(31 -5 -31 -19) -31]
Test Case: 556 | Input/Output: [(11 -44 -50 72) -50]
Test Case: 557 | Input/Output: [(-57 40 24 -10) -57]
Test Case: 558 | Input/Output: [(31 51 -32 41) -32]
Test Case: 559 | Input/Output: [(-92 -35 -11 79) -92]
Test Case: 560 | Input/Output: [(-85 70 -88 -66) -88]
Test Case: 561 | Input/Output: [(85 -16 -36 -75) -75]
Test Case: 562 | Input/Output: [(-76 -17 -96 18) -96]
Test Case: 563 | Input/Output: [(-84 10 1 -96) -96]
Test Case: 564 | Input/Output: [(44 39 -55 35) -55]
Test Case: 565 | Input/Output: [(99 -6 98 56) -6]
Test Case: 566 | Input/Output: [(80 -82 -29 58) -82]
Test Case: 567 | Input/Output: [(32 -95 -100 84) -100]
Test Case: 568 | Input/Output: [(-43 -63 37 -77) -77]
Test Case: 569 | Input/Output: [(68 -52 100 -40) -52]
Test Case: 570 | Input/Output: [(-28 83 -71 -39) -71]
Test Case: 571 | Input/Output: [(96 35 90 -49) -49]
Test Case: 572 | Input/Output: [(91 -29 -55 39) -55]
Test Case: 573 | Input/Output: [(39 37 25 -53) -53]
Test Case: 574 | Input/Output: [(43 4 -69 51) -69]
Test Case: 575 | Input/Output: [(72 -10 35 -78) -78]
Test Case: 576 | Input/Output: [(-36 84 30 -5) -36]
Test Case: 577 | Input/Output: [(-1 -47 -70 85) -70]
Test Case: 578 | Input/Output: [(-39 -93 16 67) -93]
Test Case: 579 | Input/Output: [(-53 33 -75 -50) -75]
Test Case: 580 | Input/Output: [(-54 -90 39 -9) -90]
Test Case: 581 | Input/Output: [(-30 -70 98 15) -70]
Test Case: 582 | Input/Output: [(-33 97 35 37) -33]
Test Case: 583 | Input/Output: [(-58 -48 -46 -39) -58]
Test Case: 584 | Input/Output: [(31 9 -95 29) -95]
Test Case: 585 | Input/Output: [(100 12 -51 -69) -69]
Test Case: 586 | Input/Output: [(94 -37 16 57) -37]
Test Case: 587 | Input/Output: [(-82 86 59 -30) -82]
Test Case: 588 | Input/Output: [(-25 92 -14 -44) -44]
Test Case: 589 | Input/Output: [(-92 55 56 67) -92]
Test Case: 590 | Input/Output: [(3 -60 -88 3) -88]
Test Case: 591 | Input/Output: [(72 59 -95 14) -95]
Test Case: 592 | Input/Output: [(88 76 60 -33) -33]
Test Case: 593 | Input/Output: [(-84 -51 -65 -41) -84]
Test Case: 594 | Input/Output: [(0 8 -100 -82) -100]
Test Case: 595 | Input/Output: [(98 -21 -71 -5) -71]
Test Case: 596 | Input/Output: [(24 49 37 52) 24]
Test Case: 597 | Input/Output: [(-25 93 16 75) -25]
Test Case: 598 | Input/Output: [(94 17 34 7) 7]
Test Case: 599 | Input/Output: [(93 -44 -73 73) -73]
Test Case: 600 | Input/Output: [(-26 68 -79 -4) -79]
Test Case: 601 | Input/Output: [(62 73 9 -43) -43]
Test Case: 602 | Input/Output: [(-94 -80 43 -82) -94]
Test Case: 603 | Input/Output: [(-60 -32 -94 -59) -94]
Test Case: 604 | Input/Output: [(81 61 54 -17) -17]
Test Case: 605 | Input/Output: [(66 76 -71 -34) -71]
Test Case: 606 | Input/Output: [(76 -55 -85 -72) -85]
Test Case: 607 | Input/Output: [(-40 -4 23 64) -40]
Test Case: 608 | Input/Output: [(-64 -79 56 -90) -90]
Test Case: 609 | Input/Output: [(-95 19 -9 7) -95]
Test Case: 610 | Input/Output: [(77 26 95 9) 9]
Test Case: 611 | Input/Output: [(-74 56 43 -15) -74]
Test Case: 612 | Input/Output: [(-94 -88 24 61) -94]
Test Case: 613 | Input/Output: [(47 85 -87 51) -87]
Test Case: 614 | Input/Output: [(54 -55 21 81) -55]
Test Case: 615 | Input/Output: [(-61 39 -29 92) -61]
Test Case: 616 | Input/Output: [(-39 43 -90 -45) -90]
Test Case: 617 | Input/Output: [(0 -56 20 -68) -68]
Test Case: 618 | Input/Output: [(-10 69 -71 90) -71]
Test Case: 619 | Input/Output: [(-88 -58 -67 98) -88]
Test Case: 620 | Input/Output: [(84 24 -7 86) -7]
Test Case: 621 | Input/Output: [(-87 99 29 67) -87]
Test Case: 622 | Input/Output: [(-29 -51 -96 -64) -96]
Test Case: 623 | Input/Output: [(68 21 -55 63) -55]
Test Case: 624 | Input/Output: [(-36 78 49 -97) -97]
Test Case: 625 | Input/Output: [(91 -56 80 55) -56]
Test Case: 626 | Input/Output: [(97 41 64 -77) -77]
Test Case: 627 | Input/Output: [(-68 -52 -91 35) -91]
Test Case: 628 | Input/Output: [(-47 -90 -93 -86) -93]
Test Case: 629 | Input/Output: [(-7 -29 87 23) -29]
Test Case: 630 | Input/Output: [(-20 8 -94 -13) -94]
Test Case: 631 | Input/Output: [(15 -96 56 -5) -96]
Test Case: 632 | Input/Output: [(-56 36 96 20) -56]
Test Case: 633 | Input/Output: [(95 -7 -81 27) -81]
Test Case: 634 | Input/Output: [(57 -82 -34 94) -82]
Test Case: 635 | Input/Output: [(-4 97 11 -13) -13]
Test Case: 636 | Input/Output: [(76 -84 14 -23) -84]
Test Case: 637 | Input/Output: [(-44 -56 -45 -43) -56]
Test Case: 638 | Input/Output: [(-76 97 27 -30) -76]
Test Case: 639 | Input/Output: [(31 13 50 -32) -32]
Test Case: 640 | Input/Output: [(-48 -57 89 -54) -57]
Test Case: 641 | Input/Output: [(2 -14 -41 68) -41]
Test Case: 642 | Input/Output: [(14 -66 -44 -29) -66]
Test Case: 643 | Input/Output: [(25 59 -23 35) -23]
Test Case: 644 | Input/Output: [(38 -81 -21 6) -81]
Test Case: 645 | Input/Output: [(47 97 -81 -31) -81]
Test Case: 646 | Input/Output: [(-31 -60 -59 85) -60]
Test Case: 647 | Input/Output: [(15 17 71 43) 15]
Test Case: 648 | Input/Output: [(24 77 -26 14) -26]
Test Case: 649 | Input/Output: [(50 52 -66 98) -66]
Test Case: 650 | Input/Output: [(88 -91 -36 95) -91]
Test Case: 651 | Input/Output: [(36 71 -89 68) -89]
Test Case: 652 | Input/Output: [(45 -84 13 -78) -84]
Test Case: 653 | Input/Output: [(58 -29 29 5) -29]
Test Case: 654 | Input/Output: [(83 -30 21 39) -30]
Test Case: 655 | Input/Output: [(17 11 -93 18) -93]
Test Case: 656 | Input/Output: [(20 66 68 18) 18]
Test Case: 657 | Input/Output: [(91 57 -10 -68) -68]
Test Case: 658 | Input/Output: [(-71 -23 -13 -71) -71]
Test Case: 659 | Input/Output: [(-34 -84 -11 39) -84]
Test Case: 660 | Input/Output: [(-91 26 54 -54) -91]
Test Case: 661 | Input/Output: [(-23 55 16 21) -23]
Test Case: 662 | Input/Output: [(28 -41 13 -89) -89]
Test Case: 663 | Input/Output: [(84 -55 -17 28) -55]
Test Case: 664 | Input/Output: [(86 -79 -48 24) -79]
Test Case: 665 | Input/Output: [(-31 96 12 -74) -74]
Test Case: 666 | Input/Output: [(16 27 73 -49) -49]
Test Case: 667 | Input/Output: [(-84 34 83 -64) -84]
Test Case: 668 | Input/Output: [(43 93 0 -7) -7]
Test Case: 669 | Input/Output: [(-68 -22 -7 40) -68]
Test Case: 670 | Input/Output: [(-25 -32 -56 -53) -56]
Test Case: 671 | Input/Output: [(-12 85 -88 -35) -88]
Test Case: 672 | Input/Output: [(-76 -75 9 61) -76]
Test Case: 673 | Input/Output: [(17 65 3 60) 3]
Test Case: 674 | Input/Output: [(13 -74 65 -77) -77]
Test Case: 675 | Input/Output: [(-1 21 -84 -78) -84]
Test Case: 676 | Input/Output: [(-30 -56 -59 -28) -59]
Test Case: 677 | Input/Output: [(-48 -78 16 -65) -78]
Test Case: 678 | Input/Output: [(99 -73 13 7) -73]
Test Case: 679 | Input/Output: [(99 17 68 -38) -38]
Test Case: 680 | Input/Output: [(-42 63 -85 29) -85]
Test Case: 681 | Input/Output: [(-77 70 -1 31) -77]
Test Case: 682 | Input/Output: [(63 93 66 -11) -11]
Test Case: 683 | Input/Output: [(-50 -49 -26 -77) -77]
Test Case: 684 | Input/Output: [(52 24 -35 -63) -63]
Test Case: 685 | Input/Output: [(-82 -2 -40 -19) -82]
Test Case: 686 | Input/Output: [(99 -30 70 82) -30]
Test Case: 687 | Input/Output: [(42 -42 -19 -27) -42]
Test Case: 688 | Input/Output: [(2 -48 -38 68) -48]
Test Case: 689 | Input/Output: [(-97 21 73 72) -97]
Test Case: 690 | Input/Output: [(-18 -43 -94 38) -94]
Test Case: 691 | Input/Output: [(60 76 -32 -74) -74]
Test Case: 692 | Input/Output: [(-46 67 -100 -67) -100]
Test Case: 693 | Input/Output: [(-69 4 0 89) -69]
Test Case: 694 | Input/Output: [(-62 -12 23 -36) -62]
Test Case: 695 | Input/Output: [(-75 89 43 99) -75]
Test Case: 696 | Input/Output: [(-28 56 -75 13) -75]
Test Case: 697 | Input/Output: [(-56 -1 46 -45) -56]
Test Case: 698 | Input/Output: [(40 -84 87 -23) -84]
Test Case: 699 | Input/Output: [(-100 7 27 44) -100]
Test Case: 700 | Input/Output: [(-8 -91 -79 79) -91]
Test Case: 701 | Input/Output: [(-11 -52 -98 -36) -98]
Test Case: 702 | Input/Output: [(-82 -42 27 57) -82]
Test Case: 703 | Input/Output: [(83 81 55 33) 33]
Test Case: 704 | Input/Output: [(-97 -25 31 35) -97]
Test Case: 705 | Input/Output: [(-88 75 -80 -49) -88]
Test Case: 706 | Input/Output: [(-85 19 -7 -37) -85]
Test Case: 707 | Input/Output: [(94 74 63 -87) -87]
Test Case: 708 | Input/Output: [(53 26 22 86) 22]
Test Case: 709 | Input/Output: [(94 -60 64 -90) -90]
Test Case: 710 | Input/Output: [(39 -10 -21 -59) -59]
Test Case: 711 | Input/Output: [(-93 -66 100 -1) -93]
Test Case: 712 | Input/Output: [(7 37 82 -1) -1]
Test Case: 713 | Input/Output: [(24 66 49 49) 24]
Test Case: 714 | Input/Output: [(77 95 -14 78) -14]
Test Case: 715 | Input/Output: [(15 59 -90 49) -90]
Test Case: 716 | Input/Output: [(-93 83 -79 -43) -93]
Test Case: 717 | Input/Output: [(-89 -73 -63 -26) -89]
Test Case: 718 | Input/Output: [(41 86 -36 -16) -36]
Test Case: 719 | Input/Output: [(-43 -47 12 -65) -65]
Test Case: 720 | Input/Output: [(-36 -58 96 61) -58]
Test Case: 721 | Input/Output: [(3 -60 -8 -15) -60]
Test Case: 722 | Input/Output: [(-11 57 2 100) -11]
Test Case: 723 | Input/Output: [(-81 47 -49 -59) -81]
Test Case: 724 | Input/Output: [(66 84 23 9) 9]
Test Case: 725 | Input/Output: [(-70 89 99 -88) -88]
Test Case: 726 | Input/Output: [(100 -29 -1 93) -29]
Test Case: 727 | Input/Output: [(61 -19 -85 -44) -85]
Test Case: 728 | Input/Output: [(11 -37 92 89) -37]
Test Case: 729 | Input/Output: [(19 -23 9 21) -23]
Test Case: 730 | Input/Output: [(-42 49 20 81) -42]
Test Case: 731 | Input/Output: [(-28 -63 -15 -67) -67]
Test Case: 732 | Input/Output: [(5 31 -87 77) -87]
Test Case: 733 | Input/Output: [(-64 29 -5 71) -64]
Test Case: 734 | Input/Output: [(37 -94 -4 -5) -94]
Test Case: 735 | Input/Output: [(-10 -21 -7 -99) -99]
Test Case: 736 | Input/Output: [(46 -31 -18 50) -31]
Test Case: 737 | Input/Output: [(65 -65 -76 -75) -76]
Test Case: 738 | Input/Output: [(8 45 -16 32) -16]
Test Case: 739 | Input/Output: [(5 -89 -11 59) -89]
Test Case: 740 | Input/Output: [(-55 31 -26 -82) -82]
Test Case: 741 | Input/Output: [(58 58 50 38) 38]
Test Case: 742 | Input/Output: [(-75 -41 -90 -95) -95]
Test Case: 743 | Input/Output: [(-17 51 -80 15) -80]
Test Case: 744 | Input/Output: [(9 51 -78 75) -78]
Test Case: 745 | Input/Output: [(-97 -80 -12 39) -97]
Test Case: 746 | Input/Output: [(-73 -55 96 -89) -89]
Test Case: 747 | Input/Output: [(-97 29 17 3) -97]
Test Case: 748 | Input/Output: [(-33 24 100 95) -33]
Test Case: 749 | Input/Output: [(-82 64 -46 -100) -100]
Test Case: 750 | Input/Output: [(-55 55 14 -99) -99]
Test Case: 751 | Input/Output: [(5 11 72 -50) -50]
Test Case: 752 | Input/Output: [(58 21 89 14) 14]
Test Case: 753 | Input/Output: [(17 24 98 -14) -14]
Test Case: 754 | Input/Output: [(25 -42 48 85) -42]
Test Case: 755 | Input/Output: [(-47 60 -25 -83) -83]
Test Case: 756 | Input/Output: [(60 10 57 71) 10]
Test Case: 757 | Input/Output: [(-14 45 -29 -93) -93]
Test Case: 758 | Input/Output: [(-84 18 -15 -72) -84]
Test Case: 759 | Input/Output: [(-59 -86 28 55) -86]
Test Case: 760 | Input/Output: [(-34 -39 -90 -55) -90]
Test Case: 761 | Input/Output: [(87 -78 -35 -89) -89]
Test Case: 762 | Input/Output: [(-27 7 -16 95) -27]
Test Case: 763 | Input/Output: [(-78 24 -61 -95) -95]
Test Case: 764 | Input/Output: [(4 61 -9 -22) -22]
Test Case: 765 | Input/Output: [(0 25 -66 77) -66]
Test Case: 766 | Input/Output: [(-75 48 23 -45) -75]
Test Case: 767 | Input/Output: [(54 72 13 -83) -83]
Test Case: 768 | Input/Output: [(-2 10 -41 -88) -88]
Test Case: 769 | Input/Output: [(59 -15 -20 -100) -100]
Test Case: 770 | Input/Output: [(-14 28 -56 -80) -80]
Test Case: 771 | Input/Output: [(82 -93 -80 -87) -93]
Test Case: 772 | Input/Output: [(28 -50 6 -9) -50]
Test Case: 773 | Input/Output: [(53 92 -45 -41) -45]
Test Case: 774 | Input/Output: [(-25 -24 99 -85) -85]
Test Case: 775 | Input/Output: [(19 -92 -71 39) -92]
Test Case: 776 | Input/Output: [(-72 -71 22 -4) -72]
Test Case: 777 | Input/Output: [(78 97 -77 -42) -77]
Test Case: 778 | Input/Output: [(64 -12 98 65) -12]
Test Case: 779 | Input/Output: [(10 96 65 72) 10]
Test Case: 780 | Input/Output: [(-98 43 36 -49) -98]
Test Case: 781 | Input/Output: [(-30 -49 36 26) -49]
Test Case: 782 | Input/Output: [(-32 3 -16 -77) -77]
Test Case: 783 | Input/Output: [(-98 -55 -16 34) -98]
Test Case: 784 | Input/Output: [(-42 -80 -57 -89) -89]
Test Case: 785 | Input/Output: [(-3 40 9 17) -3]
Test Case: 786 | Input/Output: [(-41 89 -80 60) -80]
Test Case: 787 | Input/Output: [(-93 -19 -32 -13) -93]
Test Case: 788 | Input/Output: [(-52 49 -36 2) -52]
Test Case: 789 | Input/Output: [(68 -37 60 83) -37]
Test Case: 790 | Input/Output: [(86 56 -25 -47) -47]
Test Case: 791 | Input/Output: [(-43 -69 5 43) -69]
Test Case: 792 | Input/Output: [(-74 56 -27 -63) -74]
Test Case: 793 | Input/Output: [(-72 73 14 2) -72]
Test Case: 794 | Input/Output: [(53 21 -90 31) -90]
Test Case: 795 | Input/Output: [(88 -48 72 -51) -51]
Test Case: 796 | Input/Output: [(10 -98 -59 40) -98]
Test Case: 797 | Input/Output: [(-25 -91 32 -5) -91]
Test Case: 798 | Input/Output: [(-64 -82 -80 64) -82]
Test Case: 799 | Input/Output: [(29 -73 -48 30) -73]
Test Case: 800 | Input/Output: [(-62 70 -55 -18) -62]
Test Case: 801 | Input/Output: [(-89 20 36 17) -89]
Test Case: 802 | Input/Output: [(-10 77 46 89) -10]
Test Case: 803 | Input/Output: [(-83 68 -82 77) -83]
Test Case: 804 | Input/Output: [(-75 -11 87 -69) -75]
Test Case: 805 | Input/Output: [(45 36 -28 40) -28]
Test Case: 806 | Input/Output: [(90 52 26 -59) -59]
Test Case: 807 | Input/Output: [(-12 -90 2 17) -90]
Test Case: 808 | Input/Output: [(-92 8 -26 -20) -92]
Test Case: 809 | Input/Output: [(-50 64 -45 5) -50]
Test Case: 810 | Input/Output: [(-60 83 82 3) -60]
Test Case: 811 | Input/Output: [(-79 89 -64 10) -79]
Test Case: 812 | Input/Output: [(-65 34 21 14) -65]
Test Case: 813 | Input/Output: [(-43 -56 -45 95) -56]
Test Case: 814 | Input/Output: [(47 79 -23 72) -23]
Test Case: 815 | Input/Output: [(21 33 -62 22) -62]
Test Case: 816 | Input/Output: [(-2 46 14 13) -2]
Test Case: 817 | Input/Output: [(91 15 -68 -100) -100]
Test Case: 818 | Input/Output: [(34 65 7 0) 0]
Test Case: 819 | Input/Output: [(-4 43 -83 -60) -83]
Test Case: 820 | Input/Output: [(-41 26 -54 94) -54]
Test Case: 821 | Input/Output: [(55 60 -84 -52) -84]
Test Case: 822 | Input/Output: [(47 20 67 32) 20]
Test Case: 823 | Input/Output: [(22 58 -54 -46) -54]
Test Case: 824 | Input/Output: [(-48 76 54 82) -48]
Test Case: 825 | Input/Output: [(-49 48 83 -90) -90]
Test Case: 826 | Input/Output: [(-85 35 -10 31) -85]
Test Case: 827 | Input/Output: [(22 77 53 71) 22]
Test Case: 828 | Input/Output: [(17 60 -67 -26) -67]
Test Case: 829 | Input/Output: [(61 57 53 -98) -98]
Test Case: 830 | Input/Output: [(15 -76 76 36) -76]
Test Case: 831 | Input/Output: [(-22 45 81 76) -22]
Test Case: 832 | Input/Output: [(-43 -79 20 -99) -99]
Test Case: 833 | Input/Output: [(56 -8 -54 93) -54]
Test Case: 834 | Input/Output: [(-34 78 58 -79) -79]
Test Case: 835 | Input/Output: [(12 -85 -74 -36) -85]
Test Case: 836 | Input/Output: [(68 7 -81 -35) -81]
Test Case: 837 | Input/Output: [(-54 -42 23 -29) -54]
Test Case: 838 | Input/Output: [(80 16 -9 75) -9]
Test Case: 839 | Input/Output: [(-30 29 3 74) -30]
Test Case: 840 | Input/Output: [(-47 4 83 41) -47]
Test Case: 841 | Input/Output: [(97 -61 -94 -47) -94]
Test Case: 842 | Input/Output: [(-62 -7 88 13) -62]
Test Case: 843 | Input/Output: [(-7 56 -78 8) -78]
Test Case: 844 | Input/Output: [(-43 -46 92 55) -46]
Test Case: 845 | Input/Output: [(-37 72 21 90) -37]
Test Case: 846 | Input/Output: [(77 17 98 29) 17]
Test Case: 847 | Input/Output: [(76 -33 97 -4) -33]
Test Case: 848 | Input/Output: [(94 -54 -98 96) -98]
Test Case: 849 | Input/Output: [(81 32 21 -17) -17]
Test Case: 850 | Input/Output: [(30 -26 -83 -13) -83]
Test Case: 851 | Input/Output: [(-99 61 -59 40) -99]
Test Case: 852 | Input/Output: [(-15 44 78 -30) -30]
Test Case: 853 | Input/Output: [(-62 75 99 -79) -79]
Test Case: 854 | Input/Output: [(93 56 79 -94) -94]
Test Case: 855 | Input/Output: [(21 47 64 -33) -33]
Test Case: 856 | Input/Output: [(-25 13 23 -13) -25]
Test Case: 857 | Input/Output: [(39 87 78 33) 33]
Test Case: 858 | Input/Output: [(89 88 77 -85) -85]
Test Case: 859 | Input/Output: [(41 28 -34 38) -34]
Test Case: 860 | Input/Output: [(55 100 19 17) 17]
Test Case: 861 | Input/Output: [(53 -43 -99 30) -99]
Test Case: 862 | Input/Output: [(-22 -19 -58 -38) -58]
Test Case: 863 | Input/Output: [(59 77 19 56) 19]
Test Case: 864 | Input/Output: [(7 31 72 -58) -58]
Test Case: 865 | Input/Output: [(60 -19 -46 96) -46]
Test Case: 866 | Input/Output: [(11 75 73 -60) -60]
Test Case: 867 | Input/Output: [(47 40 -56 8) -56]
Test Case: 868 | Input/Output: [(-98 79 66 50) -98]
Test Case: 869 | Input/Output: [(38 6 -54 -55) -55]
Test Case: 870 | Input/Output: [(-2 -29 -69 -31) -69]
Test Case: 871 | Input/Output: [(30 -48 -70 -3) -70]
Test Case: 872 | Input/Output: [(0 -5 43 -37) -37]
Test Case: 873 | Input/Output: [(7 -36 88 19) -36]
Test Case: 874 | Input/Output: [(16 -2 72 75) -2]
Test Case: 875 | Input/Output: [(-1 -50 34 -17) -50]
Test Case: 876 | Input/Output: [(-40 -90 -62 77) -90]
Test Case: 877 | Input/Output: [(-47 84 24 96) -47]
Test Case: 878 | Input/Output: [(-30 13 -79 5) -79]
Test Case: 879 | Input/Output: [(-12 -34 -46 71) -46]
Test Case: 880 | Input/Output: [(39 49 59 87) 39]
Test Case: 881 | Input/Output: [(83 -33 -53 -69) -69]
Test Case: 882 | Input/Output: [(98 80 -54 74) -54]
Test Case: 883 | Input/Output: [(-23 46 3 99) -23]
Test Case: 884 | Input/Output: [(-45 -46 16 -80) -80]
Test Case: 885 | Input/Output: [(-2 46 -18 -99) -99]
Test Case: 886 | Input/Output: [(-84 -81 84 92) -84]
Test Case: 887 | Input/Output: [(78 61 71 -80) -80]
Test Case: 888 | Input/Output: [(-59 0 1 7) -59]
Test Case: 889 | Input/Output: [(-37 -84 -80 -93) -93]
Test Case: 890 | Input/Output: [(80 50 4 10) 4]
Test Case: 891 | Input/Output: [(-13 72 -77 -51) -77]
Test Case: 892 | Input/Output: [(32 -70 -53 -36) -70]
Test Case: 893 | Input/Output: [(70 93 -72 75) -72]
Test Case: 894 | Input/Output: [(12 34 -99 72) -99]
Test Case: 895 | Input/Output: [(-7 86 -84 -22) -84]
Test Case: 896 | Input/Output: [(-26 68 -37 -97) -97]
Test Case: 897 | Input/Output: [(-26 -49 -22 59) -49]
Test Case: 898 | Input/Output: [(-65 55 62 -88) -88]
Test Case: 899 | Input/Output: [(-54 14 58 1) -54]
Test Case: 900 | Input/Output: [(98 -80 -34 86) -80]
Test Case: 901 | Input/Output: [(-80 96 33 -43) -80]
Test Case: 902 | Input/Output: [(-10 -23 85 51) -23]
Test Case: 903 | Input/Output: [(0 65 100 -47) -47]
Test Case: 904 | Input/Output: [(-62 -3 55 -88) -88]
Test Case: 905 | Input/Output: [(-95 26 53 -47) -95]
Test Case: 906 | Input/Output: [(55 -90 1 -95) -95]
Test Case: 907 | Input/Output: [(-64 -43 -50 -48) -64]
Test Case: 908 | Input/Output: [(-5 89 -92 34) -92]
Test Case: 909 | Input/Output: [(0 57 29 85) 0]
Test Case: 910 | Input/Output: [(-36 20 39 92) -36]
Test Case: 911 | Input/Output: [(-76 -27 -96 31) -96]
Test Case: 912 | Input/Output: [(-65 39 -33 75) -65]
Test Case: 913 | Input/Output: [(5 -51 -21 36) -51]
Test Case: 914 | Input/Output: [(49 -65 19 -12) -65]
Test Case: 915 | Input/Output: [(3 57 57 -81) -81]
Test Case: 916 | Input/Output: [(6 -80 -61 -23) -80]
Test Case: 917 | Input/Output: [(-72 -88 8 88) -88]
Test Case: 918 | Input/Output: [(41 66 -40 -35) -40]
Test Case: 919 | Input/Output: [(-3 -69 -69 -56) -69]
Test Case: 920 | Input/Output: [(20 -6 32 80) -6]
Test Case: 921 | Input/Output: [(-26 -33 70 -46) -46]
Test Case: 922 | Input/Output: [(38 -28 -56 24) -56]
Test Case: 923 | Input/Output: [(14 -32 -44 27) -44]
Test Case: 924 | Input/Output: [(79 -37 -79 22) -79]
Test Case: 925 | Input/Output: [(34 53 22 -55) -55]
Test Case: 926 | Input/Output: [(19 -25 43 -62) -62]
Test Case: 927 | Input/Output: [(-64 -12 0 -96) -96]
Test Case: 928 | Input/Output: [(-16 94 -98 38) -98]
Test Case: 929 | Input/Output: [(-75 74 -49 84) -75]
Test Case: 930 | Input/Output: [(-17 30 99 -18) -18]
Test Case: 931 | Input/Output: [(18 -31 -20 55) -31]
Test Case: 932 | Input/Output: [(-3 72 52 -87) -87]
Test Case: 933 | Input/Output: [(68 -7 48 -55) -55]
Test Case: 934 | Input/Output: [(-95 -54 18 2) -95]
Test Case: 935 | Input/Output: [(-41 -88 63 67) -88]
Test Case: 936 | Input/Output: [(-25 90 18 97) -25]
Test Case: 937 | Input/Output: [(-46 -2 98 24) -46]
Test Case: 938 | Input/Output: [(-41 -1 16 21) -41]
Test Case: 939 | Input/Output: [(34 77 -7 -65) -65]
Test Case: 940 | Input/Output: [(-36 -98 61 32) -98]
Test Case: 941 | Input/Output: [(37 69 -47 -67) -67]
Test Case: 942 | Input/Output: [(-25 -48 86 -71) -71]
Test Case: 943 | Input/Output: [(34 30 47 51) 30]
Test Case: 944 | Input/Output: [(-42 13 67 15) -42]
Test Case: 945 | Input/Output: [(-42 68 -59 3) -59]
Test Case: 946 | Input/Output: [(38 -88 -70 -3) -88]
Test Case: 947 | Input/Output: [(-77 -45 -74 92) -77]
Test Case: 948 | Input/Output: [(-62 -90 -77 -41) -90]
Test Case: 949 | Input/Output: [(-40 -37 65 22) -40]
Test Case: 950 | Input/Output: [(-16 -49 -39 -90) -90]
Test Case: 951 | Input/Output: [(90 41 -6 14) -6]
Test Case: 952 | Input/Output: [(-19 -27 37 27) -27]
Test Case: 953 | Input/Output: [(0 -90 -4 -31) -90]
Test Case: 954 | Input/Output: [(78 -73 -59 -58) -73]
Test Case: 955 | Input/Output: [(-57 74 36 76) -57]
Test Case: 956 | Input/Output: [(-2 -35 -32 47) -35]
Test Case: 957 | Input/Output: [(-1 -44 36 2) -44]
Test Case: 958 | Input/Output: [(-1 74 -27 7) -27]
Test Case: 959 | Input/Output: [(35 -43 -22 26) -43]
Test Case: 960 | Input/Output: [(5 -16 -23 -60) -60]
Test Case: 961 | Input/Output: [(-41 84 25 18) -41]
Test Case: 962 | Input/Output: [(2 -88 -90 -61) -90]
Test Case: 963 | Input/Output: [(-22 -75 -26 -88) -88]
Test Case: 964 | Input/Output: [(9 98 -26 40) -26]
Test Case: 965 | Input/Output: [(-98 -44 -37 -49) -98]
Test Case: 966 | Input/Output: [(-62 -8 -16 -7) -62]
Test Case: 967 | Input/Output: [(-81 69 19 -30) -81]
Test Case: 968 | Input/Output: [(-69 13 -52 -83) -83]
Test Case: 969 | Input/Output: [(-71 5 -23 68) -71]
Test Case: 970 | Input/Output: [(-65 55 -50 58) -65]
Test Case: 971 | Input/Output: [(-25 89 55 -36) -36]
Test Case: 972 | Input/Output: [(65 -20 -52 46) -52]
Test Case: 973 | Input/Output: [(9 -32 23 -34) -34]
Test Case: 974 | Input/Output: [(87 1 84 -29) -29]
Test Case: 975 | Input/Output: [(-12 65 49 91) -12]
Test Case: 976 | Input/Output: [(-65 -98 83 -47) -98]
Test Case: 977 | Input/Output: [(-75 100 46 -67) -75]
Test Case: 978 | Input/Output: [(85 -58 -28 70) -58]
Test Case: 979 | Input/Output: [(-54 -28 -27 -35) -54]
Test Case: 980 | Input/Output: [(51 76 -9 -92) -92]
Test Case: 981 | Input/Output: [(-94 26 4 -53) -94]
Test Case: 982 | Input/Output: [(-46 67 -59 -26) -59]
Test Case: 983 | Input/Output: [(85 -37 -70 -77) -77]
Test Case: 984 | Input/Output: [(-20 -4 44 -54) -54]
Test Case: 985 | Input/Output: [(79 54 -75 -88) -88]
Test Case: 986 | Input/Output: [(-21 21 -36 69) -36]
Test Case: 987 | Input/Output: [(81 -57 82 9) -57]
Test Case: 988 | Input/Output: [(12 -20 -73 82) -73]
Test Case: 989 | Input/Output: [(-90 -67 71 -22) -90]
Test Case: 990 | Input/Output: [(73 -97 -39 72) -97]
Test Case: 991 | Input/Output: [(20 46 -26 21) -26]
Test Case: 992 | Input/Output: [(-22 -95 64 -90) -95]
Test Case: 993 | Input/Output: [(22 -52 -25 -88) -88]
Test Case: 994 | Input/Output: [(26 17 -33 33) -33]
Test Case: 995 | Input/Output: [(36 59 51 -4) -4]
Test Case: 996 | Input/Output: [(80 23 -49 -81) -81]
Test Case: 997 | Input/Output: [(-60 0 98 65) -60]
Test Case: 998 | Input/Output: [(-96 71 67 79) -96]
Test Case: 999 | Input/Output: [(-92 24 -23 27) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -15 92 22 -39 77 58 -87 -121 39 -47 39 108 16 -91 56 92
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-40 -40 -37 -40] -40] [[-57 -75 -57 -57] -75] [[58 58 58 -70] -70] [[16 16 -37 16] -37] [[96 85 96 96] 85] [[1 1 1 -35] -35] [[-8 65 -8 -8] -8] [[48 48 48 -70] -70] [[13 13 -65 13] -65] [[-95 -51 -51 -51] -95] [(-5 -5 -5 -5) -5] [(12 12 12 12) 12] [(-3 -3 -3 -3) -3] [(89 89 89 89) 89] [(-80 -80 -80 -80) -80] [(53 44 85 65) 44] [(86 100 6 47) 6] [(10 32 94 60) 10] [(61 22 87 99) 22] [(23 92 56 10) 10] [(36 12 12 84) 12] [(92 82 97 82) 82] [(56 34 72 97) 34] [(59 2 7 43) 2] [(56 25 71 11) 11] [(18 100 64 14) 14] [(17 94 32 96) 17] [(73 28 19 17) 17] [(49 38 66 64) 38] [(63 76 89 66) 63] [(90 94 71 72) 71] [(66 17 66 3) 3] [(17 75 41 72) 17] [(30 56 65 66) 30] [(70 42 16 93) 16] [(59 5 -72 31) -72] [(-52 76 10 -9) -52] [(-6 70 -87 -46) -87] [(-30 -66 75 21) -66] [(67 13 34 -48) -48] [(-78 23 34 38) -78] [(77 -33 87 67) -33] [(77 -87 -21 94) -87] [(89 -41 -36 84) -41] [(70 43 95 -49) -49] [(-86 -77 -66 -43) -86] [(-91 19 60 -9) -91] [(15 -59 21 13) -59] [(76 30 1 21) 1] [(-42 37 68 -15) -42] [(5 -97 94 -55) -97] [(27 74 81 71) 27] [(62 31 63 -64) -64] [(96 74 -57 -34) -57] [(-17 86 -3 -75) -75] [(91 -16 -91 -95) -95] [(86 83 77 94) 77] [(-82 95 -1 -97) -97] [(67 22 37 89) 22] [(-90 -78 -75 -30) -90] [(26 25 5 -96) -96] [(-82 10 41 -86) -86] [(40 -7 -96 -30) -96] [(45 -41 -72 -14) -72] [(-14 63 54 -25) -25] [(2 13 -54 -58) -58] [(58 -94 98 7) -94] [(57 89 -97 47) -97] [(40 63 49 -88) -88] [(7 84 66 -48) -48] [(69 64 94 -97) -97] [(23 87 62 -29) -29] [(44 -84 97 -99) -99] [(65 89 -55 -64) -64] [(-59 -72 41 99) -72] [(6 59 25 -94) -94] [(-21 -84 -39 -91) -91] [(-97 70 -51 -11) -97] [(15 20 2 26) 2] [(-58 -39 -98 -65) -98] [(-94 -15 8 14) -94] [(-94 34 -25 -1) -94] [(-48 29 66 0) -48] [(-81 -14 42 78) -81] [(-41 -42 74 -9) -42] [(4 96 -50 -84) -84] [(44 -26 -8 -14) -26] [(-90 1 -69 31) -90] [(73 80 94 -60) -60] [(33 -6 48 2) -6] [(-98 -42 71 68) -98] [(41 -22 -47 -59) -59] [(21 3 13 4) 3] [(-79 -41 -31 -21) -79] [(-71 28 -66 6) -71])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Lexicase best program: (in1 exec_noop print_integer integer_mod exec_flush exec_do*range () exec_do*while (integer_mult) boolean_pop integer_lt integer_eq exec_s_when_autoconstructing (exec_noop boolean_yankdup boolean_frominteger boolean_xor) () ())
Lexicase best errors: [1 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor})
Zero cases best program: (in1 exec_noop print_integer integer_mod exec_flush exec_do*range () exec_do*while (integer_mult) boolean_pop integer_lt integer_eq exec_s_when_autoconstructing (exec_noop boolean_yankdup boolean_frominteger boolean_xor) () ())
Zero cases best errors: [1 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 1000 2 2 2 2 1 3 2)
Population mean number of elite cases: 2.02
Count of perfect (error zero) individuals by case: (0 2 0 2 2 2 2 1 3 2)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty) (exec_when (boolean_swap) exec_k_when_autoconstructing (boolean_dup) (integer_eq print_integer exec_dup_times (integer_lt exec_dup () integer_yankdup) integer_dup_times boolean_and) exec_do*count () integer_mod integer_add integer_mod))
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 9.984
Median total errors in population: 10
Error averages by case: (1.0 0.998 1.0 0.998 0.998 0.998 0.998 0.999 0.997 0.998)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 51.887
Average program size in population (points): 71.124
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.281
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480887
--- Timings ---
Current time: 1559582820892 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.9 seconds, 31.9%
Fitness Testing:      1.8 seconds, 64.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty) (exec_when (boolean_swap) exec_k_when_autoconstructing (boolean_dup) (integer_eq print_integer exec_dup_times (integer_lt exec_dup () integer_yankdup) integer_dup_times boolean_and) exec_do*count () integer_mod integer_add integer_mod))
Lexicase best errors: [1 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty) (exec_when (boolean_swap) exec_k_when_autoconstructing (boolean_dup) (integer_eq print_integer exec_dup_times (integer_lt exec_dup () integer_yankdup) integer_dup_times boolean_and) exec_do*count () integer_mod integer_add integer_mod))
Zero cases best errors: [1 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 1000 770 453 1000 315 1000 1000 5 455)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (4 0 770 453 0 315 0 0 5 455)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty) (exec_when (boolean_swap) exec_k_when_autoconstructing (boolean_dup) (integer_eq print_integer exec_dup_times (integer_lt exec_dup () integer_yankdup) integer_dup_times boolean_and) exec_do*count () integer_mod integer_add integer_mod))
Errors: [1 1 0 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 23
Size: 33
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.998
Median total errors in population: 8
Error averages by case: (0.996 1.0 0.23 0.547 1.0 0.685 1.0 1.0 0.995 0.545)
Error minima by case: (0 1 0 0 1 0 1 1 0 0)
Average genome size in population (length): 45.341
Average program size in population (points): 64.472
Average percent parens in population: 0.289
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.513
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 789343
--- Timings ---
Current time: 1559582823342 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 47.9%
Fitness Testing:      2.2 seconds, 41.7%
Report:               0.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_627} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 32} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_648} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2 integer_mod exec_y_when_autoconstructing (in4 in1 integer_empty) integer_gte) exec_y (exec_do*range ()) exec_k (integer_rot 43) () integer_gte boolean_pop exec_y (integer_mult exec_y_when_autoconstructing () boolean_flush) integer_lte exec_dup_items exec_dup (exec_if () (integer_max exec_yank integer_shove tagged_627 integer_eq print_newline integer_flush 32 boolean_swap integer_eq) integer_swap) boolean_empty boolean_invert_second_then_and integer_lte integer_inc boolean_pop exec_empty exec_y (integer_fromboolean) boolean_flush boolean_rot tag_exec_648 (integer_dup_times integer_mult exec_swap () ()))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_627} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 32} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_648} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2 integer_mod exec_y_when_autoconstructing (in4 in1 integer_empty) integer_gte) exec_y (exec_do*range ()) exec_k (integer_rot 43) () integer_gte boolean_pop exec_y (integer_mult exec_y_when_autoconstructing () boolean_flush) integer_lte exec_dup_items exec_dup (exec_if () (integer_max exec_yank integer_shove tagged_627 integer_eq print_newline integer_flush 32 boolean_swap integer_eq) integer_swap) boolean_empty boolean_invert_second_then_and integer_lte integer_inc boolean_pop exec_empty exec_y (integer_fromboolean) boolean_flush boolean_rot tag_exec_648 (integer_dup_times integer_mult exec_swap () ()))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 233 1000 834 177 832 177 177 177 421)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (0 233 0 834 177 832 177 177 177 421)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_627} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 32} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_648} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (exec_do*range (boolean_stackdepth boolean_and in2 integer_mod boolean_invert_first_then_and in4 in1 integer_empty) integer_gte) exec_y (exec_do*range ()) exec_k (integer_rot 43) () integer_gte boolean_pop exec_y (integer_mult exec_y_when_autoconstructing () boolean_flush) integer_lte exec_dup_items exec_dup (exec_if () (integer_max exec_yank integer_shove tagged_627 integer_eq print_newline integer_flush 32 boolean_swap integer_eq) integer_swap) boolean_empty boolean_invert_second_then_and integer_lte integer_inc boolean_pop exec_empty exec_y (integer_fromboolean) boolean_flush boolean_rot tag_exec_648 (integer_dup_times integer_mult exec_swap (print_boolean boolean_or exec_if (exec_s (integer_min exec_k (in1 integer_lt boolean_pop) ()) () ()) ()) ()))
Errors: [1 1 1 0 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 75
Size: 101
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 6.972
Median total errors in population: 7
Error averages by case: (1.0 0.767 1.0 0.166 0.823 0.168 0.823 0.823 0.823 0.579)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 38.593
Average program size in population (points): 55.952
Average percent parens in population: 0.303
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.169
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1096760
--- Timings ---
Current time: 1559582826059 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.6 seconds, 57.0%
Fitness Testing:      2.6 seconds, 31.9%
Report:               0.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction in2})
Lexicase best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq exec_do*range (exec_dup_times (exec_s () (boolean_dup_times exec_flush exec_shove (integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add print_boolean exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_add integer_gt exec_empty integer_dup_items boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add integer_max boolean_and) (exec_rot () (integer_fromboolean print_newline in2 in2) ())))))))))))) ())) ()))))))) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 146
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction in2})
Zero cases best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq exec_do*range (exec_dup_times (exec_s () (boolean_dup_times exec_flush exec_shove (integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add print_boolean exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_add integer_gt exec_empty integer_dup_items boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add integer_max boolean_and) (exec_rot () (integer_fromboolean print_newline in2 in2) ())))))))))))) ())) ()))))))) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 146
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (608 272 607 607 607 879 607 607 131 142)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (608 272 607 607 607 879 607 607 131 142)
Population mean number of perfect (error zero) cases: 5.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2 integer_mod boolean_stackdepth in4 in1 integer_empty) integer_gte exec_y (exec_do*range ()) exec_k () ())
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 29
Size: 38
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 4.933
Median total errors in population: 3
Error averages by case: (0.392 0.728 0.393 0.393 0.393 0.121 0.393 0.393 0.869 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.28
Average program size in population (points): 77.691
Average percent parens in population: 0.295
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.635
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1387951
--- Timings ---
Current time: 1559582829076 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.1 seconds, 63.7%
Fitness Testing:      2.9 seconds, 26.4%
Report:               1.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Lexicase best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq exec_do*while (exec_dup_times (exec_s () (boolean_dup_times exec_flush exec_shove (integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1))))))) ())) ()))))))) () ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 100
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1})
Zero cases best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq exec_do*while (exec_dup_times (exec_s () (boolean_dup_times exec_flush exec_shove (integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1))))))) ())) ()))))))) () ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 100
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (607 122 607 607 607 1000 154 153 122 1000)
Population mean number of elite cases: 4.98
Count of perfect (error zero) individuals by case: (607 122 607 607 607 0 154 153 122 0)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_627} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 32} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_648} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2 integer_mod boolean_invert_first_then_and in4 in1 integer_empty) integer_gte exec_y (exec_do*range ()) exec_k (integer_rot 43) () integer_gte boolean_pop exec_y (integer_mult exec_y_when_autoconstructing () boolean_flush) integer_lte exec_dup_items exec_dup (exec_if () (integer_max exec_yank integer_shove tagged_627 integer_eq print_newline integer_flush 32 boolean_swap integer_eq) integer_swap) boolean_empty boolean_invert_second_then_and integer_lte integer_inc boolean_pop exec_empty exec_y (integer_fromboolean) boolean_flush boolean_rot tag_exec_648 (integer_dup_times integer_mult exec_swap (print_boolean boolean_or exec_if (exec_s (integer_min exec_k (in1 integer_lt boolean_pop) ()) () ()) ()) ()))
Errors: [0 1 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 75
Size: 100
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.021
Median total errors in population: 6
Error averages by case: (0.393 0.878 0.393 0.393 0.393 1.0 0.846 0.847 0.878 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 52.084
Average program size in population (points): 74.275
Average percent parens in population: 0.292
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.136875
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1680729
--- Timings ---
Current time: 1559582831734 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 66.6%
Fitness Testing:      3.3 seconds, 23.9%
Report:               1.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_newline})
Lexicase best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) boolean_invert_first_then_and) (integer_yankdup boolean_invert_second_then_and in3 integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) boolean_yankdup integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq boolean_flush)) integer_lte exec_dup_items exec_dup (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add print_boolean exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_add integer_gt exec_empty integer_dup_items boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add boolean_swap boolean_and) (exec_rot () (integer_fromboolean print_newline) ())))))))))))))) () ())
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 127
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_newline})
Zero cases best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) boolean_invert_first_then_and) (integer_yankdup boolean_invert_second_then_and in3 integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) boolean_yankdup integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq boolean_flush)) integer_lte exec_dup_items exec_dup (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add print_boolean exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_add integer_gt exec_empty integer_dup_items boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add boolean_swap boolean_and) (exec_rot () (integer_fromboolean print_newline) ())))))))))))))) () ())
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 127
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 438 438 872 439 871 201 201 231 232)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (0 438 438 872 439 871 201 201 231 232)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 1, :instruction integer_add} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction tag_boolean_52} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte print_integer integer_add integer_eq exec_empty in4 exec_do*while (exec_dup_times () integer_eq integer_lte integer_yankdup exec_k (boolean_dup_times exec_k_when_autoconstructing (exec_while (exec_empty) print_integer boolean_flush exec_shove (integer_mult integer_fromboolean integer_stackdepth exec_s_when_autoconstructing () (exec_s (integer_empty in2 boolean_dup) (integer_min integer_dup_times integer_dec integer_add tag_boolean_52 boolean_xor boolean_or) (exec_shove (integer_add exec_if (exec_noop exec_swap () (exec_if (exec_swap () (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add boolean_yankdup exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_add integer_gt exec_empty integer_dup_items boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add) ())))))))))) ())) ()))) ())) ()) ()))
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 93
Size: 136
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.077
Median total errors in population: 6
Error averages by case: (1.0 0.562 0.562 0.128 0.561 0.129 0.799 0.799 0.769 0.768)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.044
Average program size in population (points): 64.541
Average percent parens in population: 0.297
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.6180625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1993517
--- Timings ---
Current time: 1559582834604 milliseconds
Total Time:          16.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.5 seconds, 69.2%
Fitness Testing:      3.6 seconds, 21.7%
Report:               1.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_627} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 32} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2 integer_mod boolean_invert_first_then_and in4 in1 integer_empty) integer_gte exec_y (exec_y_when_autoconstructing () boolean_flush) integer_lte exec_dup_items exec_dup (exec_if () (boolean_invert_second_then_and exec_yank integer_shove tagged_627 integer_eq print_newline integer_flush 32 boolean_swap integer_eq) integer_swap) boolean_empty boolean_invert_second_then_and)
Lexicase best errors: [0 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 56
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction tagged_627} {:close 0, :instruction integer_eq} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction 32} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2 integer_mod boolean_invert_first_then_and in4 in1 integer_empty) integer_gte exec_y (exec_y_when_autoconstructing () boolean_flush) integer_lte exec_dup_items exec_dup (exec_if () (boolean_invert_second_then_and exec_yank integer_shove tagged_627 integer_eq print_newline integer_flush 32 boolean_swap integer_eq) integer_swap) boolean_empty boolean_invert_second_then_and)
Zero cases best errors: [0 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 56
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (838 260 260 390 1000 839 390 390 260 390)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (838 260 260 390 0 839 390 390 260 390)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 2, :instruction 43})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup in2 exec_flush integer_gt exec_if (integer_empty) (integer_gt boolean_stackdepth boolean_and in2) integer_mod boolean_invert_first_then_and exec_while (in1 integer_empty) integer_gte exec_y (exec_do*range ()) exec_k (integer_rot 43) ())
Errors: [0 1 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 5.983
Median total errors in population: 5
Error averages by case: (0.162 0.74 0.74 0.61 1.0 0.161 0.61 0.61 0.74 0.61)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 41.702
Average program size in population (points): 59.672
Average percent parens in population: 0.294
Minimum age in population: 6.5
Maximum age in population: 10.875
Average age in population: 9.04659375
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2304367
--- Timings ---
Current time: 1559582837277 milliseconds
Total Time:          19.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.7 seconds, 70.8%
Fitness Testing:      3.9 seconds, 20.3%
Report:               1.6 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction tagged_333} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction tag_boolean_52} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub})
Lexicase best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc tagged_333) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte boolean_xor integer_empty exec_rot () (boolean_yankdup integer_add tag_boolean_52 boolean_xor boolean_or) (boolean_pop print_integer boolean_yankdup exec_noop boolean_pop integer_inc) integer_sub)) () ())
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction tagged_333} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction tag_boolean_52} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub})
Zero cases best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc tagged_333) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte boolean_xor integer_empty exec_rot () (boolean_yankdup integer_add tag_boolean_52 boolean_xor boolean_or) (boolean_pop print_integer boolean_yankdup exec_noop boolean_pop integer_inc) integer_sub)) () ())
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 522 522 523 522 522 1 522 1000 1)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (522 522 522 523 522 522 1 522 0 1)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction tag_boolean_52} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_sub})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_xor) boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_dup_items integer_mult integer_fromboolean integer_stackdepth exec_s_when_autoconstructing () (exec_s (print_newline in2 boolean_dup) (integer_min integer_dup_times integer_dec integer_add tag_boolean_52 boolean_xor boolean_or) (boolean_pop print_integer boolean_yankdup exec_noop boolean_pop integer_inc) integer_sub) ())
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 36
Size: 45
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.343
Median total errors in population: 3
Error averages by case: (0.478 0.478 0.478 0.477 0.478 0.478 0.999 0.478 1.0 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 38.788
Average program size in population (points): 54.529
Average percent parens in population: 0.279
Minimum age in population: 7.75
Maximum age in population: 12.6875
Average age in population: 10.52153125
Median age in population: 10.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2552504
--- Timings ---
Current time: 1559582839895 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.9 seconds, 72.2%
Fitness Testing:      4.2 seconds, 19.1%
Report:               1.8 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 85                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: 6                   | Program output: 100                
Correct output: 10                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 25                 
Correct output: 14                  | Program output: 100                
Correct output: 17                  | Program output: 94                 
Correct output: 17                  | Program output: 28                 
Correct output: 38                  | Program output: 38                 
Correct output: 63                  | Program output: 76                 
Correct output: 71                  | Program output: 94                 
Correct output: 3                   | Program output: 17                 
Correct output: 17                  | Program output: 75                 
Correct output: 30                  | Program output: 56                 
Correct output: 16                  | Program output: 42                 
Correct output: -72                 | Program output: 5                  
Correct output: -52                 | Program output: 76                 
Correct output: -87                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -48                 | Program output: 13                 
Correct output: -78                 | Program output: 23                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -41                 | Program output: -41                
Correct output: -49                 | Program output: 43                 
Correct output: -86                 | Program output: -77                
Correct output: -91                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 30                 
Correct output: -42                 | Program output: 37                 
Correct output: -97                 | Program output: -97                
Correct output: 27                  | Program output: 74                 
Correct output: -64                 | Program output: 31                 
Correct output: -57                 | Program output: 74                 
Correct output: -75                 | Program output: 86                 
Correct output: -95                 | Program output: -16                
Correct output: 77                  | Program output: 83                 
Correct output: -97                 | Program output: 95                 
Correct output: 22                  | Program output: 22                 
Correct output: -90                 | Program output: -78                
Correct output: -96                 | Program output: 25                 
Correct output: -86                 | Program output: 10                 
Correct output: -96                 | Program output: -7                 
Correct output: -72                 | Program output: -41                
Correct output: -25                 | Program output: 63                 
Correct output: -58                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 89                 
Correct output: -88                 | Program output: 63                 
Correct output: -48                 | Program output: 84                 
Correct output: -97                 | Program output: 64                 
Correct output: -29                 | Program output: 87                 
Correct output: -99                 | Program output: -84                
Correct output: -64                 | Program output: 89                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -84                
Correct output: -97                 | Program output: 70                 
Correct output: 2                   | Program output: 20                 
Correct output: -98                 | Program output: -39                
Correct output: -94                 | Program output: -15                
Correct output: -94                 | Program output: 34                 
Correct output: -48                 | Program output: 29                 
Correct output: -81                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 96                 
Correct output: -26                 | Program output: -26                
Correct output: -90                 | Program output: 1                  
Correct output: -60                 | Program output: 80                 
Correct output: -6                  | Program output: -6                 
Correct output: -98                 | Program output: -42                
Correct output: -59                 | Program output: -22                
Correct output: 3                   | Program output: 3                  
Correct output: -79                 | Program output: -41                
Correct output: -71                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55) exec_when (integer_eq exec_do*while (exec_dup_times (exec_s (boolean_dup_times exec_flush) () ())))) ())) () ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55) exec_when (integer_eq exec_do*while (exec_dup_times (exec_s (boolean_dup_times exec_flush) () ())))) ())) () ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 1 1 1 1000 649 895 650 244 244)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (244 1 1 1 0 649 895 650 244 244)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq})
Best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55) exec_when (integer_eq)) ())) () ())
Errors: [0 1 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 7.071
Median total errors in population: 7
Error averages by case: (0.756 0.999 0.999 0.999 1.0 0.351 0.105 0.35 0.756 0.756)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 46.685
Average program size in population (points): 66.728
Average percent parens in population: 0.292
Minimum age in population: 9.25
Maximum age in population: 13.796875
Average age in population: 12.1337734375
Median age in population: 12.13671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2842374
--- Timings ---
Current time: 1559582842134 milliseconds
Total Time:          24.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.6 seconds, 72.7%
Fitness Testing:      4.5 seconds, 18.6%
Report:               2.0 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 85                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: 6                   | Program output: 100                
Correct output: 10                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 25                 
Correct output: 14                  | Program output: 100                
Correct output: 17                  | Program output: 94                 
Correct output: 17                  | Program output: 28                 
Correct output: 38                  | Program output: 38                 
Correct output: 63                  | Program output: 76                 
Correct output: 71                  | Program output: 94                 
Correct output: 3                   | Program output: 17                 
Correct output: 17                  | Program output: 75                 
Correct output: 30                  | Program output: 56                 
Correct output: 16                  | Program output: 42                 
Correct output: -72                 | Program output: 5                  
Correct output: -52                 | Program output: 76                 
Correct output: -87                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -48                 | Program output: 13                 
Correct output: -78                 | Program output: 23                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -41                 | Program output: -41                
Correct output: -49                 | Program output: 43                 
Correct output: -86                 | Program output: -77                
Correct output: -91                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 30                 
Correct output: -42                 | Program output: 37                 
Correct output: -97                 | Program output: -97                
Correct output: 27                  | Program output: 74                 
Correct output: -64                 | Program output: 31                 
Correct output: -57                 | Program output: 74                 
Correct output: -75                 | Program output: 86                 
Correct output: -95                 | Program output: -16                
Correct output: 77                  | Program output: 83                 
Correct output: -97                 | Program output: 95                 
Correct output: 22                  | Program output: 22                 
Correct output: -90                 | Program output: -78                
Correct output: -96                 | Program output: 25                 
Correct output: -86                 | Program output: 10                 
Correct output: -96                 | Program output: -7                 
Correct output: -72                 | Program output: -41                
Correct output: -25                 | Program output: 63                 
Correct output: -58                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 89                 
Correct output: -88                 | Program output: 63                 
Correct output: -48                 | Program output: 84                 
Correct output: -97                 | Program output: 64                 
Correct output: -29                 | Program output: 87                 
Correct output: -99                 | Program output: -84                
Correct output: -64                 | Program output: 89                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -84                
Correct output: -97                 | Program output: 70                 
Correct output: 2                   | Program output: 20                 
Correct output: -98                 | Program output: -39                
Correct output: -94                 | Program output: -15                
Correct output: -94                 | Program output: 34                 
Correct output: -48                 | Program output: 29                 
Correct output: -81                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 96                 
Correct output: -26                 | Program output: -26                
Correct output: -90                 | Program output: 1                  
Correct output: -60                 | Program output: 80                 
Correct output: -6                  | Program output: -6                 
Correct output: -98                 | Program output: -42                
Correct output: -59                 | Program output: -22                
Correct output: 3                   | Program output: 3                  
Correct output: -79                 | Program output: -41                
Correct output: -71                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55})
Lexicase best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55)) ())) () ())
Lexicase best errors: [1 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55})
Zero cases best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55)) ())) () ())
Zero cases best errors: [1 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 1 235 566 342 347 346 328 328 347)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (235 1 235 566 342 347 346 328 328 347)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Best program: (integer_dec exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55) exec_when (integer_eq boolean_frominteger exec_dup_times (exec_s (boolean_dup_times exec_flush) () ()))) ())) () ())
Errors: [1 1 1 1 0 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 44
Size: 66
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.925
Median total errors in population: 7
Error averages by case: (0.765 0.999 0.765 0.434 0.658 0.653 0.654 0.672 0.672 0.653)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.91
Average program size in population (points): 55.535
Average percent parens in population: 0.315
Minimum age in population: 11.34375
Maximum age in population: 15.390625
Average age in population: 14.10340625
Median age in population: 14.2421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 241
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3190289
--- Timings ---
Current time: 1559582844915 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.8 seconds, 73.3%
Fitness Testing:      4.9 seconds, 18.0%
Report:               2.2 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction in2})
Lexicase best program: (integer_dec exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) integer_eq exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_do*while () boolean_invert_first_then_and) (integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) in2 integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq exec_do*while (integer_dup_items boolean_yank) boolean_dup_times exec_flush boolean_eq integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_flush exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add print_boolean exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_empty integer_gt exec_empty integer_dup_items exec_rot (exec_empty) (exec_while (exec_yank tag_boolean_847 boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add integer_max boolean_and exec_rot () (integer_fromboolean print_newline in2 in2) ()) ())))) ()))))))))) ())))) ()) () ())
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 148
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction print_newline} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction tag_boolean_847} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_newline} {:close 0, :instruction in2} {:close 0, :instruction in2})
Zero cases best program: (integer_dec exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) integer_eq exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_do*while () boolean_invert_first_then_and) (integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq in3 boolean_not boolean_shove boolean_pop) in2 integer_lte exec_shove (boolean_xor integer_empty exec_rot () (boolean_yankdup 55) (exec_when (integer_eq exec_do*while (integer_dup_items boolean_yank) boolean_dup_times exec_flush boolean_eq integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items boolean_dup) exec_shove (exec_do*while (exec_swap () (boolean_dup_items integer_flush exec_y_when_autoconstructing () exec_do*while (in1 print_integer print_newline exec_y_when_autoconstructing (integer_dup exec_eq integer_add print_boolean exec_dup (exec_yankdup boolean_swap integer_min integer_gt integer_empty integer_gt exec_empty integer_dup_items exec_rot (exec_empty) (exec_while (exec_yank tag_boolean_847 boolean_flush exec_empty) exec_while (exec_yank tag_boolean_847 boolean_dup exec_swap () (exec_y (exec_pop () exec_if (integer_add integer_max boolean_and exec_rot () (integer_fromboolean print_newline in2 in2) ()) ())))) ()))))))))) ())))) ()) () ())
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 148
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (377 233 233 234 903 91 202 234 234 202)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (377 233 233 234 903 91 202 234 234 202)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop})
Best program: (boolean_dup_times exec_swap () () exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_shove exec_eq in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor boolean_shove boolean_pop))) () ())
Errors: [1 0 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 48
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 7.057
Median total errors in population: 8
Error averages by case: (0.623 0.767 0.767 0.766 0.097 0.909 0.798 0.766 0.766 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.21
Average program size in population (points): 60.316
Average percent parens in population: 0.313
Minimum age in population: 12.5625
Maximum age in population: 17.181640625
Average age in population: 15.568328125
Median age in population: 15.5986328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3507649
--- Timings ---
Current time: 1559582847719 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 73.9%
Fitness Testing:      5.2 seconds, 17.5%
Report:               2.5 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 85                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: 6                   | Program output: 100                
Correct output: 10                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 25                 
Correct output: 14                  | Program output: 100                
Correct output: 17                  | Program output: 94                 
Correct output: 17                  | Program output: 28                 
Correct output: 38                  | Program output: 38                 
Correct output: 63                  | Program output: 76                 
Correct output: 71                  | Program output: 94                 
Correct output: 3                   | Program output: 17                 
Correct output: 17                  | Program output: 75                 
Correct output: 30                  | Program output: 56                 
Correct output: 16                  | Program output: 42                 
Correct output: -72                 | Program output: 5                  
Correct output: -52                 | Program output: 76                 
Correct output: -87                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -48                 | Program output: 13                 
Correct output: -78                 | Program output: 23                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -41                 | Program output: -41                
Correct output: -49                 | Program output: 43                 
Correct output: -86                 | Program output: -77                
Correct output: -91                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 30                 
Correct output: -42                 | Program output: 37                 
Correct output: -97                 | Program output: -97                
Correct output: 27                  | Program output: 74                 
Correct output: -64                 | Program output: 31                 
Correct output: -57                 | Program output: 74                 
Correct output: -75                 | Program output: 86                 
Correct output: -95                 | Program output: -16                
Correct output: 77                  | Program output: 83                 
Correct output: -97                 | Program output: 95                 
Correct output: 22                  | Program output: 22                 
Correct output: -90                 | Program output: -78                
Correct output: -96                 | Program output: 25                 
Correct output: -86                 | Program output: 10                 
Correct output: -96                 | Program output: -7                 
Correct output: -72                 | Program output: -41                
Correct output: -25                 | Program output: 63                 
Correct output: -58                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 89                 
Correct output: -88                 | Program output: 63                 
Correct output: -48                 | Program output: 84                 
Correct output: -97                 | Program output: 64                 
Correct output: -29                 | Program output: 87                 
Correct output: -99                 | Program output: -84                
Correct output: -64                 | Program output: 89                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -84                
Correct output: -97                 | Program output: 70                 
Correct output: 2                   | Program output: 20                 
Correct output: -98                 | Program output: -39                
Correct output: -94                 | Program output: -15                
Correct output: -94                 | Program output: 34                 
Correct output: -48                 | Program output: 29                 
Correct output: -81                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 96                 
Correct output: -26                 | Program output: -26                
Correct output: -90                 | Program output: 1                  
Correct output: -60                 | Program output: 80                 
Correct output: -6                  | Program output: -6                 
Correct output: -98                 | Program output: -42                
Correct output: -59                 | Program output: -22                
Correct output: 3                   | Program output: 3                  
Correct output: -79                 | Program output: -41                
Correct output: -71                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in2 boolean_empty boolean_invert_second_then_and boolean_swap) () print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in2 boolean_empty boolean_invert_second_then_and boolean_swap) () print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (916 101 201 201 200 490 100 101 101 490)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (916 101 201 201 200 490 100 101 101 490)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Best program: (integer_dec exec_swap () () exec_s_when_autoconstructing () (integer_eq boolean_and) (boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq integer_yank exec_k_when_autoconstructing (in2 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank integer_gte) in3 boolean_not boolean_shove boolean_pop) (boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot (exec_dup_times (55) exec_when (integer_eq exec_do*while (exec_dup_times (exec_s (boolean_dup_times exec_flush) () ())))) () ())))
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 67
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 7.099
Median total errors in population: 7
Error averages by case: (0.084 0.899 0.799 0.799 0.8 0.51 0.9 0.899 0.899 0.51)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.862
Average program size in population (points): 58.186
Average percent parens in population: 0.290
Minimum age in population: 13.5625
Maximum age in population: 18.7265625
Average age in population: 17.02376171875
Median age in population: 17.107421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3816656
--- Timings ---
Current time: 1559582850654 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 74.5%
Fitness Testing:      5.5 seconds, 16.9%
Report:               2.7 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (boolean_dup_times exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (boolean_dup_times exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 194 408 295 897 1000 295 295 896 193)
Population mean number of elite cases: 5.47
Count of perfect (error zero) individuals by case: (0 194 408 295 897 0 295 295 896 193)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Errors: [1 1 1 0 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 40
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 6.527
Median total errors in population: 7
Error averages by case: (1.0 0.806 0.592 0.705 0.103 1.0 0.705 0.705 0.104 0.807)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 36.472
Average program size in population (points): 53.212
Average percent parens in population: 0.310
Minimum age in population: 14.5625
Maximum age in population: 20.53369140625
Average age in population: 18.5605400390625
Median age in population: 18.6044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4179963
--- Timings ---
Current time: 1559582853572 milliseconds
Total Time:          35.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 74.9%
Fitness Testing:      5.9 seconds, 16.6%
Report:               2.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 897 147 147 472 471 278 278 278 471)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (471 897 147 147 472 471 278 278 278 471)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 2, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_swap})
Best program: (boolean_dup integer_div exec_s () () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_eq) (boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and boolean_invert_first_then_and in4 in1 integer_empty integer_gte) exec_y (exec_do*range ()) exec_k (integer_rot 43) () integer_gte boolean_flush) (exec_shove (boolean_xor integer_eq exec_do*while (exec_dup_times (exec_s () (boolean_dup_times boolean_dup_times exec_flush exec_shove (integer_add exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (exec_dup_items exec_noop) exec_shove (exec_do*while (exec_swap (boolean_dup_items integer_dup_times exec_y_when_autoconstructing () exec_do*while (exec_if (exec_noop exec_swap () (exec_if (exec_dup_items) (exec_flush exec_k () (boolean_not boolean_dup) exec_shove (exec_do*while (exec_swap () ()))))) ())) ()))))) ())) ())))) ())
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 78
Size: 126
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 6.09
Median total errors in population: 6
Error averages by case: (0.529 0.103 0.853 0.853 0.528 0.529 0.722 0.722 0.722 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.114
Average program size in population (points): 47.867
Average percent parens in population: 0.303
Minimum age in population: 16.78125
Maximum age in population: 21.999755859375
Average age in population: 20.0151552734375
Median age in population: 20.1031494140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4531518
--- Timings ---
Current time: 1559582856818 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.9 seconds, 75.1%
Fitness Testing:      6.2 seconds, 16.2%
Report:               3.3 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (exec_do*range (exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) exec_eq exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ())) ()) () ()))
Lexicase best errors: [1 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (exec_do*range (exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) exec_eq exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ())) ()) () ()))
Zero cases best errors: [1 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 300 412 300 300 912 412 912 412 412)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (0 300 412 300 300 912 412 912 412 412)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_rot boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) ()) () ()) ())
Errors: [1 1 0 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 35
Size: 52
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 5.628
Median total errors in population: 5
Error averages by case: (1.0 0.7 0.588 0.7 0.7 0.088 0.588 0.088 0.588 0.588)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.793
Average program size in population (points): 48.859
Average percent parens in population: 0.303
Minimum age in population: 18.1640625
Maximum age in population: 23.5772705078125
Average age in population: 21.51668078613281
Median age in population: 21.57379150390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4888414
--- Timings ---
Current time: 1559582859437 milliseconds
Total Time:          41.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.9 seconds, 74.7%
Fitness Testing:      6.6 seconds, 15.9%
Report:               3.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Lexicase best errors: [1 1 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Zero cases best errors: [1 1 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 364 548 912 548 364 548 1000 1000 548)
Population mean number of elite cases: 6.83
Count of perfect (error zero) individuals by case: (0 364 548 912 548 364 548 0 0 548)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc print_integer) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ()))
Errors: [1 1 0 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 39
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.168
Median total errors in population: 5
Error averages by case: (1.0 0.636 0.452 0.088 0.452 0.636 0.452 1.0 1.0 0.452)
Error minima by case: (1 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 31.282
Average program size in population (points): 44.689
Average percent parens in population: 0.294
Minimum age in population: 20.0859375
Maximum age in population: 25.37615966796875
Average age in population: 23.05661267089844
Median age in population: 23.12313842773438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5236256
--- Timings ---
Current time: 1559582862017 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 74.7%
Fitness Testing:      7.0 seconds, 15.8%
Report:               4.1 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 2, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Lexicase best program: (boolean_dup integer_div exec_s () () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_inc boolean_or boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) () (in3 boolean_not boolean_shove boolean_pop) boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55) exec_when (integer_eq exec_do*while (exec_dup_times (exec_s (boolean_dup_times exec_flush) () ())))) ())
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 2, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction 55} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush})
Zero cases best program: (boolean_dup integer_div exec_s () () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_inc boolean_or boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_shove print_integer exec_yank) (boolean_invert_first_then_and) integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq) () (in3 boolean_not boolean_shove boolean_pop) boolean_yankdup integer_lte exec_shove (boolean_xor) integer_empty exec_rot () (exec_dup_times (55) exec_when (integer_eq exec_do*while (exec_dup_times (exec_s (boolean_dup_times exec_flush) () ())))) ())
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 1 570 569 569 916 347 916 1000 1000)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (347 1 570 569 569 916 347 916 0 0)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ())
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5.765
Median total errors in population: 5
Error averages by case: (0.653 0.999 0.43 0.431 0.431 0.084 0.653 0.084 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 30.41
Average program size in population (points): 43.373
Average percent parens in population: 0.293
Minimum age in population: 21.77880859375
Maximum age in population: 26.5281982421875
Average age in population: 24.52515063476562
Median age in population: 24.591796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5581196
--- Timings ---
Current time: 1559582864436 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.7 seconds, 74.6%
Fitness Testing:      7.3 seconds, 15.8%
Report:               4.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq})
Lexicase best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_invert_first_then_and exec_do*range (boolean_xor boolean_dup) print_integer integer_dup integer_yankdup exec_yank boolean_invert_first_then_and integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq)
Lexicase best errors: [0 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq})
Zero cases best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_invert_first_then_and exec_do*range (boolean_xor boolean_dup) print_integer integer_dup integer_yankdup exec_yank boolean_invert_first_then_and integer_yankdup boolean_invert_second_then_and integer_shove integer_yank exec_eq)
Zero cases best errors: [0 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 1000 809 483 483 1000 324 324 323 324)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (323 0 809 483 483 0 324 324 323 324)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lt} {:close 2, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times integer_yankdup exec_do*range () boolean_dup print_boolean integer_dup integer_yankdup print_integer exec_dup_times (integer_lt exec_dup ()) integer_add integer_mod)
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 23
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.607
Median total errors in population: 7
Error averages by case: (0.677 1.0 0.191 0.517 0.517 1.0 0.676 0.676 0.677 0.676)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 29.954
Average program size in population (points): 41.999
Average percent parens in population: 0.279
Minimum age in population: 22.77880859375
Maximum age in population: 28.03492736816406
Average age in population: 25.92738455200195
Median age in population: 26.00314331054688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5900766
--- Timings ---
Current time: 1559582866776 milliseconds
Total Time:          48.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 74.6%
Fitness Testing:      7.7 seconds, 15.8%
Report:               4.6 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if})
Lexicase best program: (boolean_dup integer_div exec_s () (boolean_dup_times in4 boolean_xor exec_dup (integer_eq boolean_dup_times exec_do*range (boolean_xor) in1 boolean_empty boolean_or boolean_swap) print_integer boolean_yank exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_rot 43) () integer_gte boolean_pop) (exec_y (integer_mult exec_y_when_autoconstructing () exec_swap () () integer_lte exec_dup_items exec_dup (exec_if () ())))) () ()) ())
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction 43} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if})
Zero cases best program: (boolean_dup integer_div exec_s () (boolean_dup_times in4 boolean_xor exec_dup (integer_eq boolean_dup_times exec_do*range (boolean_xor) in1 boolean_empty boolean_or boolean_swap) print_integer boolean_yank exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_rot 43) () integer_gte boolean_pop) (exec_y (integer_mult exec_y_when_autoconstructing () exec_swap () () integer_lte exec_dup_items exec_dup (exec_if () ())))) () ()) ())
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 271 271 271 1000 271 647 271 271 1000)
Population mean number of elite cases: 4.54
Count of perfect (error zero) individuals by case: (271 271 271 271 0 271 647 271 271 0)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 exec_swap (boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc print_integer) boolean_frominteger exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()) () ())) ())
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.456
Median total errors in population: 9
Error averages by case: (0.729 0.729 0.729 0.729 1.0 0.729 0.353 0.729 0.729 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 31.962
Average program size in population (points): 44.594
Average percent parens in population: 0.272
Minimum age in population: 23.77880859375
Maximum age in population: 29.42745971679688
Average age in population: 27.46060799407959
Median age in population: 27.54782867431641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6227110
--- Timings ---
Current time: 1559582869205 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.2 seconds, 74.6%
Fitness Testing:      8.0 seconds, 15.7%
Report:               4.9 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup boolean_or integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) exec_dup_times (integer_inc integer_eq) boolean_frominteger) ()))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup boolean_or integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) exec_dup_times (integer_inc integer_eq) boolean_frominteger) ()))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (841 1000 1000 1000 1000 841 941 841 941 1000)
Population mean number of elite cases: 9.40
Count of perfect (error zero) individuals by case: (841 0 0 0 0 841 941 841 941 0)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup_times in1 boolean_swap print_integer boolean_dup print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_dup_items exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) () ())
Errors: [0 1 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 22
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.595
Median total errors in population: 5
Error averages by case: (0.159 1.0 1.0 1.0 1.0 0.159 0.059 0.159 0.059 1.0)
Error minima by case: (0 1 1 1 1 0 0 0 0 1)
Average genome size in population (length): 28.355
Average program size in population (points): 40.623
Average percent parens in population: 0.298
Minimum age in population: 24.77880859375
Maximum age in population: 30.95090866088867
Average age in population: 28.84649465942383
Median age in population: 28.93978691101074
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6584019
--- Timings ---
Current time: 1559582871760 milliseconds
Total Time:          53.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.2 seconds, 74.7%
Fitness Testing:      8.4 seconds, 15.6%
Report:               5.1 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and) (boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_eq) (boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing () (boolean_not) integer_inc integer_eq) (boolean_frominteger exec_k_when_autoconstructing (in4 integer_dup_items boolean_shove integer_lte) ())) ())
Lexicase best errors: [1 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.325
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and) (boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_eq) (boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing () (boolean_not) integer_inc integer_eq) (boolean_frominteger exec_k_when_autoconstructing (in4 integer_dup_items boolean_shove integer_lte) ())) ())
Zero cases best errors: [1 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.325
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 927 928 1000 3 1000 1000 3 1000 927)
Population mean number of elite cases: 7.79
Count of perfect (error zero) individuals by case: (0 927 928 0 3 0 0 3 0 927)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and) (boolean_dup) print_integer boolean_dup boolean_xor integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) in4 exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ())
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.212
Median total errors in population: 7
Error averages by case: (1.0 0.073 0.072 1.0 0.997 1.0 1.0 0.997 1.0 0.073)
Error minima by case: (1 0 0 1 0 1 1 0 1 0)
Average genome size in population (length): 28.115
Average program size in population (points): 40.54
Average percent parens in population: 0.303
Minimum age in population: 27.0374755859375
Maximum age in population: 32.47811889648438
Average age in population: 30.32341956710815
Median age in population: 30.40794372558594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6949749
--- Timings ---
Current time: 1559582873891 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 74.7%
Fitness Testing:      8.8 seconds, 15.7%
Report:               5.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_invert_second_then_and exec_eq) (print_integer boolean_yank boolean_pop integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) integer_gt exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_invert_second_then_and exec_eq) (print_integer boolean_yank boolean_pop integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) integer_gt exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 370 370 370 1000 1000 541 370 368 1)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (0 370 370 370 0 0 541 370 368 1)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_invert_second_then_and exec_eq) (print_integer boolean_yank boolean_pop integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) integer_gt exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()))
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.61
Median total errors in population: 9
Error averages by case: (1.0 0.63 0.63 0.63 1.0 1.0 0.459 0.63 0.632 0.999)
Error minima by case: (1 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 27.913
Average program size in population (points): 39.243
Average percent parens in population: 0.286
Minimum age in population: 29.08900451660156
Maximum age in population: 33.8366641998291
Average age in population: 31.82231746578217
Median age in population: 31.84107398986816
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7307297
--- Timings ---
Current time: 1559582876409 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 74.8%
Fitness Testing:      9.1 seconds, 15.6%
Report:               5.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank) print_integer in4 exec_s_when_autoconstructing (integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) () ())
Lexicase best errors: [1 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank) print_integer in4 exec_s_when_autoconstructing (integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) () ())
Zero cases best errors: [1 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (137 649 1000 649 895 1000 1000 137 1000 649)
Population mean number of elite cases: 7.12
Count of perfect (error zero) individuals by case: (137 649 0 649 895 0 0 137 0 649)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap})
Best program: (boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty in4 boolean_empty boolean_invert_second_then_and boolean_yank) (print_integer in4 exec_s_when_autoconstructing (integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap)) () ()))
Errors: [1 0 1 0 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.884
Median total errors in population: 6
Error averages by case: (0.863 0.351 1.0 0.351 0.105 1.0 1.0 0.863 1.0 0.351)
Error minima by case: (0 0 1 0 0 1 1 0 1 0)
Average genome size in population (length): 27.667
Average program size in population (points): 38.124
Average percent parens in population: 0.274
Minimum age in population: 30.86127281188965
Maximum age in population: 35.05196857452393
Average age in population: 33.25398793840408
Median age in population: 33.28593468666077
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7680979
--- Timings ---
Current time: 1559582878895 milliseconds
Total Time:          61.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 74.8%
Fitness Testing:      9.5 seconds, 15.6%
Report:               5.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty in4 boolean_swap) (print_integer boolean_dup integer_max integer_eq boolean_and boolean_frominteger boolean_and boolean_frominteger exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger in4 boolean_invert_second_then_and boolean_shove integer_lte))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty in4 boolean_swap) (print_integer boolean_dup integer_max integer_eq boolean_and boolean_frominteger boolean_and boolean_frominteger exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger in4 boolean_invert_second_then_and boolean_shove integer_lte))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (538 540 1000 380 540 1000 1000 540 1000 1000)
Population mean number of elite cases: 7.54
Count of perfect (error zero) individuals by case: (538 540 0 380 540 0 0 540 0 0)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_invert_second_then_and exec_eq) (print_integer boolean_yank boolean_pop integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc integer_eq) integer_gt exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()))
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.462
Median total errors in population: 6
Error averages by case: (0.462 0.46 1.0 0.62 0.46 1.0 1.0 0.46 1.0 1.0)
Error minima by case: (0 0 1 0 0 1 1 0 1 1)
Average genome size in population (length): 28.221
Average program size in population (points): 38.933
Average percent parens in population: 0.273
Minimum age in population: 31.86127281188965
Maximum age in population: 36.58555936813354
Average age in population: 34.7942009871006
Median age in population: 34.84685778617859
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8043937
--- Timings ---
Current time: 1559582881293 milliseconds
Total Time:          63.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.4 seconds, 74.9%
Fitness Testing:      9.9 seconds, 15.6%
Report:               5.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_dup integer_div boolean_dup_items in1 integer_yankdup boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_invert_second_then_and) (exec_yankdup) (print_integer exec_yank) exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger) ()) ()) () ())
Lexicase best errors: [1 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_dup integer_div boolean_dup_items in1 integer_yankdup boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_invert_second_then_and) (exec_yankdup) (print_integer exec_yank) exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger) ()) ()) () ())
Zero cases best errors: [1 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 188 1 711 188 188 188 1 188 188)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (1 188 1 711 188 188 188 1 188 188)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_dup_items in1 boolean_empty exec_empty) boolean_swap print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_dup_items exec_k (integer_inc exec_k_when_autoconstructing (boolean_not integer_inc integer_eq) (boolean_frominteger boolean_yank integer_flush boolean_invert_second_then_and boolean_shove integer_lte)) ()) () ())
Errors: [1 0 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 40
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.158
Median total errors in population: 9
Error averages by case: (0.999 0.812 0.999 0.289 0.812 0.812 0.812 0.999 0.812 0.812)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.282
Average program size in population (points): 38.568
Average percent parens in population: 0.265
Minimum age in population: 33.74606037139893
Maximum age in population: 38.28151917457581
Average age in population: 36.27880404281616
Median age in population: 36.36089128255844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8396255
--- Timings ---
Current time: 1559582883637 milliseconds
Total Time:          65.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.2 seconds, 74.9%
Fitness Testing:     10.2 seconds, 15.5%
Report:               6.2 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction -8} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div -8 exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_while (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing () (exec_empty) integer_inc integer_eq integer_fromboolean exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction -8} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div -8 exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_while (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing () (exec_empty) integer_inc integer_eq integer_fromboolean exec_k_when_autoconstructing (in4 boolean_invert_second_then_and boolean_shove integer_lte) ()) ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (576 576 578 90 579 578 579 95 175 90)
Population mean number of elite cases: 3.92
Count of perfect (error zero) individuals by case: (576 576 578 90 579 578 579 95 175 90)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 integer_mult boolean_invert_second_then_and boolean_swap) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger) (exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (exec_shove (in4 boolean_invert_second_then_and boolean_shove integer_lte))) ()) ())) ())
Errors: [0 0 0 1 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 42
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.084
Median total errors in population: 4
Error averages by case: (0.424 0.424 0.422 0.91 0.421 0.422 0.421 0.905 0.825 0.91)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.48
Average program size in population (points): 39.644
Average percent parens in population: 0.278
Minimum age in population: 34.80157613754272
Maximum age in population: 39.75441944599152
Average age in population: 37.89695566827059
Median age in population: 38.02812564373016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8728911
--- Timings ---
Current time: 1559582885891 milliseconds
Total Time:          67.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.8 seconds, 74.9%
Fitness Testing:     10.6 seconds, 15.5%
Report:               6.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup boolean_pop boolean_dup integer_div exec_s () (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank) print_integer in4 exec_s_when_autoconstructing (integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) () ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup boolean_pop boolean_dup integer_div exec_s () (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank) print_integer in4 exec_s_when_autoconstructing (integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) () ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 73 641 96 730 96 899 73 899 73)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (73 73 641 96 730 96 899 73 899 73)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank) print_integer in4 exec_s_when_autoconstructing (integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) () ())
Errors: [0 0 1 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 39
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 6.347
Median total errors in population: 6
Error averages by case: (0.927 0.927 0.359 0.904 0.27 0.904 0.101 0.927 0.101 0.927)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.833
Average program size in population (points): 38.919
Average percent parens in population: 0.281
Minimum age in population: 35.80157613754272
Maximum age in population: 41.4085721373558
Average age in population: 39.29408930763602
Median age in population: 39.35743173956871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9069391
--- Timings ---
Current time: 1559582888497 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.8 seconds, 74.9%
Fitness Testing:     10.9 seconds, 15.5%
Report:               6.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1) (boolean_empty in4 boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger boolean_and boolean_frominteger exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger in4 boolean_invert_second_then_and boolean_shove integer_lte) () ())
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1) (boolean_empty in4 boolean_swap) print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger boolean_and boolean_frominteger exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger in4 boolean_invert_second_then_and boolean_shove integer_lte) () ())
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 132 593 459 460 310 461 132 459 1000)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (311 132 593 459 460 310 461 132 459 0)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_invert_second_then_and exec_eq) (print_integer exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc exec_while () boolean_frominteger integer_dup_times in4 integer_mod boolean_shove integer_lte)) ()))
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.683
Median total errors in population: 7
Error averages by case: (0.689 0.868 0.407 0.541 0.54 0.69 0.539 0.868 0.541 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 28.534
Average program size in population (points): 38.752
Average percent parens in population: 0.262
Minimum age in population: 37.46357917785645
Maximum age in population: 42.91472253203392
Average age in population: 40.9218935277015
Median age in population: 41.00099681317806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9377215
--- Timings ---
Current time: 1559582891044 milliseconds
Total Time:          73.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.8 seconds, 75.0%
Fitness Testing:     11.2 seconds, 15.4%
Report:               6.9 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_51} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div boolean_eq exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_while (integer_eq boolean_and boolean_frominteger exec_k (exec_s_when_autoconstructing (integer_shove integer_eq) (integer_fromboolean exec_k_when_autoconstructing (in4 boolean_invert_second_then_and tag_exec_51 (integer_lte)) ()) ()) ()))
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 35
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_exec_51} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div boolean_eq exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap print_integer boolean_dup exec_while (integer_eq boolean_and boolean_frominteger exec_k (exec_s_when_autoconstructing (integer_shove integer_eq) (integer_fromboolean exec_k_when_autoconstructing (in4 boolean_invert_second_then_and tag_exec_51 (integer_lte)) ()) ()) ()))
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 35
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 238 404 404 1 273 238 238 273 238)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (238 238 404 404 1 273 238 238 273 238)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup boolean_pop exec_pop () exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_swap print_integer boolean_dup boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger) (exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc exec_while () boolean_frominteger integer_dup_times) in4 boolean_rot boolean_shove integer_lte) ()) ())
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.455
Median total errors in population: 8
Error averages by case: (0.762 0.762 0.596 0.596 0.999 0.727 0.762 0.762 0.727 0.762)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.242
Average program size in population (points): 37.569
Average percent parens in population: 0.246
Minimum age in population: 38.46357917785645
Maximum age in population: 44.27543174475431
Average age in population: 42.45251803768426
Median age in population: 42.46195621415973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9657676
--- Timings ---
Current time: 1559582893660 milliseconds
Total Time:          75.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.0 seconds, 75.2%
Fitness Testing:     11.5 seconds, 15.2%
Report:               7.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 665
Test mean error for best: 0.66500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -75                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 85                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: 65                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 44                 
Correct output: 6                   | Program output: 100                
Correct output: 10                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 10                  | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 25                 
Correct output: 14                  | Program output: 100                
Correct output: 17                  | Program output: 94                 
Correct output: 17                  | Program output: 28                 
Correct output: 38                  | Program output: 38                 
Correct output: 63                  | Program output: 76                 
Correct output: 71                  | Program output: 94                 
Correct output: 3                   | Program output: 17                 
Correct output: 17                  | Program output: 75                 
Correct output: 30                  | Program output: 56                 
Correct output: 16                  | Program output: 42                 
Correct output: -72                 | Program output: 5                  
Correct output: -52                 | Program output: 76                 
Correct output: -87                 | Program output: 70                 
Correct output: -66                 | Program output: -66                
Correct output: -48                 | Program output: 13                 
Correct output: -78                 | Program output: 23                 
Correct output: -33                 | Program output: -33                
Correct output: -87                 | Program output: -87                
Correct output: -41                 | Program output: -41                
Correct output: -49                 | Program output: 43                 
Correct output: -86                 | Program output: -77                
Correct output: -91                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 30                 
Correct output: -42                 | Program output: 37                 
Correct output: -97                 | Program output: -97                
Correct output: 27                  | Program output: 74                 
Correct output: -64                 | Program output: 31                 
Correct output: -57                 | Program output: 74                 
Correct output: -75                 | Program output: 86                 
Correct output: -95                 | Program output: -16                
Correct output: 77                  | Program output: 83                 
Correct output: -97                 | Program output: 95                 
Correct output: 22                  | Program output: 22                 
Correct output: -90                 | Program output: -78                
Correct output: -96                 | Program output: 25                 
Correct output: -86                 | Program output: 10                 
Correct output: -96                 | Program output: -7                 
Correct output: -72                 | Program output: -41                
Correct output: -25                 | Program output: 63                 
Correct output: -58                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 89                 
Correct output: -88                 | Program output: 63                 
Correct output: -48                 | Program output: 84                 
Correct output: -97                 | Program output: 64                 
Correct output: -29                 | Program output: 87                 
Correct output: -99                 | Program output: -84                
Correct output: -64                 | Program output: 89                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 59                 
Correct output: -91                 | Program output: -84                
Correct output: -97                 | Program output: 70                 
Correct output: 2                   | Program output: 20                 
Correct output: -98                 | Program output: -39                
Correct output: -94                 | Program output: -15                
Correct output: -94                 | Program output: 34                 
Correct output: -48                 | Program output: 29                 
Correct output: -81                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -84                 | Program output: 96                 
Correct output: -26                 | Program output: -26                
Correct output: -90                 | Program output: 1                  
Correct output: -60                 | Program output: 80                 
Correct output: -6                  | Program output: -6                 
Correct output: -98                 | Program output: -42                
Correct output: -59                 | Program output: -22                
Correct output: 3                   | Program output: 3                  
Correct output: -79                 | Program output: -41                
Correct output: -71                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and in2) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc print_integer) boolean_invert_second_then_and boolean_shove) (integer_lte)) () ()) ())
Lexicase best errors: [1 0 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 35
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and in2) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc print_integer) boolean_invert_second_then_and boolean_shove) (integer_lte)) () ()) ())
Zero cases best errors: [1 0 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 35
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (449 94 182 94 171 94 887 94 448 94)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (449 94 182 94 171 94 887 94 448 94)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and in2) (print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc print_integer) boolean_invert_second_then_and boolean_shove) (integer_lte)) () ()) ())
Errors: [1 0 1 0 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 7.393
Median total errors in population: 7
Error averages by case: (0.551 0.906 0.818 0.906 0.829 0.906 0.113 0.906 0.552 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.625
Average program size in population (points): 37.719
Average percent parens in population: 0.265
Minimum age in population: 41.35198330879211
Maximum age in population: 45.81489872187376
Average age in population: 43.9244380495958
Median age in population: 43.99265389330685
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9947150
--- Timings ---
Current time: 1559582896286 milliseconds
Total Time:          78.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.1 seconds, 75.4%
Fitness Testing:     11.8 seconds, 15.1%
Report:               7.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_yank) (print_integer in4 exec_s_when_autoconstructing (integer_shove exec_empty print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_k_when_autoconstructing (boolean_not) (exec_shove (in4 boolean_invert_second_then_and exec_do*times (integer_lte))))) () ()))
Lexicase best errors: [1 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup boolean_dup integer_div integer_gte integer_div exec_s () (exec_noop boolean_dup_items in1 boolean_empty boolean_invert_second_then_and boolean_yank) (print_integer in4 exec_s_when_autoconstructing (integer_shove exec_empty print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_k_when_autoconstructing (boolean_not) (exec_shove (in4 boolean_invert_second_then_and exec_do*times (integer_lte))))) () ()))
Zero cases best errors: [1 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (517 201 200 201 108 3 916 109 108 517)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (517 201 200 201 108 3 916 109 108 517)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_dup integer_div exec_s () (exec_noop boolean_dup_items in1 exec_when (boolean_invert_second_then_and boolean_swap) print_integer boolean_dup boolean_or integer_eq boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_and boolean_frominteger exec_k (integer_inc exec_k_when_autoconstructing (boolean_not) (integer_inc print_integer) boolean_invert_second_then_and boolean_shove) (integer_lte)) ()) ()) ())
Errors: [1 0 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.12
Median total errors in population: 7
Error averages by case: (0.483 0.799 0.8 0.799 0.892 0.997 0.084 0.891 0.892 0.483)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.033
Average program size in population (points): 36.658
Average percent parens in population: 0.288
Minimum age in population: 42.35198330879211
Maximum age in population: 47.04691953212023
Average age in population: 45.45608349117264
Median age in population: 45.56940015219152
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 314
Genome diversity (% unique genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 317
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10212482
--- Timings ---
Current time: 1559582899243 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.5 seconds, 75.7%
Fitness Testing:     12.1 seconds, 14.9%
Report:               7.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 86                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 59                 
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 73                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 90                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 59                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -6                 
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 89                 
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 76                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: 96                 
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: 91                 
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 26                 
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: 40                 
Correct output: -72                 | Program output: 45                 
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: 2                  
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: 57                 
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: 65                 
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -21                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -58                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: 4                  
Correct output: -26                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: 41                 
Correct output: 3                   | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_dup_items in1 boolean_empty exec_empty boolean_swap print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger boolean_and boolean_frominteger exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger in4 boolean_invert_second_then_and boolean_shove integer_lte) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup_times in4 integer_dup_times exec_dup () integer_eq boolean_dup_times exec_do*range (boolean_dup_items in1 boolean_empty exec_empty boolean_swap print_integer boolean_dup exec_s_when_autoconstructing (integer_eq boolean_and boolean_frominteger boolean_and boolean_frominteger exec_k (integer_inc boolean_xor boolean_not) (integer_inc integer_eq) boolean_frominteger in4 boolean_invert_second_then_and boolean_shove integer_lte) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 821 287 291 287 703 288 928 104 291)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (103 821 287 291 287 703 288 928 104 291)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_dup_times boolean_dup integer_div exec_s (exec_noop boolean_dup_items) (in1) (boolean_empty boolean_invert_second_then_and boolean_swap) print_integer boolean_not exec_s_when_autoconstructing (integer_eq boolean_and integer_eq) (boolean_frominteger exec_dup (integer_dup_items boolean_invert_second_then_and boolean_shove boolean_yankdup)) ())
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.897
Median total errors in population: 7
Error averages by case: (0.897 0.179 0.713 0.709 0.713 0.297 0.712 0.072 0.896 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.311
Average program size in population (points): 37.865
Average percent parens in population: 0.276
Minimum age in population: 43.52798771858215
Maximum age in population: 48.69682614225894
Average age in population: 46.91537842297181
Median age in population: 46.98942423937842
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10490418
--- Timings ---
Current time: 1559582901673 milliseconds
Total Time:          83.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.4 seconds, 75.8%
Fitness Testing:     12.4 seconds, 14.8%
Report:               7.8 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 630
Test mean error for best: 0.63000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 85                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 94                 
Correct output: 22                  | Program output: 87                 
Correct output: 10                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 97                 
Correct output: 34                  | Program output: 72                 
Correct output: 2                   | Program output: 7                  
Correct output: 11                  | Program output: 71                 
Correct output: 14                  | Program output: 64                 
Correct output: 17                  | Program output: 32                 
Correct output: 17                  | Program output: 19                 
Correct output: 38                  | Program output: 66                 
Correct output: 63                  | Program output: 89                 
Correct output: 71                  | Program output: 71                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 41                 
Correct output: 30                  | Program output: 65                 
Correct output: 16                  | Program output: 16                 
Correct output: -72                 | Program output: -72                
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: 34                 
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 87                 
Correct output: -87                 | Program output: -21                
Correct output: -41                 | Program output: -36                
Correct output: -49                 | Program output: 95                 
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: 94                 
Correct output: 27                  | Program output: 81                 
Correct output: -64                 | Program output: 63                 
Correct output: -57                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -91                
Correct output: 77                  | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 37                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: 5                  
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -54                
Correct output: -94                 | Program output: 98                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 49                 
Correct output: -48                 | Program output: 66                 
Correct output: -97                 | Program output: 94                 
Correct output: -29                 | Program output: 62                 
Correct output: -99                 | Program output: 97                 
Correct output: -64                 | Program output: -55                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -50                
Correct output: -26                 | Program output: -8                 
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: 94                 
Correct output: -6                  | Program output: 48                 
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -47                
Correct output: 3                   | Program output: 13                 
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup integer_gt boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [1 1 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup integer_gt boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [1 1 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (566 1000 1000 154 566 189 188 7 1000 189)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (566 0 0 154 566 189 188 7 0 189)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [1 1 1 1 1 0 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.141
Median total errors in population: 8
Error averages by case: (0.434 1.0 1.0 0.846 0.434 0.811 0.812 0.993 1.0 0.811)
Error minima by case: (0 1 1 0 0 0 0 0 1 0)
Average genome size in population (length): 27.364
Average program size in population (points): 36.529
Average percent parens in population: 0.248
Minimum age in population: 44.52798771858215
Maximum age in population: 50.40325232734904
Average age in population: 48.20711467897007
Median age in population: 48.36650716117583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10754305
--- Timings ---
Current time: 1559582904479 milliseconds
Total Time:          86.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.8 seconds, 76.0%
Fitness Testing:     12.7 seconds, 14.7%
Report:               8.0 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 625
Test mean error for best: 0.62500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 38                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -43                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -30                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 99                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -11                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: 14                 
Correct output: -94                 | Program output: -1                 
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 78                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: 31                 
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -21                
Correct output: -71                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_dup_items print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [1 1 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_dup_items print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [1 1 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 1000 1000 269 320 218 218 266 338 1000)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (440 0 0 269 320 218 218 266 338 0)
Population mean number of perfect (error zero) cases: 2.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank integer_swap in4 in1 integer_shove boolean_dup print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [1 1 1 1 1 0 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.931
Median total errors in population: 8
Error averages by case: (0.56 1.0 1.0 0.731 0.68 0.782 0.782 0.734 0.662 1.0)
Error minima by case: (0 1 1 0 0 0 0 0 0 1)
Average genome size in population (length): 26.902
Average program size in population (points): 34.902
Average percent parens in population: 0.229
Minimum age in population: 47.08958403766155
Maximum age in population: 51.81911694677547
Average age in population: 49.59031594024808
Median age in population: 49.60814494686201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 10986255
--- Timings ---
Current time: 1559582906917 milliseconds
Total Time:          89.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.8 seconds, 76.2%
Fitness Testing:     12.9 seconds, 14.5%
Report:               8.2 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -37                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 99                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 84                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 97                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 96                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 66                 
Correct output: 16                  | Program output: 93                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -66                 | Program output: 75                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 34                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 94                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -66                
Correct output: -91                 | Program output: 60                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: 68                 
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -3                 
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 94                 
Correct output: -97                 | Program output: -1                 
Correct output: 22                  | Program output: 89                 
Correct output: -90                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 41                 
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: 54                 
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 41                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -39                
Correct output: -97                 | Program output: -51                
Correct output: 2                   | Program output: 26                 
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 8                  
Correct output: -94                 | Program output: -25                
Correct output: -48                 | Program output: 66                 
Correct output: -81                 | Program output: 42                 
Correct output: -42                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: -69                
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 71                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -31                
Correct output: -71                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_dup_items print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_gte boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [0 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_dup_items print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_gte boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [0 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 411 395 93 1000 306 89 397 903 397)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (409 411 395 93 0 306 89 397 903 397)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_dup_items print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [0 1 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.6
Median total errors in population: 6
Error averages by case: (0.591 0.589 0.605 0.907 1.0 0.694 0.911 0.603 0.097 0.603)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 27.331
Average program size in population (points): 34.713
Average percent parens in population: 0.213
Minimum age in population: 48.08958403766155
Maximum age in population: 52.86256264639087
Average age in population: 51.07025049892103
Median age in population: 51.10814494686201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11223326
--- Timings ---
Current time: 1559582909733 milliseconds
Total Time:          91.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 76.4%
Fitness Testing:     13.2 seconds, 14.4%
Report:               8.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 377
Test mean error for best: 0.37700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: -37                
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -51                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 65                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 60                 
Correct output: 22                  | Program output: 87                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 72                 
Correct output: 2                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 64                 
Correct output: 63                  | Program output: 66                 
Correct output: 71                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 41                 
Correct output: 30                  | Program output: 65                 
Correct output: 16                  | Program output: 16                 
Correct output: -72                 | Program output: -72                
Correct output: -52                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -66                 | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: 34                 
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: -21                
Correct output: -41                 | Program output: -36                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -66                
Correct output: -91                 | Program output: -9                 
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -42                 | Program output: -15                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 71                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 37                 
Correct output: -90                 | Program output: -75                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 41                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -51                
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: 8                  
Correct output: -94                 | Program output: -25                
Correct output: -48                 | Program output: 0                  
Correct output: -81                 | Program output: 42                 
Correct output: -42                 | Program output: -9                 
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: -69                
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: 68                 
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -31                
Correct output: -71                 | Program output: -66                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (379 380 443 905 1000 1000 443 249 905 84)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (379 380 443 905 0 0 443 249 905 84)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 6.212
Median total errors in population: 6
Error averages by case: (0.621 0.62 0.557 0.095 1.0 1.0 0.557 0.751 0.095 0.916)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 28.73
Average program size in population (points): 35.534
Average percent parens in population: 0.191
Minimum age in population: 50.56758409086615
Maximum age in population: 54.25913161790231
Average age in population: 52.87745940160978
Median age in population: 52.85548130748793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 11447377
--- Timings ---
Current time: 1559582912268 milliseconds
Total Time:          94.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 76.5%
Fitness Testing:     13.5 seconds, 14.3%
Report:               8.5 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: 16                 
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: 13                 
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 47                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 36                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 70                 
Correct output: -72                 | Program output: 31                 
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: 77                 
Correct output: -41                 | Program output: 84                 
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 21                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -34                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 86                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 67                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -30                
Correct output: -72                 | Program output: -14                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: 47                 
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 15                 
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 boolean_not integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 boolean_not integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 410 1000 411 508 412 496 932 239 706)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (412 410 0 411 508 412 496 932 239 706)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [0 0 1 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.474
Median total errors in population: 6
Error averages by case: (0.588 0.59 1.0 0.589 0.492 0.588 0.504 0.068 0.761 0.294)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 28.202
Average program size in population (points): 35.087
Average percent parens in population: 0.196
Minimum age in population: 52.59960904461332
Maximum age in population: 55.91806260170415
Average age in population: 54.49145033289422
Median age in population: 54.58371819299646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 339
Genome diversity (% unique genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 341
Syntactic diversity (% unique Push programs):	 0.396
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 11668138
--- Timings ---
Current time: 1559582914885 milliseconds
Total Time:          97.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 76.7%
Fitness Testing:     13.7 seconds, 14.2%
Report:               8.7 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: 58                 
Correct output: -37                 | Program output: -37                
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: 1                  
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: 48                 
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 23                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 92                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 7                  
Correct output: 11                  | Program output: 56                 
Correct output: 14                  | Program output: 18                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 19                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 71                 
Correct output: 3                   | Program output: 66                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 16                 
Correct output: -72                 | Program output: -72                
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -87                
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: 34                 
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 77                 
Correct output: -87                 | Program output: -21                
Correct output: -41                 | Program output: -36                
Correct output: -49                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: 62                 
Correct output: -57                 | Program output: -57                
Correct output: -75                 | Program output: -17                
Correct output: -95                 | Program output: -91                
Correct output: 77                  | Program output: 77                 
Correct output: -97                 | Program output: -82                
Correct output: 22                  | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 5                  
Correct output: -86                 | Program output: -82                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -14                
Correct output: -58                 | Program output: -54                
Correct output: -94                 | Program output: 58                 
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: 40                 
Correct output: -48                 | Program output: 7                  
Correct output: -97                 | Program output: 69                 
Correct output: -29                 | Program output: 23                 
Correct output: -99                 | Program output: 44                 
Correct output: -64                 | Program output: -55                
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: 6                  
Correct output: -91                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: -50                
Correct output: -26                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: 73                 
Correct output: -6                  | Program output: 33                 
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -47                
Correct output: 3                   | Program output: 13                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 in3 in4 boolean_pop integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 in3 in4 boolean_pop integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 839 1000 1000 351 353 638 1000 354 1000)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (862 839 0 0 351 353 638 0 354 0)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer boolean_dup in1 in3 in4 boolean_pop integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [0 0 1 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 6.603
Median total errors in population: 7
Error averages by case: (0.138 0.161 1.0 1.0 0.649 0.647 0.362 1.0 0.646 1.0)
Error minima by case: (0 0 1 1 0 0 0 1 0 1)
Average genome size in population (length): 27.736
Average program size in population (points): 34.763
Average percent parens in population: 0.202
Minimum age in population: 54.87633274745895
Maximum age in population: 57.2576792199834
Average age in population: 56.46787155779566
Median age in population: 56.47950960267917
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.382
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 11866763
--- Timings ---
Current time: 1559582917269 milliseconds
Total Time:          99.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.4 seconds, 76.9%
Fitness Testing:     14.0 seconds, 14.1%
Report:               8.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 253
Test mean error for best: 0.25300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: -37                
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 16                 
Correct output: -72                 | Program output: -72                
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: -21                
Correct output: -41                 | Program output: -36                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 39
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 39
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (529 898 759 528 928 759 759 528 528 759)
Population mean number of elite cases: 6.97
Count of perfect (error zero) individuals by case: (529 898 759 528 928 759 759 528 528 759)
Population mean number of perfect (error zero) cases: 6.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_mod})
Best program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 32
Size: 39
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 3.025
Median total errors in population: 4
Error averages by case: (0.471 0.102 0.241 0.472 0.072 0.241 0.241 0.472 0.472 0.241)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.766
Average program size in population (points): 35.752
Average percent parens in population: 0.196
Minimum age in population: 56.02085236774292
Maximum age in population: 59.08884411188774
Average age in population: 57.96899201014161
Median age in population: 58.02085236774292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 256
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 258
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 12075375
--- Timings ---
Current time: 1559582919741 milliseconds
Total Time:         101.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.4 seconds, 77.0%
Fitness Testing:     14.2 seconds, 14.0%
Report:               9.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 38
Successful program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 39


Auto-simplifying with starting size: 39
step: 0
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 500
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 1000
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 1500
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 2000
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 2500
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 3000
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 3500
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 4000
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 4500
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

step: 5000
program: (boolean_dup integer_div exec_s (exec_noop boolean_dup_items boolean_swap) (print_integer exec_yank in1 boolean_empty boolean_invert_second_then_and boolean_yank in3 in4 in1 integer_min in4 in1 integer_shove integer_min print_integer integer_dup integer_yankdup exec_flush integer_lte exec_if (integer_dup_items) (integer_gt integer_swap boolean_and exec_dup_times () integer_mod)) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 39

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 253
Test mean error for best: 0.25300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -75                 | Program output: -57                
Correct output: -70                 | Program output: -70                
Correct output: -37                 | Program output: -37                
Correct output: 85                  | Program output: 96                 
Correct output: -35                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -70                 | Program output: -70                
Correct output: -65                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -5                  | Program output: -5                 
Correct output: 12                  | Program output: 12                 
Correct output: -3                  | Program output: -3                 
Correct output: 89                  | Program output: 89                 
Correct output: -80                 | Program output: -80                
Correct output: 44                  | Program output: 53                 
Correct output: 6                   | Program output: 6                  
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: 12                  | Program output: 12                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 56                 
Correct output: 2                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 17                 
Correct output: 38                  | Program output: 49                 
Correct output: 63                  | Program output: 63                 
Correct output: 71                  | Program output: 71                 
Correct output: 3                   | Program output: 3                  
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 16                  | Program output: 16                 
Correct output: -72                 | Program output: -72                
Correct output: -52                 | Program output: -52                
Correct output: -87                 | Program output: -46                
Correct output: -66                 | Program output: -30                
Correct output: -48                 | Program output: -48                
Correct output: -78                 | Program output: -78                
Correct output: -33                 | Program output: 67                 
Correct output: -87                 | Program output: -21                
Correct output: -41                 | Program output: -36                
Correct output: -49                 | Program output: -49                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -59                 | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -55                
Correct output: 27                  | Program output: 27                 
Correct output: -64                 | Program output: -64                
Correct output: -57                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: 77                  | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: 22                  | Program output: 37                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -72                 | Program output: -72                
Correct output: -25                 | Program output: -25                
Correct output: -58                 | Program output: -58                
Correct output: -94                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -48                 | Program output: -48                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: -99                 | Program output: -99                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -59                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: 2                   | Program output: 2                  
Correct output: -98                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -94                 | Program output: -94                
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
Correct output: -42                 | Program output: -41                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -60                
Correct output: -6                  | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -59                 | Program output: -59                
Correct output: 3                   | Program output: 4                  
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
;;******************************
