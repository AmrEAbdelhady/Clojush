Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-62 10 -62 -62] -62] [[-4 -34 -4 -4] -34] [[97 97 58 97] 58] [[-47 -47 21 -47] -47] [[78 78 78 -27] -27] [[1 -89 1 1] -89] [[51 51 51 46] 46] [[3 -79 3 3] -79] [[80 -68 80 80] -68] [[48 48 48 5] 5] [(-4 -4 -4 -4) -4] [(75 75 75 75) 75] [(20 20 20 20) 20] [(-78 -78 -78 -78) -78] [(-92 -92 -92 -92) -92] [(26 82 47 67) 26] [(3 23 76 29) 3] [(17 22 15 49) 15] [(72 73 22 69) 22] [(13 42 46 94) 13] [(54 46 11 43) 11] [(5 89 62 63) 5] [(65 90 87 36) 36] [(70 91 87 9) 9] [(20 15 30 46) 15] [(86 72 59 84) 59] [(70 30 40 32) 30] [(62 29 24 44) 24] [(40 1 23 31) 1] [(98 19 57 15) 15] [(31 94 19 46) 19] [(91 43 77 57) 43] [(42 59 69 81) 42] [(56 63 73 77) 56] [(87 10 100 72) 10] [(-17 -46 4 71) -46] [(-89 63 -21 96) -89] [(-18 96 60 91) -18] [(-20 -93 28 -79) -93] [(34 -97 43 -72) -97] [(-69 -24 7 5) -69] [(20 -97 57 -85) -97] [(44 38 48 -40) -40] [(-72 -36 -13 34) -72] [(-6 -34 43 47) -34] [(30 -22 -59 67) -59] [(-62 44 -96 36) -96] [(73 -48 -26 29) -48] [(55 19 27 -65) -65] [(-43 89 -49 -71) -71] [(-14 -69 71 33) -69] [(-6 -85 -87 32) -87] [(-46 -97 -69 -89) -97] [(37 -24 56 71) -24] [(97 42 11 -87) -87] [(91 -99 63 -37) -99] [(83 92 36 95) 36] [(-94 62 -7 11) -94] [(-11 70 -68 -22) -68] [(-67 -18 -2 28) -67] [(48 54 96 -27) -27] [(87 -74 85 -12) -74] [(46 -19 11 -41) -41] [(-81 -19 35 -41) -81] [(48 93 84 -100) -100] [(-23 89 3 -27) -27] [(-67 -40 38 -69) -69] [(-34 -11 -6 -15) -34] [(-81 78 -86 -43) -86] [(21 8 -72 16) -72] [(49 -49 82 -7) -49] [(-24 -63 -58 -4) -63] [(96 -52 -52 65) -52] [(-27 -54 -54 -3) -54] [(99 3 99 47) 3] [(-3 53 -66 77) -66] [(-87 -8 -4 1) -87] [(2 97 94 55) 2] [(86 -85 91 72) -85] [(-85 -43 85 25) -85] [(-69 -41 21 74) -69] [(67 -49 -69 -79) -79] [(-47 63 34 21) -47] [(45 96 -93 49) -93] [(79 42 65 -35) -35] [(35 -79 -20 16) -79] [(23 -87 100 -94) -94] [(64 64 -44 -38) -44] [(-34 -6 32 -59) -59] [(-26 67 20 59) -26] [(47 60 54 67) 47] [(-1 86 72 -21) -21] [(49 22 -32 -84) -84] [(32 -26 5 -14) -26] [(53 37 6 -87) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-62 10 -62 -62] -62]
Train Case:   6 | Input/Output: [[-4 -34 -4 -4] -34]
Train Case:   7 | Input/Output: [[97 97 58 97] 58]
Train Case:   8 | Input/Output: [[-47 -47 21 -47] -47]
Train Case:   9 | Input/Output: [[78 78 78 -27] -27]
Train Case:  10 | Input/Output: [[1 -89 1 1] -89]
Train Case:  11 | Input/Output: [[51 51 51 46] 46]
Train Case:  12 | Input/Output: [[3 -79 3 3] -79]
Train Case:  13 | Input/Output: [[80 -68 80 80] -68]
Train Case:  14 | Input/Output: [[48 48 48 5] 5]
Train Case:  15 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  16 | Input/Output: [(75 75 75 75) 75]
Train Case:  17 | Input/Output: [(20 20 20 20) 20]
Train Case:  18 | Input/Output: [(-78 -78 -78 -78) -78]
Train Case:  19 | Input/Output: [(-92 -92 -92 -92) -92]
Train Case:  20 | Input/Output: [(26 82 47 67) 26]
Train Case:  21 | Input/Output: [(3 23 76 29) 3]
Train Case:  22 | Input/Output: [(17 22 15 49) 15]
Train Case:  23 | Input/Output: [(72 73 22 69) 22]
Train Case:  24 | Input/Output: [(13 42 46 94) 13]
Train Case:  25 | Input/Output: [(54 46 11 43) 11]
Train Case:  26 | Input/Output: [(5 89 62 63) 5]
Train Case:  27 | Input/Output: [(65 90 87 36) 36]
Train Case:  28 | Input/Output: [(70 91 87 9) 9]
Train Case:  29 | Input/Output: [(20 15 30 46) 15]
Train Case:  30 | Input/Output: [(86 72 59 84) 59]
Train Case:  31 | Input/Output: [(70 30 40 32) 30]
Train Case:  32 | Input/Output: [(62 29 24 44) 24]
Train Case:  33 | Input/Output: [(40 1 23 31) 1]
Train Case:  34 | Input/Output: [(98 19 57 15) 15]
Train Case:  35 | Input/Output: [(31 94 19 46) 19]
Train Case:  36 | Input/Output: [(91 43 77 57) 43]
Train Case:  37 | Input/Output: [(42 59 69 81) 42]
Train Case:  38 | Input/Output: [(56 63 73 77) 56]
Train Case:  39 | Input/Output: [(87 10 100 72) 10]
Train Case:  40 | Input/Output: [(-17 -46 4 71) -46]
Train Case:  41 | Input/Output: [(-89 63 -21 96) -89]
Train Case:  42 | Input/Output: [(-18 96 60 91) -18]
Train Case:  43 | Input/Output: [(-20 -93 28 -79) -93]
Train Case:  44 | Input/Output: [(34 -97 43 -72) -97]
Train Case:  45 | Input/Output: [(-69 -24 7 5) -69]
Train Case:  46 | Input/Output: [(20 -97 57 -85) -97]
Train Case:  47 | Input/Output: [(44 38 48 -40) -40]
Train Case:  48 | Input/Output: [(-72 -36 -13 34) -72]
Train Case:  49 | Input/Output: [(-6 -34 43 47) -34]
Train Case:  50 | Input/Output: [(30 -22 -59 67) -59]
Train Case:  51 | Input/Output: [(-62 44 -96 36) -96]
Train Case:  52 | Input/Output: [(73 -48 -26 29) -48]
Train Case:  53 | Input/Output: [(55 19 27 -65) -65]
Train Case:  54 | Input/Output: [(-43 89 -49 -71) -71]
Train Case:  55 | Input/Output: [(-14 -69 71 33) -69]
Train Case:  56 | Input/Output: [(-6 -85 -87 32) -87]
Train Case:  57 | Input/Output: [(-46 -97 -69 -89) -97]
Train Case:  58 | Input/Output: [(37 -24 56 71) -24]
Train Case:  59 | Input/Output: [(97 42 11 -87) -87]
Train Case:  60 | Input/Output: [(91 -99 63 -37) -99]
Train Case:  61 | Input/Output: [(83 92 36 95) 36]
Train Case:  62 | Input/Output: [(-94 62 -7 11) -94]
Train Case:  63 | Input/Output: [(-11 70 -68 -22) -68]
Train Case:  64 | Input/Output: [(-67 -18 -2 28) -67]
Train Case:  65 | Input/Output: [(48 54 96 -27) -27]
Train Case:  66 | Input/Output: [(87 -74 85 -12) -74]
Train Case:  67 | Input/Output: [(46 -19 11 -41) -41]
Train Case:  68 | Input/Output: [(-81 -19 35 -41) -81]
Train Case:  69 | Input/Output: [(48 93 84 -100) -100]
Train Case:  70 | Input/Output: [(-23 89 3 -27) -27]
Train Case:  71 | Input/Output: [(-67 -40 38 -69) -69]
Train Case:  72 | Input/Output: [(-34 -11 -6 -15) -34]
Train Case:  73 | Input/Output: [(-81 78 -86 -43) -86]
Train Case:  74 | Input/Output: [(21 8 -72 16) -72]
Train Case:  75 | Input/Output: [(49 -49 82 -7) -49]
Train Case:  76 | Input/Output: [(-24 -63 -58 -4) -63]
Train Case:  77 | Input/Output: [(96 -52 -52 65) -52]
Train Case:  78 | Input/Output: [(-27 -54 -54 -3) -54]
Train Case:  79 | Input/Output: [(99 3 99 47) 3]
Train Case:  80 | Input/Output: [(-3 53 -66 77) -66]
Train Case:  81 | Input/Output: [(-87 -8 -4 1) -87]
Train Case:  82 | Input/Output: [(2 97 94 55) 2]
Train Case:  83 | Input/Output: [(86 -85 91 72) -85]
Train Case:  84 | Input/Output: [(-85 -43 85 25) -85]
Train Case:  85 | Input/Output: [(-69 -41 21 74) -69]
Train Case:  86 | Input/Output: [(67 -49 -69 -79) -79]
Train Case:  87 | Input/Output: [(-47 63 34 21) -47]
Train Case:  88 | Input/Output: [(45 96 -93 49) -93]
Train Case:  89 | Input/Output: [(79 42 65 -35) -35]
Train Case:  90 | Input/Output: [(35 -79 -20 16) -79]
Train Case:  91 | Input/Output: [(23 -87 100 -94) -94]
Train Case:  92 | Input/Output: [(64 64 -44 -38) -44]
Train Case:  93 | Input/Output: [(-34 -6 32 -59) -59]
Train Case:  94 | Input/Output: [(-26 67 20 59) -26]
Train Case:  95 | Input/Output: [(47 60 54 67) 47]
Train Case:  96 | Input/Output: [(-1 86 72 -21) -21]
Train Case:  97 | Input/Output: [(49 22 -32 -84) -84]
Train Case:  98 | Input/Output: [(32 -26 5 -14) -26]
Train Case:  99 | Input/Output: [(53 37 6 -87) -87]
Test Case:   0 | Input/Output: [[62 73 73 73] 62]
Test Case:   1 | Input/Output: [[97 -39 -39 -39] -39]
Test Case:   2 | Input/Output: [[96 96 96 85] 85]
Test Case:   3 | Input/Output: [[3 -25 -25 -25] -25]
Test Case:   4 | Input/Output: [[-64 80 80 80] -64]
Test Case:   5 | Input/Output: [[63 24 24 24] 24]
Test Case:   6 | Input/Output: [[-76 -72 -76 -76] -76]
Test Case:   7 | Input/Output: [[94 94 78 94] 78]
Test Case:   8 | Input/Output: [[28 -97 -97 -97] -97]
Test Case:   9 | Input/Output: [[65 -58 65 65] -58]
Test Case:  10 | Input/Output: [[79 79 89 79] 79]
Test Case:  11 | Input/Output: [[-52 -52 -52 -17] -52]
Test Case:  12 | Input/Output: [[-69 -69 -19 -69] -69]
Test Case:  13 | Input/Output: [[61 61 61 -78] -78]
Test Case:  14 | Input/Output: [[88 88 -11 88] -11]
Test Case:  15 | Input/Output: [[10 10 38 10] 10]
Test Case:  16 | Input/Output: [[91 91 91 91] 91]
Test Case:  17 | Input/Output: [[-34 -34 -34 -95] -95]
Test Case:  18 | Input/Output: [[-8 -8 -8 61] -8]
Test Case:  19 | Input/Output: [[44 27 44 44] 27]
Test Case:  20 | Input/Output: [[-50 -50 46 -50] -50]
Test Case:  21 | Input/Output: [[-52 -52 -52 -54] -54]
Test Case:  22 | Input/Output: [[-84 -84 -84 -26] -84]
Test Case:  23 | Input/Output: [[-62 83 -62 -62] -62]
Test Case:  24 | Input/Output: [[-65 -65 -96 -65] -96]
Test Case:  25 | Input/Output: [[-38 76 -38 -38] -38]
Test Case:  26 | Input/Output: [[31 31 -78 31] -78]
Test Case:  27 | Input/Output: [[-28 -73 -73 -73] -73]
Test Case:  28 | Input/Output: [[88 -29 88 88] -29]
Test Case:  29 | Input/Output: [[-72 -72 -72 81] -72]
Test Case:  30 | Input/Output: [[-84 -84 -84 -84] -84]
Test Case:  31 | Input/Output: [[30 30 -22 30] -22]
Test Case:  32 | Input/Output: [[-3 -3 49 -3] -3]
Test Case:  33 | Input/Output: [[67 67 -70 67] -70]
Test Case:  34 | Input/Output: [[-61 -61 -61 11] -61]
Test Case:  35 | Input/Output: [[-44 -4 -4 -4] -44]
Test Case:  36 | Input/Output: [[-36 -36 -36 -84] -84]
Test Case:  37 | Input/Output: [[87 87 -40 87] -40]
Test Case:  38 | Input/Output: [[96 96 96 -29] -29]
Test Case:  39 | Input/Output: [[-31 -31 -31 28] -31]
Test Case:  40 | Input/Output: [[19 -50 -50 -50] -50]
Test Case:  41 | Input/Output: [[-56 34 -56 -56] -56]
Test Case:  42 | Input/Output: [[-26 -91 -91 -91] -91]
Test Case:  43 | Input/Output: [[12 12 95 12] 12]
Test Case:  44 | Input/Output: [[1 27 1 1] 1]
Test Case:  45 | Input/Output: [[16 16 16 -43] -43]
Test Case:  46 | Input/Output: [[51 38 51 51] 38]
Test Case:  47 | Input/Output: [[6 -21 -21 -21] -21]
Test Case:  48 | Input/Output: [[55 -48 -48 -48] -48]
Test Case:  49 | Input/Output: [[92 -60 92 92] -60]
Test Case:  50 | Input/Output: [[-74 -79 -79 -79] -79]
Test Case:  51 | Input/Output: [[80 80 80 -14] -14]
Test Case:  52 | Input/Output: [[78 78 46 78] 46]
Test Case:  53 | Input/Output: [[43 43 -25 43] -25]
Test Case:  54 | Input/Output: [[39 39 39 52] 39]
Test Case:  55 | Input/Output: [[37 -82 -82 -82] -82]
Test Case:  56 | Input/Output: [[93 -84 -84 -84] -84]
Test Case:  57 | Input/Output: [[25 -87 -87 -87] -87]
Test Case:  58 | Input/Output: [[15 15 -44 15] -44]
Test Case:  59 | Input/Output: [[-13 -13 -13 8] -13]
Test Case:  60 | Input/Output: [[39 39 39 17] 17]
Test Case:  61 | Input/Output: [[-81 -81 -21 -81] -81]
Test Case:  62 | Input/Output: [[-70 -39 -70 -70] -70]
Test Case:  63 | Input/Output: [[-62 -62 -62 94] -62]
Test Case:  64 | Input/Output: [[-8 -63 -63 -63] -63]
Test Case:  65 | Input/Output: [[-11 -11 -11 -25] -25]
Test Case:  66 | Input/Output: [[-92 54 54 54] -92]
Test Case:  67 | Input/Output: [[-74 -56 -56 -56] -74]
Test Case:  68 | Input/Output: [[-37 -37 -67 -37] -67]
Test Case:  69 | Input/Output: [[47 47 11 47] 11]
Test Case:  70 | Input/Output: [[-88 -88 92 -88] -88]
Test Case:  71 | Input/Output: [[-37 99 99 99] -37]
Test Case:  72 | Input/Output: [[79 -27 79 79] -27]
Test Case:  73 | Input/Output: [[-66 -86 -86 -86] -86]
Test Case:  74 | Input/Output: [[-14 60 60 60] -14]
Test Case:  75 | Input/Output: [[-35 -35 -35 65] -35]
Test Case:  76 | Input/Output: [[-34 -57 -34 -34] -57]
Test Case:  77 | Input/Output: [[68 68 68 -26] -26]
Test Case:  78 | Input/Output: [[14 4 4 4] 4]
Test Case:  79 | Input/Output: [[96 65 96 96] 65]
Test Case:  80 | Input/Output: [[-52 -52 -52 72] -52]
Test Case:  81 | Input/Output: [[-89 -89 -89 62] -89]
Test Case:  82 | Input/Output: [[-92 -92 -6 -92] -92]
Test Case:  83 | Input/Output: [[-58 -48 -58 -58] -58]
Test Case:  84 | Input/Output: [[-90 -90 -90 47] -90]
Test Case:  85 | Input/Output: [[22 22 -37 22] -37]
Test Case:  86 | Input/Output: [[-91 -91 -91 -80] -91]
Test Case:  87 | Input/Output: [[-18 -18 -18 -40] -40]
Test Case:  88 | Input/Output: [[-4 -4 -4 47] -4]
Test Case:  89 | Input/Output: [[61 -67 -67 -67] -67]
Test Case:  90 | Input/Output: [[-51 -51 -60 -51] -60]
Test Case:  91 | Input/Output: [[69 -75 69 69] -75]
Test Case:  92 | Input/Output: [[-98 86 -98 -98] -98]
Test Case:  93 | Input/Output: [[-62 -62 -62 16] -62]
Test Case:  94 | Input/Output: [[-85 -85 83 -85] -85]
Test Case:  95 | Input/Output: [[49 95 95 95] 49]
Test Case:  96 | Input/Output: [[-76 30 -76 -76] -76]
Test Case:  97 | Input/Output: [[-36 83 83 83] -36]
Test Case:  98 | Input/Output: [[-74 72 72 72] -74]
Test Case:  99 | Input/Output: [[26 26 26 -71] -71]
Test Case: 100 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 101 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 102 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 103 | Input/Output: [(91 91 91 91) 91]
Test Case: 104 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 105 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 106 | Input/Output: [(56 56 56 56) 56]
Test Case: 107 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 108 | Input/Output: [(49 49 49 49) 49]
Test Case: 109 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 110 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 111 | Input/Output: [(72 72 72 72) 72]
Test Case: 112 | Input/Output: [(99 99 99 99) 99]
Test Case: 113 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 114 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 115 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 116 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 117 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 118 | Input/Output: [(10 10 10 10) 10]
Test Case: 119 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 120 | Input/Output: [(39 39 39 39) 39]
Test Case: 121 | Input/Output: [(19 19 19 19) 19]
Test Case: 122 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 123 | Input/Output: [(96 96 96 96) 96]
Test Case: 124 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 125 | Input/Output: [(74 74 74 74) 74]
Test Case: 126 | Input/Output: [(89 89 89 89) 89]
Test Case: 127 | Input/Output: [(69 69 69 69) 69]
Test Case: 128 | Input/Output: [(99 99 99 99) 99]
Test Case: 129 | Input/Output: [(95 95 95 95) 95]
Test Case: 130 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 131 | Input/Output: [(63 63 63 63) 63]
Test Case: 132 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 133 | Input/Output: [(11 11 11 11) 11]
Test Case: 134 | Input/Output: [(23 23 23 23) 23]
Test Case: 135 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 136 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 137 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 138 | Input/Output: [(68 68 68 68) 68]
Test Case: 139 | Input/Output: [(40 40 40 40) 40]
Test Case: 140 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 141 | Input/Output: [(88 88 88 88) 88]
Test Case: 142 | Input/Output: [(93 93 93 93) 93]
Test Case: 143 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 144 | Input/Output: [(67 67 67 67) 67]
Test Case: 145 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 146 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 147 | Input/Output: [(77 77 77 77) 77]
Test Case: 148 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 149 | Input/Output: [(55 55 55 55) 55]
Test Case: 150 | Input/Output: [(54 54 54 54) 54]
Test Case: 151 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 152 | Input/Output: [(35 35 35 35) 35]
Test Case: 153 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 154 | Input/Output: [(32 32 32 32) 32]
Test Case: 155 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 156 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 157 | Input/Output: [(54 54 54 54) 54]
Test Case: 158 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 159 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 160 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 161 | Input/Output: [(60 60 60 60) 60]
Test Case: 162 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 163 | Input/Output: [(75 75 75 75) 75]
Test Case: 164 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 165 | Input/Output: [(99 99 99 99) 99]
Test Case: 166 | Input/Output: [(64 64 64 64) 64]
Test Case: 167 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 168 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 169 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 170 | Input/Output: [(17 17 17 17) 17]
Test Case: 171 | Input/Output: [(0 0 0 0) 0]
Test Case: 172 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 173 | Input/Output: [(9 9 9 9) 9]
Test Case: 174 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 175 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 176 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 177 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 178 | Input/Output: [(18 18 18 18) 18]
Test Case: 179 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 180 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 181 | Input/Output: [(97 97 97 97) 97]
Test Case: 182 | Input/Output: [(34 34 34 34) 34]
Test Case: 183 | Input/Output: [(47 47 47 47) 47]
Test Case: 184 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 185 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 186 | Input/Output: [(88 88 88 88) 88]
Test Case: 187 | Input/Output: [(86 86 86 86) 86]
Test Case: 188 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 189 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 190 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 191 | Input/Output: [(92 92 92 92) 92]
Test Case: 192 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 193 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 194 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 195 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 196 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 197 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 198 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 199 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 200 | Input/Output: [(54 100 64 63) 54]
Test Case: 201 | Input/Output: [(61 22 21 29) 21]
Test Case: 202 | Input/Output: [(95 91 24 30) 24]
Test Case: 203 | Input/Output: [(7 58 58 72) 7]
Test Case: 204 | Input/Output: [(27 15 4 1) 1]
Test Case: 205 | Input/Output: [(78 11 63 3) 3]
Test Case: 206 | Input/Output: [(28 72 62 15) 15]
Test Case: 207 | Input/Output: [(22 43 78 19) 19]
Test Case: 208 | Input/Output: [(83 33 61 49) 33]
Test Case: 209 | Input/Output: [(26 25 95 97) 25]
Test Case: 210 | Input/Output: [(6 76 48 94) 6]
Test Case: 211 | Input/Output: [(20 89 56 28) 20]
Test Case: 212 | Input/Output: [(93 59 50 6) 6]
Test Case: 213 | Input/Output: [(53 82 13 14) 13]
Test Case: 214 | Input/Output: [(34 67 56 46) 34]
Test Case: 215 | Input/Output: [(49 91 37 23) 23]
Test Case: 216 | Input/Output: [(33 47 89 97) 33]
Test Case: 217 | Input/Output: [(12 21 16 66) 12]
Test Case: 218 | Input/Output: [(88 74 36 5) 5]
Test Case: 219 | Input/Output: [(36 81 50 79) 36]
Test Case: 220 | Input/Output: [(56 66 96 75) 56]
Test Case: 221 | Input/Output: [(49 11 82 91) 11]
Test Case: 222 | Input/Output: [(73 75 32 85) 32]
Test Case: 223 | Input/Output: [(86 49 49 47) 47]
Test Case: 224 | Input/Output: [(15 3 46 47) 3]
Test Case: 225 | Input/Output: [(67 30 36 96) 30]
Test Case: 226 | Input/Output: [(89 4 59 35) 4]
Test Case: 227 | Input/Output: [(76 99 66 38) 38]
Test Case: 228 | Input/Output: [(62 26 59 71) 26]
Test Case: 229 | Input/Output: [(76 9 57 31) 9]
Test Case: 230 | Input/Output: [(7 15 70 31) 7]
Test Case: 231 | Input/Output: [(99 79 83 17) 17]
Test Case: 232 | Input/Output: [(27 24 12 11) 11]
Test Case: 233 | Input/Output: [(84 5 92 45) 5]
Test Case: 234 | Input/Output: [(9 16 79 45) 9]
Test Case: 235 | Input/Output: [(67 42 46 76) 42]
Test Case: 236 | Input/Output: [(24 68 26 86) 24]
Test Case: 237 | Input/Output: [(85 19 85 37) 19]
Test Case: 238 | Input/Output: [(65 99 72 81) 65]
Test Case: 239 | Input/Output: [(31 20 47 14) 14]
Test Case: 240 | Input/Output: [(53 3 93 3) 3]
Test Case: 241 | Input/Output: [(92 9 20 38) 9]
Test Case: 242 | Input/Output: [(92 74 22 17) 17]
Test Case: 243 | Input/Output: [(81 67 7 10) 7]
Test Case: 244 | Input/Output: [(37 28 36 60) 28]
Test Case: 245 | Input/Output: [(8 61 85 77) 8]
Test Case: 246 | Input/Output: [(57 3 25 62) 3]
Test Case: 247 | Input/Output: [(9 66 88 80) 9]
Test Case: 248 | Input/Output: [(100 49 79 26) 26]
Test Case: 249 | Input/Output: [(68 100 99 48) 48]
Test Case: 250 | Input/Output: [(56 75 1 91) 1]
Test Case: 251 | Input/Output: [(79 22 45 54) 22]
Test Case: 252 | Input/Output: [(30 57 68 48) 30]
Test Case: 253 | Input/Output: [(80 85 20 23) 20]
Test Case: 254 | Input/Output: [(28 4 58 2) 2]
Test Case: 255 | Input/Output: [(93 67 14 65) 14]
Test Case: 256 | Input/Output: [(38 95 8 67) 8]
Test Case: 257 | Input/Output: [(75 85 22 3) 3]
Test Case: 258 | Input/Output: [(24 60 94 99) 24]
Test Case: 259 | Input/Output: [(16 28 79 15) 15]
Test Case: 260 | Input/Output: [(56 96 100 33) 33]
Test Case: 261 | Input/Output: [(9 54 86 63) 9]
Test Case: 262 | Input/Output: [(24 44 77 2) 2]
Test Case: 263 | Input/Output: [(100 75 2 88) 2]
Test Case: 264 | Input/Output: [(58 51 1 62) 1]
Test Case: 265 | Input/Output: [(61 75 22 100) 22]
Test Case: 266 | Input/Output: [(47 97 26 34) 26]
Test Case: 267 | Input/Output: [(57 87 28 66) 28]
Test Case: 268 | Input/Output: [(27 16 78 37) 16]
Test Case: 269 | Input/Output: [(84 89 30 57) 30]
Test Case: 270 | Input/Output: [(43 86 10 39) 10]
Test Case: 271 | Input/Output: [(3 55 90 54) 3]
Test Case: 272 | Input/Output: [(15 27 71 61) 15]
Test Case: 273 | Input/Output: [(95 45 29 81) 29]
Test Case: 274 | Input/Output: [(45 43 28 44) 28]
Test Case: 275 | Input/Output: [(2 14 74 38) 2]
Test Case: 276 | Input/Output: [(47 2 59 61) 2]
Test Case: 277 | Input/Output: [(74 30 46 60) 30]
Test Case: 278 | Input/Output: [(56 87 43 99) 43]
Test Case: 279 | Input/Output: [(99 11 60 12) 11]
Test Case: 280 | Input/Output: [(91 16 45 95) 16]
Test Case: 281 | Input/Output: [(65 49 56 40) 40]
Test Case: 282 | Input/Output: [(68 35 99 44) 35]
Test Case: 283 | Input/Output: [(1 12 83 5) 1]
Test Case: 284 | Input/Output: [(36 85 44 89) 36]
Test Case: 285 | Input/Output: [(90 43 11 29) 11]
Test Case: 286 | Input/Output: [(27 56 3 9) 3]
Test Case: 287 | Input/Output: [(43 37 33 32) 32]
Test Case: 288 | Input/Output: [(13 34 53 90) 13]
Test Case: 289 | Input/Output: [(10 14 62 79) 10]
Test Case: 290 | Input/Output: [(13 31 49 16) 13]
Test Case: 291 | Input/Output: [(39 88 64 68) 39]
Test Case: 292 | Input/Output: [(25 62 27 69) 25]
Test Case: 293 | Input/Output: [(95 77 53 33) 33]
Test Case: 294 | Input/Output: [(6 97 93 18) 6]
Test Case: 295 | Input/Output: [(13 0 7 72) 0]
Test Case: 296 | Input/Output: [(47 95 89 53) 47]
Test Case: 297 | Input/Output: [(57 53 58 100) 53]
Test Case: 298 | Input/Output: [(95 33 77 74) 33]
Test Case: 299 | Input/Output: [(95 41 47 36) 36]
Test Case: 300 | Input/Output: [(12 50 29 82) 12]
Test Case: 301 | Input/Output: [(70 53 54 77) 53]
Test Case: 302 | Input/Output: [(1 93 100 26) 1]
Test Case: 303 | Input/Output: [(22 20 5 49) 5]
Test Case: 304 | Input/Output: [(95 54 81 15) 15]
Test Case: 305 | Input/Output: [(100 44 57 26) 26]
Test Case: 306 | Input/Output: [(98 78 93 75) 75]
Test Case: 307 | Input/Output: [(56 26 65 88) 26]
Test Case: 308 | Input/Output: [(87 14 18 74) 14]
Test Case: 309 | Input/Output: [(29 1 50 47) 1]
Test Case: 310 | Input/Output: [(15 28 82 84) 15]
Test Case: 311 | Input/Output: [(1 58 46 81) 1]
Test Case: 312 | Input/Output: [(2 56 41 18) 2]
Test Case: 313 | Input/Output: [(32 31 82 12) 12]
Test Case: 314 | Input/Output: [(81 74 12 63) 12]
Test Case: 315 | Input/Output: [(69 88 12 81) 12]
Test Case: 316 | Input/Output: [(63 59 90 93) 59]
Test Case: 317 | Input/Output: [(97 55 97 0) 0]
Test Case: 318 | Input/Output: [(69 58 55 97) 55]
Test Case: 319 | Input/Output: [(27 58 21 55) 21]
Test Case: 320 | Input/Output: [(26 93 41 12) 12]
Test Case: 321 | Input/Output: [(26 65 94 27) 26]
Test Case: 322 | Input/Output: [(8 35 53 73) 8]
Test Case: 323 | Input/Output: [(7 35 22 28) 7]
Test Case: 324 | Input/Output: [(58 65 59 25) 25]
Test Case: 325 | Input/Output: [(71 48 45 12) 12]
Test Case: 326 | Input/Output: [(20 8 24 50) 8]
Test Case: 327 | Input/Output: [(88 27 100 23) 23]
Test Case: 328 | Input/Output: [(97 47 97 96) 47]
Test Case: 329 | Input/Output: [(100 47 36 28) 28]
Test Case: 330 | Input/Output: [(75 53 63 33) 33]
Test Case: 331 | Input/Output: [(16 39 34 66) 16]
Test Case: 332 | Input/Output: [(96 94 93 45) 45]
Test Case: 333 | Input/Output: [(56 4 81 66) 4]
Test Case: 334 | Input/Output: [(17 38 2 43) 2]
Test Case: 335 | Input/Output: [(99 28 58 44) 28]
Test Case: 336 | Input/Output: [(12 77 100 93) 12]
Test Case: 337 | Input/Output: [(49 37 16 61) 16]
Test Case: 338 | Input/Output: [(98 29 7 34) 7]
Test Case: 339 | Input/Output: [(74 33 73 81) 33]
Test Case: 340 | Input/Output: [(39 61 13 19) 13]
Test Case: 341 | Input/Output: [(76 53 82 95) 53]
Test Case: 342 | Input/Output: [(97 39 28 47) 28]
Test Case: 343 | Input/Output: [(87 1 48 26) 1]
Test Case: 344 | Input/Output: [(67 76 24 72) 24]
Test Case: 345 | Input/Output: [(51 99 90 34) 34]
Test Case: 346 | Input/Output: [(38 69 81 38) 38]
Test Case: 347 | Input/Output: [(1 86 24 6) 1]
Test Case: 348 | Input/Output: [(7 22 55 76) 7]
Test Case: 349 | Input/Output: [(72 19 35 42) 19]
Test Case: 350 | Input/Output: [(60 97 5 53) 5]
Test Case: 351 | Input/Output: [(33 26 15 60) 15]
Test Case: 352 | Input/Output: [(50 11 42 37) 11]
Test Case: 353 | Input/Output: [(4 90 66 34) 4]
Test Case: 354 | Input/Output: [(49 39 96 94) 39]
Test Case: 355 | Input/Output: [(98 21 47 90) 21]
Test Case: 356 | Input/Output: [(31 15 37 96) 15]
Test Case: 357 | Input/Output: [(80 27 26 34) 26]
Test Case: 358 | Input/Output: [(32 8 76 9) 8]
Test Case: 359 | Input/Output: [(28 11 79 11) 11]
Test Case: 360 | Input/Output: [(41 98 71 11) 11]
Test Case: 361 | Input/Output: [(4 9 37 74) 4]
Test Case: 362 | Input/Output: [(94 8 91 28) 8]
Test Case: 363 | Input/Output: [(28 34 77 63) 28]
Test Case: 364 | Input/Output: [(69 25 23 10) 10]
Test Case: 365 | Input/Output: [(74 55 62 28) 28]
Test Case: 366 | Input/Output: [(5 2 43 34) 2]
Test Case: 367 | Input/Output: [(21 60 78 81) 21]
Test Case: 368 | Input/Output: [(24 14 71 38) 14]
Test Case: 369 | Input/Output: [(1 87 46 21) 1]
Test Case: 370 | Input/Output: [(96 83 73 36) 36]
Test Case: 371 | Input/Output: [(39 43 95 30) 30]
Test Case: 372 | Input/Output: [(66 21 88 37) 21]
Test Case: 373 | Input/Output: [(51 34 53 51) 34]
Test Case: 374 | Input/Output: [(85 91 85 91) 85]
Test Case: 375 | Input/Output: [(2 33 58 27) 2]
Test Case: 376 | Input/Output: [(6 67 10 99) 6]
Test Case: 377 | Input/Output: [(33 44 22 20) 20]
Test Case: 378 | Input/Output: [(46 92 7 81) 7]
Test Case: 379 | Input/Output: [(38 50 55 72) 38]
Test Case: 380 | Input/Output: [(86 95 53 45) 45]
Test Case: 381 | Input/Output: [(50 2 36 67) 2]
Test Case: 382 | Input/Output: [(43 87 51 86) 43]
Test Case: 383 | Input/Output: [(4 65 72 81) 4]
Test Case: 384 | Input/Output: [(62 94 95 18) 18]
Test Case: 385 | Input/Output: [(0 69 11 53) 0]
Test Case: 386 | Input/Output: [(54 35 69 78) 35]
Test Case: 387 | Input/Output: [(58 14 51 67) 14]
Test Case: 388 | Input/Output: [(22 24 62 14) 14]
Test Case: 389 | Input/Output: [(77 20 57 6) 6]
Test Case: 390 | Input/Output: [(51 36 37 19) 19]
Test Case: 391 | Input/Output: [(89 66 74 79) 66]
Test Case: 392 | Input/Output: [(34 30 17 67) 17]
Test Case: 393 | Input/Output: [(54 26 3 64) 3]
Test Case: 394 | Input/Output: [(11 18 96 97) 11]
Test Case: 395 | Input/Output: [(38 13 8 38) 8]
Test Case: 396 | Input/Output: [(91 19 61 97) 19]
Test Case: 397 | Input/Output: [(48 33 52 12) 12]
Test Case: 398 | Input/Output: [(24 82 19 30) 19]
Test Case: 399 | Input/Output: [(6 90 49 44) 6]
Test Case: 400 | Input/Output: [(-88 68 -44 -52) -88]
Test Case: 401 | Input/Output: [(-11 80 67 90) -11]
Test Case: 402 | Input/Output: [(-37 51 -63 48) -63]
Test Case: 403 | Input/Output: [(-46 -71 -100 -29) -100]
Test Case: 404 | Input/Output: [(60 -28 69 -77) -77]
Test Case: 405 | Input/Output: [(-58 66 25 -13) -58]
Test Case: 406 | Input/Output: [(80 48 -19 -38) -38]
Test Case: 407 | Input/Output: [(-72 -21 16 -29) -72]
Test Case: 408 | Input/Output: [(-57 -1 -76 -80) -80]
Test Case: 409 | Input/Output: [(-77 -20 86 79) -77]
Test Case: 410 | Input/Output: [(-67 -91 16 -25) -91]
Test Case: 411 | Input/Output: [(93 46 66 -73) -73]
Test Case: 412 | Input/Output: [(40 90 -53 8) -53]
Test Case: 413 | Input/Output: [(-31 17 -2 -18) -31]
Test Case: 414 | Input/Output: [(-96 52 26 27) -96]
Test Case: 415 | Input/Output: [(-77 -4 -88 80) -88]
Test Case: 416 | Input/Output: [(-33 -38 -51 63) -51]
Test Case: 417 | Input/Output: [(66 24 32 98) 24]
Test Case: 418 | Input/Output: [(16 31 -70 75) -70]
Test Case: 419 | Input/Output: [(22 30 -61 -20) -61]
Test Case: 420 | Input/Output: [(-59 -80 20 -23) -80]
Test Case: 421 | Input/Output: [(-74 40 52 47) -74]
Test Case: 422 | Input/Output: [(4 57 99 -11) -11]
Test Case: 423 | Input/Output: [(-63 54 37 41) -63]
Test Case: 424 | Input/Output: [(5 50 83 -47) -47]
Test Case: 425 | Input/Output: [(96 -69 -25 -4) -69]
Test Case: 426 | Input/Output: [(14 61 16 -74) -74]
Test Case: 427 | Input/Output: [(-11 94 77 -2) -11]
Test Case: 428 | Input/Output: [(-67 93 -19 53) -67]
Test Case: 429 | Input/Output: [(100 70 65 14) 14]
Test Case: 430 | Input/Output: [(33 45 21 87) 21]
Test Case: 431 | Input/Output: [(-2 33 37 -89) -89]
Test Case: 432 | Input/Output: [(-28 81 -33 -11) -33]
Test Case: 433 | Input/Output: [(96 35 67 -83) -83]
Test Case: 434 | Input/Output: [(-23 -9 -93 5) -93]
Test Case: 435 | Input/Output: [(4 91 69 -18) -18]
Test Case: 436 | Input/Output: [(57 93 -34 -3) -34]
Test Case: 437 | Input/Output: [(49 -80 26 -88) -88]
Test Case: 438 | Input/Output: [(-39 86 -82 -43) -82]
Test Case: 439 | Input/Output: [(-19 -76 36 -21) -76]
Test Case: 440 | Input/Output: [(90 19 -85 -27) -85]
Test Case: 441 | Input/Output: [(-65 -76 -55 64) -76]
Test Case: 442 | Input/Output: [(-9 53 34 73) -9]
Test Case: 443 | Input/Output: [(47 -93 -22 -85) -93]
Test Case: 444 | Input/Output: [(6 -47 75 96) -47]
Test Case: 445 | Input/Output: [(-23 -66 -53 -88) -88]
Test Case: 446 | Input/Output: [(25 -60 67 59) -60]
Test Case: 447 | Input/Output: [(-47 -91 32 90) -91]
Test Case: 448 | Input/Output: [(-35 57 -62 50) -62]
Test Case: 449 | Input/Output: [(2 -90 77 52) -90]
Test Case: 450 | Input/Output: [(29 34 4 22) 4]
Test Case: 451 | Input/Output: [(-8 9 0 -43) -43]
Test Case: 452 | Input/Output: [(-97 -11 33 -48) -97]
Test Case: 453 | Input/Output: [(-48 -39 -14 -79) -79]
Test Case: 454 | Input/Output: [(49 77 74 90) 49]
Test Case: 455 | Input/Output: [(39 -33 -41 12) -41]
Test Case: 456 | Input/Output: [(-63 96 -42 -30) -63]
Test Case: 457 | Input/Output: [(14 -48 -19 5) -48]
Test Case: 458 | Input/Output: [(16 -11 -93 34) -93]
Test Case: 459 | Input/Output: [(79 -54 38 -31) -54]
Test Case: 460 | Input/Output: [(-1 -60 27 10) -60]
Test Case: 461 | Input/Output: [(54 51 42 -43) -43]
Test Case: 462 | Input/Output: [(95 -12 66 50) -12]
Test Case: 463 | Input/Output: [(-34 51 15 100) -34]
Test Case: 464 | Input/Output: [(-12 13 38 -26) -26]
Test Case: 465 | Input/Output: [(-36 97 -39 62) -39]
Test Case: 466 | Input/Output: [(-80 55 47 35) -80]
Test Case: 467 | Input/Output: [(-44 65 78 61) -44]
Test Case: 468 | Input/Output: [(-41 37 -98 -69) -98]
Test Case: 469 | Input/Output: [(55 28 38 -37) -37]
Test Case: 470 | Input/Output: [(-28 90 -42 54) -42]
Test Case: 471 | Input/Output: [(70 -96 72 50) -96]
Test Case: 472 | Input/Output: [(-94 61 -32 36) -94]
Test Case: 473 | Input/Output: [(-84 -80 -1 8) -84]
Test Case: 474 | Input/Output: [(-91 -95 63 93) -95]
Test Case: 475 | Input/Output: [(-1 -86 62 62) -86]
Test Case: 476 | Input/Output: [(64 -79 47 1) -79]
Test Case: 477 | Input/Output: [(-100 -10 30 35) -100]
Test Case: 478 | Input/Output: [(-62 -57 -36 66) -62]
Test Case: 479 | Input/Output: [(-88 -20 9 -81) -88]
Test Case: 480 | Input/Output: [(-1 97 -70 -23) -70]
Test Case: 481 | Input/Output: [(-32 62 40 45) -32]
Test Case: 482 | Input/Output: [(6 -3 -68 80) -68]
Test Case: 483 | Input/Output: [(-6 -71 78 26) -71]
Test Case: 484 | Input/Output: [(27 -21 -16 90) -21]
Test Case: 485 | Input/Output: [(52 56 32 -22) -22]
Test Case: 486 | Input/Output: [(16 -60 100 -56) -60]
Test Case: 487 | Input/Output: [(81 4 -58 -97) -97]
Test Case: 488 | Input/Output: [(-45 -27 -46 46) -46]
Test Case: 489 | Input/Output: [(75 5 -7 -5) -7]
Test Case: 490 | Input/Output: [(-15 -65 100 61) -65]
Test Case: 491 | Input/Output: [(-45 -9 -63 90) -63]
Test Case: 492 | Input/Output: [(62 87 21 -97) -97]
Test Case: 493 | Input/Output: [(-30 20 68 80) -30]
Test Case: 494 | Input/Output: [(-74 43 57 -76) -76]
Test Case: 495 | Input/Output: [(92 -28 -73 77) -73]
Test Case: 496 | Input/Output: [(71 -51 52 -52) -52]
Test Case: 497 | Input/Output: [(-77 -95 40 80) -95]
Test Case: 498 | Input/Output: [(99 75 -40 -29) -40]
Test Case: 499 | Input/Output: [(-86 75 -1 10) -86]
Test Case: 500 | Input/Output: [(89 -13 8 -100) -100]
Test Case: 501 | Input/Output: [(89 -95 -45 68) -95]
Test Case: 502 | Input/Output: [(73 -88 57 50) -88]
Test Case: 503 | Input/Output: [(-28 89 57 -54) -54]
Test Case: 504 | Input/Output: [(76 -56 100 -7) -56]
Test Case: 505 | Input/Output: [(-40 -25 43 68) -40]
Test Case: 506 | Input/Output: [(-60 78 -11 14) -60]
Test Case: 507 | Input/Output: [(-90 36 66 54) -90]
Test Case: 508 | Input/Output: [(-38 11 49 73) -38]
Test Case: 509 | Input/Output: [(15 80 -47 -35) -47]
Test Case: 510 | Input/Output: [(-50 6 50 85) -50]
Test Case: 511 | Input/Output: [(59 -78 -28 -17) -78]
Test Case: 512 | Input/Output: [(-11 0 -28 24) -28]
Test Case: 513 | Input/Output: [(63 67 81 -100) -100]
Test Case: 514 | Input/Output: [(41 88 -37 -66) -66]
Test Case: 515 | Input/Output: [(41 69 -50 -31) -50]
Test Case: 516 | Input/Output: [(-47 -7 6 -70) -70]
Test Case: 517 | Input/Output: [(-42 51 -78 -76) -78]
Test Case: 518 | Input/Output: [(-60 71 97 -4) -60]
Test Case: 519 | Input/Output: [(-6 -62 42 24) -62]
Test Case: 520 | Input/Output: [(-30 -47 21 48) -47]
Test Case: 521 | Input/Output: [(-82 81 33 -44) -82]
Test Case: 522 | Input/Output: [(76 -25 84 32) -25]
Test Case: 523 | Input/Output: [(16 -81 79 -17) -81]
Test Case: 524 | Input/Output: [(-89 -66 46 -12) -89]
Test Case: 525 | Input/Output: [(-30 32 82 80) -30]
Test Case: 526 | Input/Output: [(34 -34 -21 -56) -56]
Test Case: 527 | Input/Output: [(74 -13 -66 -67) -67]
Test Case: 528 | Input/Output: [(-98 28 -20 97) -98]
Test Case: 529 | Input/Output: [(-96 -52 -31 20) -96]
Test Case: 530 | Input/Output: [(-27 -86 -22 -98) -98]
Test Case: 531 | Input/Output: [(-69 46 -19 77) -69]
Test Case: 532 | Input/Output: [(-20 -42 -29 100) -42]
Test Case: 533 | Input/Output: [(-27 -31 85 91) -31]
Test Case: 534 | Input/Output: [(61 25 7 7) 7]
Test Case: 535 | Input/Output: [(-60 -36 80 99) -60]
Test Case: 536 | Input/Output: [(-95 96 -98 97) -98]
Test Case: 537 | Input/Output: [(62 -51 -60 -13) -60]
Test Case: 538 | Input/Output: [(-43 25 -85 -67) -85]
Test Case: 539 | Input/Output: [(93 74 81 31) 31]
Test Case: 540 | Input/Output: [(-69 46 61 27) -69]
Test Case: 541 | Input/Output: [(-44 71 -15 13) -44]
Test Case: 542 | Input/Output: [(-32 26 -49 7) -49]
Test Case: 543 | Input/Output: [(-71 42 -37 -58) -71]
Test Case: 544 | Input/Output: [(-31 18 -28 -47) -47]
Test Case: 545 | Input/Output: [(98 2 -84 26) -84]
Test Case: 546 | Input/Output: [(63 -69 65 -38) -69]
Test Case: 547 | Input/Output: [(-29 -80 -76 32) -80]
Test Case: 548 | Input/Output: [(-48 -20 -88 91) -88]
Test Case: 549 | Input/Output: [(88 36 -69 -41) -69]
Test Case: 550 | Input/Output: [(84 67 -72 35) -72]
Test Case: 551 | Input/Output: [(-33 86 25 49) -33]
Test Case: 552 | Input/Output: [(41 91 3 23) 3]
Test Case: 553 | Input/Output: [(-16 -33 -25 13) -33]
Test Case: 554 | Input/Output: [(16 -19 -48 22) -48]
Test Case: 555 | Input/Output: [(5 -47 -14 15) -47]
Test Case: 556 | Input/Output: [(35 -13 22 72) -13]
Test Case: 557 | Input/Output: [(-2 26 -99 -8) -99]
Test Case: 558 | Input/Output: [(87 -34 -3 49) -34]
Test Case: 559 | Input/Output: [(70 57 -46 -45) -46]
Test Case: 560 | Input/Output: [(-96 -1 15 61) -96]
Test Case: 561 | Input/Output: [(-19 1 -9 -96) -96]
Test Case: 562 | Input/Output: [(-81 -73 37 -12) -81]
Test Case: 563 | Input/Output: [(-75 -84 -2 65) -84]
Test Case: 564 | Input/Output: [(11 99 -16 -85) -85]
Test Case: 565 | Input/Output: [(87 -7 -31 -91) -91]
Test Case: 566 | Input/Output: [(97 10 -60 -28) -60]
Test Case: 567 | Input/Output: [(-53 -6 9 -81) -81]
Test Case: 568 | Input/Output: [(17 88 30 63) 17]
Test Case: 569 | Input/Output: [(13 -33 94 21) -33]
Test Case: 570 | Input/Output: [(91 -59 -53 -91) -91]
Test Case: 571 | Input/Output: [(20 0 3 -97) -97]
Test Case: 572 | Input/Output: [(52 98 55 -2) -2]
Test Case: 573 | Input/Output: [(-18 -22 56 -37) -37]
Test Case: 574 | Input/Output: [(64 33 46 12) 12]
Test Case: 575 | Input/Output: [(-69 -59 58 -77) -77]
Test Case: 576 | Input/Output: [(-95 85 84 48) -95]
Test Case: 577 | Input/Output: [(-42 -81 -13 31) -81]
Test Case: 578 | Input/Output: [(41 -81 5 -4) -81]
Test Case: 579 | Input/Output: [(31 -11 17 16) -11]
Test Case: 580 | Input/Output: [(19 -71 -49 -24) -71]
Test Case: 581 | Input/Output: [(-65 89 -90 83) -90]
Test Case: 582 | Input/Output: [(30 -99 25 68) -99]
Test Case: 583 | Input/Output: [(28 -64 10 -22) -64]
Test Case: 584 | Input/Output: [(83 -7 -52 -60) -60]
Test Case: 585 | Input/Output: [(-69 -64 78 34) -69]
Test Case: 586 | Input/Output: [(13 -35 18 -59) -59]
Test Case: 587 | Input/Output: [(7 -84 -15 0) -84]
Test Case: 588 | Input/Output: [(-74 -61 -29 -99) -99]
Test Case: 589 | Input/Output: [(-6 67 53 -93) -93]
Test Case: 590 | Input/Output: [(-31 -63 85 48) -63]
Test Case: 591 | Input/Output: [(-70 11 42 27) -70]
Test Case: 592 | Input/Output: [(-29 -31 -52 93) -52]
Test Case: 593 | Input/Output: [(16 -9 -70 -42) -70]
Test Case: 594 | Input/Output: [(-75 -94 -83 31) -94]
Test Case: 595 | Input/Output: [(54 -15 -88 93) -88]
Test Case: 596 | Input/Output: [(20 39 90 -65) -65]
Test Case: 597 | Input/Output: [(-95 39 75 15) -95]
Test Case: 598 | Input/Output: [(-28 56 -65 -78) -78]
Test Case: 599 | Input/Output: [(-30 -59 23 57) -59]
Test Case: 600 | Input/Output: [(8 14 -50 -18) -50]
Test Case: 601 | Input/Output: [(24 54 14 -79) -79]
Test Case: 602 | Input/Output: [(65 93 -56 -31) -56]
Test Case: 603 | Input/Output: [(-71 5 -77 68) -77]
Test Case: 604 | Input/Output: [(27 5 -96 -31) -96]
Test Case: 605 | Input/Output: [(-43 58 78 36) -43]
Test Case: 606 | Input/Output: [(51 32 22 -49) -49]
Test Case: 607 | Input/Output: [(43 -31 71 -22) -31]
Test Case: 608 | Input/Output: [(-33 -4 50 57) -33]
Test Case: 609 | Input/Output: [(100 -53 -61 45) -61]
Test Case: 610 | Input/Output: [(71 99 24 17) 17]
Test Case: 611 | Input/Output: [(47 3 71 -79) -79]
Test Case: 612 | Input/Output: [(16 -20 44 -36) -36]
Test Case: 613 | Input/Output: [(33 18 64 42) 18]
Test Case: 614 | Input/Output: [(-8 25 37 -12) -12]
Test Case: 615 | Input/Output: [(88 -81 -59 6) -81]
Test Case: 616 | Input/Output: [(-63 -13 -81 -18) -81]
Test Case: 617 | Input/Output: [(-53 -29 95 42) -53]
Test Case: 618 | Input/Output: [(19 -2 -9 4) -9]
Test Case: 619 | Input/Output: [(51 34 -24 -79) -79]
Test Case: 620 | Input/Output: [(100 11 -43 10) -43]
Test Case: 621 | Input/Output: [(-67 11 72 -25) -67]
Test Case: 622 | Input/Output: [(-9 -8 0 -46) -46]
Test Case: 623 | Input/Output: [(20 -29 16 -3) -29]
Test Case: 624 | Input/Output: [(-80 -82 -36 -89) -89]
Test Case: 625 | Input/Output: [(42 35 1 46) 1]
Test Case: 626 | Input/Output: [(-18 51 56 -16) -18]
Test Case: 627 | Input/Output: [(-43 25 -91 -48) -91]
Test Case: 628 | Input/Output: [(49 -8 91 -43) -43]
Test Case: 629 | Input/Output: [(-100 -53 100 -48) -100]
Test Case: 630 | Input/Output: [(-76 48 -79 -58) -79]
Test Case: 631 | Input/Output: [(98 87 97 34) 34]
Test Case: 632 | Input/Output: [(-7 -23 69 -33) -33]
Test Case: 633 | Input/Output: [(67 39 72 -49) -49]
Test Case: 634 | Input/Output: [(-93 56 -83 24) -93]
Test Case: 635 | Input/Output: [(71 -35 -39 -84) -84]
Test Case: 636 | Input/Output: [(48 -95 61 -7) -95]
Test Case: 637 | Input/Output: [(58 -67 20 37) -67]
Test Case: 638 | Input/Output: [(26 -78 -33 2) -78]
Test Case: 639 | Input/Output: [(-20 -19 9 -44) -44]
Test Case: 640 | Input/Output: [(-12 78 -52 17) -52]
Test Case: 641 | Input/Output: [(46 57 5 35) 5]
Test Case: 642 | Input/Output: [(44 41 23 -92) -92]
Test Case: 643 | Input/Output: [(50 79 98 -60) -60]
Test Case: 644 | Input/Output: [(-93 -96 17 96) -96]
Test Case: 645 | Input/Output: [(58 -18 -38 -80) -80]
Test Case: 646 | Input/Output: [(-25 -33 -52 99) -52]
Test Case: 647 | Input/Output: [(-56 -69 46 24) -69]
Test Case: 648 | Input/Output: [(-87 -8 -22 1) -87]
Test Case: 649 | Input/Output: [(4 -26 -14 -58) -58]
Test Case: 650 | Input/Output: [(-38 -17 9 -7) -38]
Test Case: 651 | Input/Output: [(-73 -65 -20 2) -73]
Test Case: 652 | Input/Output: [(-75 -72 -81 26) -81]
Test Case: 653 | Input/Output: [(17 -75 -73 34) -75]
Test Case: 654 | Input/Output: [(-21 -66 -2 46) -66]
Test Case: 655 | Input/Output: [(51 -91 -67 61) -91]
Test Case: 656 | Input/Output: [(-57 40 61 -90) -90]
Test Case: 657 | Input/Output: [(-6 -49 -89 9) -89]
Test Case: 658 | Input/Output: [(-13 67 3 -48) -48]
Test Case: 659 | Input/Output: [(96 -39 30 33) -39]
Test Case: 660 | Input/Output: [(-74 -85 -58 91) -85]
Test Case: 661 | Input/Output: [(-47 -14 -72 68) -72]
Test Case: 662 | Input/Output: [(-16 -75 65 -99) -99]
Test Case: 663 | Input/Output: [(-87 -79 87 61) -87]
Test Case: 664 | Input/Output: [(-75 -94 -19 -94) -94]
Test Case: 665 | Input/Output: [(31 -25 -26 61) -26]
Test Case: 666 | Input/Output: [(-15 83 39 95) -15]
Test Case: 667 | Input/Output: [(16 -47 -29 -18) -47]
Test Case: 668 | Input/Output: [(-43 51 8 5) -43]
Test Case: 669 | Input/Output: [(77 71 66 72) 66]
Test Case: 670 | Input/Output: [(-22 51 35 94) -22]
Test Case: 671 | Input/Output: [(-31 2 -23 5) -31]
Test Case: 672 | Input/Output: [(-91 -58 -43 -51) -91]
Test Case: 673 | Input/Output: [(-62 -69 26 -28) -69]
Test Case: 674 | Input/Output: [(22 -92 42 52) -92]
Test Case: 675 | Input/Output: [(-28 74 -68 62) -68]
Test Case: 676 | Input/Output: [(-1 -17 3 96) -17]
Test Case: 677 | Input/Output: [(83 -96 -44 44) -96]
Test Case: 678 | Input/Output: [(86 -9 -70 -87) -87]
Test Case: 679 | Input/Output: [(9 -3 46 -34) -34]
Test Case: 680 | Input/Output: [(-57 -79 78 -14) -79]
Test Case: 681 | Input/Output: [(-91 -4 -72 48) -91]
Test Case: 682 | Input/Output: [(-37 86 96 58) -37]
Test Case: 683 | Input/Output: [(-5 -9 -68 -89) -89]
Test Case: 684 | Input/Output: [(-98 84 -47 -68) -98]
Test Case: 685 | Input/Output: [(67 -4 80 -62) -62]
Test Case: 686 | Input/Output: [(71 -80 72 74) -80]
Test Case: 687 | Input/Output: [(65 -16 3 57) -16]
Test Case: 688 | Input/Output: [(59 95 68 -95) -95]
Test Case: 689 | Input/Output: [(45 73 21 -1) -1]
Test Case: 690 | Input/Output: [(25 -61 79 -80) -80]
Test Case: 691 | Input/Output: [(-84 -85 -47 -78) -85]
Test Case: 692 | Input/Output: [(-86 -21 35 53) -86]
Test Case: 693 | Input/Output: [(7 75 72 11) 7]
Test Case: 694 | Input/Output: [(-30 50 -65 100) -65]
Test Case: 695 | Input/Output: [(16 2 21 -55) -55]
Test Case: 696 | Input/Output: [(-52 -73 88 93) -73]
Test Case: 697 | Input/Output: [(61 67 -41 -70) -70]
Test Case: 698 | Input/Output: [(18 4 -54 -84) -84]
Test Case: 699 | Input/Output: [(98 1 87 47) 1]
Test Case: 700 | Input/Output: [(-96 -32 -11 18) -96]
Test Case: 701 | Input/Output: [(54 94 80 0) 0]
Test Case: 702 | Input/Output: [(48 90 -83 89) -83]
Test Case: 703 | Input/Output: [(-66 0 99 42) -66]
Test Case: 704 | Input/Output: [(-9 -92 -11 72) -92]
Test Case: 705 | Input/Output: [(-86 -72 -73 78) -86]
Test Case: 706 | Input/Output: [(23 -38 80 -85) -85]
Test Case: 707 | Input/Output: [(-84 -66 34 84) -84]
Test Case: 708 | Input/Output: [(26 -48 64 -97) -97]
Test Case: 709 | Input/Output: [(61 -12 -20 77) -20]
Test Case: 710 | Input/Output: [(3 -88 -80 -12) -88]
Test Case: 711 | Input/Output: [(-81 98 41 59) -81]
Test Case: 712 | Input/Output: [(72 -34 -36 50) -36]
Test Case: 713 | Input/Output: [(40 -53 30 67) -53]
Test Case: 714 | Input/Output: [(-67 42 16 34) -67]
Test Case: 715 | Input/Output: [(64 -93 46 14) -93]
Test Case: 716 | Input/Output: [(87 -78 14 -32) -78]
Test Case: 717 | Input/Output: [(62 -53 41 -25) -53]
Test Case: 718 | Input/Output: [(-50 -51 -32 37) -51]
Test Case: 719 | Input/Output: [(-22 -32 51 91) -32]
Test Case: 720 | Input/Output: [(-22 78 28 -64) -64]
Test Case: 721 | Input/Output: [(-27 27 -76 40) -76]
Test Case: 722 | Input/Output: [(-44 3 58 -99) -99]
Test Case: 723 | Input/Output: [(-38 -77 -4 -5) -77]
Test Case: 724 | Input/Output: [(16 -25 -62 30) -62]
Test Case: 725 | Input/Output: [(87 -96 -79 47) -96]
Test Case: 726 | Input/Output: [(4 46 -76 95) -76]
Test Case: 727 | Input/Output: [(19 93 1 80) 1]
Test Case: 728 | Input/Output: [(17 57 42 33) 17]
Test Case: 729 | Input/Output: [(75 -43 -87 -30) -87]
Test Case: 730 | Input/Output: [(34 1 46 7) 1]
Test Case: 731 | Input/Output: [(74 -37 -49 -50) -50]
Test Case: 732 | Input/Output: [(-82 65 83 38) -82]
Test Case: 733 | Input/Output: [(79 1 71 -36) -36]
Test Case: 734 | Input/Output: [(-6 -45 -87 -100) -100]
Test Case: 735 | Input/Output: [(-19 9 -22 -17) -22]
Test Case: 736 | Input/Output: [(-8 -61 30 70) -61]
Test Case: 737 | Input/Output: [(48 -69 -7 11) -69]
Test Case: 738 | Input/Output: [(83 67 -2 6) -2]
Test Case: 739 | Input/Output: [(12 -33 -94 80) -94]
Test Case: 740 | Input/Output: [(47 96 98 93) 47]
Test Case: 741 | Input/Output: [(-32 -40 90 -4) -40]
Test Case: 742 | Input/Output: [(-76 -31 -41 2) -76]
Test Case: 743 | Input/Output: [(-59 71 -51 37) -59]
Test Case: 744 | Input/Output: [(-7 -43 -12 -87) -87]
Test Case: 745 | Input/Output: [(45 10 -23 -54) -54]
Test Case: 746 | Input/Output: [(-19 34 -51 75) -51]
Test Case: 747 | Input/Output: [(18 89 -5 35) -5]
Test Case: 748 | Input/Output: [(18 -59 60 43) -59]
Test Case: 749 | Input/Output: [(51 -77 -31 42) -77]
Test Case: 750 | Input/Output: [(66 -28 8 24) -28]
Test Case: 751 | Input/Output: [(-77 2 78 -13) -77]
Test Case: 752 | Input/Output: [(-87 -95 -24 79) -95]
Test Case: 753 | Input/Output: [(56 -24 -74 -29) -74]
Test Case: 754 | Input/Output: [(-28 -89 -92 73) -92]
Test Case: 755 | Input/Output: [(56 -19 -14 -30) -30]
Test Case: 756 | Input/Output: [(4 -47 -96 21) -96]
Test Case: 757 | Input/Output: [(-36 74 -71 -42) -71]
Test Case: 758 | Input/Output: [(-11 71 -53 25) -53]
Test Case: 759 | Input/Output: [(21 68 -54 -15) -54]
Test Case: 760 | Input/Output: [(43 -49 6 -61) -61]
Test Case: 761 | Input/Output: [(-59 69 5 -26) -59]
Test Case: 762 | Input/Output: [(9 63 70 5) 5]
Test Case: 763 | Input/Output: [(-17 -98 27 46) -98]
Test Case: 764 | Input/Output: [(14 -59 41 -94) -94]
Test Case: 765 | Input/Output: [(83 -6 37 22) -6]
Test Case: 766 | Input/Output: [(-87 30 62 8) -87]
Test Case: 767 | Input/Output: [(68 -95 -47 -85) -95]
Test Case: 768 | Input/Output: [(35 -47 -9 26) -47]
Test Case: 769 | Input/Output: [(65 52 -21 40) -21]
Test Case: 770 | Input/Output: [(74 -1 74 -5) -5]
Test Case: 771 | Input/Output: [(-34 9 -27 3) -34]
Test Case: 772 | Input/Output: [(-76 -82 -7 27) -82]
Test Case: 773 | Input/Output: [(98 -80 -20 -82) -82]
Test Case: 774 | Input/Output: [(-9 75 -70 -67) -70]
Test Case: 775 | Input/Output: [(81 -9 65 26) -9]
Test Case: 776 | Input/Output: [(-36 -41 66 -40) -41]
Test Case: 777 | Input/Output: [(-5 -98 38 -87) -98]
Test Case: 778 | Input/Output: [(89 -46 -50 -70) -70]
Test Case: 779 | Input/Output: [(-26 -92 69 -62) -92]
Test Case: 780 | Input/Output: [(-92 -18 76 93) -92]
Test Case: 781 | Input/Output: [(92 40 -54 -24) -54]
Test Case: 782 | Input/Output: [(-31 63 -35 81) -35]
Test Case: 783 | Input/Output: [(-87 41 -12 8) -87]
Test Case: 784 | Input/Output: [(31 25 60 -95) -95]
Test Case: 785 | Input/Output: [(-75 -72 34 47) -75]
Test Case: 786 | Input/Output: [(35 -64 -41 -13) -64]
Test Case: 787 | Input/Output: [(82 70 45 31) 31]
Test Case: 788 | Input/Output: [(53 88 -56 -65) -65]
Test Case: 789 | Input/Output: [(69 79 34 55) 34]
Test Case: 790 | Input/Output: [(-25 -8 96 32) -25]
Test Case: 791 | Input/Output: [(-62 -98 50 72) -98]
Test Case: 792 | Input/Output: [(54 37 -1 -44) -44]
Test Case: 793 | Input/Output: [(-78 78 -9 -19) -78]
Test Case: 794 | Input/Output: [(30 -83 89 46) -83]
Test Case: 795 | Input/Output: [(-80 -13 28 -6) -80]
Test Case: 796 | Input/Output: [(21 53 25 -63) -63]
Test Case: 797 | Input/Output: [(85 -12 -39 -7) -39]
Test Case: 798 | Input/Output: [(70 34 -15 -70) -70]
Test Case: 799 | Input/Output: [(-54 -35 60 45) -54]
Test Case: 800 | Input/Output: [(19 18 87 37) 18]
Test Case: 801 | Input/Output: [(-29 -34 -90 19) -90]
Test Case: 802 | Input/Output: [(47 -29 2 -77) -77]
Test Case: 803 | Input/Output: [(-6 -19 63 -80) -80]
Test Case: 804 | Input/Output: [(11 -82 95 -81) -82]
Test Case: 805 | Input/Output: [(-51 -57 -7 87) -57]
Test Case: 806 | Input/Output: [(-41 34 -35 40) -41]
Test Case: 807 | Input/Output: [(86 -86 -76 70) -86]
Test Case: 808 | Input/Output: [(-73 -60 60 -69) -73]
Test Case: 809 | Input/Output: [(-19 65 59 -79) -79]
Test Case: 810 | Input/Output: [(-63 -34 -82 57) -82]
Test Case: 811 | Input/Output: [(39 12 42 59) 12]
Test Case: 812 | Input/Output: [(-7 -27 41 97) -27]
Test Case: 813 | Input/Output: [(-76 36 -71 -64) -76]
Test Case: 814 | Input/Output: [(-96 51 -35 -76) -96]
Test Case: 815 | Input/Output: [(-77 70 -93 -14) -93]
Test Case: 816 | Input/Output: [(-68 16 -10 31) -68]
Test Case: 817 | Input/Output: [(-1 57 84 19) -1]
Test Case: 818 | Input/Output: [(-53 24 -97 47) -97]
Test Case: 819 | Input/Output: [(42 11 -45 5) -45]
Test Case: 820 | Input/Output: [(91 -50 12 82) -50]
Test Case: 821 | Input/Output: [(79 -91 22 -93) -93]
Test Case: 822 | Input/Output: [(-58 0 -81 -12) -81]
Test Case: 823 | Input/Output: [(-47 93 -82 -73) -82]
Test Case: 824 | Input/Output: [(42 31 98 67) 31]
Test Case: 825 | Input/Output: [(-22 99 46 -76) -76]
Test Case: 826 | Input/Output: [(22 18 -63 62) -63]
Test Case: 827 | Input/Output: [(80 43 66 64) 43]
Test Case: 828 | Input/Output: [(-48 -64 -40 -72) -72]
Test Case: 829 | Input/Output: [(-81 -70 -97 -56) -97]
Test Case: 830 | Input/Output: [(-73 33 -51 -9) -73]
Test Case: 831 | Input/Output: [(49 15 -78 -89) -89]
Test Case: 832 | Input/Output: [(-97 -64 -83 99) -97]
Test Case: 833 | Input/Output: [(28 -93 64 -82) -93]
Test Case: 834 | Input/Output: [(-30 78 12 18) -30]
Test Case: 835 | Input/Output: [(-45 -30 42 -21) -45]
Test Case: 836 | Input/Output: [(52 -90 -50 -83) -90]
Test Case: 837 | Input/Output: [(-79 43 9 -33) -79]
Test Case: 838 | Input/Output: [(10 84 18 -30) -30]
Test Case: 839 | Input/Output: [(72 90 6 -21) -21]
Test Case: 840 | Input/Output: [(-56 -11 27 -53) -56]
Test Case: 841 | Input/Output: [(-46 -59 87 12) -59]
Test Case: 842 | Input/Output: [(-85 -43 1 -23) -85]
Test Case: 843 | Input/Output: [(74 -61 -26 -13) -61]
Test Case: 844 | Input/Output: [(-42 63 94 -100) -100]
Test Case: 845 | Input/Output: [(57 -3 75 15) -3]
Test Case: 846 | Input/Output: [(27 19 79 2) 2]
Test Case: 847 | Input/Output: [(-41 -71 -67 -49) -71]
Test Case: 848 | Input/Output: [(-9 41 16 -91) -91]
Test Case: 849 | Input/Output: [(20 -54 -66 99) -66]
Test Case: 850 | Input/Output: [(86 64 34 47) 34]
Test Case: 851 | Input/Output: [(-17 4 -25 -34) -34]
Test Case: 852 | Input/Output: [(73 -19 25 9) -19]
Test Case: 853 | Input/Output: [(16 44 -70 21) -70]
Test Case: 854 | Input/Output: [(-65 -15 -89 -37) -89]
Test Case: 855 | Input/Output: [(-75 -79 91 84) -79]
Test Case: 856 | Input/Output: [(10 -98 -38 -28) -98]
Test Case: 857 | Input/Output: [(-51 -54 22 23) -54]
Test Case: 858 | Input/Output: [(-52 16 -97 -68) -97]
Test Case: 859 | Input/Output: [(-55 77 -86 -19) -86]
Test Case: 860 | Input/Output: [(-24 63 -52 20) -52]
Test Case: 861 | Input/Output: [(-68 -54 68 -7) -68]
Test Case: 862 | Input/Output: [(-93 -1 -61 -56) -93]
Test Case: 863 | Input/Output: [(96 -5 -75 -19) -75]
Test Case: 864 | Input/Output: [(-18 -59 42 -68) -68]
Test Case: 865 | Input/Output: [(33 -70 68 33) -70]
Test Case: 866 | Input/Output: [(-79 -60 84 -63) -79]
Test Case: 867 | Input/Output: [(96 76 27 -11) -11]
Test Case: 868 | Input/Output: [(-88 5 -51 69) -88]
Test Case: 869 | Input/Output: [(-91 100 -95 -89) -95]
Test Case: 870 | Input/Output: [(-24 91 -1 39) -24]
Test Case: 871 | Input/Output: [(-43 62 47 11) -43]
Test Case: 872 | Input/Output: [(54 33 85 48) 33]
Test Case: 873 | Input/Output: [(63 -27 -74 40) -74]
Test Case: 874 | Input/Output: [(90 -69 59 -71) -71]
Test Case: 875 | Input/Output: [(-36 -91 59 -42) -91]
Test Case: 876 | Input/Output: [(5 -56 74 -40) -56]
Test Case: 877 | Input/Output: [(-36 40 -82 -26) -82]
Test Case: 878 | Input/Output: [(-63 -27 73 68) -63]
Test Case: 879 | Input/Output: [(-10 -83 -77 80) -83]
Test Case: 880 | Input/Output: [(-6 13 27 90) -6]
Test Case: 881 | Input/Output: [(36 90 4 83) 4]
Test Case: 882 | Input/Output: [(28 -88 24 33) -88]
Test Case: 883 | Input/Output: [(-84 -99 49 74) -99]
Test Case: 884 | Input/Output: [(62 -65 61 -5) -65]
Test Case: 885 | Input/Output: [(-2 -87 -6 -95) -95]
Test Case: 886 | Input/Output: [(18 -70 50 1) -70]
Test Case: 887 | Input/Output: [(-21 -70 87 -23) -70]
Test Case: 888 | Input/Output: [(-72 -48 34 -98) -98]
Test Case: 889 | Input/Output: [(-39 70 -19 33) -39]
Test Case: 890 | Input/Output: [(-93 88 -52 68) -93]
Test Case: 891 | Input/Output: [(-65 40 -1 88) -65]
Test Case: 892 | Input/Output: [(-60 -8 -63 91) -63]
Test Case: 893 | Input/Output: [(42 -95 61 -69) -95]
Test Case: 894 | Input/Output: [(53 27 78 -59) -59]
Test Case: 895 | Input/Output: [(71 33 -31 44) -31]
Test Case: 896 | Input/Output: [(-18 -89 13 95) -89]
Test Case: 897 | Input/Output: [(-75 -69 -35 -50) -75]
Test Case: 898 | Input/Output: [(75 30 40 19) 19]
Test Case: 899 | Input/Output: [(17 96 55 21) 17]
Test Case: 900 | Input/Output: [(-20 -12 96 -37) -37]
Test Case: 901 | Input/Output: [(-82 -80 26 -77) -82]
Test Case: 902 | Input/Output: [(42 -97 -30 74) -97]
Test Case: 903 | Input/Output: [(-46 -10 -72 35) -72]
Test Case: 904 | Input/Output: [(29 70 32 44) 29]
Test Case: 905 | Input/Output: [(-55 -1 -100 -75) -100]
Test Case: 906 | Input/Output: [(37 90 -74 -88) -88]
Test Case: 907 | Input/Output: [(74 -66 35 -22) -66]
Test Case: 908 | Input/Output: [(-80 96 -77 -3) -80]
Test Case: 909 | Input/Output: [(-56 -56 76 54) -56]
Test Case: 910 | Input/Output: [(-61 -19 -51 75) -61]
Test Case: 911 | Input/Output: [(15 -14 -16 -75) -75]
Test Case: 912 | Input/Output: [(38 90 43 21) 21]
Test Case: 913 | Input/Output: [(-99 61 77 94) -99]
Test Case: 914 | Input/Output: [(6 -7 -91 -18) -91]
Test Case: 915 | Input/Output: [(-9 -69 -40 65) -69]
Test Case: 916 | Input/Output: [(-25 19 -62 -3) -62]
Test Case: 917 | Input/Output: [(22 -44 -71 -74) -74]
Test Case: 918 | Input/Output: [(52 8 15 77) 8]
Test Case: 919 | Input/Output: [(-65 44 -30 -1) -65]
Test Case: 920 | Input/Output: [(-28 32 -5 18) -28]
Test Case: 921 | Input/Output: [(49 -50 -94 59) -94]
Test Case: 922 | Input/Output: [(6 41 -41 -89) -89]
Test Case: 923 | Input/Output: [(46 -61 -16 93) -61]
Test Case: 924 | Input/Output: [(59 36 -87 22) -87]
Test Case: 925 | Input/Output: [(44 -26 43 -1) -26]
Test Case: 926 | Input/Output: [(-13 50 88 90) -13]
Test Case: 927 | Input/Output: [(34 68 89 -54) -54]
Test Case: 928 | Input/Output: [(-95 -82 -24 93) -95]
Test Case: 929 | Input/Output: [(-40 47 79 70) -40]
Test Case: 930 | Input/Output: [(-32 -20 67 -88) -88]
Test Case: 931 | Input/Output: [(2 14 2 -70) -70]
Test Case: 932 | Input/Output: [(-90 -96 -52 -71) -96]
Test Case: 933 | Input/Output: [(-43 73 71 90) -43]
Test Case: 934 | Input/Output: [(41 72 -43 42) -43]
Test Case: 935 | Input/Output: [(45 -18 75 -38) -38]
Test Case: 936 | Input/Output: [(-42 -96 39 -28) -96]
Test Case: 937 | Input/Output: [(-33 -45 -43 35) -45]
Test Case: 938 | Input/Output: [(77 -98 85 40) -98]
Test Case: 939 | Input/Output: [(-24 -85 -21 14) -85]
Test Case: 940 | Input/Output: [(-62 -23 78 53) -62]
Test Case: 941 | Input/Output: [(81 73 -68 -44) -68]
Test Case: 942 | Input/Output: [(-6 45 -92 -55) -92]
Test Case: 943 | Input/Output: [(-52 76 6 10) -52]
Test Case: 944 | Input/Output: [(0 -96 -75 57) -96]
Test Case: 945 | Input/Output: [(-75 -28 -69 58) -75]
Test Case: 946 | Input/Output: [(0 -58 20 -100) -100]
Test Case: 947 | Input/Output: [(-26 32 -53 82) -53]
Test Case: 948 | Input/Output: [(-36 3 -14 -32) -36]
Test Case: 949 | Input/Output: [(-36 81 12 95) -36]
Test Case: 950 | Input/Output: [(84 -22 -84 31) -84]
Test Case: 951 | Input/Output: [(-93 -25 15 62) -93]
Test Case: 952 | Input/Output: [(53 54 30 53) 30]
Test Case: 953 | Input/Output: [(57 -25 -94 2) -94]
Test Case: 954 | Input/Output: [(-93 15 38 -49) -93]
Test Case: 955 | Input/Output: [(51 -88 50 -20) -88]
Test Case: 956 | Input/Output: [(-31 60 -91 -70) -91]
Test Case: 957 | Input/Output: [(94 68 79 -54) -54]
Test Case: 958 | Input/Output: [(-57 24 55 18) -57]
Test Case: 959 | Input/Output: [(-66 80 44 63) -66]
Test Case: 960 | Input/Output: [(-79 -30 -56 -14) -79]
Test Case: 961 | Input/Output: [(-95 -3 -1 -70) -95]
Test Case: 962 | Input/Output: [(-26 -10 -77 31) -77]
Test Case: 963 | Input/Output: [(90 68 -47 -68) -68]
Test Case: 964 | Input/Output: [(74 29 44 -99) -99]
Test Case: 965 | Input/Output: [(23 -10 -31 69) -31]
Test Case: 966 | Input/Output: [(92 50 -73 -38) -73]
Test Case: 967 | Input/Output: [(60 83 64 -5) -5]
Test Case: 968 | Input/Output: [(-89 17 28 77) -89]
Test Case: 969 | Input/Output: [(11 91 -36 -44) -44]
Test Case: 970 | Input/Output: [(-25 -89 -64 -54) -89]
Test Case: 971 | Input/Output: [(-35 22 -97 19) -97]
Test Case: 972 | Input/Output: [(65 -83 -67 -75) -83]
Test Case: 973 | Input/Output: [(92 -11 88 -44) -44]
Test Case: 974 | Input/Output: [(-68 75 -40 -93) -93]
Test Case: 975 | Input/Output: [(-9 -75 65 -61) -75]
Test Case: 976 | Input/Output: [(26 -40 -94 -67) -94]
Test Case: 977 | Input/Output: [(63 -88 69 -62) -88]
Test Case: 978 | Input/Output: [(100 -58 -63 -25) -63]
Test Case: 979 | Input/Output: [(-27 87 -8 -54) -54]
Test Case: 980 | Input/Output: [(-67 -37 -82 60) -82]
Test Case: 981 | Input/Output: [(-94 74 -95 -39) -95]
Test Case: 982 | Input/Output: [(-82 -90 -40 -40) -90]
Test Case: 983 | Input/Output: [(88 -43 -6 -48) -48]
Test Case: 984 | Input/Output: [(100 38 -81 -89) -89]
Test Case: 985 | Input/Output: [(72 62 -12 98) -12]
Test Case: 986 | Input/Output: [(76 46 91 -71) -71]
Test Case: 987 | Input/Output: [(-70 81 53 54) -70]
Test Case: 988 | Input/Output: [(-63 7 -27 71) -63]
Test Case: 989 | Input/Output: [(-32 11 5 79) -32]
Test Case: 990 | Input/Output: [(-78 -73 -12 -62) -78]
Test Case: 991 | Input/Output: [(-64 30 14 -52) -64]
Test Case: 992 | Input/Output: [(-90 -4 49 -97) -97]
Test Case: 993 | Input/Output: [(36 89 92 27) 27]
Test Case: 994 | Input/Output: [(70 -51 4 37) -51]
Test Case: 995 | Input/Output: [(-49 -49 23 23) -49]
Test Case: 996 | Input/Output: [(-1 -39 -51 -77) -77]
Test Case: 997 | Input/Output: [(11 -97 -78 75) -97]
Test Case: 998 | Input/Output: [(71 11 -99 -81) -99]
Test Case: 999 | Input/Output: [(93 85 -39 -92) -92]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 117 -32 -95 -11 -114 65 -46 -9 127 -119 98 32 -80 107 60 127
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-62 10 -62 -62] -62] [[-4 -34 -4 -4] -34] [[97 97 58 97] 58] [[-47 -47 21 -47] -47] [[78 78 78 -27] -27] [[1 -89 1 1] -89] [[51 51 51 46] 46] [[3 -79 3 3] -79] [[80 -68 80 80] -68] [[48 48 48 5] 5] [(-4 -4 -4 -4) -4] [(75 75 75 75) 75] [(20 20 20 20) 20] [(-78 -78 -78 -78) -78] [(-92 -92 -92 -92) -92] [(26 82 47 67) 26] [(3 23 76 29) 3] [(17 22 15 49) 15] [(72 73 22 69) 22] [(13 42 46 94) 13] [(54 46 11 43) 11] [(5 89 62 63) 5] [(65 90 87 36) 36] [(70 91 87 9) 9] [(20 15 30 46) 15] [(86 72 59 84) 59] [(70 30 40 32) 30] [(62 29 24 44) 24] [(40 1 23 31) 1] [(98 19 57 15) 15] [(31 94 19 46) 19] [(91 43 77 57) 43] [(42 59 69 81) 42] [(56 63 73 77) 56] [(87 10 100 72) 10] [(-17 -46 4 71) -46] [(-89 63 -21 96) -89] [(-18 96 60 91) -18] [(-20 -93 28 -79) -93] [(34 -97 43 -72) -97] [(-69 -24 7 5) -69] [(20 -97 57 -85) -97] [(44 38 48 -40) -40] [(-72 -36 -13 34) -72] [(-6 -34 43 47) -34] [(30 -22 -59 67) -59] [(-62 44 -96 36) -96] [(73 -48 -26 29) -48] [(55 19 27 -65) -65] [(-43 89 -49 -71) -71] [(-14 -69 71 33) -69] [(-6 -85 -87 32) -87] [(-46 -97 -69 -89) -97] [(37 -24 56 71) -24] [(97 42 11 -87) -87] [(91 -99 63 -37) -99] [(83 92 36 95) 36] [(-94 62 -7 11) -94] [(-11 70 -68 -22) -68] [(-67 -18 -2 28) -67] [(48 54 96 -27) -27] [(87 -74 85 -12) -74] [(46 -19 11 -41) -41] [(-81 -19 35 -41) -81] [(48 93 84 -100) -100] [(-23 89 3 -27) -27] [(-67 -40 38 -69) -69] [(-34 -11 -6 -15) -34] [(-81 78 -86 -43) -86] [(21 8 -72 16) -72] [(49 -49 82 -7) -49] [(-24 -63 -58 -4) -63] [(96 -52 -52 65) -52] [(-27 -54 -54 -3) -54] [(99 3 99 47) 3] [(-3 53 -66 77) -66] [(-87 -8 -4 1) -87] [(2 97 94 55) 2] [(86 -85 91 72) -85] [(-85 -43 85 25) -85] [(-69 -41 21 74) -69] [(67 -49 -69 -79) -79] [(-47 63 34 21) -47] [(45 96 -93 49) -93] [(79 42 65 -35) -35] [(35 -79 -20 16) -79] [(23 -87 100 -94) -94] [(64 64 -44 -38) -44] [(-34 -6 32 -59) -59] [(-26 67 20 59) -26] [(47 60 54 67) 47] [(-1 86 72 -21) -21] [(49 22 -32 -84) -84] [(32 -26 5 -14) -26] [(53 37 6 -87) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -62                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 78                 
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 51                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 48                 
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 82                 
Correct output: 3                   | Program output: 23                 
Correct output: 15                  | Program output: 22                 
Correct output: 22                  | Program output: 73                 
Correct output: 13                  | Program output: 42                 
Correct output: 11                  | Program output: 46                 
Correct output: 5                   | Program output: 89                 
Correct output: 36                  | Program output: 90                 
Correct output: 9                   | Program output: 91                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 72                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 19                 
Correct output: 19                  | Program output: 94                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 59                 
Correct output: 56                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: 63                 
Correct output: -18                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 38                 
Correct output: -72                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -22                
Correct output: -96                 | Program output: 44                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: 19                 
Correct output: -71                 | Program output: 89                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: 42                 
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 92                 
Correct output: -94                 | Program output: 62                 
Correct output: -68                 | Program output: 70                 
Correct output: -67                 | Program output: -18                
Correct output: -27                 | Program output: 54                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -19                
Correct output: -81                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -27                 | Program output: 89                 
Correct output: -69                 | Program output: -40                
Correct output: -34                 | Program output: -11                
Correct output: -86                 | Program output: 78                 
Correct output: -72                 | Program output: 8                  
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: 53                 
Correct output: -87                 | Program output: -8                 
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -43                
Correct output: -69                 | Program output: -41                
Correct output: -79                 | Program output: -49                
Correct output: -47                 | Program output: 63                 
Correct output: -93                 | Program output: 96                 
Correct output: -35                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -87                
Correct output: -44                 | Program output: 64                 
Correct output: -59                 | Program output: -6                 
Correct output: -26                 | Program output: 67                 
Correct output: 47                  | Program output: 60                 
Correct output: -21                 | Program output: 86                 
Correct output: -84                 | Program output: 22                 
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (in2 print_integer exec_when () boolean_pop integer_max boolean_flush exec_dup_times (in1 exec_dup_times (boolean_rot) in1 integer_lt boolean_dup_items integer_lt) boolean_and integer_stackdepth boolean_not exec_swap (exec_dup_times (exec_do*times (exec_flush integer_dup_times boolean_or boolean_swap exec_do*while (in1) exec_shove (boolean_and exec_when (boolean_yank integer_gte) boolean_dup_items boolean_and) exec_k_when_autoconstructing (boolean_dup_items boolean_frominteger) (exec_y_when_autoconstructing (exec_dup_items boolean_and exec_if (boolean_and boolean_or print_boolean exec_y_when_autoconstructing (boolean_dup_times exec_yankdup integer_yank) boolean_not print_integer) (integer_yank integer_gte exec_do*range (boolean_eq exec_if () (integer_flush integer_div boolean_empty) exec_eq exec_if (exec_empty integer_fromboolean boolean_empty boolean_invert_first_then_and exec_when () in4 integer_div integer_inc boolean_stackdepth integer_dup_times exec_k (integer_yank) () in3 integer_dup exec_yank exec_dup_times () integer_div integer_div boolean_shove) (integer_empty integer_fromboolean tagged_272) integer_stackdepth))))))) ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 108
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 2, :instruction integer_yank} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction tagged_272} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (in2 print_integer exec_when () boolean_pop integer_max boolean_flush exec_dup_times (in1 exec_dup_times (boolean_rot) in1 integer_lt boolean_dup_items integer_lt) boolean_and integer_stackdepth boolean_not exec_swap (exec_dup_times (exec_do*times (exec_flush integer_dup_times boolean_or boolean_swap exec_do*while (in1) exec_shove (boolean_and exec_when (boolean_yank integer_gte) boolean_dup_items boolean_and) exec_k_when_autoconstructing (boolean_dup_items boolean_frominteger) (exec_y_when_autoconstructing (exec_dup_items boolean_and exec_if (boolean_and boolean_or print_boolean exec_y_when_autoconstructing (boolean_dup_times exec_yankdup integer_yank) boolean_not print_integer) (integer_yank integer_gte exec_do*range (boolean_eq exec_if () (integer_flush integer_div boolean_empty) exec_eq exec_if (exec_empty integer_fromboolean boolean_empty boolean_invert_first_then_and exec_when () in4 integer_div integer_inc boolean_stackdepth integer_dup_times exec_k (integer_yank) () in3 integer_dup exec_yank exec_dup_times () integer_div integer_div boolean_shove) (integer_empty integer_fromboolean tagged_272) integer_stackdepth))))))) ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 108
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 5 4 3 14 2 2 6 6 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (6 5 4 3 14 2 2 6 6 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_724} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_347} {:close 1, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_pop} {:close 0, :instruction tagged_58} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap})
Best program: (in2 exec_when () boolean_invert_first_then_and integer_eq print_integer print_boolean exec_while () boolean_invert_second_then_and exec_y (tag_integer_724 print_boolean exec_k (exec_pop (exec_y () exec_stackdepth integer_dec) boolean_rot exec_do*while () exec_do*count (exec_dup (tagged_347 integer_add) exec_shove (exec_yankdup exec_yank) integer_inc exec_do*range (integer_empty)) integer_dup_times) (integer_lte) integer_empty exec_do*times () exec_while (integer_rot exec_s (exec_noop exec_do*range () integer_lte boolean_xor integer_max print_integer integer_mult integer_dup exec_flush) (integer_sub exec_do*range (boolean_not) integer_pop) () tagged_58 exec_do*while (boolean_swap))))
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 51
Size: 72
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 9.95
Median total errors in population: 10
Error averages by case: (0.994 0.995 0.996 0.997 0.986 0.998 0.998 0.994 0.994 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.789
Average program size in population (points): 68.473
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466114
--- Timings ---
Current time: 1559583197201 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.7 seconds, 26.5%
Fitness Testing:      1.9 seconds, 69.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 631
Test mean error for best: 0.63100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -62                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 78                 
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 51                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 48                 
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 82                 
Correct output: 3                   | Program output: 23                 
Correct output: 15                  | Program output: 22                 
Correct output: 22                  | Program output: 73                 
Correct output: 13                  | Program output: 42                 
Correct output: 11                  | Program output: 46                 
Correct output: 5                   | Program output: 89                 
Correct output: 36                  | Program output: 90                 
Correct output: 9                   | Program output: 91                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 72                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 19                 
Correct output: 19                  | Program output: 94                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 59                 
Correct output: 56                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: 63                 
Correct output: -18                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 38                 
Correct output: -72                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -22                
Correct output: -96                 | Program output: 44                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: 19                 
Correct output: -71                 | Program output: 89                 
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -85                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: 42                 
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 92                 
Correct output: -94                 | Program output: 62                 
Correct output: -68                 | Program output: 70                 
Correct output: -67                 | Program output: -18                
Correct output: -27                 | Program output: 54                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -19                
Correct output: -81                 | Program output: -19                
Correct output: -100                | Program output: 93                 
Correct output: -27                 | Program output: 89                 
Correct output: -69                 | Program output: -40                
Correct output: -34                 | Program output: -11                
Correct output: -86                 | Program output: 78                 
Correct output: -72                 | Program output: 8                  
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: 53                 
Correct output: -87                 | Program output: -8                 
Correct output: 2                   | Program output: 97                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -43                
Correct output: -69                 | Program output: -41                
Correct output: -79                 | Program output: -49                
Correct output: -47                 | Program output: 63                 
Correct output: -93                 | Program output: 96                 
Correct output: -35                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -87                
Correct output: -44                 | Program output: 64                 
Correct output: -59                 | Program output: -6                 
Correct output: -26                 | Program output: 67                 
Correct output: 47                  | Program output: 60                 
Correct output: -21                 | Program output: 86                 
Correct output: -84                 | Program output: 22                 
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: 37                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_284} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq})
Lexicase best program: (in3 in1 print_integer integer_mod boolean_invert_second_then_and integer_stackdepth exec_if (exec_y (integer_fromboolean tagged_284 exec_pop (exec_yank integer_shove integer_lt integer_empty)) in4 integer_swap exec_if (boolean_empty boolean_rot integer_dup_items) (integer_pop exec_yankdup integer_rot integer_eq)) ())
Lexicase best errors: [0 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_284} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 2, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq})
Zero cases best program: (in3 in1 print_integer integer_mod boolean_invert_second_then_and integer_stackdepth exec_if (exec_y (integer_fromboolean tagged_284 exec_pop (exec_yank integer_shove integer_lt integer_empty)) in4 integer_swap exec_if (boolean_empty boolean_rot integer_dup_items) (integer_pop exec_yankdup integer_rot integer_eq)) ())
Zero cases best errors: [0 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 897 298 110 299 249 110 110 299 550)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (110 897 298 110 299 249 110 110 299 550)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_294} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_206} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_div})
Best program: (in2 print_integer exec_pop (print_boolean) boolean_dup_times exec_do*count (exec_do*range (exec_yank exec_k (in3 integer_sub) (integer_shove boolean_dup tagged_294 boolean_pop exec_pop (exec_rot (exec_shove (boolean_invert_first_then_and tagged_206 boolean_dup in1 boolean_empty integer_div)) () ())))))
Errors: [1 0 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 35
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.968
Median total errors in population: 7
Error averages by case: (0.89 0.103 0.702 0.89 0.701 0.751 0.89 0.89 0.701 0.45)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.778
Average program size in population (points): 73.042
Average percent parens in population: 0.287
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.513
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 908516
--- Timings ---
Current time: 1559583199790 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 41.8%
Fitness Testing:      2.7 seconds, 47.3%
Report:               0.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -4                 
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: 3                  
Correct output: -68                 | Program output: 80                 
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 47                 
Correct output: 3                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 46                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 30                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 57                 
Correct output: 42                  | Program output: 69                 
Correct output: 56                  | Program output: 73                 
Correct output: 10                  | Program output: 72                 
Correct output: -46                 | Program output: 4                  
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: 60                 
Correct output: -93                 | Program output: -79                
Correct output: -97                 | Program output: -72                
Correct output: -69                 | Program output: 5                  
Correct output: -97                 | Program output: -85                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -13                
Correct output: -34                 | Program output: 43                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 33                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -89                
Correct output: -24                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -37                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -2                 
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -7                 
Correct output: -63                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 47                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -4                 
Correct output: 2                   | Program output: 55                 
Correct output: -85                 | Program output: 72                 
Correct output: -85                 | Program output: 25                 
Correct output: -69                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 20                 
Correct output: 47                  | Program output: 54                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (exec_stackdepth integer_shove boolean_swap) boolean_or)) (exec_do*while () exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ()))) ()) () ()))) ()) ()))) ()) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 140
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (exec_stackdepth integer_shove boolean_swap) boolean_or)) (exec_do*while () exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ()))) ()) () ()))) ()) ()))) ()) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 140
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 5 5 5 928 522 402 5 5 399)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (402 5 5 5 928 522 402 5 5 399)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (exec_stackdepth integer_shove boolean_swap) boolean_or)) (exec_do*while () exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ()))) ()) () ()))) ()) ()))) ()) ()))
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 91
Size: 140
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 7.322
Median total errors in population: 8
Error averages by case: (0.598 0.995 0.995 0.995 0.072 0.478 0.598 0.995 0.995 0.601)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.896
Average program size in population (points): 54.553
Average percent parens in population: 0.273
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0305
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1371210
--- Timings ---
Current time: 1559583203032 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.8 seconds, 53.6%
Fitness Testing:      3.3 seconds, 36.9%
Report:               0.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -4                 
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: 3                  
Correct output: -68                 | Program output: 80                 
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 47                 
Correct output: 3                   | Program output: 29                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 46                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 30                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 57                 
Correct output: 42                  | Program output: 69                 
Correct output: 56                  | Program output: 73                 
Correct output: 10                  | Program output: 72                 
Correct output: -46                 | Program output: 4                  
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: 60                 
Correct output: -93                 | Program output: -79                
Correct output: -97                 | Program output: -72                
Correct output: -69                 | Program output: 5                  
Correct output: -97                 | Program output: -85                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -13                
Correct output: -34                 | Program output: 43                 
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: 33                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -89                
Correct output: -24                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -37                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -2                 
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -12                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -7                 
Correct output: -63                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 47                 
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -4                 
Correct output: 2                   | Program output: 55                 
Correct output: -85                 | Program output: 72                 
Correct output: -85                 | Program output: 25                 
Correct output: -69                 | Program output: 21                 
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 20                 
Correct output: 47                  | Program output: 54                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -14                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (exec_stackdepth integer_shove boolean_swap) boolean_or)) (exec_do*while () exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (boolean_dup_items in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ()))) ()) () ()))) ()) ()))) ()) ()))
Lexicase best errors: [1 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 140
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (exec_stackdepth integer_shove boolean_swap) boolean_or)) (exec_do*while () exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (boolean_dup_items in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ()))) ()) () ()))) ()) ()))) ()) ()))
Zero cases best errors: [1 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 140
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 214 100 100 533 540 533 214 877 519)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (213 214 100 100 533 540 533 214 877 519)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (exec_stackdepth integer_shove boolean_swap) boolean_or)) (exec_do*while () exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ()))) ()) () ()))) ()) ()))) ()) ()))
Errors: [1 1 1 1 0 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 91
Size: 140
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 6.157
Median total errors in population: 6
Error averages by case: (0.787 0.786 0.9 0.9 0.467 0.46 0.467 0.786 0.123 0.481)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.866
Average program size in population (points): 106.419
Average percent parens in population: 0.319
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.18175
Median age in population: 4.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1709273
--- Timings ---
Current time: 1559583206031 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.0 seconds, 59.4%
Fitness Testing:      3.7 seconds, 31.4%
Report:               1.0 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 78                 
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 51                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 48                 
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 47                 
Correct output: 3                   | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 62                 
Correct output: 36                  | Program output: 87                 
Correct output: 9                   | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 59                 
Correct output: 56                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 38                 
Correct output: -72                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: 19                 
Correct output: -71                 | Program output: -49                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: 11                 
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -18                
Correct output: -27                 | Program output: 54                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -19                
Correct output: -81                 | Program output: -19                
Correct output: -100                | Program output: 84                 
Correct output: -27                 | Program output: 3                  
Correct output: -69                 | Program output: -40                
Correct output: -34                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -8                 
Correct output: 2                   | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -43                
Correct output: -69                 | Program output: -41                
Correct output: -79                 | Program output: -69                
Correct output: -47                 | Program output: 34                 
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -6                 
Correct output: -26                 | Program output: 20                 
Correct output: 47                  | Program output: 54                 
Correct output: -21                 | Program output: 72                 
Correct output: -84                 | Program output: -32                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ())) ()) () ()))) ()) ()))) ()) ()))
Lexicase best errors: [1 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 140
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ())) ()) () ()))) ()) ()))) ()) ()))
Zero cases best errors: [1 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 140
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 286 285 379 379 412 408 214 284 213)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (214 286 285 379 379 412 408 214 284 213)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ())) ()) () ()))) ()) ()))) ()) ()))
Errors: [1 0 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 91
Size: 140
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 6.926
Median total errors in population: 7
Error averages by case: (0.786 0.714 0.715 0.621 0.621 0.588 0.592 0.786 0.716 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.266
Average program size in population (points): 83.342
Average percent parens in population: 0.301
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.7415
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2092145
--- Timings ---
Current time: 1559583208816 milliseconds
Total Time:          14.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 61.7%
Fitness Testing:      4.1 seconds, 28.4%
Report:               1.3 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: 78                 
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 51                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 48                 
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 47                 
Correct output: 3                   | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 62                 
Correct output: 36                  | Program output: 87                 
Correct output: 9                   | Program output: 87                 
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 59                 
Correct output: 56                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 38                 
Correct output: -72                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: 19                 
Correct output: -71                 | Program output: -49                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: 11                 
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -18                
Correct output: -27                 | Program output: 54                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -19                
Correct output: -81                 | Program output: -19                
Correct output: -100                | Program output: 84                 
Correct output: -27                 | Program output: 3                  
Correct output: -69                 | Program output: -40                
Correct output: -34                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -8                 
Correct output: 2                   | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -43                
Correct output: -69                 | Program output: -41                
Correct output: -79                 | Program output: -69                
Correct output: -47                 | Program output: 34                 
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: 42                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -87                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -6                 
Correct output: -26                 | Program output: 20                 
Correct output: 47                  | Program output: 54                 
Correct output: -21                 | Program output: 72                 
Correct output: -84                 | Program output: -32                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: 6                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ())) ()) () ()))) ()) ()))) ()) ()))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 137
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ())) ()) () ()))) ()) ()))) ()) ()))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 137
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 229 336 229 610 336 611 336 336 872)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (231 229 336 229 610 336 611 336 336 872)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 (integer_max integer_min) boolean_rot exec_k (exec_k (integer_max in1 exec_pop ()) (integer_dup_times print_integer exec_yank boolean_yankdup) integer_lt boolean_dup_times exec_y_when_autoconstructing () exec_rot () () ()) ()) ())) ()) () ()))) ()) ()))) ()) ()))
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 91
Size: 140
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 5.874
Median total errors in population: 4
Error averages by case: (0.769 0.771 0.664 0.771 0.39 0.664 0.389 0.664 0.664 0.128)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.331
Average program size in population (points): 96.486
Average percent parens in population: 0.321
Minimum age in population: 5.0
Maximum age in population: 9.0625
Average age in population: 7.1334375
Median age in population: 7.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2428681
--- Timings ---
Current time: 1559583211464 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.0 seconds, 63.7%
Fitness Testing:      4.5 seconds, 26.2%
Report:               1.6 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 212
Test mean error for best: 0.21200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 47                 
Correct output: 3                   | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 59                 
Correct output: 56                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -18                
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -8                 
Correct output: 2                   | Program output: 55                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -43                
Correct output: -69                 | Program output: -41                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 20                 
Correct output: 47                  | Program output: 54                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ())) ()) () ()))) ()) ())))) ()) ()) ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 127
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ())) ()) () ()))) ()) ())))) ()) ()) ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 127
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 914 1000 914 367 361 911 367 470 473)
Population mean number of elite cases: 6.25
Count of perfect (error zero) individuals by case: (475 914 0 914 367 361 911 367 470 473)
Population mean number of perfect (error zero) cases: 5.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ())) ()) () ()))) ()) ())))) ()) ()) ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 83
Size: 127
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 4.748
Median total errors in population: 4
Error averages by case: (0.525 0.086 1.0 0.086 0.633 0.639 0.089 0.633 0.53 0.527)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 82.015
Average program size in population (points): 126.094
Average percent parens in population: 0.350
Minimum age in population: 6.375
Maximum age in population: 10.40625
Average age in population: 8.57775
Median age in population: 8.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2690198
--- Timings ---
Current time: 1559583214102 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.9 seconds, 65.3%
Fitness Testing:      4.8 seconds, 24.3%
Report:               2.0 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 237
Test mean error for best: 0.23700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -4                 
Correct output: 58                  | Program output: 97                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: 1                  
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: 3                  
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 26                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 17                 
Correct output: 22                  | Program output: 69                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 72                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 31                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 42                 
Correct output: 56                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -17-17             
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: -18                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -13                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -26                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -49                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -69                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 83                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -2                 
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -23                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -4                 
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -69                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -20                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -32                
Correct output: -26                 | Program output: 532                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove (in3 boolean_shove) print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ())) ()) () ()))) ()) ())))) ()) ()) ())) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 137
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove (in3 boolean_shove) print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ())) ()) () ()))) ()) ())))) ()) ()) ())) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 137
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 893 879 1 866 893 832 1 1000 832)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (1 893 879 1 866 893 832 1 0 832)
Population mean number of perfect (error zero) cases: 5.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove (in3 boolean_shove) print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ())) ()) () ()))) ()) ())))) ()) ()) ())) ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 90
Size: 137
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 4.802
Median total errors in population: 4
Error averages by case: (0.999 0.107 0.121 0.999 0.134 0.107 0.168 0.999 1.0 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 82.881
Average program size in population (points): 126.64
Average percent parens in population: 0.345
Minimum age in population: 9.5625
Maximum age in population: 10.5625
Average age in population: 10.0505
Median age in population: 9.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3019363
--- Timings ---
Current time: 1559583216789 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.8 seconds, 66.0%
Fitness Testing:      5.2 seconds, 23.1%
Report:               2.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 212
Test mean error for best: 0.21200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 47                 
Correct output: 3                   | Program output: 23                 
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 59                 
Correct output: 56                  | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: -21                
Correct output: -18                 | Program output: 60                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -24                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -36                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -7                 
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -18                
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -41                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -15                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -8                 
Correct output: 2                   | Program output: 55                 
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -43                
Correct output: -69                 | Program output: -41                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: 21                 
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: 20                 
Correct output: 47                  | Program output: 54                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth boolean_yank boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items exec_yankdup) (in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult boolean_dup_times) (boolean_shove integer_shove boolean_swap)) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ()) ())) ()) () ()))) ()) ())))) ()) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 136
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 2, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth boolean_yank boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_shove boolean_flush in2 boolean_eq boolean_not integer_eq exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items exec_yankdup) (in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult boolean_dup_times) (boolean_shove integer_shove boolean_swap)) boolean_or)) (exec_do*while ()) exec_k (tag_exec_885 ()) ()) ())) ()) () ()))) ()) ())))) ()) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 136
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 776 255 778 826 779 37 826 848 255)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (255 776 255 778 826 779 37 826 848 255)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth boolean_dup_items boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq integer_yank integer_rot integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) exec_do*while ()) (exec_k (tag_exec_885 ()) ())) () ()))) ()) ())))) ()) ()) ()))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 81
Size: 123
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 4.365
Median total errors in population: 4
Error averages by case: (0.745 0.224 0.745 0.222 0.174 0.221 0.963 0.174 0.152 0.745)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.38
Average program size in population (points): 134.473
Average percent parens in population: 0.343
Minimum age in population: 10.5625
Maximum age in population: 12.5625
Average age in population: 11.92
Median age in population: 11.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3390695
--- Timings ---
Current time: 1559583219448 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 66.2%
Fitness Testing:      5.6 seconds, 22.3%
Report:               2.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 26                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 42                 
Correct output: 56                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -18                 | Program output: -18                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or})
Lexicase best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) ())) ()) () ())) ()) ()))) ()) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 124
Percent parens: 0.331
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or})
Zero cases best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq) exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_if (integer_max boolean_shove) (exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) ())) ()) () ())) ()) ()))) ()) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 124
Percent parens: 0.331
--- Lexicase Population Statistics ---
Count of elite individuals by case: (860 835 863 858 831 207 207 832 207 671)
Population mean number of elite cases: 6.37
Count of perfect (error zero) individuals by case: (860 835 863 858 831 207 207 832 207 671)
Population mean number of perfect (error zero) cases: 6.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction in3} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_swap} {:close 2, :instruction boolean_or} {:close 3, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 0, :instruction tag_exec_885})
Best program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 91
Size: 138
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 3.629
Median total errors in population: 3
Error averages by case: (0.14 0.165 0.137 0.142 0.169 0.793 0.793 0.168 0.793 0.329)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.157
Average program size in population (points): 131.24
Average percent parens in population: 0.343
Minimum age in population: 11.5625
Maximum age in population: 14.5625
Average age in population: 13.2545
Median age in population: 13.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.011
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3748031
--- Timings ---
Current time: 1559583222243 milliseconds
Total Time:          27.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 66.6%
Fitness Testing:      6.0 seconds, 21.6%
Report:               3.2 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 9
Successful program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 138


Auto-simplifying with starting size: 138
step: 0
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 500
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 1000
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 1500
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 2000
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 2500
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 3000
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 3500
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 4000
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 4500
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

step: 5000
program: (boolean_eq boolean_not exec_shove (in3 boolean_shove) print_boolean exec_swap (exec_shove () in3 boolean_shove) (print_boolean in1 integer_fromboolean exec_swap (integer_fromboolean integer_dup) (in2 integer_min exec_k_when_autoconstructing (in4 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_rot () (integer_yankdup) (exec_y_when_autoconstructing (integer_min) integer_min) exec_dup (boolean_not integer_shove exec_swap (integer_swap) (boolean_or print_integer integer_shove exec_swap (integer_swap) (boolean_or print_integer exec_eq exec_k_when_autoconstructing (boolean_rot integer_mult exec_swap (exec_flush integer_dec exec_stackdepth integer_yankdup boolean_pop integer_mult integer_dup_items integer_fromboolean exec_do*times (boolean_flush boolean_or exec_stackdepth exec_if (integer_max boolean_shove exec_s_when_autoconstructing (exec_s_when_autoconstructing () (integer_inc boolean_or boolean_rot print_exec (integer_shove boolean_flush in2 boolean_eq boolean_not exec_noop exec_if (integer_yank integer_rot exec_if (exec_eq integer_dup_items) (exec_yankdup) in4 exec_y_when_autoconstructing (exec_k_when_autoconstructing (boolean_or integer_mult integer_yankdup) (boolean_shove integer_shove boolean_swap) boolean_or)) (exec_do*while ())) exec_k (tag_exec_885 ()) ()) ()) () ()) ())) ()) ())))) ()) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 138

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -62                 | Program output: -62                
Correct output: -34                 | Program output: -34                
Correct output: 58                  | Program output: 58                 
Correct output: -47                 | Program output: -47                
Correct output: -27                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: 46                  | Program output: 46                 
Correct output: -79                 | Program output: -79                
Correct output: -68                 | Program output: -68                
Correct output: 5                   | Program output: 5                  
Correct output: -4                  | Program output: -4                 
Correct output: 75                  | Program output: 75                 
Correct output: 20                  | Program output: 20                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: 26                  | Program output: 26                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 13                  | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 5                   | Program output: 5                  
Correct output: 36                  | Program output: 36                 
Correct output: 9                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: 30                  | Program output: 30                 
Correct output: 24                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 19                  | Program output: 19                 
Correct output: 43                  | Program output: 43                 
Correct output: 42                  | Program output: 42                 
Correct output: 56                  | Program output: 56                 
Correct output: 10                  | Program output: 10                 
Correct output: -46                 | Program output: -46                
Correct output: -89                 | Program output: -89                
Correct output: -18                 | Program output: -18                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: -72                
Correct output: -34                 | Program output: -34                
Correct output: -59                 | Program output: -59                
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: -24                 | Program output: -24                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: 36                  | Program output: 36                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: -67                 | Program output: -67                
Correct output: -27                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -81                 | Program output: -81                
Correct output: -100                | Program output: -100               
Correct output: -27                 | Program output: -27                
Correct output: -69                 | Program output: -69                
Correct output: -34                 | Program output: -34                
Correct output: -86                 | Program output: -86                
Correct output: -72                 | Program output: -72                
Correct output: -49                 | Program output: -49                
Correct output: -63                 | Program output: -63                
Correct output: -52                 | Program output: -52                
Correct output: -54                 | Program output: -54                
Correct output: 3                   | Program output: 3                  
Correct output: -66                 | Program output: -66                
Correct output: -87                 | Program output: -87                
Correct output: 2                   | Program output: 2                  
Correct output: -85                 | Program output: -85                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -79                 | Program output: -79                
Correct output: -47                 | Program output: -47                
Correct output: -93                 | Program output: -93                
Correct output: -35                 | Program output: -35                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -44                 | Program output: -44                
Correct output: -59                 | Program output: -59                
Correct output: -26                 | Program output: -26                
Correct output: 47                  | Program output: 47                 
Correct output: -21                 | Program output: -21                
Correct output: -84                 | Program output: -84                
Correct output: -26                 | Program output: -26                
Correct output: -87                 | Program output: -87                
;;******************************
