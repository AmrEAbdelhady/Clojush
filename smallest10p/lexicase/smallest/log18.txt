Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-77 -77 -77 -70] -77] [[15 15 9 15] 9] [[59 62 59 59] 59] [[-64 -64 -64 -64] -64] [[-86 -86 -86 -51] -86] [[12 12 12 60] 12] [[36 36 36 -62] -62] [[99 99 60 99] 60] [[-65 -65 -65 -24] -65] [[64 64 64 -79] -79] [(65 65 65 65) 65] [(-77 -77 -77 -77) -77] [(66 66 66 66) 66] [(-7 -7 -7 -7) -7] [(78 78 78 78) 78] [(52 16 6 81) 6] [(5 35 47 0) 0] [(35 5 34 7) 5] [(65 75 77 16) 16] [(46 79 99 72) 46] [(73 50 2 21) 2] [(27 77 7 20) 7] [(1 13 74 17) 1] [(36 11 18 19) 11] [(68 33 71 99) 33] [(99 58 72 35) 35] [(85 64 62 16) 16] [(31 27 16 71) 16] [(2 57 36 22) 2] [(37 89 65 80) 37] [(67 48 68 36) 36] [(96 18 47 90) 18] [(87 42 30 9) 9] [(98 38 92 35) 35] [(86 87 14 79) 14] [(2 -1 -8 10) -8] [(-67 -59 -59 29) -67] [(83 -39 -74 -85) -85] [(-2 93 -42 -67) -67] [(12 50 -26 -30) -30] [(-77 63 87 -52) -77] [(-50 90 70 78) -50] [(-76 78 54 40) -76] [(29 58 -53 39) -53] [(-70 26 -80 93) -80] [(92 81 52 -4) -4] [(-89 -65 -64 -90) -90] [(94 -46 90 24) -46] [(37 31 -24 -77) -77] [(-36 -78 -100 86) -100] [(-83 11 -21 83) -83] [(-7 90 64 15) -7] [(-15 61 24 12) -15] [(20 -70 -14 55) -70] [(0 10 63 7) 0] [(-5 34 -20 95) -20] [(-6 47 67 -91) -91] [(6 81 -37 -55) -55] [(-3 -7 -52 -70) -70] [(-4 73 93 60) -4] [(39 -60 71 -80) -80] [(-8 -7 10 75) -8] [(-58 49 3 -82) -82] [(10 -49 -55 100) -55] [(-73 20 -9 43) -73] [(-16 -9 99 -71) -71] [(3 -72 -11 10) -72] [(-16 99 -15 -40) -40] [(-52 5 95 -13) -52] [(70 31 -33 51) -33] [(67 -42 -9 -40) -42] [(-34 -30 23 77) -34] [(-46 -79 -87 -86) -87] [(6 14 -68 45) -68] [(92 -44 -59 44) -59] [(-23 3 100 19) -23] [(21 10 57 1) 1] [(-81 -25 -55 -84) -84] [(83 24 66 -12) -12] [(28 49 -96 50) -96] [(-31 -84 -11 -25) -84] [(32 -63 63 100) -63] [(70 -74 82 38) -74] [(-74 16 -29 -64) -74] [(-71 -83 35 15) -83] [(-76 77 -3 50) -76] [(-57 -39 -28 100) -57] [(32 -53 -61 -80) -80] [(2 41 70 31) 2] [(-9 96 -47 -48) -48] [(80 -15 80 99) -15] [(-81 42 68 -23) -81] [(60 -80 18 -60) -80] [(85 -1 -65 -72) -72] [(91 94 42 -59) -59])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-77 -77 -77 -70] -77]
Train Case:   6 | Input/Output: [[15 15 9 15] 9]
Train Case:   7 | Input/Output: [[59 62 59 59] 59]
Train Case:   8 | Input/Output: [[-64 -64 -64 -64] -64]
Train Case:   9 | Input/Output: [[-86 -86 -86 -51] -86]
Train Case:  10 | Input/Output: [[12 12 12 60] 12]
Train Case:  11 | Input/Output: [[36 36 36 -62] -62]
Train Case:  12 | Input/Output: [[99 99 60 99] 60]
Train Case:  13 | Input/Output: [[-65 -65 -65 -24] -65]
Train Case:  14 | Input/Output: [[64 64 64 -79] -79]
Train Case:  15 | Input/Output: [(65 65 65 65) 65]
Train Case:  16 | Input/Output: [(-77 -77 -77 -77) -77]
Train Case:  17 | Input/Output: [(66 66 66 66) 66]
Train Case:  18 | Input/Output: [(-7 -7 -7 -7) -7]
Train Case:  19 | Input/Output: [(78 78 78 78) 78]
Train Case:  20 | Input/Output: [(52 16 6 81) 6]
Train Case:  21 | Input/Output: [(5 35 47 0) 0]
Train Case:  22 | Input/Output: [(35 5 34 7) 5]
Train Case:  23 | Input/Output: [(65 75 77 16) 16]
Train Case:  24 | Input/Output: [(46 79 99 72) 46]
Train Case:  25 | Input/Output: [(73 50 2 21) 2]
Train Case:  26 | Input/Output: [(27 77 7 20) 7]
Train Case:  27 | Input/Output: [(1 13 74 17) 1]
Train Case:  28 | Input/Output: [(36 11 18 19) 11]
Train Case:  29 | Input/Output: [(68 33 71 99) 33]
Train Case:  30 | Input/Output: [(99 58 72 35) 35]
Train Case:  31 | Input/Output: [(85 64 62 16) 16]
Train Case:  32 | Input/Output: [(31 27 16 71) 16]
Train Case:  33 | Input/Output: [(2 57 36 22) 2]
Train Case:  34 | Input/Output: [(37 89 65 80) 37]
Train Case:  35 | Input/Output: [(67 48 68 36) 36]
Train Case:  36 | Input/Output: [(96 18 47 90) 18]
Train Case:  37 | Input/Output: [(87 42 30 9) 9]
Train Case:  38 | Input/Output: [(98 38 92 35) 35]
Train Case:  39 | Input/Output: [(86 87 14 79) 14]
Train Case:  40 | Input/Output: [(2 -1 -8 10) -8]
Train Case:  41 | Input/Output: [(-67 -59 -59 29) -67]
Train Case:  42 | Input/Output: [(83 -39 -74 -85) -85]
Train Case:  43 | Input/Output: [(-2 93 -42 -67) -67]
Train Case:  44 | Input/Output: [(12 50 -26 -30) -30]
Train Case:  45 | Input/Output: [(-77 63 87 -52) -77]
Train Case:  46 | Input/Output: [(-50 90 70 78) -50]
Train Case:  47 | Input/Output: [(-76 78 54 40) -76]
Train Case:  48 | Input/Output: [(29 58 -53 39) -53]
Train Case:  49 | Input/Output: [(-70 26 -80 93) -80]
Train Case:  50 | Input/Output: [(92 81 52 -4) -4]
Train Case:  51 | Input/Output: [(-89 -65 -64 -90) -90]
Train Case:  52 | Input/Output: [(94 -46 90 24) -46]
Train Case:  53 | Input/Output: [(37 31 -24 -77) -77]
Train Case:  54 | Input/Output: [(-36 -78 -100 86) -100]
Train Case:  55 | Input/Output: [(-83 11 -21 83) -83]
Train Case:  56 | Input/Output: [(-7 90 64 15) -7]
Train Case:  57 | Input/Output: [(-15 61 24 12) -15]
Train Case:  58 | Input/Output: [(20 -70 -14 55) -70]
Train Case:  59 | Input/Output: [(0 10 63 7) 0]
Train Case:  60 | Input/Output: [(-5 34 -20 95) -20]
Train Case:  61 | Input/Output: [(-6 47 67 -91) -91]
Train Case:  62 | Input/Output: [(6 81 -37 -55) -55]
Train Case:  63 | Input/Output: [(-3 -7 -52 -70) -70]
Train Case:  64 | Input/Output: [(-4 73 93 60) -4]
Train Case:  65 | Input/Output: [(39 -60 71 -80) -80]
Train Case:  66 | Input/Output: [(-8 -7 10 75) -8]
Train Case:  67 | Input/Output: [(-58 49 3 -82) -82]
Train Case:  68 | Input/Output: [(10 -49 -55 100) -55]
Train Case:  69 | Input/Output: [(-73 20 -9 43) -73]
Train Case:  70 | Input/Output: [(-16 -9 99 -71) -71]
Train Case:  71 | Input/Output: [(3 -72 -11 10) -72]
Train Case:  72 | Input/Output: [(-16 99 -15 -40) -40]
Train Case:  73 | Input/Output: [(-52 5 95 -13) -52]
Train Case:  74 | Input/Output: [(70 31 -33 51) -33]
Train Case:  75 | Input/Output: [(67 -42 -9 -40) -42]
Train Case:  76 | Input/Output: [(-34 -30 23 77) -34]
Train Case:  77 | Input/Output: [(-46 -79 -87 -86) -87]
Train Case:  78 | Input/Output: [(6 14 -68 45) -68]
Train Case:  79 | Input/Output: [(92 -44 -59 44) -59]
Train Case:  80 | Input/Output: [(-23 3 100 19) -23]
Train Case:  81 | Input/Output: [(21 10 57 1) 1]
Train Case:  82 | Input/Output: [(-81 -25 -55 -84) -84]
Train Case:  83 | Input/Output: [(83 24 66 -12) -12]
Train Case:  84 | Input/Output: [(28 49 -96 50) -96]
Train Case:  85 | Input/Output: [(-31 -84 -11 -25) -84]
Train Case:  86 | Input/Output: [(32 -63 63 100) -63]
Train Case:  87 | Input/Output: [(70 -74 82 38) -74]
Train Case:  88 | Input/Output: [(-74 16 -29 -64) -74]
Train Case:  89 | Input/Output: [(-71 -83 35 15) -83]
Train Case:  90 | Input/Output: [(-76 77 -3 50) -76]
Train Case:  91 | Input/Output: [(-57 -39 -28 100) -57]
Train Case:  92 | Input/Output: [(32 -53 -61 -80) -80]
Train Case:  93 | Input/Output: [(2 41 70 31) 2]
Train Case:  94 | Input/Output: [(-9 96 -47 -48) -48]
Train Case:  95 | Input/Output: [(80 -15 80 99) -15]
Train Case:  96 | Input/Output: [(-81 42 68 -23) -81]
Train Case:  97 | Input/Output: [(60 -80 18 -60) -80]
Train Case:  98 | Input/Output: [(85 -1 -65 -72) -72]
Train Case:  99 | Input/Output: [(91 94 42 -59) -59]
Test Case:   0 | Input/Output: [[63 63 63 60] 60]
Test Case:   1 | Input/Output: [[-39 -39 32 -39] -39]
Test Case:   2 | Input/Output: [[62 55 55 55] 55]
Test Case:   3 | Input/Output: [[-48 65 -48 -48] -48]
Test Case:   4 | Input/Output: [[87 20 87 87] 20]
Test Case:   5 | Input/Output: [[-92 -92 -92 30] -92]
Test Case:   6 | Input/Output: [[81 81 81 45] 45]
Test Case:   7 | Input/Output: [[-11 -87 -11 -11] -87]
Test Case:   8 | Input/Output: [[17 17 17 -56] -56]
Test Case:   9 | Input/Output: [[96 96 96 -17] -17]
Test Case:  10 | Input/Output: [[-80 -18 -18 -18] -80]
Test Case:  11 | Input/Output: [[78 78 78 99] 78]
Test Case:  12 | Input/Output: [[-40 -40 72 -40] -40]
Test Case:  13 | Input/Output: [[-85 -85 -85 -58] -85]
Test Case:  14 | Input/Output: [[-68 -68 52 -68] -68]
Test Case:  15 | Input/Output: [[53 -59 -59 -59] -59]
Test Case:  16 | Input/Output: [[74 74 82 74] 74]
Test Case:  17 | Input/Output: [[-61 -61 -61 -9] -61]
Test Case:  18 | Input/Output: [[80 -27 -27 -27] -27]
Test Case:  19 | Input/Output: [[-45 -71 -45 -45] -71]
Test Case:  20 | Input/Output: [[-36 -36 -45 -36] -45]
Test Case:  21 | Input/Output: [[-42 -42 66 -42] -42]
Test Case:  22 | Input/Output: [[60 25 25 25] 25]
Test Case:  23 | Input/Output: [[2 2 2 60] 2]
Test Case:  24 | Input/Output: [[-74 -74 82 -74] -74]
Test Case:  25 | Input/Output: [[-54 -65 -54 -54] -65]
Test Case:  26 | Input/Output: [[-72 63 -72 -72] -72]
Test Case:  27 | Input/Output: [[-92 -92 84 -92] -92]
Test Case:  28 | Input/Output: [[-63 -63 -63 33] -63]
Test Case:  29 | Input/Output: [[16 16 16 -85] -85]
Test Case:  30 | Input/Output: [[85 85 -28 85] -28]
Test Case:  31 | Input/Output: [[34 12 12 12] 12]
Test Case:  32 | Input/Output: [[-63 -70 -63 -63] -70]
Test Case:  33 | Input/Output: [[59 20 59 59] 20]
Test Case:  34 | Input/Output: [[-66 -66 -82 -66] -82]
Test Case:  35 | Input/Output: [[36 36 36 66] 36]
Test Case:  36 | Input/Output: [[79 79 7 79] 7]
Test Case:  37 | Input/Output: [[-43 58 58 58] -43]
Test Case:  38 | Input/Output: [[94 94 94 -53] -53]
Test Case:  39 | Input/Output: [[91 59 59 59] 59]
Test Case:  40 | Input/Output: [[4 4 15 4] 4]
Test Case:  41 | Input/Output: [[13 13 13 -70] -70]
Test Case:  42 | Input/Output: [[51 51 -44 51] -44]
Test Case:  43 | Input/Output: [[81 61 81 81] 61]
Test Case:  44 | Input/Output: [[-70 -70 -70 -39] -70]
Test Case:  45 | Input/Output: [[75 20 75 75] 20]
Test Case:  46 | Input/Output: [[-12 -12 -12 -10] -12]
Test Case:  47 | Input/Output: [[29 42 29 29] 29]
Test Case:  48 | Input/Output: [[-77 25 25 25] -77]
Test Case:  49 | Input/Output: [[26 93 26 26] 26]
Test Case:  50 | Input/Output: [[-52 -52 -52 -25] -52]
Test Case:  51 | Input/Output: [[-55 -55 -35 -55] -55]
Test Case:  52 | Input/Output: [[59 59 24 59] 24]
Test Case:  53 | Input/Output: [[4 64 4 4] 4]
Test Case:  54 | Input/Output: [[-21 -21 -21 -96] -96]
Test Case:  55 | Input/Output: [[-97 -64 -64 -64] -97]
Test Case:  56 | Input/Output: [[37 56 56 56] 37]
Test Case:  57 | Input/Output: [[-56 40 40 40] -56]
Test Case:  58 | Input/Output: [[-49 -49 7 -49] -49]
Test Case:  59 | Input/Output: [[-27 -27 -27 4] -27]
Test Case:  60 | Input/Output: [[-58 31 -58 -58] -58]
Test Case:  61 | Input/Output: [[-24 -24 -48 -24] -48]
Test Case:  62 | Input/Output: [[-12 -12 -12 -84] -84]
Test Case:  63 | Input/Output: [[65 65 65 33] 33]
Test Case:  64 | Input/Output: [[-95 -95 -95 38] -95]
Test Case:  65 | Input/Output: [[-43 -43 51 -43] -43]
Test Case:  66 | Input/Output: [[-72 -72 -78 -72] -78]
Test Case:  67 | Input/Output: [[78 100 78 78] 78]
Test Case:  68 | Input/Output: [[63 63 63 32] 32]
Test Case:  69 | Input/Output: [[50 91 91 91] 50]
Test Case:  70 | Input/Output: [[81 81 -17 81] -17]
Test Case:  71 | Input/Output: [[83 83 83 47] 47]
Test Case:  72 | Input/Output: [[-37 -46 -46 -46] -46]
Test Case:  73 | Input/Output: [[11 11 91 11] 11]
Test Case:  74 | Input/Output: [[67 -66 -66 -66] -66]
Test Case:  75 | Input/Output: [[-94 -94 -94 7] -94]
Test Case:  76 | Input/Output: [[8 8 -47 8] -47]
Test Case:  77 | Input/Output: [[0 0 51 0] 0]
Test Case:  78 | Input/Output: [[-48 -6 -48 -48] -48]
Test Case:  79 | Input/Output: [[98 -48 -48 -48] -48]
Test Case:  80 | Input/Output: [[91 91 62 91] 62]
Test Case:  81 | Input/Output: [[89 89 89 78] 78]
Test Case:  82 | Input/Output: [[-55 20 20 20] -55]
Test Case:  83 | Input/Output: [[23 66 23 23] 23]
Test Case:  84 | Input/Output: [[20 20 -90 20] -90]
Test Case:  85 | Input/Output: [[-81 24 -81 -81] -81]
Test Case:  86 | Input/Output: [[95 -58 95 95] -58]
Test Case:  87 | Input/Output: [[11 -97 11 11] -97]
Test Case:  88 | Input/Output: [[0 -49 0 0] -49]
Test Case:  89 | Input/Output: [[17 17 17 8] 8]
Test Case:  90 | Input/Output: [[-22 -22 54 -22] -22]
Test Case:  91 | Input/Output: [[-84 -68 -68 -68] -84]
Test Case:  92 | Input/Output: [[-66 -66 -66 -75] -75]
Test Case:  93 | Input/Output: [[-37 -82 -37 -37] -82]
Test Case:  94 | Input/Output: [[54 54 54 7] 7]
Test Case:  95 | Input/Output: [[94 23 94 94] 23]
Test Case:  96 | Input/Output: [[48 -78 -78 -78] -78]
Test Case:  97 | Input/Output: [[-98 -98 -98 -75] -98]
Test Case:  98 | Input/Output: [[41 41 41 57] 41]
Test Case:  99 | Input/Output: [[54 69 69 69] 54]
Test Case: 100 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 101 | Input/Output: [(89 89 89 89) 89]
Test Case: 102 | Input/Output: [(99 99 99 99) 99]
Test Case: 103 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 104 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 105 | Input/Output: [(80 80 80 80) 80]
Test Case: 106 | Input/Output: [(14 14 14 14) 14]
Test Case: 107 | Input/Output: [(43 43 43 43) 43]
Test Case: 108 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 109 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 110 | Input/Output: [(74 74 74 74) 74]
Test Case: 111 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 112 | Input/Output: [(90 90 90 90) 90]
Test Case: 113 | Input/Output: [(33 33 33 33) 33]
Test Case: 114 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 115 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 116 | Input/Output: [(56 56 56 56) 56]
Test Case: 117 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 118 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 119 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 120 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 121 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 122 | Input/Output: [(34 34 34 34) 34]
Test Case: 123 | Input/Output: [(34 34 34 34) 34]
Test Case: 124 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 125 | Input/Output: [(66 66 66 66) 66]
Test Case: 126 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 127 | Input/Output: [(65 65 65 65) 65]
Test Case: 128 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 129 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 130 | Input/Output: [(94 94 94 94) 94]
Test Case: 131 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 132 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 133 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 134 | Input/Output: [(54 54 54 54) 54]
Test Case: 135 | Input/Output: [(90 90 90 90) 90]
Test Case: 136 | Input/Output: [(47 47 47 47) 47]
Test Case: 137 | Input/Output: [(17 17 17 17) 17]
Test Case: 138 | Input/Output: [(100 100 100 100) 100]
Test Case: 139 | Input/Output: [(47 47 47 47) 47]
Test Case: 140 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 141 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 142 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 143 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 144 | Input/Output: [(61 61 61 61) 61]
Test Case: 145 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 146 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 147 | Input/Output: [(60 60 60 60) 60]
Test Case: 148 | Input/Output: [(72 72 72 72) 72]
Test Case: 149 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 150 | Input/Output: [(15 15 15 15) 15]
Test Case: 151 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 152 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 153 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 154 | Input/Output: [(32 32 32 32) 32]
Test Case: 155 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 156 | Input/Output: [(10 10 10 10) 10]
Test Case: 157 | Input/Output: [(44 44 44 44) 44]
Test Case: 158 | Input/Output: [(92 92 92 92) 92]
Test Case: 159 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 160 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 161 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 162 | Input/Output: [(50 50 50 50) 50]
Test Case: 163 | Input/Output: [(8 8 8 8) 8]
Test Case: 164 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 165 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 166 | Input/Output: [(62 62 62 62) 62]
Test Case: 167 | Input/Output: [(14 14 14 14) 14]
Test Case: 168 | Input/Output: [(11 11 11 11) 11]
Test Case: 169 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 170 | Input/Output: [(29 29 29 29) 29]
Test Case: 171 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 172 | Input/Output: [(32 32 32 32) 32]
Test Case: 173 | Input/Output: [(18 18 18 18) 18]
Test Case: 174 | Input/Output: [(85 85 85 85) 85]
Test Case: 175 | Input/Output: [(94 94 94 94) 94]
Test Case: 176 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 177 | Input/Output: [(83 83 83 83) 83]
Test Case: 178 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 179 | Input/Output: [(0 0 0 0) 0]
Test Case: 180 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 181 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 182 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 183 | Input/Output: [(36 36 36 36) 36]
Test Case: 184 | Input/Output: [(18 18 18 18) 18]
Test Case: 185 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 186 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 187 | Input/Output: [(54 54 54 54) 54]
Test Case: 188 | Input/Output: [(77 77 77 77) 77]
Test Case: 189 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 190 | Input/Output: [(26 26 26 26) 26]
Test Case: 191 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 192 | Input/Output: [(7 7 7 7) 7]
Test Case: 193 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 194 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 195 | Input/Output: [(24 24 24 24) 24]
Test Case: 196 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 197 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 198 | Input/Output: [(99 99 99 99) 99]
Test Case: 199 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 200 | Input/Output: [(87 10 44 63) 10]
Test Case: 201 | Input/Output: [(68 34 40 54) 34]
Test Case: 202 | Input/Output: [(11 21 15 30) 11]
Test Case: 203 | Input/Output: [(31 9 90 24) 9]
Test Case: 204 | Input/Output: [(53 11 61 41) 11]
Test Case: 205 | Input/Output: [(20 92 28 96) 20]
Test Case: 206 | Input/Output: [(31 91 61 58) 31]
Test Case: 207 | Input/Output: [(88 69 47 56) 47]
Test Case: 208 | Input/Output: [(58 84 55 62) 55]
Test Case: 209 | Input/Output: [(19 2 32 43) 2]
Test Case: 210 | Input/Output: [(65 93 35 1) 1]
Test Case: 211 | Input/Output: [(40 10 31 54) 10]
Test Case: 212 | Input/Output: [(94 68 49 3) 3]
Test Case: 213 | Input/Output: [(7 49 79 45) 7]
Test Case: 214 | Input/Output: [(82 3 42 65) 3]
Test Case: 215 | Input/Output: [(53 94 8 24) 8]
Test Case: 216 | Input/Output: [(92 33 90 80) 33]
Test Case: 217 | Input/Output: [(87 100 55 31) 31]
Test Case: 218 | Input/Output: [(9 66 5 47) 5]
Test Case: 219 | Input/Output: [(23 93 7 68) 7]
Test Case: 220 | Input/Output: [(22 14 75 72) 14]
Test Case: 221 | Input/Output: [(15 88 2 50) 2]
Test Case: 222 | Input/Output: [(31 95 79 94) 31]
Test Case: 223 | Input/Output: [(9 82 74 78) 9]
Test Case: 224 | Input/Output: [(11 29 55 4) 4]
Test Case: 225 | Input/Output: [(9 11 39 15) 9]
Test Case: 226 | Input/Output: [(91 37 79 81) 37]
Test Case: 227 | Input/Output: [(90 52 36 50) 36]
Test Case: 228 | Input/Output: [(17 3 27 100) 3]
Test Case: 229 | Input/Output: [(39 12 82 22) 12]
Test Case: 230 | Input/Output: [(75 67 62 83) 62]
Test Case: 231 | Input/Output: [(22 93 78 61) 22]
Test Case: 232 | Input/Output: [(6 74 73 85) 6]
Test Case: 233 | Input/Output: [(52 75 8 4) 4]
Test Case: 234 | Input/Output: [(40 3 100 26) 3]
Test Case: 235 | Input/Output: [(21 62 71 59) 21]
Test Case: 236 | Input/Output: [(1 77 42 38) 1]
Test Case: 237 | Input/Output: [(82 26 48 39) 26]
Test Case: 238 | Input/Output: [(68 21 96 7) 7]
Test Case: 239 | Input/Output: [(48 34 75 72) 34]
Test Case: 240 | Input/Output: [(93 78 77 12) 12]
Test Case: 241 | Input/Output: [(68 26 69 33) 26]
Test Case: 242 | Input/Output: [(95 81 50 1) 1]
Test Case: 243 | Input/Output: [(27 73 27 2) 2]
Test Case: 244 | Input/Output: [(70 77 48 92) 48]
Test Case: 245 | Input/Output: [(34 81 67 51) 34]
Test Case: 246 | Input/Output: [(93 47 70 55) 47]
Test Case: 247 | Input/Output: [(29 54 87 2) 2]
Test Case: 248 | Input/Output: [(92 46 95 66) 46]
Test Case: 249 | Input/Output: [(23 100 98 55) 23]
Test Case: 250 | Input/Output: [(73 15 32 94) 15]
Test Case: 251 | Input/Output: [(77 89 92 73) 73]
Test Case: 252 | Input/Output: [(63 66 9 35) 9]
Test Case: 253 | Input/Output: [(7 83 49 87) 7]
Test Case: 254 | Input/Output: [(98 4 44 37) 4]
Test Case: 255 | Input/Output: [(77 37 8 11) 8]
Test Case: 256 | Input/Output: [(16 1 37 28) 1]
Test Case: 257 | Input/Output: [(2 36 94 55) 2]
Test Case: 258 | Input/Output: [(45 68 29 79) 29]
Test Case: 259 | Input/Output: [(85 90 77 34) 34]
Test Case: 260 | Input/Output: [(89 51 72 86) 51]
Test Case: 261 | Input/Output: [(30 90 17 77) 17]
Test Case: 262 | Input/Output: [(91 56 14 45) 14]
Test Case: 263 | Input/Output: [(39 29 3 70) 3]
Test Case: 264 | Input/Output: [(24 40 91 97) 24]
Test Case: 265 | Input/Output: [(85 39 39 41) 39]
Test Case: 266 | Input/Output: [(52 33 21 24) 21]
Test Case: 267 | Input/Output: [(63 31 91 81) 31]
Test Case: 268 | Input/Output: [(91 11 61 85) 11]
Test Case: 269 | Input/Output: [(26 59 70 24) 24]
Test Case: 270 | Input/Output: [(80 87 24 75) 24]
Test Case: 271 | Input/Output: [(54 59 46 48) 46]
Test Case: 272 | Input/Output: [(8 25 22 19) 8]
Test Case: 273 | Input/Output: [(13 58 86 85) 13]
Test Case: 274 | Input/Output: [(4 65 92 29) 4]
Test Case: 275 | Input/Output: [(39 31 29 98) 29]
Test Case: 276 | Input/Output: [(39 53 30 62) 30]
Test Case: 277 | Input/Output: [(7 95 30 97) 7]
Test Case: 278 | Input/Output: [(9 42 59 88) 9]
Test Case: 279 | Input/Output: [(53 78 25 59) 25]
Test Case: 280 | Input/Output: [(11 20 17 21) 11]
Test Case: 281 | Input/Output: [(4 53 12 34) 4]
Test Case: 282 | Input/Output: [(56 73 18 46) 18]
Test Case: 283 | Input/Output: [(61 4 53 75) 4]
Test Case: 284 | Input/Output: [(72 51 22 87) 22]
Test Case: 285 | Input/Output: [(48 66 43 24) 24]
Test Case: 286 | Input/Output: [(95 82 78 87) 78]
Test Case: 287 | Input/Output: [(22 96 82 5) 5]
Test Case: 288 | Input/Output: [(50 59 18 23) 18]
Test Case: 289 | Input/Output: [(22 98 97 68) 22]
Test Case: 290 | Input/Output: [(5 76 58 81) 5]
Test Case: 291 | Input/Output: [(20 18 53 66) 18]
Test Case: 292 | Input/Output: [(23 97 71 57) 23]
Test Case: 293 | Input/Output: [(78 32 35 22) 22]
Test Case: 294 | Input/Output: [(96 1 46 5) 1]
Test Case: 295 | Input/Output: [(30 81 53 47) 30]
Test Case: 296 | Input/Output: [(32 35 69 55) 32]
Test Case: 297 | Input/Output: [(24 91 98 91) 24]
Test Case: 298 | Input/Output: [(98 74 25 61) 25]
Test Case: 299 | Input/Output: [(2 38 85 60) 2]
Test Case: 300 | Input/Output: [(11 61 71 35) 11]
Test Case: 301 | Input/Output: [(59 43 36 42) 36]
Test Case: 302 | Input/Output: [(72 73 92 53) 53]
Test Case: 303 | Input/Output: [(78 6 92 75) 6]
Test Case: 304 | Input/Output: [(16 70 0 15) 0]
Test Case: 305 | Input/Output: [(69 50 43 78) 43]
Test Case: 306 | Input/Output: [(59 7 35 86) 7]
Test Case: 307 | Input/Output: [(17 77 75 24) 17]
Test Case: 308 | Input/Output: [(78 41 92 59) 41]
Test Case: 309 | Input/Output: [(32 23 17 5) 5]
Test Case: 310 | Input/Output: [(10 78 65 66) 10]
Test Case: 311 | Input/Output: [(27 35 18 100) 18]
Test Case: 312 | Input/Output: [(36 6 95 26) 6]
Test Case: 313 | Input/Output: [(88 89 43 28) 28]
Test Case: 314 | Input/Output: [(99 55 93 51) 51]
Test Case: 315 | Input/Output: [(85 27 54 38) 27]
Test Case: 316 | Input/Output: [(16 92 75 47) 16]
Test Case: 317 | Input/Output: [(4 32 32 22) 4]
Test Case: 318 | Input/Output: [(85 37 27 90) 27]
Test Case: 319 | Input/Output: [(95 27 20 76) 20]
Test Case: 320 | Input/Output: [(3 46 22 26) 3]
Test Case: 321 | Input/Output: [(4 2 27 69) 2]
Test Case: 322 | Input/Output: [(49 10 63 29) 10]
Test Case: 323 | Input/Output: [(79 91 58 80) 58]
Test Case: 324 | Input/Output: [(20 34 73 14) 14]
Test Case: 325 | Input/Output: [(34 14 31 83) 14]
Test Case: 326 | Input/Output: [(63 35 70 81) 35]
Test Case: 327 | Input/Output: [(4 37 24 93) 4]
Test Case: 328 | Input/Output: [(65 89 31 39) 31]
Test Case: 329 | Input/Output: [(90 39 39 17) 17]
Test Case: 330 | Input/Output: [(71 99 68 80) 68]
Test Case: 331 | Input/Output: [(100 14 17 44) 14]
Test Case: 332 | Input/Output: [(35 80 5 53) 5]
Test Case: 333 | Input/Output: [(87 37 96 55) 37]
Test Case: 334 | Input/Output: [(37 9 7 9) 7]
Test Case: 335 | Input/Output: [(68 23 68 95) 23]
Test Case: 336 | Input/Output: [(18 45 75 54) 18]
Test Case: 337 | Input/Output: [(33 7 96 77) 7]
Test Case: 338 | Input/Output: [(90 1 9 57) 1]
Test Case: 339 | Input/Output: [(19 99 39 88) 19]
Test Case: 340 | Input/Output: [(25 84 82 52) 25]
Test Case: 341 | Input/Output: [(63 76 78 30) 30]
Test Case: 342 | Input/Output: [(36 96 22 24) 22]
Test Case: 343 | Input/Output: [(59 0 15 42) 0]
Test Case: 344 | Input/Output: [(56 0 50 36) 0]
Test Case: 345 | Input/Output: [(76 39 17 32) 17]
Test Case: 346 | Input/Output: [(53 30 67 19) 19]
Test Case: 347 | Input/Output: [(4 20 66 62) 4]
Test Case: 348 | Input/Output: [(91 66 24 82) 24]
Test Case: 349 | Input/Output: [(59 52 94 54) 52]
Test Case: 350 | Input/Output: [(10 79 19 13) 10]
Test Case: 351 | Input/Output: [(14 51 68 40) 14]
Test Case: 352 | Input/Output: [(1 42 80 35) 1]
Test Case: 353 | Input/Output: [(0 14 0 68) 0]
Test Case: 354 | Input/Output: [(68 11 44 51) 11]
Test Case: 355 | Input/Output: [(93 43 21 43) 21]
Test Case: 356 | Input/Output: [(33 0 64 32) 0]
Test Case: 357 | Input/Output: [(23 57 42 61) 23]
Test Case: 358 | Input/Output: [(1 41 76 81) 1]
Test Case: 359 | Input/Output: [(39 53 9 35) 9]
Test Case: 360 | Input/Output: [(80 64 4 5) 4]
Test Case: 361 | Input/Output: [(44 67 25 60) 25]
Test Case: 362 | Input/Output: [(20 17 27 85) 17]
Test Case: 363 | Input/Output: [(11 46 97 38) 11]
Test Case: 364 | Input/Output: [(36 77 11 36) 11]
Test Case: 365 | Input/Output: [(52 71 4 40) 4]
Test Case: 366 | Input/Output: [(50 77 25 55) 25]
Test Case: 367 | Input/Output: [(7 45 80 63) 7]
Test Case: 368 | Input/Output: [(34 60 13 48) 13]
Test Case: 369 | Input/Output: [(41 8 76 15) 8]
Test Case: 370 | Input/Output: [(26 6 11 64) 6]
Test Case: 371 | Input/Output: [(56 20 67 85) 20]
Test Case: 372 | Input/Output: [(93 83 19 84) 19]
Test Case: 373 | Input/Output: [(3 65 39 91) 3]
Test Case: 374 | Input/Output: [(96 90 14 56) 14]
Test Case: 375 | Input/Output: [(85 70 56 57) 56]
Test Case: 376 | Input/Output: [(26 75 3 20) 3]
Test Case: 377 | Input/Output: [(36 77 11 95) 11]
Test Case: 378 | Input/Output: [(22 84 50 59) 22]
Test Case: 379 | Input/Output: [(78 59 41 73) 41]
Test Case: 380 | Input/Output: [(52 38 50 30) 30]
Test Case: 381 | Input/Output: [(81 62 72 70) 62]
Test Case: 382 | Input/Output: [(5 45 96 46) 5]
Test Case: 383 | Input/Output: [(31 8 71 98) 8]
Test Case: 384 | Input/Output: [(32 56 57 81) 32]
Test Case: 385 | Input/Output: [(51 27 67 14) 14]
Test Case: 386 | Input/Output: [(93 21 49 98) 21]
Test Case: 387 | Input/Output: [(58 3 99 22) 3]
Test Case: 388 | Input/Output: [(61 25 66 81) 25]
Test Case: 389 | Input/Output: [(85 61 54 56) 54]
Test Case: 390 | Input/Output: [(15 14 67 5) 5]
Test Case: 391 | Input/Output: [(49 9 82 11) 9]
Test Case: 392 | Input/Output: [(91 49 59 97) 49]
Test Case: 393 | Input/Output: [(95 52 35 20) 20]
Test Case: 394 | Input/Output: [(0 99 56 46) 0]
Test Case: 395 | Input/Output: [(49 60 19 62) 19]
Test Case: 396 | Input/Output: [(85 72 97 30) 30]
Test Case: 397 | Input/Output: [(68 100 57 78) 57]
Test Case: 398 | Input/Output: [(73 51 21 37) 21]
Test Case: 399 | Input/Output: [(29 78 100 4) 4]
Test Case: 400 | Input/Output: [(35 -33 67 53) -33]
Test Case: 401 | Input/Output: [(71 47 46 67) 46]
Test Case: 402 | Input/Output: [(-26 38 -94 -9) -94]
Test Case: 403 | Input/Output: [(-35 -6 22 -34) -35]
Test Case: 404 | Input/Output: [(-62 55 32 40) -62]
Test Case: 405 | Input/Output: [(0 8 -85 10) -85]
Test Case: 406 | Input/Output: [(7 -18 -35 -78) -78]
Test Case: 407 | Input/Output: [(-100 -20 76 -20) -100]
Test Case: 408 | Input/Output: [(98 56 54 37) 37]
Test Case: 409 | Input/Output: [(-80 -44 97 73) -80]
Test Case: 410 | Input/Output: [(-48 46 -98 -97) -98]
Test Case: 411 | Input/Output: [(17 -17 -60 37) -60]
Test Case: 412 | Input/Output: [(37 8 -73 82) -73]
Test Case: 413 | Input/Output: [(53 -1 -42 41) -42]
Test Case: 414 | Input/Output: [(-53 97 100 -17) -53]
Test Case: 415 | Input/Output: [(-68 -43 -89 30) -89]
Test Case: 416 | Input/Output: [(52 -53 89 14) -53]
Test Case: 417 | Input/Output: [(-52 -18 29 55) -52]
Test Case: 418 | Input/Output: [(88 -11 -77 64) -77]
Test Case: 419 | Input/Output: [(87 -20 47 23) -20]
Test Case: 420 | Input/Output: [(81 88 -24 -84) -84]
Test Case: 421 | Input/Output: [(-6 -88 83 69) -88]
Test Case: 422 | Input/Output: [(92 31 -89 30) -89]
Test Case: 423 | Input/Output: [(14 -38 74 85) -38]
Test Case: 424 | Input/Output: [(-8 81 -54 -99) -99]
Test Case: 425 | Input/Output: [(16 -65 70 -30) -65]
Test Case: 426 | Input/Output: [(-44 -85 70 54) -85]
Test Case: 427 | Input/Output: [(23 88 -93 12) -93]
Test Case: 428 | Input/Output: [(23 23 -17 -9) -17]
Test Case: 429 | Input/Output: [(12 99 94 -21) -21]
Test Case: 430 | Input/Output: [(70 -63 -50 91) -63]
Test Case: 431 | Input/Output: [(34 74 -42 89) -42]
Test Case: 432 | Input/Output: [(-76 49 71 -15) -76]
Test Case: 433 | Input/Output: [(-60 -100 17 41) -100]
Test Case: 434 | Input/Output: [(99 -6 -97 98) -97]
Test Case: 435 | Input/Output: [(85 19 -10 54) -10]
Test Case: 436 | Input/Output: [(-36 -67 9 3) -67]
Test Case: 437 | Input/Output: [(-61 51 84 -1) -61]
Test Case: 438 | Input/Output: [(-51 -25 -55 67) -55]
Test Case: 439 | Input/Output: [(13 20 -41 -7) -41]
Test Case: 440 | Input/Output: [(39 -39 15 -91) -91]
Test Case: 441 | Input/Output: [(-35 49 82 -86) -86]
Test Case: 442 | Input/Output: [(-31 32 -8 -68) -68]
Test Case: 443 | Input/Output: [(-45 -41 35 -97) -97]
Test Case: 444 | Input/Output: [(-70 -46 -69 -24) -70]
Test Case: 445 | Input/Output: [(-55 70 18 -20) -55]
Test Case: 446 | Input/Output: [(-47 -71 83 87) -71]
Test Case: 447 | Input/Output: [(94 59 -37 -17) -37]
Test Case: 448 | Input/Output: [(-87 85 47 -75) -87]
Test Case: 449 | Input/Output: [(-41 -2 -83 -2) -83]
Test Case: 450 | Input/Output: [(15 69 10 25) 10]
Test Case: 451 | Input/Output: [(85 46 -72 62) -72]
Test Case: 452 | Input/Output: [(-47 -28 10 -54) -54]
Test Case: 453 | Input/Output: [(-80 63 22 -56) -80]
Test Case: 454 | Input/Output: [(-54 -85 100 -48) -85]
Test Case: 455 | Input/Output: [(71 42 -47 -7) -47]
Test Case: 456 | Input/Output: [(-96 44 -58 65) -96]
Test Case: 457 | Input/Output: [(35 -78 -68 -94) -94]
Test Case: 458 | Input/Output: [(-16 -6 3 89) -16]
Test Case: 459 | Input/Output: [(63 1 51 -6) -6]
Test Case: 460 | Input/Output: [(63 -95 35 -30) -95]
Test Case: 461 | Input/Output: [(92 79 -70 76) -70]
Test Case: 462 | Input/Output: [(98 51 -52 43) -52]
Test Case: 463 | Input/Output: [(79 99 -63 -98) -98]
Test Case: 464 | Input/Output: [(-54 18 30 -10) -54]
Test Case: 465 | Input/Output: [(-10 -82 -17 -49) -82]
Test Case: 466 | Input/Output: [(-65 92 -52 23) -65]
Test Case: 467 | Input/Output: [(47 66 12 -77) -77]
Test Case: 468 | Input/Output: [(13 -33 -80 8) -80]
Test Case: 469 | Input/Output: [(-81 54 -47 60) -81]
Test Case: 470 | Input/Output: [(-96 23 33 -88) -96]
Test Case: 471 | Input/Output: [(-19 27 48 25) -19]
Test Case: 472 | Input/Output: [(59 12 -97 16) -97]
Test Case: 473 | Input/Output: [(-25 -54 -41 -80) -80]
Test Case: 474 | Input/Output: [(-9 -66 -40 68) -66]
Test Case: 475 | Input/Output: [(100 -65 67 -7) -65]
Test Case: 476 | Input/Output: [(77 -61 -47 -19) -61]
Test Case: 477 | Input/Output: [(82 92 95 54) 54]
Test Case: 478 | Input/Output: [(91 -54 27 11) -54]
Test Case: 479 | Input/Output: [(-44 67 100 -96) -96]
Test Case: 480 | Input/Output: [(23 86 -80 -100) -100]
Test Case: 481 | Input/Output: [(-66 34 -8 -29) -66]
Test Case: 482 | Input/Output: [(-12 66 -70 -55) -70]
Test Case: 483 | Input/Output: [(18 9 49 25) 9]
Test Case: 484 | Input/Output: [(36 1 16 -51) -51]
Test Case: 485 | Input/Output: [(40 35 -26 -15) -26]
Test Case: 486 | Input/Output: [(-60 97 76 -65) -65]
Test Case: 487 | Input/Output: [(-46 -79 -2 -51) -79]
Test Case: 488 | Input/Output: [(-65 33 -32 51) -65]
Test Case: 489 | Input/Output: [(84 68 18 -33) -33]
Test Case: 490 | Input/Output: [(86 -16 -50 27) -50]
Test Case: 491 | Input/Output: [(78 -40 -5 -16) -40]
Test Case: 492 | Input/Output: [(-25 -81 62 31) -81]
Test Case: 493 | Input/Output: [(-63 5 21 -50) -63]
Test Case: 494 | Input/Output: [(41 19 -2 66) -2]
Test Case: 495 | Input/Output: [(9 -53 35 -52) -53]
Test Case: 496 | Input/Output: [(-96 78 35 -56) -96]
Test Case: 497 | Input/Output: [(59 -68 42 86) -68]
Test Case: 498 | Input/Output: [(5 43 -39 -16) -39]
Test Case: 499 | Input/Output: [(60 -15 -13 -15) -15]
Test Case: 500 | Input/Output: [(-52 -94 -81 -90) -94]
Test Case: 501 | Input/Output: [(22 35 34 24) 22]
Test Case: 502 | Input/Output: [(21 -18 -77 5) -77]
Test Case: 503 | Input/Output: [(-57 22 -57 -73) -73]
Test Case: 504 | Input/Output: [(58 58 -19 72) -19]
Test Case: 505 | Input/Output: [(-90 45 -81 86) -90]
Test Case: 506 | Input/Output: [(-100 -60 0 35) -100]
Test Case: 507 | Input/Output: [(-81 66 -87 40) -87]
Test Case: 508 | Input/Output: [(36 -93 -85 -64) -93]
Test Case: 509 | Input/Output: [(-63 64 62 -83) -83]
Test Case: 510 | Input/Output: [(-75 21 40 17) -75]
Test Case: 511 | Input/Output: [(-34 75 37 53) -34]
Test Case: 512 | Input/Output: [(-91 44 63 27) -91]
Test Case: 513 | Input/Output: [(-98 29 -75 -53) -98]
Test Case: 514 | Input/Output: [(80 33 41 -58) -58]
Test Case: 515 | Input/Output: [(45 -44 74 -71) -71]
Test Case: 516 | Input/Output: [(-73 33 91 77) -73]
Test Case: 517 | Input/Output: [(78 65 -55 20) -55]
Test Case: 518 | Input/Output: [(-95 87 27 -61) -95]
Test Case: 519 | Input/Output: [(-81 35 35 99) -81]
Test Case: 520 | Input/Output: [(-78 -35 -90 93) -90]
Test Case: 521 | Input/Output: [(-98 -96 -29 87) -98]
Test Case: 522 | Input/Output: [(36 -40 -18 83) -40]
Test Case: 523 | Input/Output: [(17 46 10 32) 10]
Test Case: 524 | Input/Output: [(-99 -24 64 -11) -99]
Test Case: 525 | Input/Output: [(-78 60 -22 -29) -78]
Test Case: 526 | Input/Output: [(-62 -72 -83 53) -83]
Test Case: 527 | Input/Output: [(56 -91 11 75) -91]
Test Case: 528 | Input/Output: [(-22 -50 -24 -20) -50]
Test Case: 529 | Input/Output: [(-78 81 49 -37) -78]
Test Case: 530 | Input/Output: [(19 -10 12 -61) -61]
Test Case: 531 | Input/Output: [(51 -78 71 86) -78]
Test Case: 532 | Input/Output: [(-92 -2 -45 46) -92]
Test Case: 533 | Input/Output: [(-59 38 -83 55) -83]
Test Case: 534 | Input/Output: [(-70 -3 -14 28) -70]
Test Case: 535 | Input/Output: [(-47 -92 -20 -97) -97]
Test Case: 536 | Input/Output: [(-20 80 -87 -35) -87]
Test Case: 537 | Input/Output: [(-67 8 4 -15) -67]
Test Case: 538 | Input/Output: [(29 -73 -32 -90) -90]
Test Case: 539 | Input/Output: [(-52 -64 -29 -22) -64]
Test Case: 540 | Input/Output: [(49 -64 -96 85) -96]
Test Case: 541 | Input/Output: [(-47 44 47 -5) -47]
Test Case: 542 | Input/Output: [(-86 -10 59 12) -86]
Test Case: 543 | Input/Output: [(16 -32 -45 57) -45]
Test Case: 544 | Input/Output: [(13 -3 55 -47) -47]
Test Case: 545 | Input/Output: [(-60 -47 -87 -20) -87]
Test Case: 546 | Input/Output: [(-99 -60 -8 -87) -99]
Test Case: 547 | Input/Output: [(60 -12 73 -55) -55]
Test Case: 548 | Input/Output: [(8 22 -95 21) -95]
Test Case: 549 | Input/Output: [(31 20 53 10) 10]
Test Case: 550 | Input/Output: [(-86 56 20 76) -86]
Test Case: 551 | Input/Output: [(21 69 -28 -48) -48]
Test Case: 552 | Input/Output: [(29 78 71 -35) -35]
Test Case: 553 | Input/Output: [(79 69 56 6) 6]
Test Case: 554 | Input/Output: [(-62 -64 22 -12) -64]
Test Case: 555 | Input/Output: [(-43 11 41 -24) -43]
Test Case: 556 | Input/Output: [(26 -20 93 -85) -85]
Test Case: 557 | Input/Output: [(58 40 -30 -24) -30]
Test Case: 558 | Input/Output: [(97 16 36 -83) -83]
Test Case: 559 | Input/Output: [(44 75 -52 43) -52]
Test Case: 560 | Input/Output: [(23 89 -19 72) -19]
Test Case: 561 | Input/Output: [(-66 73 77 -98) -98]
Test Case: 562 | Input/Output: [(80 74 96 52) 52]
Test Case: 563 | Input/Output: [(92 -65 88 29) -65]
Test Case: 564 | Input/Output: [(-24 -66 -54 97) -66]
Test Case: 565 | Input/Output: [(-70 26 -12 85) -70]
Test Case: 566 | Input/Output: [(83 66 -5 82) -5]
Test Case: 567 | Input/Output: [(85 -72 20 -15) -72]
Test Case: 568 | Input/Output: [(-92 -14 -82 -19) -92]
Test Case: 569 | Input/Output: [(-15 23 -4 17) -15]
Test Case: 570 | Input/Output: [(-3 -29 67 -71) -71]
Test Case: 571 | Input/Output: [(79 17 99 -95) -95]
Test Case: 572 | Input/Output: [(-73 57 -48 -71) -73]
Test Case: 573 | Input/Output: [(-45 47 -22 -58) -58]
Test Case: 574 | Input/Output: [(-66 -29 86 -87) -87]
Test Case: 575 | Input/Output: [(-6 -77 -5 -81) -81]
Test Case: 576 | Input/Output: [(78 9 -51 18) -51]
Test Case: 577 | Input/Output: [(-59 -80 7 -48) -80]
Test Case: 578 | Input/Output: [(-7 -89 -32 -74) -89]
Test Case: 579 | Input/Output: [(-43 12 -1 -22) -43]
Test Case: 580 | Input/Output: [(96 19 66 36) 19]
Test Case: 581 | Input/Output: [(-45 44 27 -81) -81]
Test Case: 582 | Input/Output: [(-68 -9 93 22) -68]
Test Case: 583 | Input/Output: [(84 -19 19 -85) -85]
Test Case: 584 | Input/Output: [(30 3 80 79) 3]
Test Case: 585 | Input/Output: [(70 80 -65 -19) -65]
Test Case: 586 | Input/Output: [(-8 -88 -73 -94) -94]
Test Case: 587 | Input/Output: [(10 -23 25 -80) -80]
Test Case: 588 | Input/Output: [(100 -28 -98 20) -98]
Test Case: 589 | Input/Output: [(-24 -58 14 73) -58]
Test Case: 590 | Input/Output: [(-44 -14 -11 88) -44]
Test Case: 591 | Input/Output: [(15 65 22 89) 15]
Test Case: 592 | Input/Output: [(-31 -3 -1 70) -31]
Test Case: 593 | Input/Output: [(-64 -77 -46 -68) -77]
Test Case: 594 | Input/Output: [(93 -42 10 61) -42]
Test Case: 595 | Input/Output: [(-1 9 -98 -32) -98]
Test Case: 596 | Input/Output: [(95 13 -94 -41) -94]
Test Case: 597 | Input/Output: [(1 -20 -78 -94) -94]
Test Case: 598 | Input/Output: [(70 -20 -22 -31) -31]
Test Case: 599 | Input/Output: [(-43 2 -5 97) -43]
Test Case: 600 | Input/Output: [(-62 68 -83 65) -83]
Test Case: 601 | Input/Output: [(69 14 -38 90) -38]
Test Case: 602 | Input/Output: [(-5 -27 -20 65) -27]
Test Case: 603 | Input/Output: [(86 20 -98 -30) -98]
Test Case: 604 | Input/Output: [(-82 49 -77 84) -82]
Test Case: 605 | Input/Output: [(-50 -29 37 23) -50]
Test Case: 606 | Input/Output: [(100 -32 11 70) -32]
Test Case: 607 | Input/Output: [(14 -68 -15 -84) -84]
Test Case: 608 | Input/Output: [(-52 69 25 -23) -52]
Test Case: 609 | Input/Output: [(20 -64 -44 36) -64]
Test Case: 610 | Input/Output: [(88 -36 -92 -37) -92]
Test Case: 611 | Input/Output: [(66 -73 17 33) -73]
Test Case: 612 | Input/Output: [(-93 33 -5 37) -93]
Test Case: 613 | Input/Output: [(20 -22 49 -15) -22]
Test Case: 614 | Input/Output: [(-38 -26 73 -36) -38]
Test Case: 615 | Input/Output: [(-43 72 -75 -75) -75]
Test Case: 616 | Input/Output: [(-26 -91 -76 59) -91]
Test Case: 617 | Input/Output: [(70 -32 70 -31) -32]
Test Case: 618 | Input/Output: [(-93 -64 -35 12) -93]
Test Case: 619 | Input/Output: [(-53 47 -33 -19) -53]
Test Case: 620 | Input/Output: [(-25 -15 -63 -100) -100]
Test Case: 621 | Input/Output: [(65 -19 -34 75) -34]
Test Case: 622 | Input/Output: [(-39 -51 43 -8) -51]
Test Case: 623 | Input/Output: [(80 11 13 -13) -13]
Test Case: 624 | Input/Output: [(1 31 11 -100) -100]
Test Case: 625 | Input/Output: [(64 -81 -3 21) -81]
Test Case: 626 | Input/Output: [(-12 -2 0 -56) -56]
Test Case: 627 | Input/Output: [(-100 99 97 51) -100]
Test Case: 628 | Input/Output: [(10 31 72 -90) -90]
Test Case: 629 | Input/Output: [(-69 72 -46 -82) -82]
Test Case: 630 | Input/Output: [(-7 -41 -50 82) -50]
Test Case: 631 | Input/Output: [(8 81 16 -19) -19]
Test Case: 632 | Input/Output: [(-56 -2 24 -92) -92]
Test Case: 633 | Input/Output: [(-24 62 -48 -26) -48]
Test Case: 634 | Input/Output: [(68 -77 23 7) -77]
Test Case: 635 | Input/Output: [(-41 -27 58 82) -41]
Test Case: 636 | Input/Output: [(23 -96 50 38) -96]
Test Case: 637 | Input/Output: [(15 -67 55 90) -67]
Test Case: 638 | Input/Output: [(-51 28 53 -82) -82]
Test Case: 639 | Input/Output: [(-66 24 -5 -10) -66]
Test Case: 640 | Input/Output: [(2 54 37 57) 2]
Test Case: 641 | Input/Output: [(24 -100 -8 -13) -100]
Test Case: 642 | Input/Output: [(42 50 -48 47) -48]
Test Case: 643 | Input/Output: [(-98 -89 58 7) -98]
Test Case: 644 | Input/Output: [(-35 -20 -16 6) -35]
Test Case: 645 | Input/Output: [(58 16 -46 75) -46]
Test Case: 646 | Input/Output: [(70 -7 -7 12) -7]
Test Case: 647 | Input/Output: [(-61 41 -90 -12) -90]
Test Case: 648 | Input/Output: [(78 52 31 -80) -80]
Test Case: 649 | Input/Output: [(-93 -34 -83 83) -93]
Test Case: 650 | Input/Output: [(54 11 73 -6) -6]
Test Case: 651 | Input/Output: [(11 77 -7 -50) -50]
Test Case: 652 | Input/Output: [(76 49 96 32) 32]
Test Case: 653 | Input/Output: [(-63 47 16 93) -63]
Test Case: 654 | Input/Output: [(-46 -44 85 -68) -68]
Test Case: 655 | Input/Output: [(80 -47 -67 47) -67]
Test Case: 656 | Input/Output: [(69 55 60 -16) -16]
Test Case: 657 | Input/Output: [(-53 -44 16 56) -53]
Test Case: 658 | Input/Output: [(-18 -66 -14 88) -66]
Test Case: 659 | Input/Output: [(-7 -55 34 -68) -68]
Test Case: 660 | Input/Output: [(-50 48 39 63) -50]
Test Case: 661 | Input/Output: [(79 74 67 -12) -12]
Test Case: 662 | Input/Output: [(13 -15 -68 42) -68]
Test Case: 663 | Input/Output: [(1 66 45 -80) -80]
Test Case: 664 | Input/Output: [(-54 48 60 -62) -62]
Test Case: 665 | Input/Output: [(-45 100 -49 6) -49]
Test Case: 666 | Input/Output: [(63 49 -45 -54) -54]
Test Case: 667 | Input/Output: [(-59 8 8 -99) -99]
Test Case: 668 | Input/Output: [(89 -50 91 15) -50]
Test Case: 669 | Input/Output: [(97 -15 -45 -60) -60]
Test Case: 670 | Input/Output: [(14 -8 -15 -57) -57]
Test Case: 671 | Input/Output: [(-70 -15 -62 98) -70]
Test Case: 672 | Input/Output: [(72 57 47 98) 47]
Test Case: 673 | Input/Output: [(58 -33 24 -40) -40]
Test Case: 674 | Input/Output: [(32 65 -79 -96) -96]
Test Case: 675 | Input/Output: [(32 90 -99 -1) -99]
Test Case: 676 | Input/Output: [(5 39 -89 10) -89]
Test Case: 677 | Input/Output: [(-74 -1 18 -35) -74]
Test Case: 678 | Input/Output: [(95 -23 -91 -24) -91]
Test Case: 679 | Input/Output: [(95 27 71 45) 27]
Test Case: 680 | Input/Output: [(82 88 -63 -8) -63]
Test Case: 681 | Input/Output: [(15 28 99 -57) -57]
Test Case: 682 | Input/Output: [(-5 80 91 18) -5]
Test Case: 683 | Input/Output: [(-9 -84 21 -62) -84]
Test Case: 684 | Input/Output: [(51 73 -55 -19) -55]
Test Case: 685 | Input/Output: [(-52 -94 89 81) -94]
Test Case: 686 | Input/Output: [(73 -28 -12 61) -28]
Test Case: 687 | Input/Output: [(-2 43 -75 -86) -86]
Test Case: 688 | Input/Output: [(-30 31 51 25) -30]
Test Case: 689 | Input/Output: [(90 62 5 -82) -82]
Test Case: 690 | Input/Output: [(33 -27 50 47) -27]
Test Case: 691 | Input/Output: [(-29 37 26 -66) -66]
Test Case: 692 | Input/Output: [(51 81 53 5) 5]
Test Case: 693 | Input/Output: [(20 -68 -96 66) -96]
Test Case: 694 | Input/Output: [(27 90 99 -21) -21]
Test Case: 695 | Input/Output: [(20 67 62 -54) -54]
Test Case: 696 | Input/Output: [(-21 -57 -23 -84) -84]
Test Case: 697 | Input/Output: [(70 76 -69 0) -69]
Test Case: 698 | Input/Output: [(65 55 -67 26) -67]
Test Case: 699 | Input/Output: [(-38 27 -98 -20) -98]
Test Case: 700 | Input/Output: [(84 -93 48 55) -93]
Test Case: 701 | Input/Output: [(9 16 -97 -48) -97]
Test Case: 702 | Input/Output: [(64 82 -99 -9) -99]
Test Case: 703 | Input/Output: [(-97 25 -59 -11) -97]
Test Case: 704 | Input/Output: [(-34 44 -79 -4) -79]
Test Case: 705 | Input/Output: [(66 -43 -72 -70) -72]
Test Case: 706 | Input/Output: [(-35 28 64 -36) -36]
Test Case: 707 | Input/Output: [(-81 99 28 -30) -81]
Test Case: 708 | Input/Output: [(-93 95 -98 43) -98]
Test Case: 709 | Input/Output: [(97 89 -19 -54) -54]
Test Case: 710 | Input/Output: [(59 14 1 30) 1]
Test Case: 711 | Input/Output: [(9 -18 -95 19) -95]
Test Case: 712 | Input/Output: [(-71 -8 -43 -34) -71]
Test Case: 713 | Input/Output: [(41 -76 53 -84) -84]
Test Case: 714 | Input/Output: [(77 42 -84 -67) -84]
Test Case: 715 | Input/Output: [(91 -50 67 25) -50]
Test Case: 716 | Input/Output: [(-67 -69 66 -45) -69]
Test Case: 717 | Input/Output: [(-27 26 -19 -81) -81]
Test Case: 718 | Input/Output: [(76 -27 -78 75) -78]
Test Case: 719 | Input/Output: [(25 -13 -100 -60) -100]
Test Case: 720 | Input/Output: [(62 34 -28 -1) -28]
Test Case: 721 | Input/Output: [(89 -73 0 32) -73]
Test Case: 722 | Input/Output: [(-6 -59 -1 100) -59]
Test Case: 723 | Input/Output: [(-95 63 -48 -29) -95]
Test Case: 724 | Input/Output: [(-100 -95 1 54) -100]
Test Case: 725 | Input/Output: [(87 -69 -67 13) -69]
Test Case: 726 | Input/Output: [(77 -21 38 -60) -60]
Test Case: 727 | Input/Output: [(60 100 76 71) 60]
Test Case: 728 | Input/Output: [(38 -65 14 93) -65]
Test Case: 729 | Input/Output: [(-93 10 -74 97) -93]
Test Case: 730 | Input/Output: [(-18 30 -96 48) -96]
Test Case: 731 | Input/Output: [(-2 -96 22 -73) -96]
Test Case: 732 | Input/Output: [(-38 -69 -79 35) -79]
Test Case: 733 | Input/Output: [(-62 -77 19 57) -77]
Test Case: 734 | Input/Output: [(69 97 11 99) 11]
Test Case: 735 | Input/Output: [(-94 81 -23 76) -94]
Test Case: 736 | Input/Output: [(-2 57 -91 75) -91]
Test Case: 737 | Input/Output: [(55 85 -7 6) -7]
Test Case: 738 | Input/Output: [(-63 9 -92 -92) -92]
Test Case: 739 | Input/Output: [(63 34 -53 3) -53]
Test Case: 740 | Input/Output: [(9 -87 73 10) -87]
Test Case: 741 | Input/Output: [(-12 -31 -84 -29) -84]
Test Case: 742 | Input/Output: [(80 -98 35 -95) -98]
Test Case: 743 | Input/Output: [(-14 -18 51 20) -18]
Test Case: 744 | Input/Output: [(43 22 -34 -54) -54]
Test Case: 745 | Input/Output: [(68 72 -92 -31) -92]
Test Case: 746 | Input/Output: [(68 -38 71 21) -38]
Test Case: 747 | Input/Output: [(8 11 -66 62) -66]
Test Case: 748 | Input/Output: [(23 -82 -61 72) -82]
Test Case: 749 | Input/Output: [(-18 -86 -16 -65) -86]
Test Case: 750 | Input/Output: [(51 -61 -89 -87) -89]
Test Case: 751 | Input/Output: [(-40 -6 -1 50) -40]
Test Case: 752 | Input/Output: [(-67 18 39 83) -67]
Test Case: 753 | Input/Output: [(-35 -70 -65 88) -70]
Test Case: 754 | Input/Output: [(80 -65 -10 -76) -76]
Test Case: 755 | Input/Output: [(-48 27 -61 16) -61]
Test Case: 756 | Input/Output: [(13 -35 14 -53) -53]
Test Case: 757 | Input/Output: [(90 -76 21 -46) -76]
Test Case: 758 | Input/Output: [(80 -79 76 -60) -79]
Test Case: 759 | Input/Output: [(27 19 89 -18) -18]
Test Case: 760 | Input/Output: [(38 67 57 -98) -98]
Test Case: 761 | Input/Output: [(-61 48 -35 -75) -75]
Test Case: 762 | Input/Output: [(67 -46 -86 11) -86]
Test Case: 763 | Input/Output: [(28 -91 -79 41) -91]
Test Case: 764 | Input/Output: [(-65 -94 -67 27) -94]
Test Case: 765 | Input/Output: [(27 -67 29 88) -67]
Test Case: 766 | Input/Output: [(25 27 -28 -26) -28]
Test Case: 767 | Input/Output: [(95 58 -35 93) -35]
Test Case: 768 | Input/Output: [(53 92 -4 -33) -33]
Test Case: 769 | Input/Output: [(-89 90 -8 63) -89]
Test Case: 770 | Input/Output: [(-86 -61 -46 -11) -86]
Test Case: 771 | Input/Output: [(-53 -74 -64 -86) -86]
Test Case: 772 | Input/Output: [(15 0 91 94) 0]
Test Case: 773 | Input/Output: [(-24 -19 14 44) -24]
Test Case: 774 | Input/Output: [(81 -35 27 -54) -54]
Test Case: 775 | Input/Output: [(36 30 -63 -71) -71]
Test Case: 776 | Input/Output: [(-92 -76 -53 -22) -92]
Test Case: 777 | Input/Output: [(56 82 100 95) 56]
Test Case: 778 | Input/Output: [(-36 65 33 -99) -99]
Test Case: 779 | Input/Output: [(58 99 -77 -18) -77]
Test Case: 780 | Input/Output: [(-54 -99 -26 22) -99]
Test Case: 781 | Input/Output: [(-3 -17 49 -10) -17]
Test Case: 782 | Input/Output: [(85 38 -27 -64) -64]
Test Case: 783 | Input/Output: [(38 -91 77 -24) -91]
Test Case: 784 | Input/Output: [(-23 -36 -4 -55) -55]
Test Case: 785 | Input/Output: [(61 79 10 -34) -34]
Test Case: 786 | Input/Output: [(50 71 6 56) 6]
Test Case: 787 | Input/Output: [(-88 39 -39 86) -88]
Test Case: 788 | Input/Output: [(-31 60 52 35) -31]
Test Case: 789 | Input/Output: [(14 -27 5 47) -27]
Test Case: 790 | Input/Output: [(-36 -35 -91 13) -91]
Test Case: 791 | Input/Output: [(81 -92 -67 3) -92]
Test Case: 792 | Input/Output: [(25 -12 100 -28) -28]
Test Case: 793 | Input/Output: [(91 56 8 62) 8]
Test Case: 794 | Input/Output: [(-44 -26 -99 23) -99]
Test Case: 795 | Input/Output: [(-42 -97 87 -89) -97]
Test Case: 796 | Input/Output: [(-33 24 8 -46) -46]
Test Case: 797 | Input/Output: [(-55 95 -85 23) -85]
Test Case: 798 | Input/Output: [(-58 80 -71 12) -71]
Test Case: 799 | Input/Output: [(75 -93 63 18) -93]
Test Case: 800 | Input/Output: [(-56 -32 12 -82) -82]
Test Case: 801 | Input/Output: [(-78 98 -54 27) -78]
Test Case: 802 | Input/Output: [(-92 -42 -99 86) -99]
Test Case: 803 | Input/Output: [(47 -27 -77 -9) -77]
Test Case: 804 | Input/Output: [(-88 12 20 -26) -88]
Test Case: 805 | Input/Output: [(15 -37 1 83) -37]
Test Case: 806 | Input/Output: [(-44 4 80 72) -44]
Test Case: 807 | Input/Output: [(-80 -34 43 65) -80]
Test Case: 808 | Input/Output: [(57 37 62 72) 37]
Test Case: 809 | Input/Output: [(56 -88 62 -38) -88]
Test Case: 810 | Input/Output: [(-1 11 25 -48) -48]
Test Case: 811 | Input/Output: [(33 54 -22 -47) -47]
Test Case: 812 | Input/Output: [(-18 70 67 43) -18]
Test Case: 813 | Input/Output: [(47 49 -29 -77) -77]
Test Case: 814 | Input/Output: [(-65 -7 -30 -55) -65]
Test Case: 815 | Input/Output: [(-12 -72 43 -60) -72]
Test Case: 816 | Input/Output: [(72 -52 52 72) -52]
Test Case: 817 | Input/Output: [(100 61 -72 -9) -72]
Test Case: 818 | Input/Output: [(62 -10 -1 -11) -11]
Test Case: 819 | Input/Output: [(27 31 -95 78) -95]
Test Case: 820 | Input/Output: [(-23 27 88 66) -23]
Test Case: 821 | Input/Output: [(-53 96 31 28) -53]
Test Case: 822 | Input/Output: [(26 67 82 7) 7]
Test Case: 823 | Input/Output: [(11 -70 56 -11) -70]
Test Case: 824 | Input/Output: [(-15 -66 -21 -5) -66]
Test Case: 825 | Input/Output: [(47 38 93 -27) -27]
Test Case: 826 | Input/Output: [(74 -29 -64 81) -64]
Test Case: 827 | Input/Output: [(33 86 76 -56) -56]
Test Case: 828 | Input/Output: [(-83 53 8 -74) -83]
Test Case: 829 | Input/Output: [(-71 89 -1 -79) -79]
Test Case: 830 | Input/Output: [(98 -9 24 -63) -63]
Test Case: 831 | Input/Output: [(-69 60 15 -46) -69]
Test Case: 832 | Input/Output: [(-8 50 77 -48) -48]
Test Case: 833 | Input/Output: [(-60 6 63 62) -60]
Test Case: 834 | Input/Output: [(-51 -59 89 11) -59]
Test Case: 835 | Input/Output: [(63 -65 -86 -30) -86]
Test Case: 836 | Input/Output: [(44 34 -71 91) -71]
Test Case: 837 | Input/Output: [(-65 23 42 -11) -65]
Test Case: 838 | Input/Output: [(2 -66 96 -38) -66]
Test Case: 839 | Input/Output: [(7 -69 -81 15) -81]
Test Case: 840 | Input/Output: [(61 56 -21 96) -21]
Test Case: 841 | Input/Output: [(-65 -1 69 69) -65]
Test Case: 842 | Input/Output: [(-75 11 92 -76) -76]
Test Case: 843 | Input/Output: [(-50 65 91 98) -50]
Test Case: 844 | Input/Output: [(-61 -98 -70 57) -98]
Test Case: 845 | Input/Output: [(-79 51 -48 12) -79]
Test Case: 846 | Input/Output: [(59 82 -13 16) -13]
Test Case: 847 | Input/Output: [(57 -53 29 -54) -54]
Test Case: 848 | Input/Output: [(-43 -84 -41 -16) -84]
Test Case: 849 | Input/Output: [(-76 58 23 84) -76]
Test Case: 850 | Input/Output: [(48 22 -52 -53) -53]
Test Case: 851 | Input/Output: [(-9 -41 -56 -70) -70]
Test Case: 852 | Input/Output: [(-31 -32 -77 -78) -78]
Test Case: 853 | Input/Output: [(0 85 -94 84) -94]
Test Case: 854 | Input/Output: [(86 1 -22 71) -22]
Test Case: 855 | Input/Output: [(-25 49 93 67) -25]
Test Case: 856 | Input/Output: [(-88 -91 86 -60) -91]
Test Case: 857 | Input/Output: [(88 -15 38 78) -15]
Test Case: 858 | Input/Output: [(66 -69 85 -56) -69]
Test Case: 859 | Input/Output: [(-10 -25 97 24) -25]
Test Case: 860 | Input/Output: [(-82 34 -89 -45) -89]
Test Case: 861 | Input/Output: [(-40 -50 73 -60) -60]
Test Case: 862 | Input/Output: [(-65 50 32 -29) -65]
Test Case: 863 | Input/Output: [(-41 -67 -50 30) -67]
Test Case: 864 | Input/Output: [(-19 -22 64 -63) -63]
Test Case: 865 | Input/Output: [(53 94 55 82) 53]
Test Case: 866 | Input/Output: [(51 8 -97 -43) -97]
Test Case: 867 | Input/Output: [(-14 37 42 -43) -43]
Test Case: 868 | Input/Output: [(29 -8 74 97) -8]
Test Case: 869 | Input/Output: [(98 -54 -30 80) -54]
Test Case: 870 | Input/Output: [(-33 -28 -12 0) -33]
Test Case: 871 | Input/Output: [(-3 -79 -62 -94) -94]
Test Case: 872 | Input/Output: [(96 47 75 82) 47]
Test Case: 873 | Input/Output: [(-57 99 -66 -60) -66]
Test Case: 874 | Input/Output: [(-66 78 -35 -19) -66]
Test Case: 875 | Input/Output: [(91 10 60 -74) -74]
Test Case: 876 | Input/Output: [(18 -10 78 90) -10]
Test Case: 877 | Input/Output: [(24 -37 -23 2) -37]
Test Case: 878 | Input/Output: [(73 -20 -95 43) -95]
Test Case: 879 | Input/Output: [(0 96 65 -43) -43]
Test Case: 880 | Input/Output: [(90 40 -57 -63) -63]
Test Case: 881 | Input/Output: [(-51 -47 -61 -57) -61]
Test Case: 882 | Input/Output: [(92 -39 -30 6) -39]
Test Case: 883 | Input/Output: [(-41 35 56 -77) -77]
Test Case: 884 | Input/Output: [(-62 97 -68 -4) -68]
Test Case: 885 | Input/Output: [(63 65 13 47) 13]
Test Case: 886 | Input/Output: [(-64 -94 44 50) -94]
Test Case: 887 | Input/Output: [(74 -2 70 53) -2]
Test Case: 888 | Input/Output: [(-72 -86 66 30) -86]
Test Case: 889 | Input/Output: [(-3 -22 -97 -40) -97]
Test Case: 890 | Input/Output: [(52 58 -73 76) -73]
Test Case: 891 | Input/Output: [(-17 48 93 -73) -73]
Test Case: 892 | Input/Output: [(97 -80 -81 -66) -81]
Test Case: 893 | Input/Output: [(31 -66 -32 28) -66]
Test Case: 894 | Input/Output: [(52 11 0 4) 0]
Test Case: 895 | Input/Output: [(-6 70 81 -32) -32]
Test Case: 896 | Input/Output: [(-33 100 -64 -97) -97]
Test Case: 897 | Input/Output: [(-84 89 -34 48) -84]
Test Case: 898 | Input/Output: [(93 -72 -4 85) -72]
Test Case: 899 | Input/Output: [(37 53 17 -56) -56]
Test Case: 900 | Input/Output: [(-9 -3 -51 -26) -51]
Test Case: 901 | Input/Output: [(-85 98 -75 53) -85]
Test Case: 902 | Input/Output: [(7 40 98 21) 7]
Test Case: 903 | Input/Output: [(-49 35 59 16) -49]
Test Case: 904 | Input/Output: [(-81 -66 19 -95) -95]
Test Case: 905 | Input/Output: [(49 14 16 21) 14]
Test Case: 906 | Input/Output: [(29 83 61 -26) -26]
Test Case: 907 | Input/Output: [(57 -76 73 23) -76]
Test Case: 908 | Input/Output: [(85 -57 -78 27) -78]
Test Case: 909 | Input/Output: [(68 -77 -75 92) -77]
Test Case: 910 | Input/Output: [(14 -66 -4 -48) -66]
Test Case: 911 | Input/Output: [(96 71 -50 1) -50]
Test Case: 912 | Input/Output: [(16 97 89 85) 16]
Test Case: 913 | Input/Output: [(-46 10 44 -22) -46]
Test Case: 914 | Input/Output: [(81 -47 -22 90) -47]
Test Case: 915 | Input/Output: [(-52 84 -68 28) -68]
Test Case: 916 | Input/Output: [(55 82 -62 -66) -66]
Test Case: 917 | Input/Output: [(53 -13 91 34) -13]
Test Case: 918 | Input/Output: [(31 -13 95 -21) -21]
Test Case: 919 | Input/Output: [(-58 77 34 -87) -87]
Test Case: 920 | Input/Output: [(-67 -58 78 -57) -67]
Test Case: 921 | Input/Output: [(30 70 70 -10) -10]
Test Case: 922 | Input/Output: [(-41 41 -16 -36) -41]
Test Case: 923 | Input/Output: [(33 37 97 95) 33]
Test Case: 924 | Input/Output: [(86 -54 61 40) -54]
Test Case: 925 | Input/Output: [(-15 6 -87 -4) -87]
Test Case: 926 | Input/Output: [(-87 -40 -85 32) -87]
Test Case: 927 | Input/Output: [(81 90 -11 9) -11]
Test Case: 928 | Input/Output: [(79 64 62 -80) -80]
Test Case: 929 | Input/Output: [(-52 12 37 90) -52]
Test Case: 930 | Input/Output: [(-44 -100 -46 -79) -100]
Test Case: 931 | Input/Output: [(23 -80 5 -81) -81]
Test Case: 932 | Input/Output: [(-93 17 -86 -28) -93]
Test Case: 933 | Input/Output: [(-7 66 -15 -47) -47]
Test Case: 934 | Input/Output: [(-89 6 62 -51) -89]
Test Case: 935 | Input/Output: [(-30 35 -47 -5) -47]
Test Case: 936 | Input/Output: [(-10 39 1 -67) -67]
Test Case: 937 | Input/Output: [(74 -89 22 84) -89]
Test Case: 938 | Input/Output: [(-4 24 -68 0) -68]
Test Case: 939 | Input/Output: [(75 -81 -86 36) -86]
Test Case: 940 | Input/Output: [(-79 -78 -34 -4) -79]
Test Case: 941 | Input/Output: [(63 -32 -92 -10) -92]
Test Case: 942 | Input/Output: [(88 36 -46 -94) -94]
Test Case: 943 | Input/Output: [(98 29 -26 -75) -75]
Test Case: 944 | Input/Output: [(-79 66 -51 3) -79]
Test Case: 945 | Input/Output: [(55 82 -70 17) -70]
Test Case: 946 | Input/Output: [(-89 61 -44 46) -89]
Test Case: 947 | Input/Output: [(77 -2 -54 -69) -69]
Test Case: 948 | Input/Output: [(-66 -23 -77 77) -77]
Test Case: 949 | Input/Output: [(-55 97 -43 -13) -55]
Test Case: 950 | Input/Output: [(-62 49 -100 -77) -100]
Test Case: 951 | Input/Output: [(96 -90 27 -28) -90]
Test Case: 952 | Input/Output: [(87 90 16 71) 16]
Test Case: 953 | Input/Output: [(-69 -56 -86 58) -86]
Test Case: 954 | Input/Output: [(-25 -69 -93 -9) -93]
Test Case: 955 | Input/Output: [(-26 -36 34 73) -36]
Test Case: 956 | Input/Output: [(-87 97 22 -25) -87]
Test Case: 957 | Input/Output: [(31 63 38 68) 31]
Test Case: 958 | Input/Output: [(81 44 91 6) 6]
Test Case: 959 | Input/Output: [(21 -72 25 83) -72]
Test Case: 960 | Input/Output: [(82 -13 83 -93) -93]
Test Case: 961 | Input/Output: [(18 16 -20 38) -20]
Test Case: 962 | Input/Output: [(-54 19 -32 -70) -70]
Test Case: 963 | Input/Output: [(68 99 -37 74) -37]
Test Case: 964 | Input/Output: [(42 -93 -73 54) -93]
Test Case: 965 | Input/Output: [(-26 -78 30 37) -78]
Test Case: 966 | Input/Output: [(-69 -68 -83 57) -83]
Test Case: 967 | Input/Output: [(-73 80 -3 -39) -73]
Test Case: 968 | Input/Output: [(11 -80 -99 -49) -99]
Test Case: 969 | Input/Output: [(-94 1 -82 -58) -94]
Test Case: 970 | Input/Output: [(-55 -72 -84 -58) -84]
Test Case: 971 | Input/Output: [(53 97 -56 47) -56]
Test Case: 972 | Input/Output: [(-67 42 -74 -56) -74]
Test Case: 973 | Input/Output: [(4 -43 54 -98) -98]
Test Case: 974 | Input/Output: [(-81 80 -77 46) -81]
Test Case: 975 | Input/Output: [(-34 -40 7 60) -40]
Test Case: 976 | Input/Output: [(-38 36 73 -82) -82]
Test Case: 977 | Input/Output: [(85 72 45 -69) -69]
Test Case: 978 | Input/Output: [(50 -34 -6 72) -34]
Test Case: 979 | Input/Output: [(-40 -74 5 -90) -90]
Test Case: 980 | Input/Output: [(39 1 6 -54) -54]
Test Case: 981 | Input/Output: [(66 16 -62 22) -62]
Test Case: 982 | Input/Output: [(42 -30 80 26) -30]
Test Case: 983 | Input/Output: [(-74 80 -65 -18) -74]
Test Case: 984 | Input/Output: [(45 -28 55 -56) -56]
Test Case: 985 | Input/Output: [(34 57 -45 -37) -45]
Test Case: 986 | Input/Output: [(-81 -66 41 -14) -81]
Test Case: 987 | Input/Output: [(2 0 -30 -47) -47]
Test Case: 988 | Input/Output: [(-77 -62 -86 87) -86]
Test Case: 989 | Input/Output: [(78 47 95 -56) -56]
Test Case: 990 | Input/Output: [(8 -84 49 -57) -84]
Test Case: 991 | Input/Output: [(-87 29 11 78) -87]
Test Case: 992 | Input/Output: [(-50 -11 -94 11) -94]
Test Case: 993 | Input/Output: [(98 78 80 14) 14]
Test Case: 994 | Input/Output: [(-99 -17 -96 17) -99]
Test Case: 995 | Input/Output: [(-43 -88 -100 -33) -100]
Test Case: 996 | Input/Output: [(-56 -89 57 46) -89]
Test Case: 997 | Input/Output: [(70 20 -4 -93) -93]
Test Case: 998 | Input/Output: [(-36 80 44 -77) -77]
Test Case: 999 | Input/Output: [(-89 79 -61 -31) -89]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -81 51 112 92 -65 -86 -110 -103 120 -69 -67 -60 51 -37 -99 -125
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-77 -77 -77 -70] -77] [[15 15 9 15] 9] [[59 62 59 59] 59] [[-64 -64 -64 -64] -64] [[-86 -86 -86 -51] -86] [[12 12 12 60] 12] [[36 36 36 -62] -62] [[99 99 60 99] 60] [[-65 -65 -65 -24] -65] [[64 64 64 -79] -79] [(65 65 65 65) 65] [(-77 -77 -77 -77) -77] [(66 66 66 66) 66] [(-7 -7 -7 -7) -7] [(78 78 78 78) 78] [(52 16 6 81) 6] [(5 35 47 0) 0] [(35 5 34 7) 5] [(65 75 77 16) 16] [(46 79 99 72) 46] [(73 50 2 21) 2] [(27 77 7 20) 7] [(1 13 74 17) 1] [(36 11 18 19) 11] [(68 33 71 99) 33] [(99 58 72 35) 35] [(85 64 62 16) 16] [(31 27 16 71) 16] [(2 57 36 22) 2] [(37 89 65 80) 37] [(67 48 68 36) 36] [(96 18 47 90) 18] [(87 42 30 9) 9] [(98 38 92 35) 35] [(86 87 14 79) 14] [(2 -1 -8 10) -8] [(-67 -59 -59 29) -67] [(83 -39 -74 -85) -85] [(-2 93 -42 -67) -67] [(12 50 -26 -30) -30] [(-77 63 87 -52) -77] [(-50 90 70 78) -50] [(-76 78 54 40) -76] [(29 58 -53 39) -53] [(-70 26 -80 93) -80] [(92 81 52 -4) -4] [(-89 -65 -64 -90) -90] [(94 -46 90 24) -46] [(37 31 -24 -77) -77] [(-36 -78 -100 86) -100] [(-83 11 -21 83) -83] [(-7 90 64 15) -7] [(-15 61 24 12) -15] [(20 -70 -14 55) -70] [(0 10 63 7) 0] [(-5 34 -20 95) -20] [(-6 47 67 -91) -91] [(6 81 -37 -55) -55] [(-3 -7 -52 -70) -70] [(-4 73 93 60) -4] [(39 -60 71 -80) -80] [(-8 -7 10 75) -8] [(-58 49 3 -82) -82] [(10 -49 -55 100) -55] [(-73 20 -9 43) -73] [(-16 -9 99 -71) -71] [(3 -72 -11 10) -72] [(-16 99 -15 -40) -40] [(-52 5 95 -13) -52] [(70 31 -33 51) -33] [(67 -42 -9 -40) -42] [(-34 -30 23 77) -34] [(-46 -79 -87 -86) -87] [(6 14 -68 45) -68] [(92 -44 -59 44) -59] [(-23 3 100 19) -23] [(21 10 57 1) 1] [(-81 -25 -55 -84) -84] [(83 24 66 -12) -12] [(28 49 -96 50) -96] [(-31 -84 -11 -25) -84] [(32 -63 63 100) -63] [(70 -74 82 38) -74] [(-74 16 -29 -64) -74] [(-71 -83 35 15) -83] [(-76 77 -3 50) -76] [(-57 -39 -28 100) -57] [(32 -53 -61 -80) -80] [(2 41 70 31) 2] [(-9 96 -47 -48) -48] [(80 -15 80 99) -15] [(-81 42 68 -23) -81] [(60 -80 18 -60) -80] [(85 -1 -65 -72) -72] [(91 94 42 -59) -59])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output:                    
Correct output: 0                   | Program output: 47                 
Correct output: 5                   | Program output: 34                 
Correct output: 16                  | Program output: 77                 
Correct output: 46                  | Program output: 99                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 74                 
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 71                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 62                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 36                 
Correct output: 37                  | Program output: 65                 
Correct output: 36                  | Program output: 68                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 30                 
Correct output: 35                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: 87                 
Correct output: -50                 | Program output: 70                 
Correct output: -76                 | Program output: 54                 
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 52                 
Correct output: -90                 | Program output: -64                
Correct output: -46                 | Program output: 90                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -21                
Correct output: -7                  | Program output: 64                 
Correct output: -15                 | Program output: 24                 
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 63                 
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: 67                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: 93                 
Correct output: -80                 | Program output: 71                 
Correct output: -8                  | Program output: 10                 
Correct output: -82                 | Program output: 3                  
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -9                 
Correct output: -71                 | Program output: 99                 
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -15                
Correct output: -52                 | Program output: 95                 
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: 23                 
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: 100                
Correct output: 1                   | Program output: 57                 
Correct output: -84                 | Program output: -55                
Correct output: -12                 | Program output: 66                 
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -11                
Correct output: -63                 | Program output: 63                 
Correct output: -74                 | Program output: 82                 
Correct output: -74                 | Program output: -29                
Correct output: -83                 | Program output: 35                 
Correct output: -76                 | Program output: -3                 
Correct output: -57                 | Program output: -28                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 70                 
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: 68                 
Correct output: -80                 | Program output: 18                 
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_757} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_274} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when})
Lexicase best program: (integer_yank integer_inc in4 integer_yankdup exec_yank in3 in3 exec_empty boolean_invert_first_then_and print_integer integer_fromboolean boolean_swap exec_y_when_autoconstructing (boolean_xor in1 in4) exec_eq exec_when (exec_shove (exec_y_when_autoconstructing (integer_empty) exec_rot (boolean_frominteger tag_exec_757 (integer_rot exec_noop print_integer) integer_inc boolean_pop boolean_or) (exec_stackdepth boolean_invert_first_then_and integer_dup_times exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_shove integer_dup exec_y_when_autoconstructing () exec_yank integer_gte boolean_rot integer_yankdup boolean_dup integer_add) (boolean_swap integer_lt exec_while (in2 integer_dup integer_dec integer_eq integer_flush boolean_flush print_integer exec_rot (print_integer in3 integer_mult tag_exec_274 (integer_dup_items) exec_dup (exec_pop (exec_empty) exec_pop (exec_when ()))) () ()))) ())))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 1, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_yank} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_integer} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_757} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_274} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when})
Zero cases best program: (integer_yank integer_inc in4 integer_yankdup exec_yank in3 in3 exec_empty boolean_invert_first_then_and print_integer integer_fromboolean boolean_swap exec_y_when_autoconstructing (boolean_xor in1 in4) exec_eq exec_when (exec_shove (exec_y_when_autoconstructing (integer_empty) exec_rot (boolean_frominteger tag_exec_757 (integer_rot exec_noop print_integer) integer_inc boolean_pop boolean_or) (exec_stackdepth boolean_invert_first_then_and integer_dup_times exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_shove integer_dup exec_y_when_autoconstructing () exec_yank integer_gte boolean_rot integer_yankdup boolean_dup integer_add) (boolean_swap integer_lt exec_while (in2 integer_dup integer_dec integer_eq integer_flush boolean_flush print_integer exec_rot (print_integer in3 integer_mult tag_exec_274 (integer_dup_items) exec_dup (exec_pop (exec_empty) exec_pop (exec_when ()))) () ()))) ())))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 1 3 3 3 3 3 3 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 4 1 3 3 3 3 3 3 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Best program: (boolean_xor integer_mult in3 integer_yank integer_dup exec_noop exec_noop exec_shove (integer_min print_integer print_integer boolean_not integer_yankdup) integer_dup_times in1 exec_yank integer_yank exec_k (exec_empty exec_eq) (exec_s (boolean_dup) () ()))
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.999 0.997 0.997 0.997 0.997 0.997 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.239
Average program size in population (points): 69.115
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463847
--- Timings ---
Current time: 1559582790451 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.9 seconds, 33.8%
Fitness Testing:      1.6 seconds, 61.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 22                 
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -52                
Correct output: -50                 | Program output: 78                 
Correct output: -76                 | Program output: 40                 
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 26                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: 11                 
Correct output: -7                  | Program output: 15                 
Correct output: -15                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 7                  
Correct output: -20                 | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -13                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -30                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 14                 
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 49                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Lexicase best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Zero cases best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 176 443 176 176 175 92 155 176 155)
Population mean number of elite cases: 1.90
Count of perfect (error zero) individuals by case: (175 176 443 176 176 175 92 155 176 155)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ())
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 8.101
Median total errors in population: 9
Error averages by case: (0.825 0.824 0.557 0.824 0.824 0.825 0.908 0.845 0.824 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.761
Average program size in population (points): 76.027
Average percent parens in population: 0.274
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.511
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1059135
--- Timings ---
Current time: 1559582792986 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 46.1%
Fitness Testing:      2.2 seconds, 43.0%
Report:               0.5 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 52                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 35                 
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 73                 
Correct output: 7                   | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 36                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 99                 
Correct output: 16                  | Program output: 85                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 67                 
Correct output: 18                  | Program output: 96                 
Correct output: 9                   | Program output: 87                 
Correct output: 35                  | Program output: 98                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: 83                 
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: 92                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 94                 
Correct output: -77                 | Program output: 37                 
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: 6                  
Correct output: -70                 | Program output: -3                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 39                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: 3                  
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 70                 
Correct output: -42                 | Program output: 67                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -46                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: 83                 
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: 32                 
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 60                 
Correct output: -72                 | Program output: 85                 
Correct output: -59                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction -69} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_95} {:close 1, :instruction 12} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_swap integer_mod in2 in3 exec_y_when_autoconstructing () boolean_rot in1 print_integer in1 boolean_eq exec_k_when_autoconstructing (in1 exec_do*range (exec_do*count () integer_stackdepth integer_stackdepth integer_eq) integer_empty) () integer_gte integer_sub integer_pop -69 exec_eq exec_dup (exec_k (integer_max integer_sub integer_mult) () integer_dup_items boolean_rot integer_yankdup) exec_do*while (integer_pop) integer_eq exec_stackdepth boolean_or exec_y_when_autoconstructing () exec_y () boolean_swap integer_gte exec_rot (integer_add integer_inc tag_exec_95 (12) print_exec (integer_empty) boolean_eq) () ())
Lexicase best errors: [0 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gte} {:close 2, :instruction integer_sub} {:close 0, :instruction integer_pop} {:close 1, :instruction -69} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_exec_95} {:close 1, :instruction 12} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_swap integer_mod in2 in3 exec_y_when_autoconstructing () boolean_rot in1 print_integer in1 boolean_eq exec_k_when_autoconstructing (in1 exec_do*range (exec_do*count () integer_stackdepth integer_stackdepth integer_eq) integer_empty) () integer_gte integer_sub integer_pop -69 exec_eq exec_dup (exec_k (integer_max integer_sub integer_mult) () integer_dup_items boolean_rot integer_yankdup) exec_do*while (integer_pop) integer_eq exec_stackdepth boolean_or exec_y_when_autoconstructing () exec_y () boolean_swap integer_gte exec_rot (integer_add integer_inc tag_exec_95 (12) print_exec (integer_empty) boolean_eq) () ())
Zero cases best errors: [0 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 171 171 616 631 613 169 97 98 93)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (171 171 171 616 631 613 169 97 98 93)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_eq})
Best program: (exec_s (in1 boolean_empty print_integer exec_noop exec_do*range (integer_lte boolean_eq)) (boolean_invert_first_then_and integer_max boolean_stackdepth exec_do*count (boolean_flush) exec_do*count (exec_do*count (integer_dec exec_k_when_autoconstructing () (integer_swap exec_eq)))) ())
Errors: [0 0 0 1 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 29
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 7.17
Median total errors in population: 7
Error averages by case: (0.829 0.829 0.829 0.384 0.369 0.387 0.831 0.903 0.902 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.258
Average program size in population (points): 38.227
Average percent parens in population: 0.188
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.349
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 445
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 483
Syntactic diversity (% unique Push programs):	 0.389
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1368750
--- Timings ---
Current time: 1559582795775 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.6 seconds, 57.0%
Fitness Testing:      2.6 seconds, 31.8%
Report:               0.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 22                 
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -52                
Correct output: -50                 | Program output: 78                 
Correct output: -76                 | Program output: 40                 
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 26                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: 11                 
Correct output: -7                  | Program output: 15                 
Correct output: -15                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 7                  
Correct output: -20                 | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -13                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -30                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 14                 
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 49                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Lexicase best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ())
Lexicase best errors: [1 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Zero cases best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ())
Zero cases best errors: [1 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (151 268 259 269 269 264 259 269 254 375)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (151 268 259 269 269 264 259 269 254 375)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ())
Errors: [1 0 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.363
Median total errors in population: 7
Error averages by case: (0.849 0.732 0.741 0.731 0.731 0.736 0.741 0.731 0.746 0.625)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.476
Average program size in population (points): 47.564
Average percent parens in population: 0.244
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.71025
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1801172
--- Timings ---
Current time: 1559582798133 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.3 seconds, 60.7%
Fitness Testing:      3.0 seconds, 28.3%
Report:               1.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 52                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 19                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 31                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 90                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: 2                  
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: 20                 
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: 3                  
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 51                 
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: 44                 
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Lexicase best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq exec_s (boolean_dup) () ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Zero cases best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq exec_s (boolean_dup) () ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 180 364 540 897 531 899 177 177 532)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (177 180 364 540 897 531 899 177 177 532)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq exec_s (boolean_dup) () ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 28
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 5.526
Median total errors in population: 4
Error averages by case: (0.823 0.82 0.636 0.46 0.103 0.469 0.101 0.823 0.823 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.098
Average program size in population (points): 47.451
Average percent parens in population: 0.189
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.303125
Median age in population: 6.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2108426
--- Timings ---
Current time: 1559582800464 milliseconds
Total Time:          12.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.1 seconds, 63.6%
Fitness Testing:      3.3 seconds, 25.5%
Report:               1.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 50                 
Correct output: 7                   | Program output: 27                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 58                 
Correct output: 16                  | Program output: 64                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 42                 
Correct output: 35                  | Program output: 38                 
Correct output: 14                  | Program output: 86                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -39                
Correct output: -67                 | Program output: -2                 
Correct output: -30                 | Program output: 12                 
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: 81                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: 31                 
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: 6                  
Correct output: -70                 | Program output: -7                 
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -60                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -79                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 10                 
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: 24                 
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -53                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -9                 
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -1                 
Correct output: -59                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Lexicase best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min print_integer print_integer boolean_not integer_yankdup) integer_dup_times) (in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Zero cases best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min print_integer print_integer boolean_not integer_yankdup) integer_dup_times) (in1 exec_yank integer_yank in4 exec_empty exec_eq exec_s (boolean_dup) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 283 1000 733 778 892 769 1000 769 899)
Population mean number of elite cases: 7.41
Count of perfect (error zero) individuals by case: (283 283 0 733 778 892 769 0 769 899)
Population mean number of perfect (error zero) cases: 5.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min print_integer print_integer boolean_not integer_yankdup) integer_dup_times) (in1 exec_yank integer_yank in4 exec_empty exec_eq) exec_s (boolean_dup) () ())
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 4.594
Median total errors in population: 4
Error averages by case: (0.717 0.717 1.0 0.267 0.222 0.108 0.231 1.0 0.231 0.101)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 24.667
Average program size in population (points): 29.604
Average percent parens in population: 0.162
Minimum age in population: 5.5
Maximum age in population: 9.5
Average age in population: 8.0060625
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 347
Genome diversity (% unique genomes):	 0.399
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 404
Syntactic diversity (% unique Push programs):	 0.337
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2336749
--- Timings ---
Current time: 1559582802825 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.1 seconds, 66.2%
Fitness Testing:      3.5 seconds, 23.0%
Report:               1.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 72                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 13                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 22                 
Correct output: 37                  | Program output: 80                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -52                
Correct output: -50                 | Program output: 78                 
Correct output: -76                 | Program output: 40                 
Correct output: -53                 | Program output: 39                 
Correct output: -80                 | Program output: 26                 
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: 11                 
Correct output: -7                  | Program output: 15                 
Correct output: -15                 | Program output: 12                 
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 7                  
Correct output: -20                 | Program output: 34                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -7                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: 20                 
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -13                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -30                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 14                 
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 49                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -64                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 50                 
Correct output: -57                 | Program output: -39                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 31                 
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Lexicase best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 boolean_frominteger exec_eq exec_s (boolean_dup) () ())
Lexicase best errors: [1 1 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Zero cases best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank in4 boolean_frominteger exec_eq exec_s (boolean_dup) () ())
Zero cases best errors: [1 1 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (740 1 409 1 401 670 1 670 409 737)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (740 1 409 1 401 670 1 670 409 737)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup})
Best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in2 in4 integer_min print_integer print_integer boolean_not boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq exec_s (boolean_dup) () ())
Errors: [1 1 0 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 5.961
Median total errors in population: 6
Error averages by case: (0.26 0.999 0.591 0.999 0.599 0.33 0.999 0.33 0.591 0.263)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.992
Average program size in population (points): 31.377
Average percent parens in population: 0.199
Minimum age in population: 6.5
Maximum age in population: 11.09375
Average age in population: 9.52840625
Median age in population: 9.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 283
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2568066
--- Timings ---
Current time: 1559582804954 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.7 seconds, 67.9%
Fitness Testing:      3.7 seconds, 21.5%
Report:               1.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 00                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: 36                 
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 64                 
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 5                  
Correct output: 5                   | Program output: 34                 
Correct output: 16                  | Program output: 65                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 72                 
Correct output: 16                  | Program output: 62                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 67                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 30                 
Correct output: 35                  | Program output: 92                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -74                
Correct output: -67                 | Program output: -42                
Correct output: -30                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: 52                 
Correct output: -90                 | Program output: -89                
Correct output: -46                 | Program output: 90                 
Correct output: -77                 | Program output: -24                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -6                 
Correct output: -55                 | Program output: -37                
Correct output: -70                 | Program output: -52                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: 39                 
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -58                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -16                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -16                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -9                 
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 21                 
Correct output: -84                 | Program output: -81                
Correct output: -12                 | Program output: 66                 
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -61                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -47                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: 18                 
Correct output: -72                 | Program output: -65                
Correct output: -59                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293})
Lexicase best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293)
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 21
Percent parens: 0.048
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293})
Zero cases best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293)
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 21
Percent parens: 0.048
--- Lexicase Population Statistics ---
Count of elite individuals by case: (650 430 936 649 369 936 650 445 357 357)
Population mean number of elite cases: 5.78
Count of perfect (error zero) individuals by case: (650 430 936 649 369 936 650 445 357 357)
Population mean number of perfect (error zero) cases: 5.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293})
Best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank tag_integer_293)
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 4.221
Median total errors in population: 3
Error averages by case: (0.35 0.57 0.064 0.351 0.631 0.064 0.35 0.555 0.643 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.93
Average program size in population (points): 26.428
Average percent parens in population: 0.121
Minimum age in population: 8.0
Maximum age in population: 12.734375
Average age in population: 10.973953125
Median age in population: 10.9296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 278
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2790556
--- Timings ---
Current time: 1559582807228 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.6 seconds, 69.4%
Fitness Testing:      3.9 seconds, 20.1%
Report:               1.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 403 805 809 369 403 928 369 253 369)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (403 403 805 809 369 403 928 369 253 369)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 4.889
Median total errors in population: 4
Error averages by case: (0.597 0.597 0.195 0.191 0.631 0.597 0.072 0.631 0.747 0.631)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.793
Average program size in population (points): 26.367
Average percent parens in population: 0.124
Minimum age in population: 9.5
Maximum age in population: 14.3515625
Average age in population: 12.4881171875
Median age in population: 12.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3014444
--- Timings ---
Current time: 1559582809412 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.3 seconds, 70.5%
Fitness Testing:      4.2 seconds, 19.1%
Report:               2.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (881 879 532 529 384 532 532 931 936 532)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (881 879 532 529 384 532 532 931 936 532)
Population mean number of perfect (error zero) cases: 6.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (exec_k_when_autoconstructing (in2 integer_min in4 integer_min print_integer print_integer boolean_not) (integer_yankdup) integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ()) ())
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 27
Size: 37
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 3.332
Median total errors in population: 3
Error averages by case: (0.119 0.121 0.468 0.471 0.616 0.468 0.468 0.069 0.064 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.119
Average program size in population (points): 29.331
Average percent parens in population: 0.159
Minimum age in population: 11.96875
Maximum age in population: 15.87109375
Average age in population: 13.85612109375
Median age in population: 13.9609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 372
Genome diversity (% unique genomes):	 0.351
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 377
Syntactic diversity (% unique Push programs):	 0.312
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3249974
--- Timings ---
Current time: 1559582811625 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.1 seconds, 71.4%
Fitness Testing:      4.4 seconds, 18.3%
Report:               2.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 229
Test mean error for best: 0.22900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 15                 
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 99                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 5                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 21                 
Correct output: 7                   | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 27                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 79                 
Correct output: -8                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: 29                 
Correct output: -80                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -78                
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -70                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -72                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: 31                 
Correct output: -42                 | Program output: -42                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -86                
Correct output: -68                 | Program output: 6                  
Correct output: -59                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: 28                 
Correct output: -84                 | Program output: -84                
Correct output: -63                 | Program output: -63                
Correct output: -74                 | Program output: -74                
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: -15                
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -80                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Lexicase best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Zero cases best program: (exec_yank boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (880 880 880 880 879 880 756 180 173 756)
Population mean number of elite cases: 7.14
Count of perfect (error zero) individuals by case: (880 880 880 880 879 880 756 180 173 756)
Population mean number of perfect (error zero) cases: 7.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_293} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup})
Best program: (exec_noop boolean_dup exec_k_when_autoconstructing (boolean_empty exec_dup () in1 integer_eq integer_fromboolean exec_shove (integer_eq in2 integer_min in4 integer_min print_integer print_integer boolean_not) integer_yankdup) (integer_dup_times in1 exec_yank integer_yank tag_integer_293 exec_empty exec_eq) exec_s (boolean_dup) () ())
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 2.856
Median total errors in population: 2
Error averages by case: (0.12 0.12 0.12 0.12 0.121 0.12 0.244 0.82 0.827 0.244)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.774
Average program size in population (points): 32.537
Average percent parens in population: 0.198
Minimum age in population: 13.453125
Maximum age in population: 17.236328125
Average age in population: 15.316818359375
Median age in population: 15.271484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 404
Genome diversity (% unique genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 415
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3495853
--- Timings ---
Current time: 1559582813829 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 71.9%
Fitness Testing:      4.6 seconds, 17.7%
Report:               2.6 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 203
Test mean error for best: 0.20300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank})
Lexicase best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 23
Percent parens: 0.043
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank})
Zero cases best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 23
Percent parens: 0.043
--- Lexicase Population Statistics ---
Count of elite individuals by case: (936 930 890 465 458 890 564 891 900 460)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (936 930 890 465 458 890 564 891 900 460)
Population mean number of perfect (error zero) cases: 7.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank})
Best program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 2.616
Median total errors in population: 2
Error averages by case: (0.064 0.07 0.11 0.535 0.542 0.11 0.436 0.109 0.1 0.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.601
Average program size in population (points): 28.39
Average percent parens in population: 0.150
Minimum age in population: 14.453125
Maximum age in population: 18.931640625
Average age in population: 16.84019921875
Median age in population: 16.9111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3728933
--- Timings ---
Current time: 1559582815908 milliseconds
Total Time:          28.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.5 seconds, 72.4%
Fitness Testing:      4.9 seconds, 17.2%
Report:               2.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 23


Auto-simplifying with starting size: 23
step: 0
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 500
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 1000
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 1500
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 2000
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 2500
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 3000
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 3500
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 4000
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 4500
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

step: 5000
program: (integer_yankdup boolean_frominteger integer_stackdepth boolean_flush boolean_yankdup in2 integer_mod exec_dup_items in1 in3 integer_min integer_min in4 integer_min print_integer print_integer boolean_not integer_yankdup integer_dup_times in1 exec_yank integer_yank)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 23

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 203
Test mean error for best: 0.20300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 1
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: 9                   | Program output: 9                  
Correct output: 59                  | Program output: 59                 
Correct output: -64                 | Program output: -64                
Correct output: -86                 | Program output: -86                
Correct output: 12                  | Program output: 12                 
Correct output: -62                 | Program output: -62                
Correct output: 60                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: 65                  | Program output: 65                 
Correct output: -77                 | Program output: -77                
Correct output: 66                  | Program output: 66                 
Correct output: -7                  | Program output: -7                 
Correct output: 78                  | Program output: 78                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 5                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 46                  | Program output: 46                 
Correct output: 2                   | Program output: 2                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 18                 
Correct output: 33                  | Program output: 68                 
Correct output: 35                  | Program output: 35                 
Correct output: 16                  | Program output: 16                 
Correct output: 16                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 37                  | Program output: 37                 
Correct output: 36                  | Program output: 36                 
Correct output: 18                  | Program output: 47                 
Correct output: 9                   | Program output: 9                  
Correct output: 35                  | Program output: 35                 
Correct output: 14                  | Program output: 14                 
Correct output: -8                  | Program output: -8                 
Correct output: -67                 | Program output: -67                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -30                 | Program output: -30                
Correct output: -77                 | Program output: -77                
Correct output: -50                 | Program output: -50                
Correct output: -76                 | Program output: -76                
Correct output: -53                 | Program output: -53                
Correct output: -80                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: 24                 
Correct output: -77                 | Program output: -77                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -7                  | Program output: -7                 
Correct output: -15                 | Program output: -15                
Correct output: -70                 | Program output: -14                
Correct output: 0                   | Program output: 0                  
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -55                 | Program output: -55                
Correct output: -70                 | Program output: -70                
Correct output: -4                  | Program output: -4                 
Correct output: -80                 | Program output: -80                
Correct output: -8                  | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -55                 | Program output: -55                
Correct output: -73                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -72                 | Program output: -11                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -33                 | Program output: -33                
Correct output: -42                 | Program output: -40                
Correct output: -34                 | Program output: -34                
Correct output: -87                 | Program output: -87                
Correct output: -68                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -23                 | Program output: -23                
Correct output: 1                   | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -12                 | Program output: -12                
Correct output: -96                 | Program output: -96                
Correct output: -84                 | Program output: -31                
Correct output: -63                 | Program output: 32                 
Correct output: -74                 | Program output: 38                 
Correct output: -74                 | Program output: -74                
Correct output: -83                 | Program output: -71                
Correct output: -76                 | Program output: -76                
Correct output: -57                 | Program output: -57                
Correct output: -80                 | Program output: -80                
Correct output: 2                   | Program output: 2                  
Correct output: -48                 | Program output: -48                
Correct output: -15                 | Program output: 80                 
Correct output: -81                 | Program output: -81                
Correct output: -80                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -59                 | Program output: -59                
;;******************************
