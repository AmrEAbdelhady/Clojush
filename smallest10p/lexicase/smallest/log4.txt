Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-33 -98 -33 -33] -98] [[3 3 82 3] 3] [[12 20 20 20] 12] [[5 5 1 5] 1] [[-63 -63 2 -63] -63] [[82 -98 82 82] -98] [[-38 83 83 83] -38] [[-94 -94 -94 67] -94] [[36 -65 36 36] -65] [[50 50 -96 50] -96] [(-65 -65 -65 -65) -65] [(-32 -32 -32 -32) -32] [(62 62 62 62) 62] [(-8 -8 -8 -8) -8] [(-1 -1 -1 -1) -1] [(84 46 10 37) 10] [(79 70 94 22) 22] [(59 77 61 52) 52] [(23 4 94 54) 4] [(8 5 55 29) 5] [(19 10 92 45) 10] [(36 86 51 41) 36] [(53 38 5 11) 5] [(60 7 99 51) 7] [(25 98 16 39) 16] [(63 27 37 89) 27] [(4 80 96 71) 4] [(76 74 32 99) 32] [(46 88 45 30) 30] [(82 21 46 40) 21] [(1 38 38 83) 1] [(94 92 18 54) 18] [(91 33 93 20) 20] [(18 52 49 23) 18] [(89 71 53 51) 51] [(-40 77 5 96) -40] [(-46 31 31 -81) -81] [(32 22 -28 -93) -93] [(37 -56 -64 -2) -64] [(13 97 -52 36) -52] [(41 -7 59 47) -7] [(11 77 -44 -24) -44] [(66 72 -11 16) -11] [(-52 -64 95 28) -64] [(-75 -48 0 -92) -92] [(-25 -51 5 80) -51] [(45 94 -1 -83) -83] [(-73 9 70 43) -73] [(-96 -82 -31 -89) -96] [(5 61 48 95) 5] [(20 96 36 36) 20] [(94 -74 80 -45) -74] [(-85 -52 12 85) -85] [(69 81 -13 -94) -94] [(-19 -90 83 -95) -95] [(18 -25 82 83) -25] [(34 91 54 83) 34] [(-51 54 -36 16) -51] [(94 35 -75 -84) -84] [(-19 95 -14 95) -19] [(-8 -66 -40 48) -66] [(78 -65 -36 -2) -65] [(-57 -74 -50 -4) -74] [(25 75 -69 -5) -69] [(-98 -34 82 -72) -98] [(-66 95 -40 69) -66] [(-62 -96 100 -24) -96] [(-96 73 56 -84) -96] [(58 -90 55 56) -90] [(85 -6 15 15) -6] [(-22 41 -64 -99) -99] [(-90 31 91 63) -90] [(-38 -40 -21 -40) -40] [(-58 92 98 -34) -58] [(23 -87 -38 15) -87] [(-89 -88 84 -92) -92] [(36 43 4 41) 4] [(12 77 -63 39) -63] [(-58 -25 72 1) -58] [(58 -28 -17 25) -28] [(84 -15 -88 -40) -88] [(98 -20 6 -88) -88] [(-42 33 39 -58) -58] [(-13 12 -28 6) -28] [(-11 61 -20 99) -20] [(36 31 -74 -22) -74] [(-73 -85 17 -90) -90] [(77 -59 83 -59) -59] [(-8 24 57 -1) -8] [(59 40 -92 -38) -92] [(-96 -93 10 1) -96] [(-81 27 -90 -63) -90] [(-96 6 27 42) -96] [(-7 92 18 -20) -20] [(-76 97 -25 23) -76])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-33 -98 -33 -33] -98]
Train Case:   6 | Input/Output: [[3 3 82 3] 3]
Train Case:   7 | Input/Output: [[12 20 20 20] 12]
Train Case:   8 | Input/Output: [[5 5 1 5] 1]
Train Case:   9 | Input/Output: [[-63 -63 2 -63] -63]
Train Case:  10 | Input/Output: [[82 -98 82 82] -98]
Train Case:  11 | Input/Output: [[-38 83 83 83] -38]
Train Case:  12 | Input/Output: [[-94 -94 -94 67] -94]
Train Case:  13 | Input/Output: [[36 -65 36 36] -65]
Train Case:  14 | Input/Output: [[50 50 -96 50] -96]
Train Case:  15 | Input/Output: [(-65 -65 -65 -65) -65]
Train Case:  16 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  17 | Input/Output: [(62 62 62 62) 62]
Train Case:  18 | Input/Output: [(-8 -8 -8 -8) -8]
Train Case:  19 | Input/Output: [(-1 -1 -1 -1) -1]
Train Case:  20 | Input/Output: [(84 46 10 37) 10]
Train Case:  21 | Input/Output: [(79 70 94 22) 22]
Train Case:  22 | Input/Output: [(59 77 61 52) 52]
Train Case:  23 | Input/Output: [(23 4 94 54) 4]
Train Case:  24 | Input/Output: [(8 5 55 29) 5]
Train Case:  25 | Input/Output: [(19 10 92 45) 10]
Train Case:  26 | Input/Output: [(36 86 51 41) 36]
Train Case:  27 | Input/Output: [(53 38 5 11) 5]
Train Case:  28 | Input/Output: [(60 7 99 51) 7]
Train Case:  29 | Input/Output: [(25 98 16 39) 16]
Train Case:  30 | Input/Output: [(63 27 37 89) 27]
Train Case:  31 | Input/Output: [(4 80 96 71) 4]
Train Case:  32 | Input/Output: [(76 74 32 99) 32]
Train Case:  33 | Input/Output: [(46 88 45 30) 30]
Train Case:  34 | Input/Output: [(82 21 46 40) 21]
Train Case:  35 | Input/Output: [(1 38 38 83) 1]
Train Case:  36 | Input/Output: [(94 92 18 54) 18]
Train Case:  37 | Input/Output: [(91 33 93 20) 20]
Train Case:  38 | Input/Output: [(18 52 49 23) 18]
Train Case:  39 | Input/Output: [(89 71 53 51) 51]
Train Case:  40 | Input/Output: [(-40 77 5 96) -40]
Train Case:  41 | Input/Output: [(-46 31 31 -81) -81]
Train Case:  42 | Input/Output: [(32 22 -28 -93) -93]
Train Case:  43 | Input/Output: [(37 -56 -64 -2) -64]
Train Case:  44 | Input/Output: [(13 97 -52 36) -52]
Train Case:  45 | Input/Output: [(41 -7 59 47) -7]
Train Case:  46 | Input/Output: [(11 77 -44 -24) -44]
Train Case:  47 | Input/Output: [(66 72 -11 16) -11]
Train Case:  48 | Input/Output: [(-52 -64 95 28) -64]
Train Case:  49 | Input/Output: [(-75 -48 0 -92) -92]
Train Case:  50 | Input/Output: [(-25 -51 5 80) -51]
Train Case:  51 | Input/Output: [(45 94 -1 -83) -83]
Train Case:  52 | Input/Output: [(-73 9 70 43) -73]
Train Case:  53 | Input/Output: [(-96 -82 -31 -89) -96]
Train Case:  54 | Input/Output: [(5 61 48 95) 5]
Train Case:  55 | Input/Output: [(20 96 36 36) 20]
Train Case:  56 | Input/Output: [(94 -74 80 -45) -74]
Train Case:  57 | Input/Output: [(-85 -52 12 85) -85]
Train Case:  58 | Input/Output: [(69 81 -13 -94) -94]
Train Case:  59 | Input/Output: [(-19 -90 83 -95) -95]
Train Case:  60 | Input/Output: [(18 -25 82 83) -25]
Train Case:  61 | Input/Output: [(34 91 54 83) 34]
Train Case:  62 | Input/Output: [(-51 54 -36 16) -51]
Train Case:  63 | Input/Output: [(94 35 -75 -84) -84]
Train Case:  64 | Input/Output: [(-19 95 -14 95) -19]
Train Case:  65 | Input/Output: [(-8 -66 -40 48) -66]
Train Case:  66 | Input/Output: [(78 -65 -36 -2) -65]
Train Case:  67 | Input/Output: [(-57 -74 -50 -4) -74]
Train Case:  68 | Input/Output: [(25 75 -69 -5) -69]
Train Case:  69 | Input/Output: [(-98 -34 82 -72) -98]
Train Case:  70 | Input/Output: [(-66 95 -40 69) -66]
Train Case:  71 | Input/Output: [(-62 -96 100 -24) -96]
Train Case:  72 | Input/Output: [(-96 73 56 -84) -96]
Train Case:  73 | Input/Output: [(58 -90 55 56) -90]
Train Case:  74 | Input/Output: [(85 -6 15 15) -6]
Train Case:  75 | Input/Output: [(-22 41 -64 -99) -99]
Train Case:  76 | Input/Output: [(-90 31 91 63) -90]
Train Case:  77 | Input/Output: [(-38 -40 -21 -40) -40]
Train Case:  78 | Input/Output: [(-58 92 98 -34) -58]
Train Case:  79 | Input/Output: [(23 -87 -38 15) -87]
Train Case:  80 | Input/Output: [(-89 -88 84 -92) -92]
Train Case:  81 | Input/Output: [(36 43 4 41) 4]
Train Case:  82 | Input/Output: [(12 77 -63 39) -63]
Train Case:  83 | Input/Output: [(-58 -25 72 1) -58]
Train Case:  84 | Input/Output: [(58 -28 -17 25) -28]
Train Case:  85 | Input/Output: [(84 -15 -88 -40) -88]
Train Case:  86 | Input/Output: [(98 -20 6 -88) -88]
Train Case:  87 | Input/Output: [(-42 33 39 -58) -58]
Train Case:  88 | Input/Output: [(-13 12 -28 6) -28]
Train Case:  89 | Input/Output: [(-11 61 -20 99) -20]
Train Case:  90 | Input/Output: [(36 31 -74 -22) -74]
Train Case:  91 | Input/Output: [(-73 -85 17 -90) -90]
Train Case:  92 | Input/Output: [(77 -59 83 -59) -59]
Train Case:  93 | Input/Output: [(-8 24 57 -1) -8]
Train Case:  94 | Input/Output: [(59 40 -92 -38) -92]
Train Case:  95 | Input/Output: [(-96 -93 10 1) -96]
Train Case:  96 | Input/Output: [(-81 27 -90 -63) -90]
Train Case:  97 | Input/Output: [(-96 6 27 42) -96]
Train Case:  98 | Input/Output: [(-7 92 18 -20) -20]
Train Case:  99 | Input/Output: [(-76 97 -25 23) -76]
Test Case:   0 | Input/Output: [[56 11 56 56] 11]
Test Case:   1 | Input/Output: [[-48 -48 -48 6] -48]
Test Case:   2 | Input/Output: [[51 51 -9 51] -9]
Test Case:   3 | Input/Output: [[62 92 62 62] 62]
Test Case:   4 | Input/Output: [[42 42 42 71] 42]
Test Case:   5 | Input/Output: [[33 2 2 2] 2]
Test Case:   6 | Input/Output: [[19 19 19 66] 19]
Test Case:   7 | Input/Output: [[-10 21 21 21] -10]
Test Case:   8 | Input/Output: [[52 52 52 -76] -76]
Test Case:   9 | Input/Output: [[58 53 58 58] 53]
Test Case:  10 | Input/Output: [[13 29 29 29] 13]
Test Case:  11 | Input/Output: [[-8 -88 -8 -8] -88]
Test Case:  12 | Input/Output: [[64 54 54 54] 54]
Test Case:  13 | Input/Output: [[-17 -17 15 -17] -17]
Test Case:  14 | Input/Output: [[23 23 23 54] 23]
Test Case:  15 | Input/Output: [[-27 -27 -27 -60] -60]
Test Case:  16 | Input/Output: [[54 -90 -90 -90] -90]
Test Case:  17 | Input/Output: [[-90 -90 -78 -90] -90]
Test Case:  18 | Input/Output: [[99 99 -19 99] -19]
Test Case:  19 | Input/Output: [[14 -96 14 14] -96]
Test Case:  20 | Input/Output: [[-13 -13 -13 -67] -67]
Test Case:  21 | Input/Output: [[61 61 61 -22] -22]
Test Case:  22 | Input/Output: [[43 43 23 43] 23]
Test Case:  23 | Input/Output: [[-98 -98 99 -98] -98]
Test Case:  24 | Input/Output: [[-26 -30 -26 -26] -30]
Test Case:  25 | Input/Output: [[-41 -41 -41 -48] -48]
Test Case:  26 | Input/Output: [[-74 17 -74 -74] -74]
Test Case:  27 | Input/Output: [[51 26 51 51] 26]
Test Case:  28 | Input/Output: [[67 -50 -50 -50] -50]
Test Case:  29 | Input/Output: [[28 28 28 -36] -36]
Test Case:  30 | Input/Output: [[-38 -6 -6 -6] -38]
Test Case:  31 | Input/Output: [[-97 3 3 3] -97]
Test Case:  32 | Input/Output: [[100 100 100 -21] -21]
Test Case:  33 | Input/Output: [[-78 -78 -78 16] -78]
Test Case:  34 | Input/Output: [[-66 96 -66 -66] -66]
Test Case:  35 | Input/Output: [[-94 -94 -94 32] -94]
Test Case:  36 | Input/Output: [[-78 -78 -78 -70] -78]
Test Case:  37 | Input/Output: [[56 56 56 -6] -6]
Test Case:  38 | Input/Output: [[25 3 25 25] 3]
Test Case:  39 | Input/Output: [[28 28 -52 28] -52]
Test Case:  40 | Input/Output: [[74 74 -96 74] -96]
Test Case:  41 | Input/Output: [[60 60 22 60] 22]
Test Case:  42 | Input/Output: [[70 70 -77 70] -77]
Test Case:  43 | Input/Output: [[-64 -89 -64 -64] -89]
Test Case:  44 | Input/Output: [[35 50 35 35] 35]
Test Case:  45 | Input/Output: [[81 -16 81 81] -16]
Test Case:  46 | Input/Output: [[3 3 97 3] 3]
Test Case:  47 | Input/Output: [[41 41 54 41] 41]
Test Case:  48 | Input/Output: [[-22 20 -22 -22] -22]
Test Case:  49 | Input/Output: [[-58 -58 5 -58] -58]
Test Case:  50 | Input/Output: [[53 53 53 15] 15]
Test Case:  51 | Input/Output: [[-11 38 -11 -11] -11]
Test Case:  52 | Input/Output: [[-34 -25 -25 -25] -34]
Test Case:  53 | Input/Output: [[-78 -78 -78 95] -78]
Test Case:  54 | Input/Output: [[88 88 -63 88] -63]
Test Case:  55 | Input/Output: [[-22 13 -22 -22] -22]
Test Case:  56 | Input/Output: [[-54 66 66 66] -54]
Test Case:  57 | Input/Output: [[-33 -57 -33 -33] -57]
Test Case:  58 | Input/Output: [[48 -29 -29 -29] -29]
Test Case:  59 | Input/Output: [[-30 91 91 91] -30]
Test Case:  60 | Input/Output: [[-59 -44 -44 -44] -59]
Test Case:  61 | Input/Output: [[86 86 86 -33] -33]
Test Case:  62 | Input/Output: [[94 94 94 -84] -84]
Test Case:  63 | Input/Output: [[98 98 98 70] 70]
Test Case:  64 | Input/Output: [[66 66 -81 66] -81]
Test Case:  65 | Input/Output: [[8 -61 -61 -61] -61]
Test Case:  66 | Input/Output: [[72 72 34 72] 34]
Test Case:  67 | Input/Output: [[-4 43 43 43] -4]
Test Case:  68 | Input/Output: [[-33 -33 68 -33] -33]
Test Case:  69 | Input/Output: [[-68 59 -68 -68] -68]
Test Case:  70 | Input/Output: [[-39 -84 -39 -39] -84]
Test Case:  71 | Input/Output: [[-100 -45 -45 -45] -100]
Test Case:  72 | Input/Output: [[83 83 29 83] 29]
Test Case:  73 | Input/Output: [[37 72 72 72] 37]
Test Case:  74 | Input/Output: [[-30 -30 -30 35] -30]
Test Case:  75 | Input/Output: [[-67 86 86 86] -67]
Test Case:  76 | Input/Output: [[-11 6 -11 -11] -11]
Test Case:  77 | Input/Output: [[-82 -24 -24 -24] -82]
Test Case:  78 | Input/Output: [[-75 -6 -75 -75] -75]
Test Case:  79 | Input/Output: [[18 18 18 85] 18]
Test Case:  80 | Input/Output: [[-5 -5 -35 -5] -35]
Test Case:  81 | Input/Output: [[-28 42 42 42] -28]
Test Case:  82 | Input/Output: [[-84 -84 -84 -50] -84]
Test Case:  83 | Input/Output: [[52 52 52 30] 30]
Test Case:  84 | Input/Output: [[-37 75 75 75] -37]
Test Case:  85 | Input/Output: [[43 -51 43 43] -51]
Test Case:  86 | Input/Output: [[-71 22 -71 -71] -71]
Test Case:  87 | Input/Output: [[63 -54 -54 -54] -54]
Test Case:  88 | Input/Output: [[65 65 65 -9] -9]
Test Case:  89 | Input/Output: [[-88 -88 -88 -52] -88]
Test Case:  90 | Input/Output: [[74 74 74 -77] -77]
Test Case:  91 | Input/Output: [[-84 -84 -84 35] -84]
Test Case:  92 | Input/Output: [[77 77 -3 77] -3]
Test Case:  93 | Input/Output: [[40 40 40 -44] -44]
Test Case:  94 | Input/Output: [[-25 -25 -25 -25] -25]
Test Case:  95 | Input/Output: [[-51 -51 -51 -26] -51]
Test Case:  96 | Input/Output: [[-29 -93 -93 -93] -93]
Test Case:  97 | Input/Output: [[-37 -37 -37 97] -37]
Test Case:  98 | Input/Output: [[-59 -59 -59 17] -59]
Test Case:  99 | Input/Output: [[-87 -87 -10 -87] -87]
Test Case: 100 | Input/Output: [(38 38 38 38) 38]
Test Case: 101 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 102 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 103 | Input/Output: [(49 49 49 49) 49]
Test Case: 104 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 105 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 106 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 107 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 108 | Input/Output: [(18 18 18 18) 18]
Test Case: 109 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 110 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 111 | Input/Output: [(9 9 9 9) 9]
Test Case: 112 | Input/Output: [(22 22 22 22) 22]
Test Case: 113 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 114 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 115 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 116 | Input/Output: [(1 1 1 1) 1]
Test Case: 117 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 118 | Input/Output: [(98 98 98 98) 98]
Test Case: 119 | Input/Output: [(43 43 43 43) 43]
Test Case: 120 | Input/Output: [(28 28 28 28) 28]
Test Case: 121 | Input/Output: [(53 53 53 53) 53]
Test Case: 122 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 123 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 124 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 125 | Input/Output: [(67 67 67 67) 67]
Test Case: 126 | Input/Output: [(5 5 5 5) 5]
Test Case: 127 | Input/Output: [(46 46 46 46) 46]
Test Case: 128 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 129 | Input/Output: [(28 28 28 28) 28]
Test Case: 130 | Input/Output: [(71 71 71 71) 71]
Test Case: 131 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 132 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 133 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 134 | Input/Output: [(64 64 64 64) 64]
Test Case: 135 | Input/Output: [(98 98 98 98) 98]
Test Case: 136 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 137 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 138 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 139 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 140 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 141 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 142 | Input/Output: [(22 22 22 22) 22]
Test Case: 143 | Input/Output: [(59 59 59 59) 59]
Test Case: 144 | Input/Output: [(100 100 100 100) 100]
Test Case: 145 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 146 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 147 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 148 | Input/Output: [(58 58 58 58) 58]
Test Case: 149 | Input/Output: [(40 40 40 40) 40]
Test Case: 150 | Input/Output: [(37 37 37 37) 37]
Test Case: 151 | Input/Output: [(47 47 47 47) 47]
Test Case: 152 | Input/Output: [(90 90 90 90) 90]
Test Case: 153 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 154 | Input/Output: [(30 30 30 30) 30]
Test Case: 155 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 156 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 157 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 158 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 159 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 160 | Input/Output: [(26 26 26 26) 26]
Test Case: 161 | Input/Output: [(92 92 92 92) 92]
Test Case: 162 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 163 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 164 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 165 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 166 | Input/Output: [(29 29 29 29) 29]
Test Case: 167 | Input/Output: [(21 21 21 21) 21]
Test Case: 168 | Input/Output: [(25 25 25 25) 25]
Test Case: 169 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 170 | Input/Output: [(51 51 51 51) 51]
Test Case: 171 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 172 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 173 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 174 | Input/Output: [(35 35 35 35) 35]
Test Case: 175 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 176 | Input/Output: [(99 99 99 99) 99]
Test Case: 177 | Input/Output: [(45 45 45 45) 45]
Test Case: 178 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 179 | Input/Output: [(84 84 84 84) 84]
Test Case: 180 | Input/Output: [(39 39 39 39) 39]
Test Case: 181 | Input/Output: [(70 70 70 70) 70]
Test Case: 182 | Input/Output: [(82 82 82 82) 82]
Test Case: 183 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 184 | Input/Output: [(33 33 33 33) 33]
Test Case: 185 | Input/Output: [(99 99 99 99) 99]
Test Case: 186 | Input/Output: [(25 25 25 25) 25]
Test Case: 187 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 188 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 189 | Input/Output: [(100 100 100 100) 100]
Test Case: 190 | Input/Output: [(88 88 88 88) 88]
Test Case: 191 | Input/Output: [(62 62 62 62) 62]
Test Case: 192 | Input/Output: [(27 27 27 27) 27]
Test Case: 193 | Input/Output: [(98 98 98 98) 98]
Test Case: 194 | Input/Output: [(95 95 95 95) 95]
Test Case: 195 | Input/Output: [(74 74 74 74) 74]
Test Case: 196 | Input/Output: [(71 71 71 71) 71]
Test Case: 197 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 198 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 199 | Input/Output: [(61 61 61 61) 61]
Test Case: 200 | Input/Output: [(5 6 43 46) 5]
Test Case: 201 | Input/Output: [(86 55 70 55) 55]
Test Case: 202 | Input/Output: [(84 4 85 37) 4]
Test Case: 203 | Input/Output: [(3 52 11 97) 3]
Test Case: 204 | Input/Output: [(65 12 69 42) 12]
Test Case: 205 | Input/Output: [(90 43 72 70) 43]
Test Case: 206 | Input/Output: [(33 75 0 31) 0]
Test Case: 207 | Input/Output: [(12 10 82 92) 10]
Test Case: 208 | Input/Output: [(76 26 8 97) 8]
Test Case: 209 | Input/Output: [(79 8 96 26) 8]
Test Case: 210 | Input/Output: [(51 78 1 26) 1]
Test Case: 211 | Input/Output: [(25 89 41 89) 25]
Test Case: 212 | Input/Output: [(81 99 18 54) 18]
Test Case: 213 | Input/Output: [(89 76 80 64) 64]
Test Case: 214 | Input/Output: [(79 19 98 11) 11]
Test Case: 215 | Input/Output: [(62 26 74 87) 26]
Test Case: 216 | Input/Output: [(22 42 40 26) 22]
Test Case: 217 | Input/Output: [(51 47 55 78) 47]
Test Case: 218 | Input/Output: [(27 29 54 60) 27]
Test Case: 219 | Input/Output: [(10 34 3 75) 3]
Test Case: 220 | Input/Output: [(16 36 26 44) 16]
Test Case: 221 | Input/Output: [(72 85 84 17) 17]
Test Case: 222 | Input/Output: [(13 75 93 72) 13]
Test Case: 223 | Input/Output: [(75 20 40 30) 20]
Test Case: 224 | Input/Output: [(22 68 81 65) 22]
Test Case: 225 | Input/Output: [(88 21 56 83) 21]
Test Case: 226 | Input/Output: [(40 10 91 94) 10]
Test Case: 227 | Input/Output: [(81 99 39 54) 39]
Test Case: 228 | Input/Output: [(83 97 16 18) 16]
Test Case: 229 | Input/Output: [(65 19 74 10) 10]
Test Case: 230 | Input/Output: [(31 35 61 31) 31]
Test Case: 231 | Input/Output: [(17 64 69 3) 3]
Test Case: 232 | Input/Output: [(61 45 7 88) 7]
Test Case: 233 | Input/Output: [(2 91 83 82) 2]
Test Case: 234 | Input/Output: [(98 93 62 55) 55]
Test Case: 235 | Input/Output: [(83 39 28 64) 28]
Test Case: 236 | Input/Output: [(30 38 54 61) 30]
Test Case: 237 | Input/Output: [(74 52 65 75) 52]
Test Case: 238 | Input/Output: [(96 58 28 66) 28]
Test Case: 239 | Input/Output: [(85 96 4 1) 1]
Test Case: 240 | Input/Output: [(98 89 52 6) 6]
Test Case: 241 | Input/Output: [(12 32 38 63) 12]
Test Case: 242 | Input/Output: [(44 97 64 32) 32]
Test Case: 243 | Input/Output: [(57 19 30 86) 19]
Test Case: 244 | Input/Output: [(9 67 3 56) 3]
Test Case: 245 | Input/Output: [(71 26 37 55) 26]
Test Case: 246 | Input/Output: [(25 32 65 95) 25]
Test Case: 247 | Input/Output: [(99 99 23 84) 23]
Test Case: 248 | Input/Output: [(55 83 96 61) 55]
Test Case: 249 | Input/Output: [(30 26 73 62) 26]
Test Case: 250 | Input/Output: [(13 14 15 46) 13]
Test Case: 251 | Input/Output: [(15 31 98 71) 15]
Test Case: 252 | Input/Output: [(44 8 18 97) 8]
Test Case: 253 | Input/Output: [(18 38 88 94) 18]
Test Case: 254 | Input/Output: [(81 93 7 36) 7]
Test Case: 255 | Input/Output: [(47 46 80 3) 3]
Test Case: 256 | Input/Output: [(70 95 73 46) 46]
Test Case: 257 | Input/Output: [(25 5 25 17) 5]
Test Case: 258 | Input/Output: [(18 18 69 76) 18]
Test Case: 259 | Input/Output: [(23 61 63 78) 23]
Test Case: 260 | Input/Output: [(4 76 89 29) 4]
Test Case: 261 | Input/Output: [(17 66 29 16) 16]
Test Case: 262 | Input/Output: [(77 77 55 64) 55]
Test Case: 263 | Input/Output: [(21 17 38 1) 1]
Test Case: 264 | Input/Output: [(63 62 31 70) 31]
Test Case: 265 | Input/Output: [(4 70 73 26) 4]
Test Case: 266 | Input/Output: [(45 57 96 0) 0]
Test Case: 267 | Input/Output: [(23 75 29 45) 23]
Test Case: 268 | Input/Output: [(22 57 89 82) 22]
Test Case: 269 | Input/Output: [(3 17 1 67) 1]
Test Case: 270 | Input/Output: [(37 20 3 98) 3]
Test Case: 271 | Input/Output: [(97 41 76 49) 41]
Test Case: 272 | Input/Output: [(6 77 16 4) 4]
Test Case: 273 | Input/Output: [(94 11 95 53) 11]
Test Case: 274 | Input/Output: [(73 13 39 94) 13]
Test Case: 275 | Input/Output: [(18 32 77 3) 3]
Test Case: 276 | Input/Output: [(13 29 35 9) 9]
Test Case: 277 | Input/Output: [(40 7 0 33) 0]
Test Case: 278 | Input/Output: [(38 62 55 67) 38]
Test Case: 279 | Input/Output: [(91 59 29 5) 5]
Test Case: 280 | Input/Output: [(22 90 28 96) 22]
Test Case: 281 | Input/Output: [(30 35 27 28) 27]
Test Case: 282 | Input/Output: [(97 10 20 13) 10]
Test Case: 283 | Input/Output: [(16 10 7 63) 7]
Test Case: 284 | Input/Output: [(38 19 96 19) 19]
Test Case: 285 | Input/Output: [(49 25 4 16) 4]
Test Case: 286 | Input/Output: [(91 44 41 59) 41]
Test Case: 287 | Input/Output: [(79 77 23 42) 23]
Test Case: 288 | Input/Output: [(50 85 87 12) 12]
Test Case: 289 | Input/Output: [(52 28 89 73) 28]
Test Case: 290 | Input/Output: [(25 73 23 31) 23]
Test Case: 291 | Input/Output: [(97 57 99 63) 57]
Test Case: 292 | Input/Output: [(13 84 91 7) 7]
Test Case: 293 | Input/Output: [(84 55 53 90) 53]
Test Case: 294 | Input/Output: [(34 2 3 45) 2]
Test Case: 295 | Input/Output: [(34 50 31 55) 31]
Test Case: 296 | Input/Output: [(39 88 96 52) 39]
Test Case: 297 | Input/Output: [(2 63 28 32) 2]
Test Case: 298 | Input/Output: [(46 53 2 42) 2]
Test Case: 299 | Input/Output: [(51 79 29 2) 2]
Test Case: 300 | Input/Output: [(45 25 47 61) 25]
Test Case: 301 | Input/Output: [(29 72 82 56) 29]
Test Case: 302 | Input/Output: [(29 84 40 72) 29]
Test Case: 303 | Input/Output: [(76 13 64 26) 13]
Test Case: 304 | Input/Output: [(88 92 38 4) 4]
Test Case: 305 | Input/Output: [(97 63 87 51) 51]
Test Case: 306 | Input/Output: [(25 67 45 7) 7]
Test Case: 307 | Input/Output: [(91 73 42 43) 42]
Test Case: 308 | Input/Output: [(72 25 96 69) 25]
Test Case: 309 | Input/Output: [(65 95 5 85) 5]
Test Case: 310 | Input/Output: [(66 93 28 98) 28]
Test Case: 311 | Input/Output: [(73 86 87 53) 53]
Test Case: 312 | Input/Output: [(64 62 38 72) 38]
Test Case: 313 | Input/Output: [(92 17 4 83) 4]
Test Case: 314 | Input/Output: [(25 48 43 57) 25]
Test Case: 315 | Input/Output: [(60 25 52 88) 25]
Test Case: 316 | Input/Output: [(65 68 42 8) 8]
Test Case: 317 | Input/Output: [(21 50 62 76) 21]
Test Case: 318 | Input/Output: [(69 38 17 83) 17]
Test Case: 319 | Input/Output: [(71 58 8 64) 8]
Test Case: 320 | Input/Output: [(91 80 36 72) 36]
Test Case: 321 | Input/Output: [(52 64 54 100) 52]
Test Case: 322 | Input/Output: [(96 51 36 72) 36]
Test Case: 323 | Input/Output: [(16 4 0 17) 0]
Test Case: 324 | Input/Output: [(65 64 91 83) 64]
Test Case: 325 | Input/Output: [(69 70 48 77) 48]
Test Case: 326 | Input/Output: [(89 76 96 7) 7]
Test Case: 327 | Input/Output: [(79 41 12 26) 12]
Test Case: 328 | Input/Output: [(71 10 46 79) 10]
Test Case: 329 | Input/Output: [(90 82 39 65) 39]
Test Case: 330 | Input/Output: [(86 10 94 27) 10]
Test Case: 331 | Input/Output: [(13 1 37 41) 1]
Test Case: 332 | Input/Output: [(53 14 11 19) 11]
Test Case: 333 | Input/Output: [(25 73 30 68) 25]
Test Case: 334 | Input/Output: [(44 68 26 18) 18]
Test Case: 335 | Input/Output: [(34 45 39 94) 34]
Test Case: 336 | Input/Output: [(22 5 47 4) 4]
Test Case: 337 | Input/Output: [(5 8 62 32) 5]
Test Case: 338 | Input/Output: [(65 19 8 39) 8]
Test Case: 339 | Input/Output: [(3 19 70 83) 3]
Test Case: 340 | Input/Output: [(33 61 52 93) 33]
Test Case: 341 | Input/Output: [(88 76 15 89) 15]
Test Case: 342 | Input/Output: [(16 14 21 1) 1]
Test Case: 343 | Input/Output: [(100 76 92 97) 76]
Test Case: 344 | Input/Output: [(6 74 74 18) 6]
Test Case: 345 | Input/Output: [(2 80 86 64) 2]
Test Case: 346 | Input/Output: [(14 35 77 18) 14]
Test Case: 347 | Input/Output: [(39 64 43 99) 39]
Test Case: 348 | Input/Output: [(2 70 64 43) 2]
Test Case: 349 | Input/Output: [(24 60 13 38) 13]
Test Case: 350 | Input/Output: [(28 95 79 53) 28]
Test Case: 351 | Input/Output: [(60 21 12 57) 12]
Test Case: 352 | Input/Output: [(51 16 53 15) 15]
Test Case: 353 | Input/Output: [(52 93 62 40) 40]
Test Case: 354 | Input/Output: [(43 79 13 53) 13]
Test Case: 355 | Input/Output: [(48 92 22 85) 22]
Test Case: 356 | Input/Output: [(15 81 63 87) 15]
Test Case: 357 | Input/Output: [(31 71 37 64) 31]
Test Case: 358 | Input/Output: [(78 39 70 43) 39]
Test Case: 359 | Input/Output: [(60 57 63 39) 39]
Test Case: 360 | Input/Output: [(36 68 57 100) 36]
Test Case: 361 | Input/Output: [(91 64 10 100) 10]
Test Case: 362 | Input/Output: [(79 99 22 92) 22]
Test Case: 363 | Input/Output: [(23 84 0 24) 0]
Test Case: 364 | Input/Output: [(19 32 27 83) 19]
Test Case: 365 | Input/Output: [(67 73 77 96) 67]
Test Case: 366 | Input/Output: [(73 53 64 99) 53]
Test Case: 367 | Input/Output: [(64 10 60 54) 10]
Test Case: 368 | Input/Output: [(0 74 61 61) 0]
Test Case: 369 | Input/Output: [(88 83 20 74) 20]
Test Case: 370 | Input/Output: [(72 47 85 41) 41]
Test Case: 371 | Input/Output: [(82 5 50 83) 5]
Test Case: 372 | Input/Output: [(42 46 48 66) 42]
Test Case: 373 | Input/Output: [(0 46 84 28) 0]
Test Case: 374 | Input/Output: [(45 82 79 9) 9]
Test Case: 375 | Input/Output: [(12 39 33 18) 12]
Test Case: 376 | Input/Output: [(52 80 99 3) 3]
Test Case: 377 | Input/Output: [(43 83 90 73) 43]
Test Case: 378 | Input/Output: [(18 16 76 82) 16]
Test Case: 379 | Input/Output: [(98 100 49 79) 49]
Test Case: 380 | Input/Output: [(21 46 29 17) 17]
Test Case: 381 | Input/Output: [(60 99 36 81) 36]
Test Case: 382 | Input/Output: [(85 71 64 95) 64]
Test Case: 383 | Input/Output: [(52 16 15 10) 10]
Test Case: 384 | Input/Output: [(89 78 63 92) 63]
Test Case: 385 | Input/Output: [(71 8 28 22) 8]
Test Case: 386 | Input/Output: [(57 0 73 27) 0]
Test Case: 387 | Input/Output: [(36 51 5 70) 5]
Test Case: 388 | Input/Output: [(31 70 37 61) 31]
Test Case: 389 | Input/Output: [(25 10 17 69) 10]
Test Case: 390 | Input/Output: [(8 44 54 30) 8]
Test Case: 391 | Input/Output: [(47 65 52 50) 47]
Test Case: 392 | Input/Output: [(17 5 95 70) 5]
Test Case: 393 | Input/Output: [(100 85 25 80) 25]
Test Case: 394 | Input/Output: [(97 3 10 83) 3]
Test Case: 395 | Input/Output: [(96 13 85 70) 13]
Test Case: 396 | Input/Output: [(33 32 17 43) 17]
Test Case: 397 | Input/Output: [(13 37 70 73) 13]
Test Case: 398 | Input/Output: [(22 21 70 43) 21]
Test Case: 399 | Input/Output: [(45 32 48 64) 32]
Test Case: 400 | Input/Output: [(-7 22 -32 -94) -94]
Test Case: 401 | Input/Output: [(89 -27 -54 68) -54]
Test Case: 402 | Input/Output: [(63 29 -81 -46) -81]
Test Case: 403 | Input/Output: [(4 99 27 -5) -5]
Test Case: 404 | Input/Output: [(-39 23 -31 41) -39]
Test Case: 405 | Input/Output: [(-39 -66 -42 -66) -66]
Test Case: 406 | Input/Output: [(11 21 96 66) 11]
Test Case: 407 | Input/Output: [(-27 -8 62 33) -27]
Test Case: 408 | Input/Output: [(-77 -18 -80 61) -80]
Test Case: 409 | Input/Output: [(7 -63 -85 5) -85]
Test Case: 410 | Input/Output: [(51 -68 -17 -55) -68]
Test Case: 411 | Input/Output: [(64 -46 -79 62) -79]
Test Case: 412 | Input/Output: [(90 27 -82 84) -82]
Test Case: 413 | Input/Output: [(72 52 -7 53) -7]
Test Case: 414 | Input/Output: [(-65 8 38 -27) -65]
Test Case: 415 | Input/Output: [(-20 -59 48 93) -59]
Test Case: 416 | Input/Output: [(38 94 -51 60) -51]
Test Case: 417 | Input/Output: [(31 -48 93 14) -48]
Test Case: 418 | Input/Output: [(-70 -67 -30 24) -70]
Test Case: 419 | Input/Output: [(-85 72 -98 56) -98]
Test Case: 420 | Input/Output: [(-6 46 -55 -6) -55]
Test Case: 421 | Input/Output: [(-21 43 87 87) -21]
Test Case: 422 | Input/Output: [(56 66 -83 -84) -84]
Test Case: 423 | Input/Output: [(80 -68 8 -54) -68]
Test Case: 424 | Input/Output: [(12 34 99 24) 12]
Test Case: 425 | Input/Output: [(18 18 -38 -26) -38]
Test Case: 426 | Input/Output: [(-52 30 12 63) -52]
Test Case: 427 | Input/Output: [(24 -51 -94 -20) -94]
Test Case: 428 | Input/Output: [(-33 -46 -32 28) -46]
Test Case: 429 | Input/Output: [(73 71 97 85) 71]
Test Case: 430 | Input/Output: [(-92 26 92 -80) -92]
Test Case: 431 | Input/Output: [(10 -97 -64 13) -97]
Test Case: 432 | Input/Output: [(-52 30 36 -17) -52]
Test Case: 433 | Input/Output: [(-5 -62 44 47) -62]
Test Case: 434 | Input/Output: [(-82 22 74 79) -82]
Test Case: 435 | Input/Output: [(54 -4 1 88) -4]
Test Case: 436 | Input/Output: [(12 -68 -23 -46) -68]
Test Case: 437 | Input/Output: [(62 -77 75 -89) -89]
Test Case: 438 | Input/Output: [(-85 54 99 -1) -85]
Test Case: 439 | Input/Output: [(-51 86 -36 76) -51]
Test Case: 440 | Input/Output: [(-82 84 46 32) -82]
Test Case: 441 | Input/Output: [(-70 40 -84 -44) -84]
Test Case: 442 | Input/Output: [(5 -69 5 75) -69]
Test Case: 443 | Input/Output: [(-54 74 5 -46) -54]
Test Case: 444 | Input/Output: [(-50 -9 2 -83) -83]
Test Case: 445 | Input/Output: [(27 61 -64 39) -64]
Test Case: 446 | Input/Output: [(-36 -62 11 39) -62]
Test Case: 447 | Input/Output: [(-51 79 -17 -59) -59]
Test Case: 448 | Input/Output: [(-36 56 60 26) -36]
Test Case: 449 | Input/Output: [(77 57 -4 -4) -4]
Test Case: 450 | Input/Output: [(31 -39 -61 -22) -61]
Test Case: 451 | Input/Output: [(84 14 91 -16) -16]
Test Case: 452 | Input/Output: [(30 -99 -2 13) -99]
Test Case: 453 | Input/Output: [(40 58 -98 -8) -98]
Test Case: 454 | Input/Output: [(-59 7 -94 17) -94]
Test Case: 455 | Input/Output: [(-13 25 92 59) -13]
Test Case: 456 | Input/Output: [(80 -81 -51 63) -81]
Test Case: 457 | Input/Output: [(29 -51 -84 -41) -84]
Test Case: 458 | Input/Output: [(62 35 36 -57) -57]
Test Case: 459 | Input/Output: [(95 -28 -50 28) -50]
Test Case: 460 | Input/Output: [(29 -92 -71 -28) -92]
Test Case: 461 | Input/Output: [(-27 -29 23 51) -29]
Test Case: 462 | Input/Output: [(4 -57 -35 -88) -88]
Test Case: 463 | Input/Output: [(71 45 -56 89) -56]
Test Case: 464 | Input/Output: [(19 -95 5 -76) -95]
Test Case: 465 | Input/Output: [(-65 -37 -15 -66) -66]
Test Case: 466 | Input/Output: [(3 88 -64 -13) -64]
Test Case: 467 | Input/Output: [(-86 -31 54 25) -86]
Test Case: 468 | Input/Output: [(96 44 71 -100) -100]
Test Case: 469 | Input/Output: [(-93 18 -10 73) -93]
Test Case: 470 | Input/Output: [(88 -41 -24 -33) -41]
Test Case: 471 | Input/Output: [(87 15 78 -97) -97]
Test Case: 472 | Input/Output: [(-90 38 -7 6) -90]
Test Case: 473 | Input/Output: [(97 -68 85 92) -68]
Test Case: 474 | Input/Output: [(-78 39 -84 -28) -84]
Test Case: 475 | Input/Output: [(-30 -11 -16 -12) -30]
Test Case: 476 | Input/Output: [(8 -21 -7 -20) -21]
Test Case: 477 | Input/Output: [(-44 -95 -8 -80) -95]
Test Case: 478 | Input/Output: [(60 50 20 45) 20]
Test Case: 479 | Input/Output: [(65 57 0 -60) -60]
Test Case: 480 | Input/Output: [(-72 49 -85 45) -85]
Test Case: 481 | Input/Output: [(13 61 -85 32) -85]
Test Case: 482 | Input/Output: [(-42 36 88 23) -42]
Test Case: 483 | Input/Output: [(-13 36 39 -48) -48]
Test Case: 484 | Input/Output: [(63 71 -8 -94) -94]
Test Case: 485 | Input/Output: [(-43 -65 -32 77) -65]
Test Case: 486 | Input/Output: [(-7 -86 -57 -24) -86]
Test Case: 487 | Input/Output: [(33 45 57 -71) -71]
Test Case: 488 | Input/Output: [(95 16 -17 -57) -57]
Test Case: 489 | Input/Output: [(87 61 38 -17) -17]
Test Case: 490 | Input/Output: [(-52 -76 -63 11) -76]
Test Case: 491 | Input/Output: [(-66 -81 25 61) -81]
Test Case: 492 | Input/Output: [(-16 45 -44 97) -44]
Test Case: 493 | Input/Output: [(76 11 71 -89) -89]
Test Case: 494 | Input/Output: [(-57 93 -41 -96) -96]
Test Case: 495 | Input/Output: [(-46 88 -52 10) -52]
Test Case: 496 | Input/Output: [(13 -65 13 -39) -65]
Test Case: 497 | Input/Output: [(39 -30 50 -23) -30]
Test Case: 498 | Input/Output: [(-57 -97 98 51) -97]
Test Case: 499 | Input/Output: [(-42 95 -61 28) -61]
Test Case: 500 | Input/Output: [(66 -20 85 70) -20]
Test Case: 501 | Input/Output: [(-87 37 -98 -43) -98]
Test Case: 502 | Input/Output: [(58 -58 66 -52) -58]
Test Case: 503 | Input/Output: [(19 -64 52 6) -64]
Test Case: 504 | Input/Output: [(-19 -79 -49 66) -79]
Test Case: 505 | Input/Output: [(4 -26 48 40) -26]
Test Case: 506 | Input/Output: [(-97 46 50 -99) -99]
Test Case: 507 | Input/Output: [(-62 -72 82 -99) -99]
Test Case: 508 | Input/Output: [(15 42 -1 -8) -8]
Test Case: 509 | Input/Output: [(-6 -47 -26 -75) -75]
Test Case: 510 | Input/Output: [(20 -19 -84 -28) -84]
Test Case: 511 | Input/Output: [(-53 79 -82 -56) -82]
Test Case: 512 | Input/Output: [(49 -3 -52 -67) -67]
Test Case: 513 | Input/Output: [(93 81 50 -76) -76]
Test Case: 514 | Input/Output: [(-65 8 58 12) -65]
Test Case: 515 | Input/Output: [(98 -92 53 30) -92]
Test Case: 516 | Input/Output: [(17 -71 46 39) -71]
Test Case: 517 | Input/Output: [(68 99 -31 -37) -37]
Test Case: 518 | Input/Output: [(71 -74 51 76) -74]
Test Case: 519 | Input/Output: [(-56 11 64 93) -56]
Test Case: 520 | Input/Output: [(62 -44 -100 28) -100]
Test Case: 521 | Input/Output: [(-51 0 -25 27) -51]
Test Case: 522 | Input/Output: [(49 -24 71 -82) -82]
Test Case: 523 | Input/Output: [(34 63 46 -49) -49]
Test Case: 524 | Input/Output: [(-4 89 21 76) -4]
Test Case: 525 | Input/Output: [(-81 52 -29 57) -81]
Test Case: 526 | Input/Output: [(47 100 -14 -72) -72]
Test Case: 527 | Input/Output: [(-99 -18 -44 -46) -99]
Test Case: 528 | Input/Output: [(-49 -41 56 -99) -99]
Test Case: 529 | Input/Output: [(71 30 -38 2) -38]
Test Case: 530 | Input/Output: [(16 -59 34 39) -59]
Test Case: 531 | Input/Output: [(47 72 -4 55) -4]
Test Case: 532 | Input/Output: [(-64 5 57 -29) -64]
Test Case: 533 | Input/Output: [(20 -65 -91 -4) -91]
Test Case: 534 | Input/Output: [(4 44 72 -25) -25]
Test Case: 535 | Input/Output: [(-35 89 28 41) -35]
Test Case: 536 | Input/Output: [(-54 20 -48 -91) -91]
Test Case: 537 | Input/Output: [(-67 -76 -41 98) -76]
Test Case: 538 | Input/Output: [(-67 -78 -13 100) -78]
Test Case: 539 | Input/Output: [(55 63 57 6) 6]
Test Case: 540 | Input/Output: [(99 -25 42 -33) -33]
Test Case: 541 | Input/Output: [(-13 -29 100 -66) -66]
Test Case: 542 | Input/Output: [(-89 43 -19 59) -89]
Test Case: 543 | Input/Output: [(-2 3 -23 -42) -42]
Test Case: 544 | Input/Output: [(15 -90 8 -34) -90]
Test Case: 545 | Input/Output: [(36 18 -18 20) -18]
Test Case: 546 | Input/Output: [(46 63 -54 87) -54]
Test Case: 547 | Input/Output: [(-90 -11 22 39) -90]
Test Case: 548 | Input/Output: [(-42 97 -88 45) -88]
Test Case: 549 | Input/Output: [(1 -21 -79 -82) -82]
Test Case: 550 | Input/Output: [(85 -67 -82 -34) -82]
Test Case: 551 | Input/Output: [(-74 13 34 -54) -74]
Test Case: 552 | Input/Output: [(-27 -60 57 -88) -88]
Test Case: 553 | Input/Output: [(51 -91 -67 40) -91]
Test Case: 554 | Input/Output: [(-21 53 2 14) -21]
Test Case: 555 | Input/Output: [(88 -5 38 1) -5]
Test Case: 556 | Input/Output: [(29 54 70 -42) -42]
Test Case: 557 | Input/Output: [(-47 -7 -73 48) -73]
Test Case: 558 | Input/Output: [(-82 27 -32 62) -82]
Test Case: 559 | Input/Output: [(-52 -32 90 -61) -61]
Test Case: 560 | Input/Output: [(24 -58 65 -67) -67]
Test Case: 561 | Input/Output: [(11 -28 85 80) -28]
Test Case: 562 | Input/Output: [(59 -54 28 86) -54]
Test Case: 563 | Input/Output: [(61 -5 30 -53) -53]
Test Case: 564 | Input/Output: [(4 39 54 61) 4]
Test Case: 565 | Input/Output: [(37 41 65 -99) -99]
Test Case: 566 | Input/Output: [(45 48 89 -52) -52]
Test Case: 567 | Input/Output: [(49 54 -6 82) -6]
Test Case: 568 | Input/Output: [(-21 -98 54 -64) -98]
Test Case: 569 | Input/Output: [(66 1 -63 49) -63]
Test Case: 570 | Input/Output: [(-65 -30 50 -100) -100]
Test Case: 571 | Input/Output: [(-22 -7 -16 43) -22]
Test Case: 572 | Input/Output: [(45 14 59 -93) -93]
Test Case: 573 | Input/Output: [(-87 19 -39 33) -87]
Test Case: 574 | Input/Output: [(-43 48 85 -17) -43]
Test Case: 575 | Input/Output: [(26 -40 96 82) -40]
Test Case: 576 | Input/Output: [(51 81 -73 -6) -73]
Test Case: 577 | Input/Output: [(-51 -63 -11 86) -63]
Test Case: 578 | Input/Output: [(5 89 -1 82) -1]
Test Case: 579 | Input/Output: [(77 -96 -53 87) -96]
Test Case: 580 | Input/Output: [(32 81 -60 -74) -74]
Test Case: 581 | Input/Output: [(53 56 76 -39) -39]
Test Case: 582 | Input/Output: [(-42 41 -17 13) -42]
Test Case: 583 | Input/Output: [(-97 -93 86 -80) -97]
Test Case: 584 | Input/Output: [(72 92 -70 31) -70]
Test Case: 585 | Input/Output: [(28 -51 -56 -6) -56]
Test Case: 586 | Input/Output: [(-12 -28 -33 -11) -33]
Test Case: 587 | Input/Output: [(98 16 57 15) 15]
Test Case: 588 | Input/Output: [(-96 -1 17 8) -96]
Test Case: 589 | Input/Output: [(-82 23 22 70) -82]
Test Case: 590 | Input/Output: [(10 30 -67 -49) -67]
Test Case: 591 | Input/Output: [(-72 7 23 -78) -78]
Test Case: 592 | Input/Output: [(67 32 73 23) 23]
Test Case: 593 | Input/Output: [(26 97 9 -45) -45]
Test Case: 594 | Input/Output: [(-1 62 70 -43) -43]
Test Case: 595 | Input/Output: [(23 38 -74 3) -74]
Test Case: 596 | Input/Output: [(79 74 89 42) 42]
Test Case: 597 | Input/Output: [(56 -34 -17 -96) -96]
Test Case: 598 | Input/Output: [(-4 58 -1 -42) -42]
Test Case: 599 | Input/Output: [(-1 -68 77 -24) -68]
Test Case: 600 | Input/Output: [(70 -8 -72 14) -72]
Test Case: 601 | Input/Output: [(-63 -91 0 56) -91]
Test Case: 602 | Input/Output: [(25 -20 81 79) -20]
Test Case: 603 | Input/Output: [(-12 76 -91 43) -91]
Test Case: 604 | Input/Output: [(-54 -57 77 -10) -57]
Test Case: 605 | Input/Output: [(-72 -10 -84 40) -84]
Test Case: 606 | Input/Output: [(74 50 23 76) 23]
Test Case: 607 | Input/Output: [(55 -42 77 -75) -75]
Test Case: 608 | Input/Output: [(-82 77 64 -6) -82]
Test Case: 609 | Input/Output: [(-67 82 -60 -9) -67]
Test Case: 610 | Input/Output: [(41 50 -64 64) -64]
Test Case: 611 | Input/Output: [(62 -3 21 22) -3]
Test Case: 612 | Input/Output: [(9 57 -40 26) -40]
Test Case: 613 | Input/Output: [(-16 3 42 -54) -54]
Test Case: 614 | Input/Output: [(34 17 84 -25) -25]
Test Case: 615 | Input/Output: [(64 55 46 69) 46]
Test Case: 616 | Input/Output: [(-45 -33 -63 -7) -63]
Test Case: 617 | Input/Output: [(-99 54 -22 -73) -99]
Test Case: 618 | Input/Output: [(-18 93 -95 56) -95]
Test Case: 619 | Input/Output: [(33 3 50 -85) -85]
Test Case: 620 | Input/Output: [(-86 -25 -41 -43) -86]
Test Case: 621 | Input/Output: [(75 -23 -97 -18) -97]
Test Case: 622 | Input/Output: [(30 16 77 -82) -82]
Test Case: 623 | Input/Output: [(-4 92 -20 -74) -74]
Test Case: 624 | Input/Output: [(-8 -69 50 -40) -69]
Test Case: 625 | Input/Output: [(-94 -65 -76 52) -94]
Test Case: 626 | Input/Output: [(-82 -49 47 1) -82]
Test Case: 627 | Input/Output: [(-26 61 -9 11) -26]
Test Case: 628 | Input/Output: [(26 -46 -69 9) -69]
Test Case: 629 | Input/Output: [(-20 80 -7 -42) -42]
Test Case: 630 | Input/Output: [(99 80 -62 77) -62]
Test Case: 631 | Input/Output: [(-66 -12 -16 -10) -66]
Test Case: 632 | Input/Output: [(-62 -58 74 -85) -85]
Test Case: 633 | Input/Output: [(21 92 15 -46) -46]
Test Case: 634 | Input/Output: [(60 8 -15 -90) -90]
Test Case: 635 | Input/Output: [(23 -96 45 -59) -96]
Test Case: 636 | Input/Output: [(-30 64 47 6) -30]
Test Case: 637 | Input/Output: [(-17 -13 -77 -6) -77]
Test Case: 638 | Input/Output: [(-76 31 -85 -34) -85]
Test Case: 639 | Input/Output: [(-53 13 -7 -12) -53]
Test Case: 640 | Input/Output: [(73 -56 -80 11) -80]
Test Case: 641 | Input/Output: [(89 45 -53 40) -53]
Test Case: 642 | Input/Output: [(-2 -70 21 50) -70]
Test Case: 643 | Input/Output: [(94 -93 -59 47) -93]
Test Case: 644 | Input/Output: [(61 -64 -93 -60) -93]
Test Case: 645 | Input/Output: [(-64 -93 -33 53) -93]
Test Case: 646 | Input/Output: [(15 -51 28 0) -51]
Test Case: 647 | Input/Output: [(-4 61 97 -24) -24]
Test Case: 648 | Input/Output: [(77 100 60 58) 58]
Test Case: 649 | Input/Output: [(-70 -34 1 -91) -91]
Test Case: 650 | Input/Output: [(39 9 -31 26) -31]
Test Case: 651 | Input/Output: [(-46 -37 9 50) -46]
Test Case: 652 | Input/Output: [(-35 -23 -30 -65) -65]
Test Case: 653 | Input/Output: [(-84 12 -79 12) -84]
Test Case: 654 | Input/Output: [(-69 8 -63 -33) -69]
Test Case: 655 | Input/Output: [(46 -62 67 -35) -62]
Test Case: 656 | Input/Output: [(-2 -49 26 92) -49]
Test Case: 657 | Input/Output: [(71 80 -45 92) -45]
Test Case: 658 | Input/Output: [(49 -18 38 8) -18]
Test Case: 659 | Input/Output: [(-93 -34 -2 51) -93]
Test Case: 660 | Input/Output: [(-49 91 -53 -64) -64]
Test Case: 661 | Input/Output: [(92 -91 8 91) -91]
Test Case: 662 | Input/Output: [(35 34 -71 80) -71]
Test Case: 663 | Input/Output: [(-33 -4 92 -37) -37]
Test Case: 664 | Input/Output: [(-46 62 5 2) -46]
Test Case: 665 | Input/Output: [(60 71 -62 -39) -62]
Test Case: 666 | Input/Output: [(44 52 2 73) 2]
Test Case: 667 | Input/Output: [(-29 -50 -8 -98) -98]
Test Case: 668 | Input/Output: [(-46 1 -18 48) -46]
Test Case: 669 | Input/Output: [(59 11 -61 -76) -76]
Test Case: 670 | Input/Output: [(-90 50 -18 -65) -90]
Test Case: 671 | Input/Output: [(72 28 -30 61) -30]
Test Case: 672 | Input/Output: [(36 -31 20 -11) -31]
Test Case: 673 | Input/Output: [(-47 -65 -33 -87) -87]
Test Case: 674 | Input/Output: [(-87 -14 -81 -9) -87]
Test Case: 675 | Input/Output: [(95 -66 -23 38) -66]
Test Case: 676 | Input/Output: [(-88 -49 -75 -75) -88]
Test Case: 677 | Input/Output: [(89 73 56 -68) -68]
Test Case: 678 | Input/Output: [(36 -75 -12 72) -75]
Test Case: 679 | Input/Output: [(-66 74 -38 -74) -74]
Test Case: 680 | Input/Output: [(-6 -92 -28 73) -92]
Test Case: 681 | Input/Output: [(26 69 -55 22) -55]
Test Case: 682 | Input/Output: [(-44 71 8 -24) -44]
Test Case: 683 | Input/Output: [(59 86 -56 -95) -95]
Test Case: 684 | Input/Output: [(-67 98 90 -68) -68]
Test Case: 685 | Input/Output: [(88 -40 -75 -7) -75]
Test Case: 686 | Input/Output: [(26 -20 -43 -17) -43]
Test Case: 687 | Input/Output: [(-88 -13 -73 -55) -88]
Test Case: 688 | Input/Output: [(67 51 85 3) 3]
Test Case: 689 | Input/Output: [(-55 9 82 -72) -72]
Test Case: 690 | Input/Output: [(-67 -77 -80 -25) -80]
Test Case: 691 | Input/Output: [(-28 47 15 -34) -34]
Test Case: 692 | Input/Output: [(-76 5 46 -26) -76]
Test Case: 693 | Input/Output: [(-78 26 -1 87) -78]
Test Case: 694 | Input/Output: [(-92 51 -45 -22) -92]
Test Case: 695 | Input/Output: [(77 -5 23 -78) -78]
Test Case: 696 | Input/Output: [(-85 73 16 99) -85]
Test Case: 697 | Input/Output: [(-36 53 81 19) -36]
Test Case: 698 | Input/Output: [(-54 -99 -51 -62) -99]
Test Case: 699 | Input/Output: [(-98 -72 -9 80) -98]
Test Case: 700 | Input/Output: [(-5 -6 87 -57) -57]
Test Case: 701 | Input/Output: [(-90 -47 42 -26) -90]
Test Case: 702 | Input/Output: [(-49 -95 7 -85) -95]
Test Case: 703 | Input/Output: [(39 85 -46 22) -46]
Test Case: 704 | Input/Output: [(96 -16 -36 -58) -58]
Test Case: 705 | Input/Output: [(-96 -9 16 -26) -96]
Test Case: 706 | Input/Output: [(-50 -63 45 -15) -63]
Test Case: 707 | Input/Output: [(-78 28 -16 -26) -78]
Test Case: 708 | Input/Output: [(-46 64 85 -91) -91]
Test Case: 709 | Input/Output: [(28 69 71 -31) -31]
Test Case: 710 | Input/Output: [(4 49 -52 -46) -52]
Test Case: 711 | Input/Output: [(17 -36 -83 -1) -83]
Test Case: 712 | Input/Output: [(59 13 99 47) 13]
Test Case: 713 | Input/Output: [(49 17 -31 54) -31]
Test Case: 714 | Input/Output: [(-35 46 82 71) -35]
Test Case: 715 | Input/Output: [(54 5 25 0) 0]
Test Case: 716 | Input/Output: [(39 83 -85 -30) -85]
Test Case: 717 | Input/Output: [(66 48 94 -3) -3]
Test Case: 718 | Input/Output: [(-48 93 10 -80) -80]
Test Case: 719 | Input/Output: [(83 9 59 -70) -70]
Test Case: 720 | Input/Output: [(53 -26 -79 -31) -79]
Test Case: 721 | Input/Output: [(41 12 53 80) 12]
Test Case: 722 | Input/Output: [(-41 2 -85 72) -85]
Test Case: 723 | Input/Output: [(32 70 -84 81) -84]
Test Case: 724 | Input/Output: [(59 -45 43 85) -45]
Test Case: 725 | Input/Output: [(-88 83 60 61) -88]
Test Case: 726 | Input/Output: [(-85 33 33 80) -85]
Test Case: 727 | Input/Output: [(-31 50 -38 72) -38]
Test Case: 728 | Input/Output: [(30 -17 -52 -83) -83]
Test Case: 729 | Input/Output: [(-13 -27 26 4) -27]
Test Case: 730 | Input/Output: [(-95 -10 71 -49) -95]
Test Case: 731 | Input/Output: [(86 -73 75 -73) -73]
Test Case: 732 | Input/Output: [(78 -23 72 100) -23]
Test Case: 733 | Input/Output: [(14 -12 95 -90) -90]
Test Case: 734 | Input/Output: [(-95 -21 47 -32) -95]
Test Case: 735 | Input/Output: [(-45 11 11 75) -45]
Test Case: 736 | Input/Output: [(52 49 17 95) 17]
Test Case: 737 | Input/Output: [(0 72 -78 94) -78]
Test Case: 738 | Input/Output: [(-59 -75 73 -51) -75]
Test Case: 739 | Input/Output: [(55 -61 83 -56) -61]
Test Case: 740 | Input/Output: [(50 54 99 -82) -82]
Test Case: 741 | Input/Output: [(37 -65 -59 69) -65]
Test Case: 742 | Input/Output: [(-26 92 79 31) -26]
Test Case: 743 | Input/Output: [(30 -81 82 -100) -100]
Test Case: 744 | Input/Output: [(-34 82 86 -93) -93]
Test Case: 745 | Input/Output: [(30 -91 -25 -32) -91]
Test Case: 746 | Input/Output: [(23 -52 -30 72) -52]
Test Case: 747 | Input/Output: [(-24 51 -81 -5) -81]
Test Case: 748 | Input/Output: [(-79 -15 -60 32) -79]
Test Case: 749 | Input/Output: [(-47 -80 46 -68) -80]
Test Case: 750 | Input/Output: [(-18 77 23 -71) -71]
Test Case: 751 | Input/Output: [(-55 78 -71 33) -71]
Test Case: 752 | Input/Output: [(40 89 -60 95) -60]
Test Case: 753 | Input/Output: [(-74 -66 95 -8) -74]
Test Case: 754 | Input/Output: [(25 46 77 -57) -57]
Test Case: 755 | Input/Output: [(93 -38 -17 20) -38]
Test Case: 756 | Input/Output: [(45 76 1 15) 1]
Test Case: 757 | Input/Output: [(58 45 -16 12) -16]
Test Case: 758 | Input/Output: [(-31 -89 24 18) -89]
Test Case: 759 | Input/Output: [(-100 -93 -62 -61) -100]
Test Case: 760 | Input/Output: [(-10 31 56 25) -10]
Test Case: 761 | Input/Output: [(8 -73 16 -90) -90]
Test Case: 762 | Input/Output: [(-48 -39 19 -25) -48]
Test Case: 763 | Input/Output: [(10 50 -37 -88) -88]
Test Case: 764 | Input/Output: [(29 31 -52 50) -52]
Test Case: 765 | Input/Output: [(13 94 69 -89) -89]
Test Case: 766 | Input/Output: [(-23 -68 -41 46) -68]
Test Case: 767 | Input/Output: [(-35 33 0 47) -35]
Test Case: 768 | Input/Output: [(-74 63 -96 -77) -96]
Test Case: 769 | Input/Output: [(72 -4 -37 36) -37]
Test Case: 770 | Input/Output: [(79 -28 -9 95) -28]
Test Case: 771 | Input/Output: [(47 -85 -2 56) -85]
Test Case: 772 | Input/Output: [(10 37 -24 42) -24]
Test Case: 773 | Input/Output: [(16 35 -47 -3) -47]
Test Case: 774 | Input/Output: [(49 -46 20 18) -46]
Test Case: 775 | Input/Output: [(24 39 54 -5) -5]
Test Case: 776 | Input/Output: [(-100 99 84 81) -100]
Test Case: 777 | Input/Output: [(5 6 -76 -7) -76]
Test Case: 778 | Input/Output: [(83 81 -45 19) -45]
Test Case: 779 | Input/Output: [(-76 -66 14 -15) -76]
Test Case: 780 | Input/Output: [(-71 61 -61 -71) -71]
Test Case: 781 | Input/Output: [(-21 -52 -37 -51) -52]
Test Case: 782 | Input/Output: [(67 -81 45 7) -81]
Test Case: 783 | Input/Output: [(-99 -23 17 78) -99]
Test Case: 784 | Input/Output: [(59 29 23 -45) -45]
Test Case: 785 | Input/Output: [(-91 -16 -51 -65) -91]
Test Case: 786 | Input/Output: [(48 64 44 -75) -75]
Test Case: 787 | Input/Output: [(7 -88 55 97) -88]
Test Case: 788 | Input/Output: [(-58 -31 73 -70) -70]
Test Case: 789 | Input/Output: [(54 65 30 -31) -31]
Test Case: 790 | Input/Output: [(89 17 4 7) 4]
Test Case: 791 | Input/Output: [(89 -34 80 -6) -34]
Test Case: 792 | Input/Output: [(-84 -63 27 -35) -84]
Test Case: 793 | Input/Output: [(12 -72 -80 -1) -80]
Test Case: 794 | Input/Output: [(-99 -10 -50 5) -99]
Test Case: 795 | Input/Output: [(65 -6 -89 70) -89]
Test Case: 796 | Input/Output: [(-8 -30 -54 -8) -54]
Test Case: 797 | Input/Output: [(-42 -49 56 28) -49]
Test Case: 798 | Input/Output: [(26 3 80 -22) -22]
Test Case: 799 | Input/Output: [(-72 -76 35 58) -76]
Test Case: 800 | Input/Output: [(-44 75 44 66) -44]
Test Case: 801 | Input/Output: [(97 -94 84 -22) -94]
Test Case: 802 | Input/Output: [(-5 -64 -12 15) -64]
Test Case: 803 | Input/Output: [(-29 -28 71 39) -29]
Test Case: 804 | Input/Output: [(-96 20 -65 42) -96]
Test Case: 805 | Input/Output: [(17 -71 68 -28) -71]
Test Case: 806 | Input/Output: [(-31 -36 0 -11) -36]
Test Case: 807 | Input/Output: [(1 -39 1 9) -39]
Test Case: 808 | Input/Output: [(15 23 -29 29) -29]
Test Case: 809 | Input/Output: [(-19 -93 39 42) -93]
Test Case: 810 | Input/Output: [(83 22 62 71) 22]
Test Case: 811 | Input/Output: [(-53 10 -8 6) -53]
Test Case: 812 | Input/Output: [(30 -95 68 -68) -95]
Test Case: 813 | Input/Output: [(-3 86 53 -82) -82]
Test Case: 814 | Input/Output: [(-93 92 87 48) -93]
Test Case: 815 | Input/Output: [(68 24 22 23) 22]
Test Case: 816 | Input/Output: [(-14 74 -51 1) -51]
Test Case: 817 | Input/Output: [(-13 -77 -61 -55) -77]
Test Case: 818 | Input/Output: [(-72 69 -13 -95) -95]
Test Case: 819 | Input/Output: [(92 -89 -3 -74) -89]
Test Case: 820 | Input/Output: [(47 42 30 74) 30]
Test Case: 821 | Input/Output: [(-83 -71 -52 -84) -84]
Test Case: 822 | Input/Output: [(-13 -39 -84 -98) -98]
Test Case: 823 | Input/Output: [(-16 21 -10 -9) -16]
Test Case: 824 | Input/Output: [(1 -29 78 -44) -44]
Test Case: 825 | Input/Output: [(-37 -92 -45 62) -92]
Test Case: 826 | Input/Output: [(72 45 16 -79) -79]
Test Case: 827 | Input/Output: [(75 80 73 -56) -56]
Test Case: 828 | Input/Output: [(29 -83 14 41) -83]
Test Case: 829 | Input/Output: [(27 37 7 94) 7]
Test Case: 830 | Input/Output: [(-27 -52 21 -20) -52]
Test Case: 831 | Input/Output: [(73 82 55 73) 55]
Test Case: 832 | Input/Output: [(24 80 6 -49) -49]
Test Case: 833 | Input/Output: [(17 -40 76 -86) -86]
Test Case: 834 | Input/Output: [(-37 97 -91 -43) -91]
Test Case: 835 | Input/Output: [(11 30 -39 48) -39]
Test Case: 836 | Input/Output: [(57 58 -85 11) -85]
Test Case: 837 | Input/Output: [(63 -16 -77 -19) -77]
Test Case: 838 | Input/Output: [(-57 -12 32 -61) -61]
Test Case: 839 | Input/Output: [(10 -13 16 76) -13]
Test Case: 840 | Input/Output: [(-38 -7 6 52) -38]
Test Case: 841 | Input/Output: [(-34 31 33 -9) -34]
Test Case: 842 | Input/Output: [(31 -8 -98 -70) -98]
Test Case: 843 | Input/Output: [(21 3 75 65) 3]
Test Case: 844 | Input/Output: [(60 18 -35 -96) -96]
Test Case: 845 | Input/Output: [(-28 8 -8 87) -28]
Test Case: 846 | Input/Output: [(-71 -44 -45 -81) -81]
Test Case: 847 | Input/Output: [(-83 -66 89 -33) -83]
Test Case: 848 | Input/Output: [(12 27 98 32) 12]
Test Case: 849 | Input/Output: [(-25 -2 77 41) -25]
Test Case: 850 | Input/Output: [(-76 -68 40 78) -76]
Test Case: 851 | Input/Output: [(69 -25 -37 -81) -81]
Test Case: 852 | Input/Output: [(33 33 -84 96) -84]
Test Case: 853 | Input/Output: [(67 44 -49 15) -49]
Test Case: 854 | Input/Output: [(-4 50 22 31) -4]
Test Case: 855 | Input/Output: [(85 -88 33 -23) -88]
Test Case: 856 | Input/Output: [(31 93 68 -52) -52]
Test Case: 857 | Input/Output: [(-76 -48 56 -49) -76]
Test Case: 858 | Input/Output: [(88 99 44 49) 44]
Test Case: 859 | Input/Output: [(69 73 16 19) 16]
Test Case: 860 | Input/Output: [(60 -4 -5 -49) -49]
Test Case: 861 | Input/Output: [(-41 77 -40 71) -41]
Test Case: 862 | Input/Output: [(-69 -87 98 56) -87]
Test Case: 863 | Input/Output: [(68 0 87 -83) -83]
Test Case: 864 | Input/Output: [(77 17 77 -28) -28]
Test Case: 865 | Input/Output: [(47 -88 -55 -93) -93]
Test Case: 866 | Input/Output: [(43 7 -35 39) -35]
Test Case: 867 | Input/Output: [(-59 -10 -93 -49) -93]
Test Case: 868 | Input/Output: [(-40 25 51 40) -40]
Test Case: 869 | Input/Output: [(44 62 -54 -81) -81]
Test Case: 870 | Input/Output: [(-55 -45 94 -11) -55]
Test Case: 871 | Input/Output: [(35 -88 -33 78) -88]
Test Case: 872 | Input/Output: [(23 -6 -31 -45) -45]
Test Case: 873 | Input/Output: [(9 -72 -93 20) -93]
Test Case: 874 | Input/Output: [(-56 -2 16 -74) -74]
Test Case: 875 | Input/Output: [(-82 -31 18 34) -82]
Test Case: 876 | Input/Output: [(52 -56 -81 -76) -81]
Test Case: 877 | Input/Output: [(52 -94 26 -26) -94]
Test Case: 878 | Input/Output: [(-51 51 28 -3) -51]
Test Case: 879 | Input/Output: [(28 -49 -62 -87) -87]
Test Case: 880 | Input/Output: [(-3 -25 37 -41) -41]
Test Case: 881 | Input/Output: [(50 -26 -85 -2) -85]
Test Case: 882 | Input/Output: [(-89 24 -79 81) -89]
Test Case: 883 | Input/Output: [(43 35 -78 7) -78]
Test Case: 884 | Input/Output: [(85 -36 53 3) -36]
Test Case: 885 | Input/Output: [(75 -99 55 36) -99]
Test Case: 886 | Input/Output: [(97 53 -64 29) -64]
Test Case: 887 | Input/Output: [(44 68 -68 -94) -94]
Test Case: 888 | Input/Output: [(9 -50 -48 -94) -94]
Test Case: 889 | Input/Output: [(-85 -81 -22 -56) -85]
Test Case: 890 | Input/Output: [(35 -3 -29 -17) -29]
Test Case: 891 | Input/Output: [(100 -7 -85 -1) -85]
Test Case: 892 | Input/Output: [(94 66 -21 -28) -28]
Test Case: 893 | Input/Output: [(-34 -79 2 16) -79]
Test Case: 894 | Input/Output: [(20 19 27 -42) -42]
Test Case: 895 | Input/Output: [(8 -2 -11 44) -11]
Test Case: 896 | Input/Output: [(-81 -94 14 84) -94]
Test Case: 897 | Input/Output: [(39 35 -60 49) -60]
Test Case: 898 | Input/Output: [(-35 -42 -3 79) -42]
Test Case: 899 | Input/Output: [(-62 -5 78 24) -62]
Test Case: 900 | Input/Output: [(60 71 40 -74) -74]
Test Case: 901 | Input/Output: [(22 -36 -78 -90) -90]
Test Case: 902 | Input/Output: [(-41 18 -78 -12) -78]
Test Case: 903 | Input/Output: [(-21 -91 94 56) -91]
Test Case: 904 | Input/Output: [(-58 -39 -68 44) -68]
Test Case: 905 | Input/Output: [(0 44 -75 -83) -83]
Test Case: 906 | Input/Output: [(-73 -81 -37 -16) -81]
Test Case: 907 | Input/Output: [(-41 -72 -37 -29) -72]
Test Case: 908 | Input/Output: [(15 34 -98 68) -98]
Test Case: 909 | Input/Output: [(13 37 12 37) 12]
Test Case: 910 | Input/Output: [(-17 43 35 100) -17]
Test Case: 911 | Input/Output: [(-5 -10 25 -1) -10]
Test Case: 912 | Input/Output: [(4 46 -100 39) -100]
Test Case: 913 | Input/Output: [(95 -94 95 16) -94]
Test Case: 914 | Input/Output: [(21 -27 -57 42) -57]
Test Case: 915 | Input/Output: [(-87 35 33 77) -87]
Test Case: 916 | Input/Output: [(-29 65 77 -2) -29]
Test Case: 917 | Input/Output: [(-93 29 79 18) -93]
Test Case: 918 | Input/Output: [(-84 -80 24 -59) -84]
Test Case: 919 | Input/Output: [(100 49 7 25) 7]
Test Case: 920 | Input/Output: [(-80 78 -27 19) -80]
Test Case: 921 | Input/Output: [(74 -84 -47 47) -84]
Test Case: 922 | Input/Output: [(81 -75 3 -71) -75]
Test Case: 923 | Input/Output: [(32 -50 -1 15) -50]
Test Case: 924 | Input/Output: [(11 37 91 87) 11]
Test Case: 925 | Input/Output: [(-54 -38 6 14) -54]
Test Case: 926 | Input/Output: [(92 80 20 -80) -80]
Test Case: 927 | Input/Output: [(-90 -27 70 37) -90]
Test Case: 928 | Input/Output: [(5 -64 56 -35) -64]
Test Case: 929 | Input/Output: [(19 -65 -26 -77) -77]
Test Case: 930 | Input/Output: [(-70 -68 -3 -35) -70]
Test Case: 931 | Input/Output: [(-58 53 19 -29) -58]
Test Case: 932 | Input/Output: [(-33 74 -46 93) -46]
Test Case: 933 | Input/Output: [(59 41 -84 -83) -84]
Test Case: 934 | Input/Output: [(-54 -69 -71 -47) -71]
Test Case: 935 | Input/Output: [(93 85 64 -8) -8]
Test Case: 936 | Input/Output: [(-45 77 5 -43) -45]
Test Case: 937 | Input/Output: [(-92 23 81 -94) -94]
Test Case: 938 | Input/Output: [(-79 54 70 8) -79]
Test Case: 939 | Input/Output: [(39 -97 66 -47) -97]
Test Case: 940 | Input/Output: [(-45 93 3 56) -45]
Test Case: 941 | Input/Output: [(83 28 57 9) 9]
Test Case: 942 | Input/Output: [(-70 -32 33 -1) -70]
Test Case: 943 | Input/Output: [(-50 52 77 22) -50]
Test Case: 944 | Input/Output: [(82 -43 -26 2) -43]
Test Case: 945 | Input/Output: [(25 17 30 -89) -89]
Test Case: 946 | Input/Output: [(54 -8 44 -84) -84]
Test Case: 947 | Input/Output: [(48 -45 -48 -78) -78]
Test Case: 948 | Input/Output: [(-55 -62 53 42) -62]
Test Case: 949 | Input/Output: [(-70 -17 -46 49) -70]
Test Case: 950 | Input/Output: [(-94 38 51 17) -94]
Test Case: 951 | Input/Output: [(79 7 41 -27) -27]
Test Case: 952 | Input/Output: [(33 -32 100 81) -32]
Test Case: 953 | Input/Output: [(-37 32 -71 -41) -71]
Test Case: 954 | Input/Output: [(43 44 71 -30) -30]
Test Case: 955 | Input/Output: [(69 -88 23 -9) -88]
Test Case: 956 | Input/Output: [(27 56 60 -49) -49]
Test Case: 957 | Input/Output: [(-18 -18 76 28) -18]
Test Case: 958 | Input/Output: [(57 92 -38 11) -38]
Test Case: 959 | Input/Output: [(93 -23 62 68) -23]
Test Case: 960 | Input/Output: [(55 45 68 -47) -47]
Test Case: 961 | Input/Output: [(57 40 100 67) 40]
Test Case: 962 | Input/Output: [(64 48 80 39) 39]
Test Case: 963 | Input/Output: [(69 -43 -18 -64) -64]
Test Case: 964 | Input/Output: [(1 4 2 -44) -44]
Test Case: 965 | Input/Output: [(66 45 -8 45) -8]
Test Case: 966 | Input/Output: [(24 46 26 -80) -80]
Test Case: 967 | Input/Output: [(83 29 -80 41) -80]
Test Case: 968 | Input/Output: [(-66 36 -97 1) -97]
Test Case: 969 | Input/Output: [(84 -39 -80 36) -80]
Test Case: 970 | Input/Output: [(-48 99 47 -25) -48]
Test Case: 971 | Input/Output: [(-17 21 -13 -95) -95]
Test Case: 972 | Input/Output: [(-71 -35 55 48) -71]
Test Case: 973 | Input/Output: [(16 50 -7 4) -7]
Test Case: 974 | Input/Output: [(-46 -13 79 15) -46]
Test Case: 975 | Input/Output: [(-54 65 -68 -96) -96]
Test Case: 976 | Input/Output: [(-54 1 29 -8) -54]
Test Case: 977 | Input/Output: [(19 39 -42 74) -42]
Test Case: 978 | Input/Output: [(84 72 -82 -88) -88]
Test Case: 979 | Input/Output: [(28 79 69 11) 11]
Test Case: 980 | Input/Output: [(71 8 92 -51) -51]
Test Case: 981 | Input/Output: [(-24 4 -83 -31) -83]
Test Case: 982 | Input/Output: [(-78 -51 -11 2) -78]
Test Case: 983 | Input/Output: [(-99 89 28 48) -99]
Test Case: 984 | Input/Output: [(5 -34 52 72) -34]
Test Case: 985 | Input/Output: [(-23 -28 -86 89) -86]
Test Case: 986 | Input/Output: [(-98 -67 -8 -33) -98]
Test Case: 987 | Input/Output: [(100 2 -59 -65) -65]
Test Case: 988 | Input/Output: [(-100 -54 66 87) -100]
Test Case: 989 | Input/Output: [(-41 19 -60 67) -60]
Test Case: 990 | Input/Output: [(71 -89 -31 -71) -89]
Test Case: 991 | Input/Output: [(-39 28 21 -91) -91]
Test Case: 992 | Input/Output: [(88 -44 -41 26) -44]
Test Case: 993 | Input/Output: [(-34 -99 -31 -45) -99]
Test Case: 994 | Input/Output: [(-68 44 -68 65) -68]
Test Case: 995 | Input/Output: [(-99 27 72 -92) -99]
Test Case: 996 | Input/Output: [(57 -88 -54 58) -88]
Test Case: 997 | Input/Output: [(35 -14 4 -56) -56]
Test Case: 998 | Input/Output: [(-23 29 -64 -87) -87]
Test Case: 999 | Input/Output: [(-2 23 100 89) -2]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 50 23 -95 -119 37 104 88 -70 80 -27 26 -42 101 -97 -94 -97
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-33 -98 -33 -33] -98] [[3 3 82 3] 3] [[12 20 20 20] 12] [[5 5 1 5] 1] [[-63 -63 2 -63] -63] [[82 -98 82 82] -98] [[-38 83 83 83] -38] [[-94 -94 -94 67] -94] [[36 -65 36 36] -65] [[50 50 -96 50] -96] [(-65 -65 -65 -65) -65] [(-32 -32 -32 -32) -32] [(62 62 62 62) 62] [(-8 -8 -8 -8) -8] [(-1 -1 -1 -1) -1] [(84 46 10 37) 10] [(79 70 94 22) 22] [(59 77 61 52) 52] [(23 4 94 54) 4] [(8 5 55 29) 5] [(19 10 92 45) 10] [(36 86 51 41) 36] [(53 38 5 11) 5] [(60 7 99 51) 7] [(25 98 16 39) 16] [(63 27 37 89) 27] [(4 80 96 71) 4] [(76 74 32 99) 32] [(46 88 45 30) 30] [(82 21 46 40) 21] [(1 38 38 83) 1] [(94 92 18 54) 18] [(91 33 93 20) 20] [(18 52 49 23) 18] [(89 71 53 51) 51] [(-40 77 5 96) -40] [(-46 31 31 -81) -81] [(32 22 -28 -93) -93] [(37 -56 -64 -2) -64] [(13 97 -52 36) -52] [(41 -7 59 47) -7] [(11 77 -44 -24) -44] [(66 72 -11 16) -11] [(-52 -64 95 28) -64] [(-75 -48 0 -92) -92] [(-25 -51 5 80) -51] [(45 94 -1 -83) -83] [(-73 9 70 43) -73] [(-96 -82 -31 -89) -96] [(5 61 48 95) 5] [(20 96 36 36) 20] [(94 -74 80 -45) -74] [(-85 -52 12 85) -85] [(69 81 -13 -94) -94] [(-19 -90 83 -95) -95] [(18 -25 82 83) -25] [(34 91 54 83) 34] [(-51 54 -36 16) -51] [(94 35 -75 -84) -84] [(-19 95 -14 95) -19] [(-8 -66 -40 48) -66] [(78 -65 -36 -2) -65] [(-57 -74 -50 -4) -74] [(25 75 -69 -5) -69] [(-98 -34 82 -72) -98] [(-66 95 -40 69) -66] [(-62 -96 100 -24) -96] [(-96 73 56 -84) -96] [(58 -90 55 56) -90] [(85 -6 15 15) -6] [(-22 41 -64 -99) -99] [(-90 31 91 63) -90] [(-38 -40 -21 -40) -40] [(-58 92 98 -34) -58] [(23 -87 -38 15) -87] [(-89 -88 84 -92) -92] [(36 43 4 41) 4] [(12 77 -63 39) -63] [(-58 -25 72 1) -58] [(58 -28 -17 25) -28] [(84 -15 -88 -40) -88] [(98 -20 6 -88) -88] [(-42 33 39 -58) -58] [(-13 12 -28 6) -28] [(-11 61 -20 99) -20] [(36 31 -74 -22) -74] [(-73 -85 17 -90) -90] [(77 -59 83 -59) -59] [(-8 24 57 -1) -8] [(59 40 -92 -38) -92] [(-96 -93 10 1) -96] [(-81 27 -90 -63) -90] [(-96 6 27 42) -96] [(-7 92 18 -20) -20] [(-76 97 -25 23) -76])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Lexicase best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max integer_inc integer_gt integer_empty integer_add boolean_shove exec_when (exec_pop (boolean_rot boolean_flush boolean_pop boolean_rot exec_k_when_autoconstructing (in1) ())))) () ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Zero cases best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max integer_inc integer_gt integer_empty integer_add boolean_shove exec_when (exec_pop (boolean_rot boolean_flush boolean_pop boolean_rot exec_k_when_autoconstructing (in1) ())))) () ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 2 2 1 6 3 2 9 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (3 3 2 2 1 6 3 2 9 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap})
Best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop boolean_swap boolean_frominteger) boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () exec_dup (boolean_invert_first_then_and integer_add boolean_yank boolean_shove boolean_empty integer_add boolean_swap))
Errors: [1 1 0 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 56
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 9.966
Median total errors in population: 10
Error averages by case: (0.997 0.997 0.998 0.998 0.999 0.994 0.997 0.998 0.991 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.327
Average program size in population (points): 67.801
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462936
--- Timings ---
Current time: 1559582667793 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.6%
Fitness Testing:      1.8 seconds, 66.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap})
Lexicase best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop boolean_swap boolean_frominteger) boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () exec_dup (boolean_invert_first_then_and integer_add boolean_yank boolean_shove boolean_empty integer_add boolean_swap))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 56
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap})
Zero cases best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop boolean_swap boolean_frominteger) boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () exec_dup (boolean_invert_first_then_and integer_add boolean_yank boolean_shove boolean_empty integer_add boolean_swap))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 56
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 304 185 483 128 483 483 128 119 484)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (119 304 185 483 128 483 483 128 119 484)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max integer_inc integer_gt integer_empty integer_add boolean_shove exec_when (exec_pop (boolean_rot boolean_flush boolean_pop boolean_rot exec_k_when_autoconstructing (in1) ())))) () ()))
Errors: [1 1 1 0 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.084
Median total errors in population: 7
Error averages by case: (0.881 0.696 0.815 0.517 0.872 0.517 0.517 0.872 0.881 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.63
Average program size in population (points): 52.993
Average percent parens in population: 0.272
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.479
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 801437
--- Timings ---
Current time: 1559582670173 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 46.2%
Fitness Testing:      2.3 seconds, 44.8%
Report:               0.4 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_2} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_dup_items print_integer boolean_rot integer_dup_times integer_pop boolean_swap exec_do*count (exec_noop) boolean_stackdepth integer_gt integer_swap integer_lt exec_dup_items exec_eq in3 exec_when () in3 integer_mult tag_boolean_2 boolean_eq integer_lte print_integer boolean_xor integer_gte exec_flush integer_mod boolean_yankdup integer_mod boolean_invert_second_then_and integer_add integer_lt exec_k_when_autoconstructing (exec_yank integer_shove integer_stackdepth boolean_yank integer_dup_times boolean_xor) (boolean_and integer_dup_items boolean_yank exec_if (exec_pop (boolean_frominteger) boolean_rot integer_dup_items exec_do*times (integer_max boolean_stackdepth exec_dup_times (boolean_yank) integer_gt integer_min exec_pop (exec_eq) exec_swap () (exec_s_when_autoconstructing (exec_pop ()) () ()))) ()))
Lexicase best errors: [0 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction in3} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_2} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_dup_items print_integer boolean_rot integer_dup_times integer_pop boolean_swap exec_do*count (exec_noop) boolean_stackdepth integer_gt integer_swap integer_lt exec_dup_items exec_eq in3 exec_when () in3 integer_mult tag_boolean_2 boolean_eq integer_lte print_integer boolean_xor integer_gte exec_flush integer_mod boolean_yankdup integer_mod boolean_invert_second_then_and integer_add integer_lt exec_k_when_autoconstructing (exec_yank integer_shove integer_stackdepth boolean_yank integer_dup_times boolean_xor) (boolean_and integer_dup_items boolean_yank exec_if (exec_pop (boolean_frominteger) boolean_rot integer_dup_items exec_do*times (integer_max boolean_stackdepth exec_dup_times (boolean_yank) integer_gt integer_min exec_pop (exec_eq) exec_swap () (exec_s_when_autoconstructing (exec_pop ()) () ()))) ()))
Zero cases best errors: [0 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 211 211 136 188 388 930 212 137 387)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (136 211 211 136 188 388 930 212 137 387)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Best program: (boolean_or exec_yankdup exec_k_when_autoconstructing (in3 integer_shove) (print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) boolean_frominteger integer_inc boolean_dup_items boolean_not integer_rot boolean_swap) integer_stackdepth))
Errors: [0 1 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 23
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.064
Median total errors in population: 7
Error averages by case: (0.864 0.789 0.789 0.864 0.812 0.612 0.07 0.788 0.863 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.366
Average program size in population (points): 48.365
Average percent parens in population: 0.299
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.939
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1129584
--- Timings ---
Current time: 1559582672983 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.6 seconds, 56.6%
Fitness Testing:      2.8 seconds, 34.7%
Report:               0.6 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Lexicase best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ())))
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Zero cases best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ())))
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (598 312 295 200 296 313 295 200 102 295)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (598 312 295 200 296 313 295 200 102 295)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ())))
Errors: [0 1 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 20
Percent parens: 0.450
--- Population Statistics ---
Average total errors in population: 7.094
Median total errors in population: 8
Error averages by case: (0.402 0.688 0.705 0.8 0.704 0.687 0.705 0.8 0.898 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.008
Average program size in population (points): 45.235
Average percent parens in population: 0.309
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44925
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 241
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 245
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1501847
--- Timings ---
Current time: 1559582675802 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 61.6%
Fitness Testing:      3.3 seconds, 30.4%
Report:               0.8 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Lexicase best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (integer_min integer_swap exec_rot (exec_do*times (in1)) () ())))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Zero cases best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (integer_min integer_swap exec_rot (exec_do*times (in1)) () ())))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 400 183 401 183 400 897 114 315 402)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (200 400 183 401 183 400 897 114 315 402)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Best program: (boolean_yank exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ()))
Errors: [1 0 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 19
Percent parens: 0.421
--- Population Statistics ---
Average total errors in population: 6.505
Median total errors in population: 7
Error averages by case: (0.8 0.6 0.817 0.599 0.817 0.6 0.103 0.886 0.685 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.885
Average program size in population (points): 38.032
Average percent parens in population: 0.337
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.944125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 299
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 309
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1815526
--- Timings ---
Current time: 1559582679003 milliseconds
Total Time:          14.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 66.2%
Fitness Testing:      3.7 seconds, 26.3%
Report:               1.0 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Lexicase best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ())))
Lexicase best errors: [0 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Zero cases best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ())))
Zero cases best errors: [0 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (912 207 408 912 150 207 207 147 407 705)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (912 207 408 912 150 207 207 147 407 705)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer integer_mult) (boolean_stackdepth integer_swap exec_rot (exec_do*times (in1)) () ())))
Errors: [0 1 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 11
Size: 20
Percent parens: 0.450
--- Population Statistics ---
Average total errors in population: 5.738
Median total errors in population: 5
Error averages by case: (0.088 0.793 0.592 0.088 0.85 0.793 0.793 0.853 0.593 0.295)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.516
Average program size in population (points): 37.298
Average percent parens in population: 0.332
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.456625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 297
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2127335
--- Timings ---
Current time: 1559582681837 milliseconds
Total Time:          16.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.6 seconds, 68.5%
Fitness Testing:      4.1 seconds, 24.1%
Report:               1.1 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: 67                 
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 54                 
Correct output: 5                   | Program output: 29                 
Correct output: 10                  | Program output: 45                 
Correct output: 36                  | Program output: 41                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 51                 
Correct output: 16                  | Program output: 39                 
Correct output: 27                  | Program output: 89                 
Correct output: 4                   | Program output: 71                 
Correct output: 32                  | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 40                 
Correct output: 1                   | Program output: 83                 
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 23                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -2                 
Correct output: -52                 | Program output: 36                 
Correct output: -7                  | Program output: 47                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: 80                 
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: 43                 
Correct output: -96                 | Program output: -89                
Correct output: 5                   | Program output: 95                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: -45                
Correct output: -85                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: 83                 
Correct output: 34                  | Program output: 83                 
Correct output: -51                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: 48                 
Correct output: -65                 | Program output: -2                 
Correct output: -74                 | Program output: -4                 
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -72                
Correct output: -66                 | Program output: 69                 
Correct output: -96                 | Program output: -24                
Correct output: -96                 | Program output: -84                
Correct output: -90                 | Program output: 56                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -34                
Correct output: -87                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 41                 
Correct output: -63                 | Program output: 39                 
Correct output: -58                 | Program output: 1                  
Correct output: -28                 | Program output: 25                 
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 6                  
Correct output: -20                 | Program output: 99                 
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -1                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: 1                  
Correct output: -90                 | Program output: -63                
Correct output: -96                 | Program output: 42                 
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Lexicase best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (print_integer boolean_xor exec_do*times (integer_dec integer_stackdepth integer_add exec_do*count (integer_shove boolean_yank exec_when (exec_pop (boolean_rot boolean_flush boolean_pop exec_do*while (exec_k_when_autoconstructing (in1) ()))))))) () ()))
Lexicase best errors: [1 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Zero cases best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (print_integer boolean_xor exec_do*times (integer_dec integer_stackdepth integer_add exec_do*count (integer_shove boolean_yank exec_when (exec_pop (boolean_rot boolean_flush boolean_pop exec_do*while (exec_k_when_autoconstructing (in1) ()))))))) () ()))
Zero cases best errors: [1 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 329 302 329 163 139 139 163 329 163)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (138 329 302 329 163 139 139 163 329 163)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1})
Best program: (exec_stackdepth integer_yankdup boolean_not integer_flush in4 integer_div print_integer boolean_xor exec_do*times (integer_dec integer_stackdepth integer_add exec_do*count (integer_shove boolean_yank integer_fromboolean exec_s (exec_do*while () exec_pop () exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while (exec_pop (boolean_invert_first_then_and in1))) ()) () ())))
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 7.806
Median total errors in population: 7
Error averages by case: (0.862 0.671 0.698 0.671 0.837 0.861 0.861 0.837 0.671 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.216
Average program size in population (points): 38.662
Average percent parens in population: 0.302
Minimum age in population: 6.0
Maximum age in population: 11.125
Average age in population: 8.97171875
Median age in population: 9.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 187
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2474476
--- Timings ---
Current time: 1559582684707 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 70.0%
Fitness Testing:      4.5 seconds, 22.8%
Report:               1.3 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger) integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop boolean_swap boolean_frominteger boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () boolean_empty boolean_invert_first_then_and integer_add boolean_yank boolean_shove boolean_empty)
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger) integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop boolean_swap boolean_frominteger boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () boolean_empty boolean_invert_first_then_and integer_add boolean_yank boolean_shove boolean_empty)
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (910 317 319 910 275 319 319 319 319 317)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (910 317 319 910 275 319 319 319 319 317)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add})
Best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup integer_gte integer_swap exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_add)
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 5.676
Median total errors in population: 6
Error averages by case: (0.09 0.683 0.681 0.09 0.725 0.681 0.681 0.681 0.681 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.167
Average program size in population (points): 46.417
Average percent parens in population: 0.243
Minimum age in population: 7.0
Maximum age in population: 12.40625
Average age in population: 10.464875
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2850302
--- Timings ---
Current time: 1559582687617 milliseconds
Total Time:          22.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.1 seconds, 71.0%
Fitness Testing:      4.9 seconds, 21.8%
Report:               1.5 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Lexicase best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup () boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_when (exec_pop (boolean_rot boolean_flush boolean_pop boolean_rot exec_k_when_autoconstructing (in1) ())))) () ())
Lexicase best errors: [0 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1})
Zero cases best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup () boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_when (exec_pop (boolean_rot boolean_flush boolean_pop boolean_rot exec_k_when_autoconstructing (in1) ())))) () ())
Zero cases best errors: [0 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (807 578 927 1000 807 1000 578 227 122 122)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (807 578 927 0 807 0 578 227 122 122)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup})
Best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_not print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max integer_inc integer_gt integer_empty integer_add boolean_shove exec_pop (boolean_rot tag_exec_269 (integer_dup) exec_do*count (tag_integer_79) boolean_swap integer_eq exec_y () boolean_and exec_dup_times ()) exec_dup ())) () ()))
Errors: [0 0 0 1 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 48
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.832
Median total errors in population: 5
Error averages by case: (0.193 0.422 0.073 1.0 0.193 1.0 0.422 0.773 0.878 0.878)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 32.376
Average program size in population (points): 42.962
Average percent parens in population: 0.251
Minimum age in population: 8.5
Maximum age in population: 13.828125
Average age in population: 11.9715234375
Median age in population: 12.03515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3154023
--- Timings ---
Current time: 1559582690235 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.2 seconds, 71.9%
Fitness Testing:      5.3 seconds, 20.9%
Report:               1.7 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when})
Lexicase best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (exec_do*count (integer_swap) exec_y_when_autoconstructing () integer_dup_times exec_when ()) ()) ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when})
Zero cases best program: (exec_do*range (exec_s () (print_boolean boolean_flush print_integer in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (exec_do*count (integer_swap) exec_y_when_autoconstructing () integer_dup_times exec_when ()) ()) ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (418 213 261 261 418 1000 418 213 1000 630)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (418 213 261 261 418 0 418 213 0 630)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap})
Best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times boolean_dup boolean_frominteger integer_stackdepth boolean_eq integer_dec exec_flush boolean_yank integer_empty integer_rot boolean_dup boolean_swap) boolean_frominteger boolean_invert_second_then_and integer_gt tag_exec_269 (integer_dup) integer_stackdepth exec_shove (boolean_swap) integer_eq exec_y () boolean_and exec_dup_times () exec_dup (boolean_invert_first_then_and integer_add boolean_yank boolean_shove) boolean_empty integer_add boolean_swap)
Errors: [0 1 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 56
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.168
Median total errors in population: 7
Error averages by case: (0.582 0.787 0.739 0.739 0.582 1.0 0.582 0.787 1.0 0.37)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 32.95
Average program size in population (points): 43.373
Average percent parens in population: 0.243
Minimum age in population: 10.40625
Maximum age in population: 15.38671875
Average age in population: 13.44938671875
Median age in population: 13.5546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3512634
--- Timings ---
Current time: 1559582692659 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.0 seconds, 72.2%
Fitness Testing:      5.7 seconds, 20.6%
Report:               1.9 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add})
Lexicase best program: (exec_noop boolean_dup_items boolean_shove boolean_dup_items in3 boolean_not print_integer tag_integer_519 integer_mult exec_y (exec_yank) integer_dup_times integer_rot print_exec (integer_pop exec_dup_items integer_sub exec_do*count (integer_add integer_empty boolean_invert_second_then_and integer_gte exec_stackdepth exec_y_when_autoconstructing (exec_dup_items)) integer_fromboolean integer_sub) integer_add integer_stackdepth integer_pop boolean_swap boolean_frominteger boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () exec_dup (integer_mult integer_add))
Lexicase best errors: [1 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_exec_269} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction tag_integer_79} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add})
Zero cases best program: (exec_noop boolean_dup_items boolean_shove boolean_dup_items in3 boolean_not print_integer tag_integer_519 integer_mult exec_y (exec_yank) integer_dup_times integer_rot print_exec (integer_pop exec_dup_items integer_sub exec_do*count (integer_add integer_empty boolean_invert_second_then_and integer_gte exec_stackdepth exec_y_when_autoconstructing (exec_dup_items)) integer_fromboolean integer_sub) integer_add integer_stackdepth integer_pop boolean_swap boolean_frominteger boolean_invert_second_then_and integer_mult tag_exec_269 (integer_dup) integer_stackdepth tag_integer_79 boolean_swap integer_eq exec_y () boolean_and exec_dup_times () exec_dup (integer_mult integer_add))
Zero cases best errors: [1 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 245 240 413 1000 240 1000 240 240 1000)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (245 245 240 413 0 240 0 240 240 0)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Best program: (boolean_or exec_yankdup exec_k_when_autoconstructing (in3 integer_shove) (print_integer exec_do*times (tag_exec_257 (integer_div exec_pop (integer_rot) boolean_frominteger integer_inc boolean_dup_items) boolean_not integer_dup) boolean_swap) integer_stackdepth)
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 24
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.137
Median total errors in population: 9
Error averages by case: (0.755 0.755 0.76 0.587 1.0 0.76 1.0 0.76 0.76 1.0)
Error minima by case: (0 0 0 0 1 0 1 0 0 1)
Average genome size in population (length): 32.21
Average program size in population (points): 42.499
Average percent parens in population: 0.244
Minimum age in population: 11.6875
Maximum age in population: 16.955078125
Average age in population: 14.89503125
Median age in population: 14.951171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3859488
--- Timings ---
Current time: 1559582695194 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 72.7%
Fitness Testing:      6.1 seconds, 20.1%
Report:               2.1 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s})
Lexicase best program: (exec_stackdepth integer_yankdup boolean_not integer_flush in4 integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (exec_s () () ()) ())
Lexicase best errors: [1 0 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 19
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s})
Zero cases best program: (exec_stackdepth integer_yankdup boolean_not integer_flush in4 integer_div print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (exec_s () () ()) ())
Zero cases best errors: [1 0 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 19
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (524 268 268 136 268 1000 525 136 525 1000)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (524 268 268 136 268 0 525 136 525 0)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Best program: (boolean_or exec_yankdup exec_k_when_autoconstructing (in3 integer_shove) (print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) boolean_frominteger integer_inc boolean_dup_items boolean_not integer_rot boolean_swap) integer_stackdepth))
Errors: [0 1 1 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 18
Size: 23
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.35
Median total errors in population: 7
Error averages by case: (0.476 0.732 0.732 0.864 0.732 1.0 0.475 0.864 0.475 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 32.591
Average program size in population (points): 42.632
Average percent parens in population: 0.232
Minimum age in population: 12.6875
Maximum age in population: 18.3427734375
Average age in population: 16.421890625
Median age in population: 16.50390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4296182
--- Timings ---
Current time: 1559582697840 milliseconds
Total Time:          32.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.0 seconds, 72.9%
Fitness Testing:      6.6 seconds, 20.0%
Report:               2.2 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_or exec_yankdup exec_k_when_autoconstructing (in3 integer_shove) (print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) boolean_frominteger integer_inc) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth))
Lexicase best errors: [1 0 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_or exec_yankdup exec_k_when_autoconstructing (in3 integer_shove) (print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) boolean_frominteger integer_inc) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth))
Zero cases best errors: [1 0 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (339 934 1 559 934 374 220 374 1 374)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (339 934 1 559 934 374 220 374 1 374)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in1})
Best program: (exec_noop boolean_dup_items boolean_shove boolean_dup_items in3 boolean_not print_integer exec_do*times (in1))
Errors: [1 0 1 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.89
Median total errors in population: 6
Error averages by case: (0.661 0.066 0.999 0.441 0.066 0.626 0.78 0.626 0.999 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.152
Average program size in population (points): 41.111
Average percent parens in population: 0.240
Minimum age in population: 14.82421875
Maximum age in population: 19.6552734375
Average age in population: 17.90528271484375
Median age in population: 17.96826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4681778
--- Timings ---
Current time: 1559582700254 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.9 seconds, 73.1%
Fitness Testing:      7.0 seconds, 19.8%
Report:               2.4 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Lexicase best errors: [1 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Zero cases best errors: [1 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 128 371 309 948 309 139 681 268 371)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (139 128 371 309 948 309 139 681 268 371)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Errors: [1 1 1 0 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.337
Median total errors in population: 6
Error averages by case: (0.861 0.872 0.629 0.691 0.052 0.691 0.861 0.319 0.732 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.154
Average program size in population (points): 34.399
Average percent parens in population: 0.241
Minimum age in population: 15.82421875
Maximum age in population: 21.24658203125
Average age in population: 19.72881518554688
Median age in population: 19.9248046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 254
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5029982
--- Timings ---
Current time: 1559582702848 milliseconds
Total Time:          37.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.9 seconds, 73.5%
Fitness Testing:      7.4 seconds, 19.5%
Report:               2.5 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_invert_second_then_and print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max integer_inc integer_gt integer_empty boolean_invert_second_then_and integer_add integer_lt exec_k_when_autoconstructing (exec_yank exec_stackdepth) ())) () ()))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction 45} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (exec_when (boolean_yankdup 45 boolean_eq boolean_dup_items in2 exec_dup (boolean_invert_second_then_and print_integer) exec_while (exec_stackdepth) exec_s (integer_lte exec_shove () exec_shove (integer_max integer_inc integer_gt integer_empty boolean_invert_second_then_and integer_add integer_lt exec_k_when_autoconstructing (exec_yank exec_stackdepth) ())) () ()))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 272 931 415 147 243 420 147 147 243)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (273 272 931 415 147 243 420 147 147 243)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_noop})
Best program: (integer_empty integer_inc integer_sub in2 integer_stackdepth integer_div print_integer boolean_dup boolean_dup_times exec_dup (exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () boolean_eq integer_dec exec_flush integer_add integer_empty boolean_rot integer_pop exec_dup (boolean_frominteger) exec_noop)))
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 30
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.762
Median total errors in population: 7
Error averages by case: (0.727 0.728 0.069 0.585 0.853 0.757 0.58 0.853 0.853 0.757)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.648
Average program size in population (points): 34.141
Average percent parens in population: 0.247
Minimum age in population: 18.16015625
Maximum age in population: 23.010009765625
Average age in population: 21.1914013671875
Median age in population: 21.24853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5344926
--- Timings ---
Current time: 1559582705617 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 74.1%
Fitness Testing:      7.8 seconds, 19.1%
Report:               2.7 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 272 272 455 209 272 209 272 1000 210)
Population mean number of elite cases: 3.44
Count of perfect (error zero) individuals by case: (272 272 272 455 209 272 209 272 0 210)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.557
Median total errors in population: 9
Error averages by case: (0.728 0.728 0.728 0.545 0.791 0.728 0.791 0.728 1.0 0.79)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 23.517
Average program size in population (points): 31.245
Average percent parens in population: 0.251
Minimum age in population: 19.837890625
Maximum age in population: 24.47509765625
Average age in population: 22.68887518310547
Median age in population: 22.77670288085938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 115
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5618941
--- Timings ---
Current time: 1559582708356 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 74.7%
Fitness Testing:      8.1 seconds, 18.6%
Report:               2.8 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 538 538 538 1000 1000 304 948)
Population mean number of elite cases: 7.87
Count of perfect (error zero) individuals by case: (0 0 0 538 538 538 0 0 304 948)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Errors: [1 1 1 0 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.134
Median total errors in population: 6
Error averages by case: (1.0 1.0 1.0 0.462 0.462 0.462 1.0 1.0 0.696 0.052)
Error minima by case: (1 1 1 0 0 0 1 1 0 0)
Average genome size in population (length): 21.554
Average program size in population (points): 28.653
Average percent parens in population: 0.250
Minimum age in population: 21.1669921875
Maximum age in population: 26.09124755859375
Average age in population: 24.29483236694336
Median age in population: 24.37416076660156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5917796
--- Timings ---
Current time: 1559582711182 milliseconds
Total Time:          46.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 75.1%
Fitness Testing:      8.4 seconds, 18.2%
Report:               3.0 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_mult})
Lexicase best program: (exec_noop boolean_dup_items boolean_shove boolean_dup_items in3 boolean_not print_integer tag_integer_519 integer_mult)
Lexicase best errors: [1 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_mult})
Zero cases best program: (exec_noop boolean_dup_items boolean_shove boolean_dup_items in3 boolean_not print_integer tag_integer_519 integer_mult)
Zero cases best errors: [1 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 205 947 205 1000 1000 205 1000 205 742)
Population mean number of elite cases: 6.51
Count of perfect (error zero) individuals by case: (0 205 947 205 0 0 205 0 205 742)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 0, :instruction tag_integer_519} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction print_exec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub})
Best program: (exec_noop boolean_dup_items boolean_shove boolean_dup_items in3 boolean_not print_integer tag_integer_519 integer_mult exec_y (exec_yank) integer_yank integer_rot print_exec (integer_pop exec_dup_items integer_sub))
Errors: [1 0 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 20
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.491
Median total errors in population: 8
Error averages by case: (1.0 0.795 0.053 0.795 1.0 1.0 0.795 1.0 0.795 0.258)
Error minima by case: (1 0 0 0 1 1 0 1 0 0)
Average genome size in population (length): 19.519
Average program size in population (points): 25.984
Average percent parens in population: 0.250
Minimum age in population: 22.666015625
Maximum age in population: 27.48251342773438
Average age in population: 25.88311492919922
Median age in population: 26.00348663330078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6176851
--- Timings ---
Current time: 1559582713857 milliseconds
Total Time:          48.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 75.4%
Fitness Testing:      8.7 seconds, 17.9%
Report:               3.1 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 742 742 201 200 1000 1 1000 742)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (1 1 742 742 201 200 0 1 0 742)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 7.37
Median total errors in population: 7
Error averages by case: (0.999 0.999 0.258 0.258 0.799 0.8 1.0 0.999 1.0 0.258)
Error minima by case: (0 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 22.744
Average program size in population (points): 29.857
Average percent parens in population: 0.238
Minimum age in population: 23.666015625
Maximum age in population: 29.20294952392578
Average age in population: 27.3958763885498
Median age in population: 27.46235656738281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6612432
--- Timings ---
Current time: 1559582716466 milliseconds
Total Time:          51.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.5 seconds, 74.8%
Fitness Testing:      9.2 seconds, 17.9%
Report:               3.7 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_rot boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (boolean_dup_items boolean_not integer_rot boolean_swap) integer_stackdepth)
Lexicase best errors: [1 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 22
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_rot boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (boolean_dup_items boolean_not integer_rot boolean_swap) integer_stackdepth)
Zero cases best errors: [1 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 22
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 329 428 154 1000 911 911 154 154 1000)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (329 329 428 154 0 911 911 154 154 0)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing () integer_dup_times exec_when (boolean_frominteger)))
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.63
Median total errors in population: 7
Error averages by case: (0.671 0.671 0.572 0.846 1.0 0.089 0.089 0.846 0.846 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 32.391
Average program size in population (points): 43.834
Average percent parens in population: 0.255
Minimum age in population: 25.51325988769531
Maximum age in population: 30.96437454223633
Average age in population: 28.4191174621582
Median age in population: 28.32991027832031
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6987304
--- Timings ---
Current time: 1559582718675 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.1 seconds, 74.7%
Fitness Testing:      9.6 seconds, 17.9%
Report:               3.9 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup (exec_k_when_autoconstructing (integer_gte integer_swap) (integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup (exec_k_when_autoconstructing (integer_gte integer_swap) (integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_add integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 487 144 1000 487 487 944 487 313 1000)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (487 487 144 0 487 487 944 487 313 0)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger})
Best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 print_integer boolean_dup boolean_dup_times exec_dup () exec_k_when_autoconstructing (integer_gte integer_swap) (exec_y_when_autoconstructing (integer_dup_times exec_when (boolean_frominteger))))
Errors: [0 0 1 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 23
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.164
Median total errors in population: 8
Error averages by case: (0.513 0.513 0.856 1.0 0.513 0.513 0.056 0.513 0.687 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 23.383
Average program size in population (points): 31.352
Average percent parens in population: 0.251
Minimum age in population: 27.280029296875
Maximum age in population: 32.57648658752441
Average age in population: 30.07973090362549
Median age in population: 30.09060287475586
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7302119
--- Timings ---
Current time: 1559582721381 milliseconds
Total Time:          56.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.3 seconds, 74.9%
Fitness Testing:     10.0 seconds, 17.7%
Report:               4.1 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 112 1000 112 934 679 112 112 112 140)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (140 112 0 112 934 679 112 112 112 140)
Population mean number of perfect (error zero) cases: 2.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove (exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger) integer_stackdepth boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank) (integer_mult exec_y_when_autoconstructing () integer_gte boolean_not exec_while ()) ()))) () ()))
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 63
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.547
Median total errors in population: 8
Error averages by case: (0.86 0.888 1.0 0.888 0.066 0.321 0.888 0.888 0.888 0.86)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 21.603
Average program size in population (points): 29.088
Average percent parens in population: 0.254
Minimum age in population: 28.280029296875
Maximum age in population: 33.76208305358887
Average age in population: 31.54758130550385
Median age in population: 31.63018035888672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 7549908
--- Timings ---
Current time: 1559582723842 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.3 seconds, 75.2%
Fitness Testing:     10.3 seconds, 17.4%
Report:               4.2 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and))) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and))) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (935 1000 133 700 567 567 567 567 133 1000)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (935 0 133 700 567 567 567 567 133 0)
Population mean number of perfect (error zero) cases: 4.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) integer_dup)) () ()))
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.831
Median total errors in population: 4
Error averages by case: (0.065 1.0 0.867 0.3 0.433 0.433 0.433 0.433 0.867 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 30.908
Average program size in population (points): 42.128
Average percent parens in population: 0.263
Minimum age in population: 30.24325561523438
Maximum age in population: 34.83882713317871
Average age in population: 32.98286551380157
Median age in population: 33.03630781173706
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 7870578
--- Timings ---
Current time: 1559582726322 milliseconds
Total Time:          61.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.2 seconds, 75.3%
Fitness Testing:     10.6 seconds, 17.3%
Report:               4.4 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap boolean_xor exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger) integer_stackdepth) boolean_eq integer_min exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap boolean_xor exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger) integer_stackdepth) boolean_eq integer_min exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (588 322 588 322 588 322 911 588 1000 588)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (588 322 588 322 588 322 911 588 0 588)
Population mean number of perfect (error zero) cases: 4.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap boolean_or exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_stackdepth exec_shove () exec_shove (integer_max boolean_pop integer_gt exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ()))) () ())
Errors: [0 1 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 65
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 5.183
Median total errors in population: 4
Error averages by case: (0.412 0.678 0.412 0.678 0.412 0.678 0.089 0.412 1.0 0.412)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 29.924
Average program size in population (points): 41.13
Average percent parens in population: 0.271
Minimum age in population: 31.31046295166016
Maximum age in population: 36.40024542808533
Average age in population: 34.44120196866989
Median age in population: 34.50834238529205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8137415
--- Timings ---
Current time: 1559582728923 milliseconds
Total Time:          63.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.2 seconds, 75.5%
Fitness Testing:     10.9 seconds, 17.1%
Report:               4.7 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (boolean_frominteger))) () ())
Lexicase best errors: [1 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (integer_empty integer_inc integer_sub boolean_rot integer_stackdepth in1 integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (boolean_frominteger))) () ())
Zero cases best errors: [1 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 596 596 596 1000 1000 926 596 596)
Population mean number of elite cases: 7.91
Count of perfect (error zero) individuals by case: (0 0 596 596 596 0 0 926 596 596)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec})
Best program: (boolean_swap boolean_not exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec))) () ())
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 25
Size: 35
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.094
Median total errors in population: 4
Error averages by case: (1.0 1.0 0.404 0.404 0.404 1.0 1.0 0.074 0.404 0.404)
Error minima by case: (1 1 0 0 0 1 1 0 0 0)
Average genome size in population (length): 29.304
Average program size in population (points): 40.265
Average percent parens in population: 0.270
Minimum age in population: 32.31046295166016
Maximum age in population: 37.7684451341629
Average age in population: 35.94019348537922
Median age in population: 36.00569355487823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 8397420
--- Timings ---
Current time: 1559582731175 milliseconds
Total Time:          66.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.0 seconds, 75.5%
Fitness Testing:     11.2 seconds, 17.0%
Report:               4.9 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (boolean_eq) print_boolean integer_eq print_integer exec_do*times () integer_inc integer_pop in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_swap (print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) (exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())))) () ())
Lexicase best errors: [1 0 1 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 65
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (boolean_eq) print_boolean integer_eq print_integer exec_do*times () integer_inc integer_pop in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_swap (print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) (exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())))) () ())
Zero cases best errors: [1 0 1 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 65
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 906 1000 906 1000 1000 1000 1000 1000 1000)
Population mean number of elite cases: 9.81
Count of perfect (error zero) individuals by case: (0 906 0 906 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth integer_swap exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger) boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ()))
Errors: [1 0 1 0 1 1 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 8.188
Median total errors in population: 8
Error averages by case: (1.0 0.094 1.0 0.094 1.0 1.0 1.0 1.0 1.0 1.0)
Error minima by case: (1 0 1 0 1 1 1 1 1 1)
Average genome size in population (length): 34.657
Average program size in population (points): 48.076
Average percent parens in population: 0.283
Minimum age in population: 34.23388361930847
Maximum age in population: 39.3881921172142
Average age in population: 37.40071407306194
Median age in population: 37.45474776625633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 8695170
--- Timings ---
Current time: 1559582733489 milliseconds
Total Time:          68.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.7 seconds, 75.5%
Fitness Testing:     11.6 seconds, 16.9%
Report:               5.1 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_flush) (exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add)) ()))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 31
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_flush) (exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add)) ()))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 31
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (912 1000 912 912 912 912 912 1000 1000 1000)
Population mean number of elite cases: 9.47
Count of perfect (error zero) individuals by case: (912 0 912 912 912 912 912 0 0 0)
Population mean number of perfect (error zero) cases: 5.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer tag_exec_257 (integer_div exec_pop (exec_dup_times () boolean_frominteger integer_inc boolean_dup_items boolean_not integer_rot boolean_swap) integer_stackdepth)))
Errors: [0 1 0 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 4.528
Median total errors in population: 4
Error averages by case: (0.088 1.0 0.088 0.088 0.088 0.088 0.088 1.0 1.0 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 1 1)
Average genome size in population (length): 34.599
Average program size in population (points): 48.061
Average percent parens in population: 0.284
Minimum age in population: 35.23388361930847
Maximum age in population: 40.63891330361366
Average age in population: 38.85495013570786
Median age in population: 38.91597659885883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 8999948
--- Timings ---
Current time: 1559582735552 milliseconds
Total Time:          70.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.2 seconds, 75.4%
Fitness Testing:     11.9 seconds, 16.9%
Report:               5.4 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) () integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s () (integer_lte exec_shove ()) ())
Lexicase best errors: [1 0 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 25
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) () integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s () (integer_lte exec_shove ()) ())
Zero cases best errors: [1 0 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 25
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 890 1000 890 890 1000 1000 1000 1000 1000)
Population mean number of elite cases: 9.67
Count of perfect (error zero) individuals by case: (0 890 0 890 890 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction -84} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction tag_integer_102} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_dup () print_boolean integer_eq print_integer -84) integer_inc integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove tag_integer_102 integer_dec exec_when (boolean_frominteger integer_stackdepth boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ())
Errors: [1 0 1 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.33
Median total errors in population: 7
Error averages by case: (1.0 0.11 1.0 0.11 0.11 1.0 1.0 1.0 1.0 1.0)
Error minima by case: (1 0 1 0 0 1 1 1 1 1)
Average genome size in population (length): 34.215
Average program size in population (points): 47.47
Average percent parens in population: 0.283
Minimum age in population: 37.64619779586792
Maximum age in population: 42.27029344439507
Average age in population: 40.33672699035704
Median age in population: 40.40607346594334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 9306717
--- Timings ---
Current time: 1559582737629 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 75.3%
Fitness Testing:     12.3 seconds, 16.9%
Report:               5.6 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction -84} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer -84) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_pop integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Lexicase best errors: [0 1 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction -84} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer -84) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_pop integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())) () ()))
Zero cases best errors: [0 1 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 1000 908 1000 1000 1000 1000 908 908 908)
Population mean number of elite cases: 9.54
Count of perfect (error zero) individuals by case: (908 0 908 0 0 0 0 908 908 908)
Population mean number of perfect (error zero) cases: 4.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) exec_do*count (integer_sub) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth))
Errors: [0 1 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 23
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 5.46
Median total errors in population: 5
Error averages by case: (0.092 1.0 0.092 1.0 1.0 1.0 1.0 0.092 0.092 0.092)
Error minima by case: (0 1 0 1 1 1 1 0 0 0)
Average genome size in population (length): 33.999
Average program size in population (points): 47.194
Average percent parens in population: 0.283
Minimum age in population: 38.97789525985718
Maximum age in population: 43.77109453082085
Average age in population: 41.82880822429806
Median age in population: 41.91455087810755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 9609719
--- Timings ---
Current time: 1559582739647 milliseconds
Total Time:          74.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.2 seconds, 75.2%
Fitness Testing:     12.6 seconds, 16.9%
Report:               5.8 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s_when_autoconstructing (integer_lte exec_shove () integer_empty integer_add boolean_shove exec_pop (integer_dec)) () ()))
Lexicase best errors: [0 1 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s_when_autoconstructing (integer_lte exec_shove () integer_empty integer_add boolean_shove exec_pop (integer_dec)) () ()))
Zero cases best errors: [0 1 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (902 1000 902 1 1000 1000 902 902 1 1000)
Population mean number of elite cases: 7.61
Count of perfect (error zero) individuals by case: (902 0 902 1 0 0 902 902 1 0)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max integer_empty integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth boolean_yank integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ())))) () ()))
Errors: [0 1 0 1 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.39
Median total errors in population: 6
Error averages by case: (0.098 1.0 0.098 0.999 1.0 1.0 0.098 0.098 0.999 1.0)
Error minima by case: (0 1 0 0 1 1 0 0 0 1)
Average genome size in population (length): 33.266
Average program size in population (points): 46.179
Average percent parens in population: 0.282
Minimum age in population: 40.07320433855057
Maximum age in population: 45.34089343622327
Average age in population: 43.35766505275667
Median age in population: 43.4286630526185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 9913476
--- Timings ---
Current time: 1559582741689 milliseconds
Total Time:          76.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 75.2%
Fitness Testing:     13.0 seconds, 16.9%
Report:               6.0 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop () integer_lt) exec_do*count (integer_sub) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth)
Lexicase best errors: [0 1 0 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop () integer_lt) exec_do*count (integer_sub) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth)
Zero cases best errors: [0 1 0 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (588 1000 587 1000 1000 1000 1000 1000 587 1000)
Population mean number of elite cases: 8.76
Count of perfect (error zero) individuals by case: (588 0 587 0 0 0 0 0 587 0)
Population mean number of perfect (error zero) cases: 1.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer boolean_frominteger integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt) integer_empty integer_add boolean_shove exec_pop () exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_swap (print_newline integer_pop 27) ()) () ()))
Errors: [0 1 0 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 8.238
Median total errors in population: 7
Error averages by case: (0.412 1.0 0.413 1.0 1.0 1.0 1.0 1.0 0.413 1.0)
Error minima by case: (0 1 0 1 1 1 1 1 0 1)
Average genome size in population (length): 25.224
Average program size in population (points): 35.38
Average percent parens in population: 0.295
Minimum age in population: 42.25501757860184
Maximum age in population: 46.93721737340093
Average age in population: 45.00161029745266
Median age in population: 44.94486922025681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 294
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10153987
--- Timings ---
Current time: 1559582743670 milliseconds
Total Time:          78.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 75.2%
Fitness Testing:     13.3 seconds, 16.9%
Report:               6.2 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_891} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove (exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove integer_mod integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq exec_empty boolean_not integer_inc integer_empty exec_while (integer_pop 27 print_integer tagged_891) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ()))) () ()))
Lexicase best errors: [1 1 1 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 9
Lexicase best mean error: 0.9
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction print_integer} {:close 1, :instruction tagged_891} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove (exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove integer_mod integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq exec_empty boolean_not integer_inc integer_empty exec_while (integer_pop 27 print_integer tagged_891) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not) (exec_while ()) ()))) () ()))
Zero cases best errors: [1 1 1 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 1
Zero cases best total error: 9
Zero cases best mean error: 0.9
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 900 1000 1000 1000 1000)
Population mean number of elite cases: 9.90
Count of perfect (error zero) individuals by case: (0 0 0 0 0 900 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_pop})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer in2 print_integer integer_stackdepth exec_stackdepth exec_s (boolean_invert_first_then_and exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty boolean_invert_first_then_and boolean_shove integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (integer_pop) () ()) () ()) ()))
Errors: [1 1 1 1 1 0 1 1 1 1]
Total: 9
Mean: 0.9
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 9.1
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 1.0 1.0 0.1 1.0 1.0 1.0 1.0)
Error minima by case: (1 1 1 1 1 0 1 1 1 1)
Average genome size in population (length): 31.266
Average program size in population (points): 43.426
Average percent parens in population: 0.284
Minimum age in population: 43.89789063856006
Maximum age in population: 48.29156081937253
Average age in population: 46.45913587486371
Median age in population: 46.57079740893096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 10456519
--- Timings ---
Current time: 1559582746022 milliseconds
Total Time:          81.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.9 seconds, 75.2%
Fitness Testing:     13.6 seconds, 16.8%
Report:               6.4 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) exec_do*count (integer_sub) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 23
Percent parens: 0.174
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) exec_do*count (integer_sub) boolean_dup_items boolean_not integer_rot boolean_swap integer_stackdepth))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 23
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 907 1000 1000 907 907 907 907 1000 907)
Population mean number of elite cases: 9.35
Count of perfect (error zero) individuals by case: (907 907 0 0 907 907 907 907 0 907)
Population mean number of perfect (error zero) cases: 6.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth})
Best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_rot) exec_do*count (integer_sub) exec_if (boolean_not integer_rot boolean_swap integer_stackdepth) ()))
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 25
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 3.651
Median total errors in population: 3
Error averages by case: (0.093 0.093 1.0 1.0 0.093 0.093 0.093 0.093 1.0 0.093)
Error minima by case: (0 0 1 1 0 0 0 0 1 0)
Average genome size in population (length): 30.319
Average program size in population (points): 42.013
Average percent parens in population: 0.281
Minimum age in population: 44.89789063856006
Maximum age in population: 49.76676752045751
Average age in population: 47.92057105957437
Median age in population: 48.00272119021975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 10743514
--- Timings ---
Current time: 1559582748024 milliseconds
Total Time:          83.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 75.1%
Fitness Testing:     14.0 seconds, 16.8%
Report:               6.6 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_gt integer_lt boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte) () ()))) () ()))
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_pop (integer_gt integer_lt boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult exec_y_when_autoconstructing () integer_gte) () ()))) () ()))
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 903 903 903 903 1000 903 1000 1000)
Population mean number of elite cases: 9.52
Count of perfect (error zero) individuals by case: (0 0 903 903 903 903 0 903 0 0)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_second_then_and})
Best program: (boolean_or integer_mult boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth boolean_stackdepth exec_s (integer_lte exec_do*range () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_shove exec_k_when_autoconstructing (integer_mod boolean_invert_second_then_and) ())) () ()))
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 40
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 5.485
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.097 0.097 0.097 0.097 1.0 0.097 1.0 1.0)
Error minima by case: (1 1 0 0 0 0 1 0 1 1)
Average genome size in population (length): 30.217
Average program size in population (points): 42.006
Average percent parens in population: 0.283
Minimum age in population: 45.89789063856006
Maximum age in population: 51.38863902539015
Average age in population: 49.43951178937429
Median age in population: 49.54364945809357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11037169
--- Timings ---
Current time: 1559582750088 milliseconds
Total Time:          85.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.9 seconds, 75.1%
Fitness Testing:     14.3 seconds, 16.8%
Report:               6.8 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () integer_gte integer_add boolean_shove exec_pop (integer_dec)) () ()))
Lexicase best errors: [1 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () integer_gte integer_add boolean_shove exec_pop (integer_dec)) () ()))
Zero cases best errors: [1 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 927 1000 1000 928 1000 929 1000)
Population mean number of elite cases: 9.78
Count of perfect (error zero) individuals by case: (0 0 0 927 0 0 928 0 929 0)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_stackdepth integer_lte boolean_dup) exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add integer_gte exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_first_then_and) exec_s_when_autoconstructing (exec_yank exec_when (exec_y_when_autoconstructing () integer_gte exec_stackdepth) exec_while ()) () ()))
Errors: [1 1 1 0 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 7.216
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.073 1.0 1.0 0.072 1.0 0.071 1.0)
Error minima by case: (1 1 1 0 1 1 0 1 0 1)
Average genome size in population (length): 29.439
Average program size in population (points): 40.978
Average percent parens in population: 0.284
Minimum age in population: 47.8356287162751
Maximum age in population: 52.84020681446418
Average age in population: 50.94378269859531
Median age in population: 51.01577810756862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 11315780
--- Timings ---
Current time: 1559582752137 milliseconds
Total Time:          87.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 75.1%
Fitness Testing:     14.6 seconds, 16.8%
Report:               7.0 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y})
Lexicase best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_y ()) () ())))
Lexicase best errors: [1 0 1 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y})
Zero cases best program: (integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop (integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_y ()) () ())))
Zero cases best errors: [1 0 1 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 920 1000 1000 1000 1000 1000 1000 1000 921)
Population mean number of elite cases: 9.84
Count of perfect (error zero) individuals by case: (0 920 0 0 0 0 0 0 0 921)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_when () exec_y ()) () ())))
Errors: [1 0 1 1 1 1 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 18
Size: 29
Percent parens: 0.379
--- Population Statistics ---
Average total errors in population: 8.159
Median total errors in population: 8
Error averages by case: (1.0 0.08 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.079)
Error minima by case: (1 0 1 1 1 1 1 1 1 0)
Average genome size in population (length): 28.44
Average program size in population (points): 39.543
Average percent parens in population: 0.284
Minimum age in population: 49.11013386817649
Maximum age in population: 54.607300060743
Average age in population: 52.4536460693361
Median age in population: 52.53444336383836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 11585176
--- Timings ---
Current time: 1559582754428 milliseconds
Total Time:          89.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.9 seconds, 75.0%
Fitness Testing:     14.9 seconds, 16.7%
Report:               7.2 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (boolean_eq exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () integer_inc boolean_dup_times) () ()))
Lexicase best errors: [1 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (boolean_eq exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () integer_inc boolean_dup_times) () ()))
Zero cases best errors: [1 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 923 923 1000 1000 923 1000 1000 923)
Population mean number of elite cases: 9.69
Count of perfect (error zero) individuals by case: (0 0 923 923 0 0 923 0 0 923)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_gt integer_empty))
Errors: [1 1 0 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.308
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.077 0.077 1.0 1.0 0.077 1.0 1.0 0.077)
Error minima by case: (1 1 0 0 1 1 0 1 1 0)
Average genome size in population (length): 28.339
Average program size in population (points): 39.442
Average percent parens in population: 0.285
Minimum age in population: 50.85810962808318
Maximum age in population: 55.72173947177362
Average age in population: 53.9513282642324
Median age in population: 54.02626429617521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 11853716
--- Timings ---
Current time: 1559582756402 milliseconds
Total Time:          91.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 74.8%
Fitness Testing:     15.3 seconds, 16.7%
Report:               7.7 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth))
Lexicase best errors: [1 1 1 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth))
Zero cases best errors: [1 1 1 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 890 890 1000 1000 890 1000 890)
Population mean number of elite cases: 9.56
Count of perfect (error zero) individuals by case: (0 0 0 890 890 0 0 890 0 890)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction -84} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_dup print_boolean -84) (integer_inc integer_sub) in2 print_integer exec_if (boolean_not exec_s (integer_lte exec_shove () exec_shove (integer_max integer_sub integer_gt integer_empty integer_add boolean_shove exec_pop (integer_dec integer_inc integer_empty print_newline exec_rot (integer_add boolean_shove exec_pop (integer_dec integer_eq boolean_frominteger) integer_stackdepth) (boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline integer_pop 27 boolean_frominteger boolean_invert_first_then_and exec_yank exec_yank integer_mult exec_y_when_autoconstructing () integer_gte boolean_not exec_while ()) ()))) () ()) ()))
Errors: [1 1 1 0 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 53
Size: 72
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 6.44
Median total errors in population: 6
Error averages by case: (1.0 1.0 1.0 0.11 0.11 1.0 1.0 0.11 1.0 0.11)
Error minima by case: (1 1 1 0 0 1 1 0 1 0)
Average genome size in population (length): 28.239
Average program size in population (points): 39.184
Average percent parens in population: 0.283
Minimum age in population: 51.85810962808318
Maximum age in population: 57.10980041143193
Average age in population: 55.39435703170027
Median age in population: 55.46631431659625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 12124412
--- Timings ---
Current time: 1559582758414 milliseconds
Total Time:          93.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 74.8%
Fitness Testing:     15.6 seconds, 16.7%
Report:               7.9 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Lexicase best program: (boolean_swap boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer in1) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s () (integer_lte exec_shove () boolean_stackdepth integer_gt) ()))
Lexicase best errors: [1 1 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 9
Lexicase best mean error: 0.9
Lexicase best size: 28
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt})
Zero cases best program: (boolean_swap boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer in1) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s () (integer_lte exec_shove () boolean_stackdepth integer_gt) ()))
Zero cases best errors: [1 1 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 1
Zero cases best total error: 9
Zero cases best mean error: 0.9
Zero cases best size: 28
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 1000 1000 1000 913 2)
Population mean number of elite cases: 8.91
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 913 2)
Population mean number of perfect (error zero) cases: 0.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_div} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count})
Best program: (boolean_swap integer_empty integer_inc integer_sub in2 exec_noop integer_shove print_integer integer_stackdepth tag_exec_257 (integer_div exec_pop () integer_lt) exec_do*count ())
Errors: [1 1 1 1 1 1 1 1 0 1]
Total: 9
Mean: 0.9
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 9.085
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.087 0.998)
Error minima by case: (1 1 1 1 1 1 1 1 0 0)
Average genome size in population (length): 27.792
Average program size in population (points): 38.628
Average percent parens in population: 0.283
Minimum age in population: 52.85810962808318
Maximum age in population: 58.7655804331298
Average age in population: 56.87125939125566
Median age in population: 56.93573815505806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 12396916
--- Timings ---
Current time: 1559582760393 milliseconds
Total Time:          95.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.4 seconds, 74.8%
Fitness Testing:     15.9 seconds, 16.6%
Report:               8.1 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec})
Lexicase best program: (integer_eq print_integer integer_empty integer_inc boolean_rot in2 print_integer integer_fromboolean exec_dup_times (exec_s (integer_lte exec_shove () exec_shove () integer_max boolean_pop integer_gt integer_empty integer_add exec_when (exec_pop (integer_dec exec_when (integer_mult integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec))) () ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec})
Zero cases best program: (integer_eq print_integer integer_empty integer_inc boolean_rot in2 print_integer integer_fromboolean exec_dup_times (exec_s (integer_lte exec_shove () exec_shove () integer_max boolean_pop integer_gt integer_empty integer_add exec_when (exec_pop (integer_dec exec_when (integer_mult integer_stackdepth) boolean_eq integer_dec exec_flush integer_inc integer_empty print_newline exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec))) () ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 459 459 459 459 1000 1000 459 1000 459)
Population mean number of elite cases: 6.75
Count of perfect (error zero) individuals by case: (0 459 459 459 459 0 0 459 0 459)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction 28} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (boolean_invert_second_then_and) print_boolean integer_eq print_integer exec_rot () (integer_inc integer_sub in2 print_integer integer_yank exec_stackdepth) (exec_s (integer_lte exec_shove (exec_shove (integer_max boolean_pop integer_gt integer_fromboolean integer_add boolean_shove exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth boolean_eq integer_dec exec_flush exec_when (integer_empty print_newline integer_pop 28 boolean_empty boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank integer_mult) (exec_y_when_autoconstructing () integer_gte) (boolean_not exec_while ())))))) () ()))
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 63
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.246
Median total errors in population: 10
Error averages by case: (1.0 0.541 0.541 0.541 0.541 1.0 1.0 0.541 1.0 0.541)
Error minima by case: (1 0 0 0 0 1 1 0 1 0)
Average genome size in population (length): 34.972
Average program size in population (points): 47.956
Average percent parens in population: 0.271
Minimum age in population: 55.59592569632514
Maximum age in population: 60.44363423116374
Average age in population: 59.0287035551024
Median age in population: 59.23959491417918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 12788777
--- Timings ---
Current time: 1559582762518 milliseconds
Total Time:          97.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 74.7%
Fitness Testing:     16.3 seconds, 16.7%
Report:               8.2 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc})
Lexicase best program: (boolean_swap boolean_swap exec_do*range (exec_s () (print_boolean print_integer integer_empty) (integer_inc boolean_yankdup)) in2 print_integer integer_stackdepth exec_stackdepth integer_sub integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add integer_min integer_mod integer_dec exec_when (integer_empty integer_add integer_dup exec_pop (integer_dec exec_when (boolean_frominteger integer_gt) boolean_eq integer_dec boolean_frominteger integer_inc))))
Lexicase best errors: [1 0 1 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 9
Lexicase best mean error: 0.9
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc})
Zero cases best program: (boolean_swap boolean_swap exec_do*range (exec_s () (print_boolean print_integer integer_empty) (integer_inc boolean_yankdup)) in2 print_integer integer_stackdepth exec_stackdepth integer_sub integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add integer_min integer_mod integer_dec exec_when (integer_empty integer_add integer_dup exec_pop (integer_dec exec_when (boolean_frominteger integer_gt) boolean_eq integer_dec boolean_frominteger integer_inc))))
Zero cases best errors: [1 0 1 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 1
Zero cases best total error: 9
Zero cases best mean error: 0.9
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 908 1000 1000 1000 1000 1000 1000 1000 1000)
Population mean number of elite cases: 9.91
Count of perfect (error zero) individuals by case: (0 908 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt exec_k (integer_add integer_dec exec_when (boolean_frominteger integer_gte) boolean_eq in1) (exec_flush integer_inc exec_noop print_newline))) () ()))
Errors: [1 0 1 1 1 1 1 1 1 1]
Total: 9
Mean: 0.9
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 9.092
Median total errors in population: 9
Error averages by case: (1.0 0.092 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0)
Error minima by case: (1 0 1 1 1 1 1 1 1 1)
Average genome size in population (length): 28.238
Average program size in population (points): 39.11
Average percent parens in population: 0.279
Minimum age in population: 56.59592569632514
Maximum age in population: 62.20555594979669
Average age in population: 60.01151090171915
Median age in population: 60.06932643167056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 13072588
--- Timings ---
Current time: 1559582764772 milliseconds
Total Time:          99.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.6 seconds, 74.8%
Fitness Testing:     16.7 seconds, 16.7%
Report:               8.4 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (boolean_dup_times boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_lte integer_sub) in2 print_integer tag_exec_257 (integer_lte exec_shove () integer_lte boolean_xor) exec_shove (integer_max boolean_pop) integer_gt integer_empty)) ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 37
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_257} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (boolean_dup_times boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_lte integer_sub) in2 print_integer tag_exec_257 (integer_lte exec_shove () integer_lte boolean_xor) exec_shove (integer_max boolean_pop) integer_gt integer_empty)) ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 37
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (936 1000 936 936 1000 1000 1000 1000 1000 1000)
Population mean number of elite cases: 9.81
Count of perfect (error zero) individuals by case: (936 0 936 936 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth integer_div exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_fromboolean in2 exec_pop (integer_dec exec_when (boolean_frominteger boolean_pop integer_gt integer_empty integer_add boolean_pop print_integer integer_empty integer_add)))) () ()))
Errors: [0 1 0 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.192
Median total errors in population: 7
Error averages by case: (0.064 1.0 0.064 0.064 1.0 1.0 1.0 1.0 1.0 1.0)
Error minima by case: (0 1 0 0 1 1 1 1 1 1)
Average genome size in population (length): 27.885
Average program size in population (points): 38.665
Average percent parens in population: 0.279
Minimum age in population: 58.35806844956824
Maximum age in population: 63.33276114668388
Average age in population: 61.48275175265378
Median age in population: 61.52874679327897
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.002
Error (vector) diversity:			 0.002
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 13350861
--- Timings ---
Current time: 1559582767259 milliseconds
Total Time:         102.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 74.8%
Fitness Testing:     17.0 seconds, 16.6%
Report:               8.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (exec_yank boolean_dup_times) in2 print_integer integer_stackdepth exec_stackdepth exec_shove (integer_lte exec_shove () exec_shove (integer_max exec_yankdup boolean_eq integer_empty exec_dup_times (exec_do*count (exec_pop (integer_dec boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank boolean_frominteger boolean_invert_second_then_and) (exec_s_when_autoconstructing () () ()) ()))))))
Lexicase best errors: [0 1 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 49
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (exec_yank boolean_dup_times) in2 print_integer integer_stackdepth exec_stackdepth exec_shove (integer_lte exec_shove () exec_shove (integer_max exec_yankdup boolean_eq integer_empty exec_dup_times (exec_do*count (exec_pop (integer_dec boolean_frominteger boolean_invert_second_then_and) exec_s_when_autoconstructing (exec_yank boolean_frominteger boolean_invert_second_then_and) (exec_s_when_autoconstructing () () ()) ()))))))
Zero cases best errors: [0 1 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 49
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (920 1000 1000 919 919 1000 1000 1000 1000 1000)
Population mean number of elite cases: 9.76
Count of perfect (error zero) individuals by case: (920 0 0 919 919 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte integer_div) (boolean_stackdepth integer_max boolean_pop) (integer_gt integer_empty integer_add boolean_invert_second_then_and)))
Errors: [0 1 1 0 0 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 31
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.242
Median total errors in population: 7
Error averages by case: (0.08 1.0 1.0 0.081 0.081 1.0 1.0 1.0 1.0 1.0)
Error minima by case: (0 1 1 0 0 1 1 1 1 1)
Average genome size in population (length): 27.067
Average program size in population (points): 37.556
Average percent parens in population: 0.280
Minimum age in population: 60.05057913200289
Maximum age in population: 65.11522510175428
Average age in population: 62.92751908844321
Median age in population: 62.9714294472758
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 13629381
--- Timings ---
Current time: 1559582769273 milliseconds
Total Time:         104.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 74.8%
Fitness Testing:     17.3 seconds, 16.6%
Report:               8.9 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) in3 print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ())) () ())) () ())
Lexicase best errors: [0 0 0 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 70
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) in3 print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ())) () ())) () ())
Zero cases best errors: [0 0 0 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 70
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 905 1000 1000 1000 1000 1000 1000 903)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (1 1 905 0 0 0 0 0 0 903)
Population mean number of perfect (error zero) cases: 1.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) in3 print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ())) () ())) () ())
Errors: [0 0 0 1 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.19
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.095 1.0 1.0 1.0 1.0 1.0 1.0 0.097)
Error minima by case: (0 0 0 1 1 1 1 1 1 0)
Average genome size in population (length): 26.678
Average program size in population (points): 37.006
Average percent parens in population: 0.280
Minimum age in population: 61.05057913200289
Maximum age in population: 66.43930603111698
Average age in population: 64.40140369528338
Median age in population: 64.45879567118266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 13914799
--- Timings ---
Current time: 1559582771361 milliseconds
Total Time:         106.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.5 seconds, 74.7%
Fitness Testing:     17.7 seconds, 16.6%
Report:               9.1 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) in3 print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ())) () ())) () ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 70
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) in3 print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ())) () ())) () ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 70
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 634 634 636 2 634 304 635 304 2)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (0 634 634 636 2 634 304 635 304 2)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) in3 print_integer integer_stackdepth exec_s (integer_lte exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop) integer_gt integer_empty integer_add) (boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ())) ()) () ()))) () ())
Errors: [1 0 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 6.215
Median total errors in population: 5
Error averages by case: (1.0 0.366 0.366 0.364 0.998 0.366 0.696 0.365 0.696 0.998)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.419
Average program size in population (points): 58.304
Average percent parens in population: 0.303
Minimum age in population: 62.30508037842083
Maximum age in population: 67.63124187625635
Average age in population: 65.61336257971853
Median age in population: 65.88064783302798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 301
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 14211478
--- Timings ---
Current time: 1559582773521 milliseconds
Total Time:         108.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.0 seconds, 74.7%
Fitness Testing:     18.0 seconds, 16.6%
Report:               9.3 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_do*times (print_integer integer_stackdepth integer_lt integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) ()) () ())))
Lexicase best errors: [0 1 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_do*times (print_integer integer_stackdepth integer_lt integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) ()) () ())))
Zero cases best errors: [0 1 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 1000 1000 1000 197 1000 214 215 930 412)
Population mean number of elite cases: 6.18
Count of perfect (error zero) individuals by case: (215 0 0 0 197 0 214 215 930 412)
Population mean number of perfect (error zero) cases: 2.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_yank print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ())) () ())) () ())
Errors: [0 1 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 7.817
Median total errors in population: 9
Error averages by case: (0.785 1.0 1.0 1.0 0.803 1.0 0.786 0.785 0.07 0.588)
Error minima by case: (0 1 1 1 0 1 0 0 0 0)
Average genome size in population (length): 42.994
Average program size in population (points): 62.376
Average percent parens in population: 0.309
Minimum age in population: 64.7927582668699
Maximum age in population: 68.8650021458123
Average age in population: 66.89253998692826
Median age in population: 66.88064783302798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 14519815
--- Timings ---
Current time: 1559582775858 milliseconds
Total Time:         110.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.7 seconds, 74.6%
Fitness Testing:     18.4 seconds, 16.6%
Report:               9.6 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap boolean_flush exec_s () (integer_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dup_times exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()))) ()))) () ())) ())
Lexicase best errors: [1 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 78
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap boolean_flush exec_s () (integer_swap exec_do*range (exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dup_times exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (exec_k_when_autoconstructing () (boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()))) ()))) () ())) ())
Zero cases best errors: [1 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 78
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (673 1000 1000 1000 1000 1000 909 236 1000 918)
Population mean number of elite cases: 8.74
Count of perfect (error zero) individuals by case: (673 0 0 0 0 0 909 236 0 918)
Population mean number of perfect (error zero) cases: 2.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_do*times (print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte integer_lte exec_shove () exec_shove (boolean_frominteger exec_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ()) ()) () ()) () ())) () ()))
Errors: [0 1 1 1 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 40
Size: 63
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.264
Median total errors in population: 7
Error averages by case: (0.327 1.0 1.0 1.0 1.0 1.0 0.091 0.764 1.0 0.082)
Error minima by case: (0 1 1 1 1 1 0 0 1 0)
Average genome size in population (length): 42.942
Average program size in population (points): 62.45
Average percent parens in population: 0.310
Minimum age in population: 66.33670304994894
Maximum age in population: 70.36574908193498
Average age in population: 68.16345245748846
Median age in population: 68.23678659255644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 14841061
--- Timings ---
Current time: 1559582778511 milliseconds
Total Time:         113.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.7 seconds, 74.7%
Fitness Testing:     18.8 seconds, 16.5%
Report:               9.9 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (integer_swap boolean_swap exec_do*range () print_boolean integer_eq print_integer integer_empty integer_inc integer_sub in2 print_integer integer_stackdepth integer_max boolean_pop boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (integer_swap integer_dec print_integer integer_inc exec_swap (exec_pop (exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ())) ())) () ())
Lexicase best errors: [0 0 1 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (integer_swap boolean_swap exec_do*range () print_boolean integer_eq print_integer integer_empty integer_inc integer_sub in2 print_integer integer_stackdepth integer_max boolean_pop boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (integer_swap integer_dec print_integer integer_inc exec_swap (exec_pop (exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank integer_mult integer_dup) () (integer_gte boolean_not) exec_while ())) ())) () ())
Zero cases best errors: [0 0 1 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 443 1000 1000 1000 443 1000 478 1000 443)
Population mean number of elite cases: 7.25
Count of perfect (error zero) individuals by case: (442 443 0 0 0 443 0 478 0 443)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_and boolean_or exec_s () (print_boolean integer_eq integer_dup_items integer_empty) (boolean_dup_items integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s_when_autoconstructing (integer_stackdepth in4) (exec_shove (boolean_frominteger)) ())
Errors: [0 0 1 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.751
Median total errors in population: 9
Error averages by case: (0.558 0.557 1.0 1.0 1.0 0.557 1.0 0.522 1.0 0.557)
Error minima by case: (0 0 1 1 1 0 1 0 1 0)
Average genome size in population (length): 38.499
Average program size in population (points): 55.49
Average percent parens in population: 0.302
Minimum age in population: 67.33670304994894
Maximum age in population: 71.54564575215404
Average age in population: 69.6891734843636
Median age in population: 69.73590274086789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 15150045
--- Timings ---
Current time: 1559582780897 milliseconds
Total Time:         115.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.5 seconds, 74.6%
Fitness Testing:     19.1 seconds, 16.5%
Report:              10.2 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap exec_do*range (exec_s () () (print_boolean integer_eq print_integer integer_yank) integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank boolean_eq integer_dup) () (integer_gte boolean_not) exec_while ()) ()))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap exec_do*range (exec_s () () (print_boolean integer_eq print_integer integer_yank) integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) boolean_invert_second_then_and exec_s_when_autoconstructing (exec_yank boolean_eq integer_dup) () (integer_gte boolean_not) exec_while ()) ()))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (904 177 726 726 1000 1000 177 726 1000 726)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (904 177 726 726 0 0 177 726 0 726)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 2, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gt})
Best program: (boolean_swap exec_do*range (exec_yank) print_boolean integer_eq print_integer integer_empty integer_inc integer_inc integer_sub in2 integer_inc exec_empty in2 print_integer integer_stackdepth exec_stackdepth integer_dup_items integer_lte exec_shove () integer_lte exec_shove () exec_shove (boolean_pop) integer_gt)
Errors: [0 1 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 30
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.838
Median total errors in population: 5
Error averages by case: (0.096 0.823 0.274 0.274 1.0 1.0 0.823 0.274 1.0 0.274)
Error minima by case: (0 0 0 0 1 1 0 0 1 0)
Average genome size in population (length): 33.138
Average program size in population (points): 46.994
Average percent parens in population: 0.292
Minimum age in population: 68.77087060033
Maximum age in population: 73.2312911814681
Average age in population: 71.22605707645104
Median age in population: 71.27612311254673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 15435268
--- Timings ---
Current time: 1559582783265 milliseconds
Total Time:         118.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.3 seconds, 74.7%
Fitness Testing:     19.5 seconds, 16.4%
Report:              10.4 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_do*times (print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec) () ()) () ())) () ()))
Lexicase best errors: [0 1 1 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 45
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_do*times (print_integer integer_stackdepth exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec) () ()) () ())) () ()))
Zero cases best errors: [0 1 1 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 45
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (307 1000 587 1000 1000 307 1000 307 587 587)
Population mean number of elite cases: 6.68
Count of perfect (error zero) individuals by case: (307 0 587 0 0 307 0 307 587 587)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove})
Best program: (boolean_swap exec_do*range (exec_s_when_autoconstructing (print_boolean) (integer_eq exec_stackdepth integer_pop) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth exec_s (boolean_not exec_shove () exec_shove ()) () ()))
Errors: [1 1 0 1 1 1 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 17
Size: 27
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.318
Median total errors in population: 7
Error averages by case: (0.693 1.0 0.413 1.0 1.0 0.693 1.0 0.693 0.413 0.413)
Error minima by case: (0 1 0 1 1 0 1 0 0 0)
Average genome size in population (length): 34.349
Average program size in population (points): 48.959
Average percent parens in population: 0.296
Minimum age in population: 69.77087060033
Maximum age in population: 74.7444822818695
Average age in population: 72.6738362380596
Median age in population: 72.69276011899251
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.745
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 15734130
--- Timings ---
Current time: 1559582785754 milliseconds
Total Time:         120.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.3 seconds, 74.7%
Fitness Testing:     19.8 seconds, 16.4%
Report:              10.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range (exec_swap () (integer_swap exec_do*range (integer_eq print_integer boolean_flush) integer_inc integer_inc integer_sub) in2) print_integer integer_stackdepth exec_stackdepth integer_eq integer_lte exec_shove () exec_shove (integer_max boolean_pop))
Lexicase best errors: [1 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range (exec_swap () (integer_swap exec_do*range (integer_eq print_integer boolean_flush) integer_inc integer_inc integer_sub) in2) print_integer integer_stackdepth exec_stackdepth integer_eq integer_lte exec_shove () exec_shove (integer_max boolean_pop))
Zero cases best errors: [1 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 446 446 1000 1000 1000 464 1000 1000 446)
Population mean number of elite cases: 7.80
Count of perfect (error zero) individuals by case: (0 446 446 0 0 0 464 0 0 446)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc})
Best program: (boolean_swap exec_do*range (exec_s () (print_boolean exec_k (print_integer integer_empty) (integer_inc integer_sub) in2 print_integer exec_yankdup exec_dup_times () exec_s (exec_stackdepth integer_sub integer_lte exec_eq) (exec_shove (integer_max boolean_pop exec_flush integer_empty integer_add integer_min integer_mod integer_dec exec_when (integer_empty integer_add integer_dup exec_pop (integer_dec exec_when (boolean_frominteger integer_stackdepth) boolean_eq integer_dec boolean_frominteger integer_inc)))) ()) ()))
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 8.198
Median total errors in population: 9
Error averages by case: (1.0 0.554 0.554 1.0 1.0 1.0 0.536 1.0 1.0 0.554)
Error minima by case: (1 0 0 1 1 1 0 1 1 0)
Average genome size in population (length): 35.244
Average program size in population (points): 50.532
Average percent parens in population: 0.301
Minimum age in population: 70.77087060033
Maximum age in population: 76.40761664422071
Average age in population: 74.1114704627994
Median age in population: 74.14430492423055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 16039371
--- Timings ---
Current time: 1559582788090 milliseconds
Total Time:         123.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.0 seconds, 74.8%
Fitness Testing:     20.2 seconds, 16.4%
Report:              10.8 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty})
Lexicase best program: (boolean_swap exec_do*range (exec_s () (print_boolean exec_y_when_autoconstructing (print_integer integer_empty) integer_inc integer_sub) (in2 print_integer integer_stackdepth exec_dup_times () exec_s (exec_stackdepth integer_sub integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_flush integer_empty integer_add integer_min integer_mod integer_lt exec_when (integer_empty))) () ())))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty})
Zero cases best program: (boolean_swap exec_do*range (exec_s () (print_boolean exec_y_when_autoconstructing (print_integer integer_empty) integer_inc integer_sub) (in2 print_integer integer_stackdepth exec_dup_times () exec_s (exec_stackdepth integer_sub integer_lte exec_shove () exec_shove (integer_max boolean_pop exec_flush integer_empty integer_add integer_min integer_mod integer_lt exec_when (integer_empty))) () ())))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 679 906 227 679 227 679 679 906 679)
Population mean number of elite cases: 6.66
Count of perfect (error zero) individuals by case: (0 679 906 227 679 227 679 679 906 679)
Population mean number of perfect (error zero) cases: 5.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_257} {:close 0, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush})
Best program: (in2 exec_noop boolean_not print_integer integer_stackdepth tag_exec_257 (exec_s (exec_pop (integer_rot) exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add boolean_or exec_pop (integer_dec exec_when (boolean_eq integer_dec exec_flush)))) () ()))
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 4.339
Median total errors in population: 3
Error averages by case: (1.0 0.321 0.094 0.773 0.321 0.773 0.321 0.321 0.094 0.321)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.912
Average program size in population (points): 44.011
Average percent parens in population: 0.297
Minimum age in population: 73.02841825706105
Maximum age in population: 77.44563808947991
Average age in population: 75.62669992005655
Median age in population: 75.73109305429834
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 16315584
--- Timings ---
Current time: 1559582790371 milliseconds
Total Time:         125.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.9 seconds, 74.8%
Fitness Testing:     20.5 seconds, 16.3%
Report:              11.0 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_swap integer_lte exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth boolean_pop integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec boolean_frominteger exec_stackdepth exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq)) () ())
Lexicase best errors: [1 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.245
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_swap integer_lte exec_s () (print_boolean integer_eq print_integer integer_empty) (integer_inc integer_sub) in2 print_integer integer_stackdepth exec_stackdepth boolean_pop integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec boolean_frominteger exec_stackdepth exec_flush) (boolean_frominteger exec_stackdepth) (boolean_eq)) () ())
Zero cases best errors: [1 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.245
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 654 654 654 1000 261 915 261 915)
Population mean number of elite cases: 7.31
Count of perfect (error zero) individuals by case: (0 0 654 654 654 0 261 915 261 915)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte})
Best program: (integer_swap boolean_swap exec_do*range () print_boolean integer_eq print_integer integer_empty integer_inc integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte) () ())
Errors: [1 1 0 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.686
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.346 0.346 0.346 1.0 0.739 0.085 0.739 0.085)
Error minima by case: (1 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 31.151
Average program size in population (points): 44.478
Average percent parens in population: 0.298
Minimum age in population: 74.02841825706105
Maximum age in population: 78.90497198542054
Average age in population: 77.14442595724472
Median age in population: 77.2193862880527
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 16597754
--- Timings ---
Current time: 1559582792821 milliseconds
Total Time:         127.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.8 seconds, 74.9%
Fitness Testing:     20.8 seconds, 16.3%
Report:              11.2 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4})
Lexicase best program: (integer_lt integer_mult integer_inc integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte integer_stackdepth exec_stackdepth exec_s_when_autoconstructing (integer_stackdepth in4) () ()) () ())
Lexicase best errors: [1 1 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4})
Zero cases best program: (integer_lt integer_mult integer_inc integer_sub in2 print_integer integer_stackdepth exec_stackdepth exec_s (integer_lte integer_stackdepth exec_stackdepth exec_s_when_autoconstructing (integer_stackdepth in4) () ()) () ())
Zero cases best errors: [1 1 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 1000 534 376 1000 1000 534 1 534 1000)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (382 0 534 376 0 0 534 1 534 0)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_gt})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 exec_stackdepth) exec_yank print_integer integer_stackdepth integer_inc exec_empty in2 print_integer integer_stackdepth exec_stackdepth integer_dup_items integer_lte exec_shove () integer_lte exec_shove () exec_shove (boolean_pop) integer_gt)
Errors: [1 1 0 1 1 1 0 1 0 1]
Total: 7
Mean: 0.7
Genome size: 22
Size: 27
Percent parens: 0.185
--- Population Statistics ---
Average total errors in population: 7.639
Median total errors in population: 7
Error averages by case: (0.618 1.0 0.466 0.624 1.0 1.0 0.466 0.999 0.466 1.0)
Error minima by case: (0 1 0 0 1 1 0 0 0 1)
Average genome size in population (length): 31.671
Average program size in population (points): 45.696
Average percent parens in population: 0.306
Minimum age in population: 75.8690690390303
Maximum age in population: 80.56995181534018
Average age in population: 78.64654577573216
Median age in population: 78.69384250799914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 16890677
--- Timings ---
Current time: 1559582795192 milliseconds
Total Time:         130.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.6 seconds, 74.9%
Fitness Testing:     21.2 seconds, 16.3%
Report:              11.3 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove})
Lexicase best program: (integer_swap boolean_swap exec_do*range () print_boolean integer_eq print_integer integer_empty integer_inc integer_sub in2 print_integer integer_stackdepth integer_max boolean_pop boolean_pop exec_stackdepth exec_s (integer_lte exec_s (exec_swap (exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (exec_if (exec_stackdepth) (integer_swap integer_dec print_integer integer_inc exec_swap (exec_pop (exec_dup (integer_shove))) ()))) () ()) () ())
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove})
Zero cases best program: (integer_swap boolean_swap exec_do*range () print_boolean integer_eq print_integer integer_empty integer_inc integer_sub in2 print_integer integer_stackdepth integer_max boolean_pop boolean_pop exec_stackdepth exec_s (integer_lte exec_s (exec_swap (exec_shove () exec_shove (integer_max boolean_pop integer_gt integer_empty integer_add) boolean_shove print_integer integer_dec exec_flush) (exec_if (exec_stackdepth) (integer_swap integer_dec print_integer integer_inc exec_swap (exec_pop (exec_dup (integer_shove))) ()))) () ()) () ())
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (461 461 230 910 461 909 1000 1 919 461)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (461 461 230 910 461 909 0 1 919 461)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 1, :instruction 27} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (boolean_swap integer_yank integer_empty integer_inc integer_sub in2 print_integer integer_lte exec_shove () exec_shove (exec_dup (exec_s (boolean_eq boolean_pop integer_gt) (integer_empty integer_add boolean_shove print_boolean) (exec_flush integer_inc integer_flush print_newline integer_pop 27) boolean_frominteger boolean_invert_second_then_and) exec_if (exec_dup_items integer_mult exec_y_when_autoconstructing (exec_y_when_autoconstructing ())) ()))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 43
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.187
Median total errors in population: 6
Error averages by case: (0.539 0.539 0.77 0.09 0.539 0.091 1.0 0.999 0.081 0.539)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 34.869
Average program size in population (points): 50.416
Average percent parens in population: 0.307
Minimum age in population: 76.99731053590719
Maximum age in population: 82.00336683780193
Average age in population: 80.2553118007375
Median age in population: 80.27285909787086
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 17158068
--- Timings ---
Current time: 1559582797466 milliseconds
Total Time:         132.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.3 seconds, 75.0%
Fitness Testing:     21.5 seconds, 16.2%
Report:              11.5 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 757
Test mean error for best: 0.75700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 10                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 10                 
Correct output: 12                  | Program output: 10                 
Correct output: 1                   | Program output: 10                 
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 10                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 10                 
Correct output: -96                 | Program output: 10                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 10                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 10                 
Correct output: 52                  | Program output: 10                 
Correct output: 4                   | Program output: 10                 
Correct output: 5                   | Program output: 10                 
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 10                 
Correct output: 5                   | Program output: 10                 
Correct output: 7                   | Program output: 10                 
Correct output: 16                  | Program output: 10                 
Correct output: 27                  | Program output: 10                 
Correct output: 4                   | Program output: 10                 
Correct output: 32                  | Program output: 10                 
Correct output: 30                  | Program output: 10                 
Correct output: 21                  | Program output: 10                 
Correct output: 1                   | Program output: 10                 
Correct output: 18                  | Program output: 10                 
Correct output: 20                  | Program output: 10                 
Correct output: 18                  | Program output: 10                 
Correct output: 51                  | Program output: 10                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 10                 
Correct output: -64                 | Program output: 10                 
Correct output: -52                 | Program output: 10                 
Correct output: -7                  | Program output: 10                 
Correct output: -44                 | Program output: 10                 
Correct output: -11                 | Program output: 10                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 10                 
Correct output: 20                  | Program output: 10                 
Correct output: -74                 | Program output: 10                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 10                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 10                 
Correct output: 34                  | Program output: 10                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 10                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 10                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 10                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 10                 
Correct output: -6                  | Program output: 10                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 10                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 10                 
Correct output: -63                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 10                 
Correct output: -88                 | Program output: 10                 
Correct output: -88                 | Program output: 10                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 10                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 10                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 10                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap boolean_flush exec_s () (boolean_swap integer_stackdepth boolean_swap exec_do*range (integer_stackdepth) in1 boolean_dup) () exec_do*times (print_integer integer_eq integer_add) boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank integer_mult boolean_yankdup) () (integer_gte boolean_not) exec_while ()) ())
Lexicase best errors: [0 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap boolean_flush exec_s () (boolean_swap integer_stackdepth boolean_swap exec_do*range (integer_stackdepth) in1 boolean_dup) () exec_do*times (print_integer integer_eq integer_add) boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank integer_mult boolean_yankdup) () (integer_gte boolean_not) exec_while ()) ())
Zero cases best errors: [0 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 533 756 1000 919 756 916 160 1000 160)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (160 533 756 0 919 756 916 160 0 160)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap boolean_flush exec_s () (boolean_swap integer_stackdepth boolean_swap exec_do*range (integer_stackdepth) in1 boolean_dup) () exec_do*times (print_integer integer_eq integer_add) boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank integer_mult boolean_yankdup) () (integer_gte boolean_not) exec_while ()) ())
Errors: [0 0 1 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 47
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 5.64
Median total errors in population: 5
Error averages by case: (0.84 0.467 0.244 1.0 0.081 0.244 0.084 0.84 1.0 0.84)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 27.628
Average program size in population (points): 40.442
Average percent parens in population: 0.317
Minimum age in population: 78.23331611029305
Maximum age in population: 83.39996484901636
Average age in population: 81.97851527680645
Median age in population: 82.0061917208366
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 278
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 17566413
--- Timings ---
Current time: 1559582800443 milliseconds
Total Time:         135.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.5 seconds, 75.0%
Fitness Testing:     22.0 seconds, 16.2%
Report:              11.7 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ()))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ()))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 1000 397 381 382 899 899 395 395 518)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (384 0 397 381 382 899 899 395 395 518)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_while () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (exec_shove (integer_max boolean_pop)))) () ()) () ()))))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 27
Size: 43
Percent parens: 0.372
--- Population Statistics ---
Average total errors in population: 5.35
Median total errors in population: 7
Error averages by case: (0.616 1.0 0.603 0.619 0.618 0.101 0.101 0.605 0.605 0.482)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.72
Average program size in population (points): 44.484
Average percent parens in population: 0.311
Minimum age in population: 81.87597234753436
Maximum age in population: 85.36030251368217
Average age in population: 83.64290614063268
Median age in population: 83.75285455064096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 18231772
--- Timings ---
Current time: 1559582803715 milliseconds
Total Time:         138.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.7 seconds, 74.8%
Fitness Testing:     22.6 seconds, 16.3%
Report:              12.1 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max exec_s (exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ()) () ()))))
Lexicase best errors: [1 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max exec_s (exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ()) () ()))))
Zero cases best errors: [1 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 710 896 897 2 219 2 897 1000 710)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (0 710 896 897 2 219 2 897 0 710)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ()))))
Errors: [1 0 0 0 1 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 5.667
Median total errors in population: 5
Error averages by case: (1.0 0.29 0.104 0.103 0.998 0.781 0.998 0.103 1.0 0.29)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 28.783
Average program size in population (points): 43.184
Average percent parens in population: 0.335
Minimum age in population: 82.87597234753436
Maximum age in population: 86.70816059046719
Average age in population: 85.12825080832374
Median age in population: 85.26981658871532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 292
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 18948860
--- Timings ---
Current time: 1559582806753 milliseconds
Total Time:         141.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.5 seconds, 74.5%
Fitness Testing:     23.3 seconds, 16.5%
Report:              12.6 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (print_integer boolean_frominteger exec_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_eq integer_pop)) () ()) () ()))))
Lexicase best errors: [1 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (print_integer boolean_frominteger exec_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_eq integer_pop)) () ()) () ()))))
Zero cases best errors: [1 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 598 1000 1 124 599 598 122 1000 628)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (1 598 0 1 124 599 598 122 0 628)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_while})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer print_boolean integer_pop boolean_xor exec_shove (exec_shove (integer_max in3 exec_stackdepth exec_s (integer_lte print_integer) (integer_eq integer_add) (boolean_shove print_integer) boolean_frominteger exec_stackdepth) boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank integer_mult boolean_yankdup) () (integer_gte boolean_not) exec_while ()) ())))
Errors: [1 0 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.329
Median total errors in population: 7
Error averages by case: (0.999 0.402 1.0 0.999 0.876 0.401 0.402 0.878 1.0 0.372)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 28.692
Average program size in population (points): 42.58
Average percent parens in population: 0.327
Minimum age in population: 83.87597234753436
Maximum age in population: 88.34207259956986
Average age in population: 86.69146294754927
Median age in population: 86.73782300756861
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 19481826
--- Timings ---
Current time: 1559582809493 milliseconds
Total Time:         144.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.5 seconds, 74.4%
Fitness Testing:     23.9 seconds, 16.5%
Report:              13.0 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -2                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -89                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -45                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: -2                 
Correct output: -74                 | Program output: -4                 
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -24                
Correct output: -96                 | Program output: -84                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -34                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -1                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in4 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in4 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 926 351 668 230 667 229 231 670 229)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (352 926 351 668 230 667 229 231 670 229)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in4 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Errors: [0 0 0 0 1 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 26
Size: 40
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 5.447
Median total errors in population: 5
Error averages by case: (0.648 0.074 0.649 0.332 0.77 0.333 0.771 0.769 0.33 0.771)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.679
Average program size in population (points): 41.795
Average percent parens in population: 0.338
Minimum age in population: 85.04127601332095
Maximum age in population: 89.8070244738277
Average age in population: 88.10843972545263
Median age in population: 88.26239679151277
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 258
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 20283487
--- Timings ---
Current time: 1559582813022 milliseconds
Total Time:         147.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.7 seconds, 74.2%
Fitness Testing:     24.7 seconds, 16.7%
Report:              13.3 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Lexicase best errors: [1 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Zero cases best errors: [1 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (521 1 412 943 509 1 913 1 508 1)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (521 1 412 943 509 1 913 1 508 1)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Errors: [1 1 1 0 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 40
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 6.19
Median total errors in population: 11/2
Error averages by case: (0.479 0.999 0.588 0.057 0.491 0.999 0.087 0.999 0.492 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.403
Average program size in population (points): 40.767
Average percent parens in population: 0.328
Minimum age in population: 87.13721341254411
Maximum age in population: 91.32303409846581
Average age in population: 89.57769389098085
Median age in population: 89.63218283496848
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 272
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 21022159
--- Timings ---
Current time: 1559582816181 milliseconds
Total Time:         151.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.7 seconds, 74.0%
Fitness Testing:     25.5 seconds, 16.9%
Report:              13.7 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_y (integer_max boolean_pop))) () ()) () ())))
Lexicase best errors: [1 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_y (integer_max boolean_pop))) () ()) () ())))
Zero cases best errors: [1 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 403 952 246 124 550 403 4 406 919)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (1 403 952 246 124 550 403 4 406 919)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Errors: [1 0 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 40
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 5.992
Median total errors in population: 7
Error averages by case: (0.999 0.597 0.048 0.754 0.876 0.45 0.597 0.996 0.594 0.081)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.067
Average program size in population (points): 39.647
Average percent parens in population: 0.342
Minimum age in population: 88.98567813507809
Maximum age in population: 92.760178374837
Average age in population: 90.4577038786464
Median age in population: 90.354388514013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 281
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 283
Syntactic diversity (% unique Push programs):	 0.419
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 21652118
--- Timings ---
Current time: 1559582819201 milliseconds
Total Time:         154.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.6 seconds, 73.8%
Fitness Testing:     26.2 seconds, 17.0%
Report:              14.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 117 721 392 388 118 117 390 117 390)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (117 117 721 392 388 118 117 390 117 390)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Errors: [1 1 0 0 0 1 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 26
Size: 40
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 7.133
Median total errors in population: 6
Error averages by case: (0.883 0.883 0.279 0.608 0.612 0.882 0.883 0.61 0.883 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.128
Average program size in population (points): 40.174
Average percent parens in population: 0.325
Minimum age in population: 90.26849970925608
Maximum age in population: 93.86128202876749
Average age in population: 92.22359239138424
Median age in population: 92.25396084787424
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 22174826
--- Timings ---
Current time: 1559582822263 milliseconds
Total Time:         157.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.7 seconds, 73.6%
Fitness Testing:     26.7 seconds, 17.0%
Report:              14.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop exec_shove (exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_stackdepth exec_shove () exec_shove (integer_lte exec_shove ())) () ()) () ()))))
Lexicase best errors: [0 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop exec_shove (exec_shove (integer_dup_items integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_stackdepth exec_shove () exec_shove (integer_lte exec_shove ())) () ()) () ()))))
Zero cases best errors: [0 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 447 1 1000 403 1000 1000 941 402 376)
Population mean number of elite cases: 5.97
Count of perfect (error zero) individuals by case: (402 447 1 0 403 0 0 941 402 376)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_do*times (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_mod integer_max exec_s (integer_lte exec_s (integer_dec exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Errors: [0 0 1 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 38
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 7.028
Median total errors in population: 8
Error averages by case: (0.598 0.553 0.999 1.0 0.597 1.0 1.0 0.059 0.598 0.624)
Error minima by case: (0 0 0 1 0 1 1 0 0 0)
Average genome size in population (length): 27.479
Average program size in population (points): 40.284
Average percent parens in population: 0.318
Minimum age in population: 91.26849970925608
Maximum age in population: 95.5013400029418
Average age in population: 93.72979546030166
Median age in population: 93.82752885223444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 22746106
--- Timings ---
Current time: 1559582825401 milliseconds
Total Time:         160.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.8 seconds, 73.5%
Fitness Testing:     27.2 seconds, 17.0%
Report:              15.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap boolean_not integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte exec_shove ()) () ()) () ())))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap boolean_not integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte exec_shove ()) () ()) () ())))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 148 794 2 929 415 149 148 800 2)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (148 148 794 2 929 415 149 148 800 2)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap})
Best program: (boolean_swap boolean_flush integer_shove boolean_swap integer_stackdepth boolean_swap exec_dup (integer_stackdepth) in1 boolean_dup in3 print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_frominteger exec_stackdepth exec_dup_items integer_dec exec_flush integer_inc exec_swap () ())
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 6.465
Median total errors in population: 6
Error averages by case: (0.852 0.852 0.206 0.998 0.071 0.585 0.851 0.852 0.2 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.149
Average program size in population (points): 32.715
Average percent parens in population: 0.316
Minimum age in population: 92.26849970925608
Maximum age in population: 96.70829678305363
Average age in population: 95.3498505869827
Median age in population: 95.32004944646181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 328
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 23297020
--- Timings ---
Current time: 1559582828155 milliseconds
Total Time:         163.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       119.8 seconds, 73.4%
Fitness Testing:     27.8 seconds, 17.0%
Report:              15.5 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.350
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ()) () ())))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.350
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 2 407 2 932 2 408 938 408)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (0 0 2 407 2 932 2 408 938 408)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup})
Best program: (boolean_swap boolean_swap boolean_swap exec_do*range (integer_stackdepth) in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth) exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_eq integer_add) (boolean_shove print_integer boolean_frominteger exec_stackdepth) (boolean_eq integer_dec exec_flush integer_inc exec_swap (integer_pop exec_dup ()) ())) () ()))
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 6.901
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.998 0.593 0.998 0.068 0.998 0.592 0.062 0.592)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.075
Average program size in population (points): 37.191
Average percent parens in population: 0.320
Minimum age in population: 93.41978703523664
Maximum age in population: 98.34275030785614
Average age in population: 97.08890887866582
Median age in population: 97.11393872070678
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 261
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 23885164
--- Timings ---
Current time: 1559582831292 milliseconds
Total Time:         166.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       121.8 seconds, 73.4%
Fitness Testing:     28.4 seconds, 17.1%
Report:              15.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_dup boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (exec_do*range (exec_shove () exec_shove (boolean_dup_times exec_shove () exec_shove (integer_max boolean_pop)))) () ()) () ())))
Lexicase best errors: [0 0 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_dup boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (exec_do*range (exec_shove () exec_shove (boolean_dup_times exec_shove () exec_shove (integer_max boolean_pop)))) () ()) () ())))
Zero cases best errors: [0 0 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (451 452 1000 1000 452 1000 451 469 1000 1)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (451 452 0 0 452 0 451 469 0 1)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer})
Best program: (boolean_flush exec_do*range () integer_stackdepth in1 in2 in3 print_integer)
Errors: [0 0 1 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 7
Size: 9
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.724
Median total errors in population: 9
Error averages by case: (0.549 0.548 1.0 1.0 0.548 1.0 0.549 0.531 1.0 0.999)
Error minima by case: (0 0 1 1 0 1 0 0 1 0)
Average genome size in population (length): 25.267
Average program size in population (points): 35.443
Average percent parens in population: 0.283
Minimum age in population: 94.41978703523664
Maximum age in population: 100.1175997587316
Average age in population: 98.63839395176979
Median age in population: 98.8027462007017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 191
Genome diversity (% unique genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 24243584
--- Timings ---
Current time: 1559582833566 milliseconds
Total Time:         168.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       123.6 seconds, 73.3%
Fitness Testing:     28.8 seconds, 17.0%
Report:              16.2 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove (integer_stackdepth integer_lte integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ())) () ()) () ())))
Lexicase best errors: [0 0 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove (integer_stackdepth integer_lte integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))) () ())) () ()) () ())))
Zero cases best errors: [0 0 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (620 619 169 151 170 1000 150 1000 942 789)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (620 619 169 151 170 0 150 0 942 789)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range (integer_stackdepth) in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor boolean_xor exec_shove (exec_shove () exec_shove (integer_dup exec_shove () exec_shove (integer_max boolean_pop))))
Errors: [0 0 1 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.39
Median total errors in population: 6
Error averages by case: (0.38 0.381 0.831 0.849 0.83 1.0 0.85 1.0 0.058 0.211)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 26.616
Average program size in population (points): 37.924
Average percent parens in population: 0.292
Minimum age in population: 97.1443231610988
Maximum age in population: 102.0432984477712
Average age in population: 100.271617489188
Median age in population: 100.3884705128516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 24653825
--- Timings ---
Current time: 1559582836032 milliseconds
Total Time:         171.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       125.5 seconds, 73.3%
Fitness Testing:     29.2 seconds, 17.1%
Report:              16.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_yank integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_yank integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 322 1 275 333 333 333 274 275 321)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (662 322 1 275 333 333 333 274 275 321)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mult})
Best program: (boolean_swap exec_do*range () integer_eq in1 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove (exec_k (integer_max boolean_pop exec_stackdepth exec_s (exec_flush integer_inc exec_swap (integer_gt exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing () (exec_yank integer_mult) ()) ()) () ()) ()))))
Errors: [0 1 1 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 48
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.871
Median total errors in population: 7
Error averages by case: (0.338 0.678 0.999 0.725 0.667 0.667 0.667 0.726 0.725 0.679)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.154
Average program size in population (points): 36.306
Average percent parens in population: 0.277
Minimum age in population: 98.83054311559295
Maximum age in population: 103.8573019241734
Average age in population: 101.9316397940645
Median age in population: 101.9689971368107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 24920955
--- Timings ---
Current time: 1559582838623 milliseconds
Total Time:         173.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       127.6 seconds, 73.5%
Fitness Testing:     29.5 seconds, 17.0%
Report:              16.5 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 boolean_dup in3 print_integer exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove () boolean_stackdepth exec_shove () exec_shove (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove ())) () ())) () ()) () ())
Lexicase best errors: [1 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 boolean_dup in3 print_integer exec_s (integer_lte exec_s (integer_lte exec_shove () exec_shove () boolean_stackdepth exec_shove () exec_shove (integer_lte exec_s (integer_lte exec_shove () exec_shove (integer_lte exec_shove () exec_shove ())) () ())) () ()) () ())
Zero cases best errors: [1 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 319 278 219 217 278 947 283 219 280)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (321 319 278 219 217 278 947 283 219 280)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_swap boolean_flush integer_shove boolean_swap integer_stackdepth boolean_swap exec_do*range (integer_stackdepth) in1 boolean_dup in3 print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_frominteger)
Errors: [1 1 0 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 21
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 6.639
Median total errors in population: 7
Error averages by case: (0.679 0.681 0.722 0.781 0.783 0.722 0.053 0.717 0.781 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.839
Average program size in population (points): 35.322
Average percent parens in population: 0.262
Minimum age in population: 99.83054311559295
Maximum age in population: 105.6682553513038
Average age in population: 103.4395564130445
Median age in population: 103.5521289490961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 25198355
--- Timings ---
Current time: 1559582841189 milliseconds
Total Time:         176.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       129.7 seconds, 73.6%
Fitness Testing:     29.8 seconds, 16.9%
Report:              16.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap boolean_empty exec_do*range () integer_stackdepth in1 in2 exec_yank print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ())
Lexicase best errors: [0 0 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap boolean_empty exec_do*range () integer_stackdepth in1 in2 exec_yank print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ())
Zero cases best errors: [0 0 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 214 1000 295 293 213 210 1000 438 437)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (213 214 0 295 293 213 210 0 438 437)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub})
Best program: (boolean_swap exec_do*range () integer_eq in1 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub) ()))))
Errors: [0 0 1 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.687
Median total errors in population: 8
Error averages by case: (0.787 0.786 1.0 0.705 0.707 0.787 0.79 1.0 0.562 0.563)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 26.496
Average program size in population (points): 37.287
Average percent parens in population: 0.283
Minimum age in population: 100.8716347349944
Maximum age in population: 106.9368964268342
Average age in population: 104.8855665183617
Median age in population: 104.955071908185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 25544433
--- Timings ---
Current time: 1559582843843 milliseconds
Total Time:         178.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.8 seconds, 73.7%
Fitness Testing:     30.2 seconds, 16.9%
Report:              16.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction tagged_267} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_swap boolean_swap exec_do*range (integer_stackdepth in1 in2) tagged_267 print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ())
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction tagged_267} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_swap boolean_swap exec_do*range (integer_stackdepth in1 in2) tagged_267 print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ())
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 225 225 1000 479 954 237 225 225)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (0 0 225 225 0 479 954 237 225 225)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_while})
Best program: (boolean_swap boolean_swap exec_do*range () integer_stackdepth in1 in2 exec_k_when_autoconstructing (print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add) (boolean_shove print_integer boolean_frominteger integer_dup) integer_max integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_add) (boolean_shove print_integer boolean_frominteger exec_stackdepth) boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_s (integer_lte) (exec_shove (exec_shove (integer_lte boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank exec_while ()) () ()) ()))) ())
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 65
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 7.43
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.775 0.775 1.0 0.521 0.046 0.763 0.775 0.775)
Error minima by case: (1 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 25.074
Average program size in population (points): 34.88
Average percent parens in population: 0.277
Minimum age in population: 102.8079438888925
Maximum age in population: 108.4790889441822
Average age in population: 106.4034691330414
Median age in population: 106.4862535765284
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 25810548
--- Timings ---
Current time: 1559582846212 milliseconds
Total Time:         181.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.7 seconds, 73.7%
Fitness Testing:     30.5 seconds, 16.8%
Report:              17.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: 67                 
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 54                 
Correct output: 5                   | Program output: 29                 
Correct output: 10                  | Program output: 45                 
Correct output: 36                  | Program output: 41                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 51                 
Correct output: 16                  | Program output: 39                 
Correct output: 27                  | Program output: 89                 
Correct output: 4                   | Program output: 71                 
Correct output: 32                  | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 40                 
Correct output: 1                   | Program output: 83                 
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 23                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -2                 
Correct output: -52                 | Program output: 36                 
Correct output: -7                  | Program output: 47                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: 80                 
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: 43                 
Correct output: -96                 | Program output: -89                
Correct output: 5                   | Program output: 95                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: -45                
Correct output: -85                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: 83                 
Correct output: 34                  | Program output: 83                 
Correct output: -51                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: 48                 
Correct output: -65                 | Program output: -2                 
Correct output: -74                 | Program output: -4                 
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -72                
Correct output: -66                 | Program output: 69                 
Correct output: -96                 | Program output: -24                
Correct output: -96                 | Program output: -84                
Correct output: -90                 | Program output: 56                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -34                
Correct output: -87                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 41                 
Correct output: -63                 | Program output: 39                 
Correct output: -58                 | Program output: 1                  
Correct output: -28                 | Program output: 25                 
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 6                  
Correct output: -20                 | Program output: 99                 
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -1                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: 1                  
Correct output: -90                 | Program output: -63                
Correct output: -96                 | Program output: 42                 
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max boolean_swap exec_do*range () integer_eq in4 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))))
Lexicase best errors: [0 0 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max boolean_swap exec_do*range () integer_eq in4 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))))
Zero cases best errors: [0 0 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (960 2 158 184 158 737 609 185 158 2)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (960 2 158 184 158 737 609 185 158 2)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc})
Best program: (boolean_swap boolean_swap exec_do*range () integer_stackdepth in1 in2 in4 print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc)
Errors: [0 0 1 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 24
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 6.847
Median total errors in population: 7
Error averages by case: (0.04 0.998 0.842 0.816 0.842 0.263 0.391 0.815 0.842 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.948
Average program size in population (points): 36.951
Average percent parens in population: 0.267
Minimum age in population: 105.2478645886064
Maximum age in population: 109.8293141500254
Average age in population: 107.9421852670945
Median age in population: 108.0355174938799
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 26031083
--- Timings ---
Current time: 1559582848676 milliseconds
Total Time:         183.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.8 seconds, 73.9%
Fitness Testing:     30.7 seconds, 16.7%
Report:              17.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap boolean_swap boolean_invert_first_then_and integer_stackdepth in1 in2 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_max boolean_pop))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap boolean_swap boolean_invert_first_then_and integer_stackdepth in1 in2 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_max boolean_pop))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 962 262 384 309 386 2 962 2 2)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (309 962 262 384 309 386 2 962 2 2)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_203} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 boolean_and print_integer exec_when (integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (tag_boolean_203 exec_s (integer_lte integer_max boolean_pop) () ()) () ()))))
Errors: [1 0 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 6.42
Median total errors in population: 6
Error averages by case: (0.691 0.038 0.738 0.616 0.691 0.614 0.998 0.038 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.484
Average program size in population (points): 29.186
Average percent parens in population: 0.250
Minimum age in population: 106.7064408449978
Maximum age in population: 111.216648761233
Average age in population: 109.3635702844791
Median age in population: 109.4834630342789
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 26315528
--- Timings ---
Current time: 1559582851087 milliseconds
Total Time:         186.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       137.7 seconds, 74.0%
Fitness Testing:     31.0 seconds, 16.7%
Report:              17.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 2, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc})
Lexicase best program: (boolean_swap boolean_swap exec_do*range () integer_stackdepth in2 in2 in4 print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc)
Lexicase best errors: [1 1 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 2, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc})
Zero cases best program: (boolean_swap boolean_swap exec_do*range () integer_stackdepth in2 in2 in4 print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc)
Zero cases best errors: [1 1 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 438 438 163 601 163 438 163 233 122)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (233 438 438 163 601 163 438 163 233 122)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_203} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 boolean_and print_integer exec_when (integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (tag_boolean_203 exec_s (integer_lte integer_max boolean_pop) () ()) () ()))))
Errors: [1 0 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.008
Median total errors in population: 6
Error averages by case: (0.767 0.562 0.562 0.837 0.399 0.837 0.562 0.837 0.767 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.856
Average program size in population (points): 27.484
Average percent parens in population: 0.259
Minimum age in population: 107.9403637404336
Maximum age in population: 112.6397109667599
Average age in population: 110.5569743940028
Median age in population: 110.7082006530997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 26572919
--- Timings ---
Current time: 1559582853572 milliseconds
Total Time:         188.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.7 seconds, 74.1%
Fitness Testing:     31.3 seconds, 16.6%
Report:              17.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap boolean_swap boolean_invert_first_then_and integer_stackdepth in1 in2 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_max boolean_pop))
Lexicase best errors: [1 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 18
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap boolean_swap boolean_invert_first_then_and integer_stackdepth in1 in2 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_max boolean_pop))
Zero cases best errors: [1 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 18
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (342 328 328 959 342 199 328 88 198 89)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (342 328 328 959 342 199 328 88 198 89)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_while})
Best program: (boolean_swap boolean_swap exec_do*range () boolean_swap boolean_invert_first_then_and integer_stackdepth in1 in2 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_max exec_swap (integer_pop exec_yankdup integer_shove) (integer_sub exec_s_when_autoconstructing (in3 exec_while ()) () ())))
Errors: [1 0 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 34
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.799
Median total errors in population: 7
Error averages by case: (0.658 0.672 0.672 0.041 0.658 0.801 0.672 0.912 0.802 0.911)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.81
Average program size in population (points): 26.745
Average percent parens in population: 0.242
Minimum age in population: 109.7082006530997
Maximum age in population: 114.1271458705425
Average age in population: 112.1319221333256
Median age in population: 112.2082006530997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 26805304
--- Timings ---
Current time: 1559582856590 milliseconds
Total Time:         191.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       142.3 seconds, 74.2%
Fitness Testing:     31.6 seconds, 16.5%
Report:              17.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_eq in1 exec_empty print_integer integer_add integer_pop boolean_xor exec_shove () exec_shove () exec_shove (integer_lte exec_shove (exec_shove (integer_max boolean_pop))))
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_eq in1 exec_empty print_integer integer_add integer_pop boolean_xor exec_shove () exec_shove () exec_shove (integer_lte exec_shove (exec_shove (integer_max boolean_pop))))
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 205 432 740 206 945 217 215 207 216)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (216 205 432 740 206 945 217 215 207 216)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_eq in1 exec_empty print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove () integer_max boolean_pop)))
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.401
Median total errors in population: 6
Error averages by case: (0.784 0.795 0.568 0.26 0.794 0.055 0.783 0.785 0.793 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.551
Average program size in population (points): 26.691
Average percent parens in population: 0.251
Minimum age in population: 110.7082006530997
Maximum age in population: 115.5593252575153
Average age in population: 113.6123031083498
Median age in population: 113.7125971311385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 27042311
--- Timings ---
Current time: 1559582859175 milliseconds
Total Time:         194.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       144.5 seconds, 74.4%
Fitness Testing:     31.8 seconds, 16.4%
Report:              17.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: 67                 
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 54                 
Correct output: 5                   | Program output: 29                 
Correct output: 10                  | Program output: 45                 
Correct output: 36                  | Program output: 41                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 51                 
Correct output: 16                  | Program output: 39                 
Correct output: 27                  | Program output: 89                 
Correct output: 4                   | Program output: 71                 
Correct output: 32                  | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 40                 
Correct output: 1                   | Program output: 83                 
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 23                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -2                 
Correct output: -52                 | Program output: 36                 
Correct output: -7                  | Program output: 47                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: 80                 
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: 43                 
Correct output: -96                 | Program output: -89                
Correct output: 5                   | Program output: 95                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: -45                
Correct output: -85                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: 83                 
Correct output: 34                  | Program output: 83                 
Correct output: -51                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: 48                 
Correct output: -65                 | Program output: -2                 
Correct output: -74                 | Program output: -4                 
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -72                
Correct output: -66                 | Program output: 69                 
Correct output: -96                 | Program output: -24                
Correct output: -96                 | Program output: -84                
Correct output: -90                 | Program output: 56                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -34                
Correct output: -87                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 41                 
Correct output: -63                 | Program output: 39                 
Correct output: -58                 | Program output: 1                  
Correct output: -28                 | Program output: 25                 
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 6                  
Correct output: -20                 | Program output: 99                 
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -1                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: 1                  
Correct output: -90                 | Program output: -63                
Correct output: -96                 | Program output: 42                 
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_stackdepth boolean_swap exec_do*range () integer_eq in4 exec_empty print_integer integer_stackdepth integer_pop integer_div exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))))
Lexicase best errors: [1 1 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_stackdepth boolean_swap exec_do*range () integer_eq in4 exec_empty print_integer integer_stackdepth integer_pop integer_div exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove (integer_max boolean_pop))))
Zero cases best errors: [1 1 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 2 341 341 437 960 2 176 341 615)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (440 2 341 341 437 960 2 176 341 615)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc})
Best program: (boolean_swap boolean_swap exec_do*range () integer_stackdepth in1 in2 in4 print_integer integer_stackdepth integer_pop exec_flush print_integer integer_eq integer_add boolean_shove print_integer boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc)
Errors: [1 1 0 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 22
Size: 24
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 6.345
Median total errors in population: 6
Error averages by case: (0.56 0.998 0.659 0.659 0.563 0.04 0.998 0.824 0.659 0.385)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.667
Average program size in population (points): 26.656
Average percent parens in population: 0.251
Minimum age in population: 112.0195596106063
Maximum age in population: 117.1626835824224
Average age in population: 115.1969641573318
Median age in population: 115.2486094850319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 27242225
--- Timings ---
Current time: 1559582861769 milliseconds
Total Time:         196.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       146.7 seconds, 74.5%
Fitness Testing:     32.1 seconds, 16.3%
Report:              18.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (integer_max boolean_swap exec_do*range () integer_eq exec_do*range () exec_yankdup in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_max boolean_pop)))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (integer_max boolean_swap exec_do*range () integer_eq exec_do*range () exec_yankdup in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_max boolean_pop)))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (569 240 151 245 242 151 245 810 962 961)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (569 240 151 245 242 151 245 810 962 961)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_swap boolean_invert_first_then_and boolean_flush in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte)))
Errors: [0 1 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.424
Median total errors in population: 6
Error averages by case: (0.431 0.76 0.849 0.755 0.758 0.849 0.755 0.19 0.038 0.039)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.856
Average program size in population (points): 25.234
Average percent parens in population: 0.243
Minimum age in population: 114.3634635577595
Maximum age in population: 118.4351184253398
Average age in population: 116.7013373189183
Median age in population: 116.7506422093865
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 27440945
--- Timings ---
Current time: 1559582864061 milliseconds
Total Time:         199.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       148.7 seconds, 74.6%
Fitness Testing:     32.3 seconds, 16.2%
Report:              18.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_eq integer_max boolean_swap integer_stackdepth integer_eq exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_max boolean_pop)))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_eq integer_max boolean_swap integer_stackdepth integer_eq exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_max boolean_pop)))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (708 1000 262 250 446 1000 446 1000 446 959)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (708 0 262 250 446 0 446 0 446 959)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_swap boolean_invert_first_then_and boolean_flush in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte)))
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.483
Median total errors in population: 7
Error averages by case: (0.292 1.0 0.738 0.75 0.554 1.0 0.554 1.0 0.554 0.041)
Error minima by case: (0 1 0 0 0 1 0 1 0 0)
Average genome size in population (length): 18.363
Average program size in population (points): 25.417
Average percent parens in population: 0.267
Minimum age in population: 115.6334617583725
Maximum age in population: 119.84422545386
Average age in population: 118.1474581093389
Median age in population: 118.2165827222705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 27672002
--- Timings ---
Current time: 1559582866671 milliseconds
Total Time:         201.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       150.9 seconds, 74.8%
Fitness Testing:     32.5 seconds, 16.1%
Report:              18.3 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items})
Lexicase best program: (integer_max boolean_swap exec_do*range () integer_eq exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_max exec_dup_items)))
Lexicase best errors: [0 1 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items})
Zero cases best program: (integer_max boolean_swap exec_do*range () integer_eq exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_max exec_dup_items)))
Zero cases best errors: [0 1 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (955 198 146 1000 611 1000 955 611 198 146)
Population mean number of elite cases: 5.82
Count of perfect (error zero) individuals by case: (955 198 146 0 611 0 955 611 198 146)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth)))
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 19
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.18
Median total errors in population: 6
Error averages by case: (0.045 0.802 0.854 1.0 0.389 1.0 0.045 0.389 0.802 0.854)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 17.773
Average program size in population (points): 24.322
Average percent parens in population: 0.261
Minimum age in population: 117.3254974657667
Maximum age in population: 121.5059021368694
Average age in population: 119.643015704072
Median age in population: 119.7143293904864
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 27882189
--- Timings ---
Current time: 1559582869352 milliseconds
Total Time:         204.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.8 seconds, 74.9%
Fitness Testing:     32.8 seconds, 16.1%
Report:              18.4 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_dup_items integer_max boolean_pop integer_gte exec_s () () ())))
Lexicase best errors: [1 0 0 1 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_dup_items integer_max boolean_pop integer_gte exec_s () () ())))
Zero cases best errors: [1 0 0 1 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 311 311 312 312 320 311 320 313 1000)
Population mean number of elite cases: 4.51
Count of perfect (error zero) individuals by case: (0 311 311 312 312 320 311 320 313 0)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*range} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte})
Best program: (integer_mult exec_do*range () in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_do*range (integer_dup_items integer_max) boolean_pop integer_lte)
Errors: [1 0 0 1 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.49
Median total errors in population: 7
Error averages by case: (1.0 0.689 0.689 0.688 0.688 0.68 0.689 0.68 0.687 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 18.703
Average program size in population (points): 25.943
Average percent parens in population: 0.268
Minimum age in population: 118.4367612205869
Maximum age in population: 123.1807897184767
Average age in population: 121.1202843706027
Median age in population: 121.1661759495109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 28121353
--- Timings ---
Current time: 1559582872041 milliseconds
Total Time:         207.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.1 seconds, 74.9%
Fitness Testing:     33.0 seconds, 15.9%
Report:              18.9 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_yank boolean_pop)))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 23
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_shove () exec_shove (integer_lte boolean_or) exec_shove (integer_yank boolean_pop)))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 23
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (356 350 352 952 247 1000 355 247 247 1000)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (356 350 352 952 247 0 355 247 247 0)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_swap boolean_invert_first_then_and boolean_flush in1 in2 print_integer integer_stackdepth integer_pop exec_do*times (exec_shove (exec_shove () exec_shove (integer_lte))))
Errors: [1 1 1 0 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 18
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.894
Median total errors in population: 7
Error averages by case: (0.644 0.65 0.648 0.048 0.753 1.0 0.645 0.753 0.753 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 18.543
Average program size in population (points): 25.777
Average percent parens in population: 0.269
Minimum age in population: 120.2289578233616
Maximum age in population: 124.3644180372252
Average age in population: 122.5833922786245
Median age in population: 122.6527623075913
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 28363075
--- Timings ---
Current time: 1559582874994 milliseconds
Total Time:         209.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       157.5 seconds, 75.0%
Fitness Testing:     33.3 seconds, 15.9%
Report:              19.0 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth) in1 in2 in3 print_integer exec_yankdup integer_pop exec_s () () ())
Lexicase best errors: [1 0 1 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth) in1 in2 in3 print_integer exec_yankdup integer_pop exec_s () () ())
Zero cases best errors: [1 0 1 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 255 1000 1000 255 1000 274 255 255 961)
Population mean number of elite cases: 5.53
Count of perfect (error zero) individuals by case: (274 255 0 0 255 0 274 255 255 961)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (integer_add exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor integer_inc exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte boolean_flush integer_lte exec_s (integer_lte boolean_frominteger exec_stackdepth boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (integer_pop exec_dup (integer_shove) integer_sub exec_s_when_autoconstructing (exec_yank) (exec_s_when_autoconstructing () () ()) ()) ()) () ()) () ()) () ()))
Errors: [1 0 1 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 58
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 7.471
Median total errors in population: 7
Error averages by case: (0.726 0.745 1.0 1.0 0.745 1.0 0.726 0.745 0.745 0.039)
Error minima by case: (0 0 1 1 0 1 0 0 0 0)
Average genome size in population (length): 17.602
Average program size in population (points): 24.126
Average percent parens in population: 0.260
Minimum age in population: 121.2289578233616
Maximum age in population: 125.8600028549267
Average age in population: 124.0580478095287
Median age in population: 124.1054706390302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 28584337
--- Timings ---
Current time: 1559582877885 milliseconds
Total Time:         212.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.6 seconds, 75.1%
Fitness Testing:     33.6 seconds, 15.8%
Report:              19.3 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 2, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap boolean_swap exec_do*range () boolean_and in1 integer_add exec_k_when_autoconstructing (print_integer integer_stackdepth exec_shove () integer_stackdepth integer_lte) ())
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 2, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap boolean_swap exec_do*range () boolean_and in1 integer_add exec_k_when_autoconstructing (print_integer integer_stackdepth exec_shove () integer_stackdepth integer_lte) ())
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 1000 293 293 1 657 949 293 656 293)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (294 0 293 293 1 657 949 293 656 293)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range (integer_eq in1 exec_empty) print_integer integer_stackdepth integer_pop boolean_invert_second_then_and exec_shove (exec_shove () exec_shove (integer_lte exec_shove () exec_shove () integer_max boolean_pop)))
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 17
Size: 24
Percent parens: 0.292
--- Population Statistics ---
Average total errors in population: 6.271
Median total errors in population: 7
Error averages by case: (0.706 1.0 0.707 0.707 0.999 0.343 0.051 0.707 0.344 0.707)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.103
Average program size in population (points): 26.697
Average percent parens in population: 0.271
Minimum age in population: 122.2289578233616
Maximum age in population: 127.6067927192732
Average age in population: 125.5613456809717
Median age in population: 125.6464735930032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 28879925
--- Timings ---
Current time: 1559582880286 milliseconds
Total Time:         215.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.6 seconds, 75.0%
Fitness Testing:     33.9 seconds, 15.7%
Report:              19.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap boolean_swap exec_do*range () boolean_and integer_stackdepth in1 in2 print_integer integer_stackdepth exec_dup_items boolean_xor boolean_frominteger exec_shove () exec_shove (integer_lte))
Lexicase best errors: [1 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap boolean_swap exec_do*range () boolean_and integer_stackdepth in1 in2 print_integer integer_stackdepth exec_dup_items boolean_xor boolean_frominteger exec_shove () exec_shove (integer_lte))
Zero cases best errors: [1 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 134 246 134 580 714 1000 134 580 580)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (247 134 246 134 580 714 0 134 580 580)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap boolean_swap exec_do*range () integer_stackdepth in1 print_integer integer_stackdepth integer_pop exec_flush print_integer exec_shove () integer_max boolean_pop)
Errors: [1 1 1 1 0 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 13
Size: 16
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.651
Median total errors in population: 6
Error averages by case: (0.753 0.866 0.754 0.866 0.42 0.286 1.0 0.866 0.42 0.42)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 17.934
Average program size in population (points): 24.772
Average percent parens in population: 0.265
Minimum age in population: 123.2289578233616
Maximum age in population: 128.9134726016263
Average age in population: 127.1234600470889
Median age in population: 127.2173135542522
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 29098010
--- Timings ---
Current time: 1559582882783 milliseconds
Total Time:         217.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.7 seconds, 75.1%
Fitness Testing:     34.1 seconds, 15.7%
Report:              20.0 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_shove) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_pop)))
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_shove) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_pop)))
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (386 969 386 207 969 207 374 207 759 208)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (386 969 386 207 969 207 374 207 759 208)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 2, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_pop})
Best program: (boolean_swap exec_do*range () integer_eq in1 exec_empty integer_add exec_do*range (integer_stackdepth in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max integer_eq exec_stackdepth) boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (exec_dup_items) (boolean_pop)))
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 34
Percent parens: 0.206
--- Population Statistics ---
Average total errors in population: 5.328
Median total errors in population: 5
Error averages by case: (0.614 0.031 0.614 0.793 0.031 0.793 0.626 0.793 0.241 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.414
Average program size in population (points): 22.393
Average percent parens in population: 0.255
Minimum age in population: 125.434124432045
Maximum age in population: 130.5305600100259
Average age in population: 128.7223372476145
Median age in population: 128.8134040651171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 29294459
--- Timings ---
Current time: 1559582885332 milliseconds
Total Time:         220.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.5 seconds, 75.2%
Fitness Testing:     34.3 seconds, 15.6%
Report:              20.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth exec_dup_items boolean_xor boolean_frominteger exec_shove () exec_shove (integer_lte))
Lexicase best errors: [1 0 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 print_integer integer_stackdepth exec_dup_items boolean_xor boolean_frominteger exec_shove () exec_shove (integer_lte))
Zero cases best errors: [1 0 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (490 959 314 490 155 1000 155 314 314 155)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (490 959 314 490 155 0 155 314 314 155)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction in1} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte})
Best program: (boolean_swap boolean_invert_first_then_and boolean_flush in1 integer_yank in1 exec_empty print_integer integer_stackdepth integer_pop integer_lte)
Errors: [1 0 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 11
Size: 12
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 6.654
Median total errors in population: 7
Error averages by case: (0.51 0.041 0.686 0.51 0.845 1.0 0.845 0.686 0.686 0.845)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 17.621
Average program size in population (points): 24.244
Average percent parens in population: 0.259
Minimum age in population: 127.2025460140913
Maximum age in population: 132.2063224120247
Average age in population: 130.1525163748926
Median age in population: 130.2182968649771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 29538723
--- Timings ---
Current time: 1559582887754 milliseconds
Total Time:         222.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.5 seconds, 75.2%
Fitness Testing:     34.6 seconds, 15.5%
Report:              20.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range (integer_div integer_rot boolean_shove) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_pop)))
Lexicase best errors: [0 1 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range (integer_div integer_rot boolean_shove) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_pop)))
Zero cases best errors: [0 1 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 372 356 725 1000 232 232 232 370 1000)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (232 372 356 725 0 232 232 232 370 0)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_empty})
Best program: (boolean_swap boolean_flush exec_s () (integer_pop integer_stackdepth integer_div exec_do*range (integer_stackdepth) integer_dup boolean_dup) () in3 print_integer exec_shove (integer_max boolean_pop exec_stackdepth exec_s (integer_lte integer_empty) () ()))
Errors: [0 1 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.249
Median total errors in population: 7
Error averages by case: (0.768 0.628 0.644 0.275 1.0 0.768 0.768 0.768 0.63 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 16.197
Average program size in population (points): 21.939
Average percent parens in population: 0.251
Minimum age in population: 128.3577201734652
Maximum age in population: 133.5223621035574
Average age in population: 131.6926197161247
Median age in population: 131.8123983435268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 190
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 29727698
--- Timings ---
Current time: 1559582890551 milliseconds
Total Time:         225.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.9 seconds, 75.3%
Fitness Testing:     34.8 seconds, 15.4%
Report:              20.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Smallest problem report - generation 89
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap boolean_swap integer_stackdepth in3 print_integer integer_stackdepth integer_pop boolean_xor integer_div exec_do*range (integer_max integer_sub exec_stackdepth exec_s (integer_lte) (exec_s (integer_lte) () ()) ()))
Lexicase best errors: [1 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap boolean_swap integer_stackdepth in3 print_integer integer_stackdepth integer_pop boolean_xor integer_div exec_do*range (integer_max integer_sub exec_stackdepth exec_s (integer_lte) (exec_s (integer_lte) () ()) ()))
Zero cases best errors: [1 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 3 1000 930 463 3 467 1000 464 460)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (3 3 0 930 463 3 467 0 464 460)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s () (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth) () ()) ())))
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.207
Median total errors in population: 8
Error averages by case: (0.997 0.997 1.0 0.07 0.537 0.997 0.533 1.0 0.536 0.54)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 23.542
Average program size in population (points): 33.801
Average percent parens in population: 0.289
Minimum age in population: 130.39769781546
Maximum age in population: 134.8992895388595
Average age in population: 132.8460899014016
Median age in population: 132.9853162349326
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 338
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 350
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 29973155
--- Timings ---
Current time: 1559582893678 milliseconds
Total Time:         228.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.2 seconds, 75.4%
Fitness Testing:     35.1 seconds, 15.4%
Report:              20.9 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Smallest problem report - generation 90
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 integer_shove print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ()))))))
Lexicase best errors: [0 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 integer_shove print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ()))))))
Zero cases best errors: [0 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 393 139 667 139 1000 1000 139 382 1000)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (138 393 139 667 139 0 0 139 382 0)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) in3 integer_shove print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer exec_when (integer_pop integer_min exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ()))))))
Errors: [0 1 0 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 8.003
Median total errors in population: 8
Error averages by case: (0.862 0.607 0.861 0.333 0.861 1.0 1.0 0.861 0.618 1.0)
Error minima by case: (0 0 0 0 0 1 1 0 0 1)
Average genome size in population (length): 22.795
Average program size in population (points): 32.44
Average percent parens in population: 0.282
Minimum age in population: 131.7165524954168
Maximum age in population: 136.0530813092489
Average age in population: 134.239373970526
Median age in population: 134.2472754983449
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 30237196
--- Timings ---
Current time: 1559582895973 milliseconds
Total Time:         231.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.1 seconds, 75.3%
Fitness Testing:     35.4 seconds, 15.3%
Report:              21.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Smallest problem report - generation 91
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer)))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer)))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (609 142 1 22 610 920 608 1 1 161)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (609 142 1 22 610 920 608 1 1 161)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ()))))))
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 37
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 6.925
Median total errors in population: 6
Error averages by case: (0.391 0.858 0.999 0.978 0.39 0.08 0.392 0.999 0.999 0.839)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.674
Average program size in population (points): 35.591
Average percent parens in population: 0.296
Minimum age in population: 133.2861685048181
Maximum age in population: 137.6458024610847
Average age in population: 135.7475762294795
Median age in population: 135.8400417292652
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 246
Genome diversity (% unique genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 30464065
--- Timings ---
Current time: 1559582898826 milliseconds
Total Time:         233.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.5 seconds, 75.4%
Fitness Testing:     35.6 seconds, 15.2%
Report:              21.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_swap boolean_invert_first_then_and boolean_flush in1 in2 in3 print_integer integer_max integer_pop boolean_xor exec_shove ())
Lexicase best errors: [1 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_swap boolean_invert_first_then_and boolean_flush in1 in2 in3 print_integer integer_max integer_pop boolean_xor exec_shove ())
Zero cases best errors: [1 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 109 110 328 480 109 117 6 371 109)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (116 109 110 328 480 109 117 6 371 109)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_add} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_max} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Best program: (integer_add exec_do*range () integer_stackdepth integer_max in2 in3 print_integer integer_stackdepth integer_pop boolean_xor integer_inc exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ())))) () ()))
Errors: [1 0 0 1 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 47
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 8.145
Median total errors in population: 8
Error averages by case: (0.884 0.891 0.89 0.672 0.52 0.891 0.883 0.994 0.629 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.821
Average program size in population (points): 37.72
Average percent parens in population: 0.309
Minimum age in population: 135.1044577297756
Maximum age in population: 138.8224796251238
Average age in population: 137.4308091894165
Median age in population: 137.4269461951905
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.387
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.368
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 30717814
--- Timings ---
Current time: 1559582901618 milliseconds
Total Time:         236.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.4 seconds, 75.5%
Fitness Testing:     35.9 seconds, 15.2%
Report:              21.9 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Smallest problem report - generation 93
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup})
Lexicase best program: (boolean_swap boolean_xor integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_yankdup))
Lexicase best errors: [0 0 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_yankdup})
Zero cases best program: (boolean_swap boolean_xor integer_stackdepth in1 in2 in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove () exec_shove (integer_yankdup))
Zero cases best errors: [0 0 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (390 390 71 390 941 340 392 367 124 390)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (390 390 71 390 941 340 392 367 124 390)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 boolean_swap boolean_xor) integer_stackdepth in1 in2 in3 print_integer integer_stackdepth in2 boolean_xor boolean_frominteger boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove (boolean_frominteger exec_stackdepth) integer_shove exec_do*times (boolean_invert_second_then_and integer_inc exec_swap (integer_lte) ())) () ()) () ())
Errors: [0 0 1 0 0 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.205
Median total errors in population: 7
Error averages by case: (0.61 0.61 0.929 0.61 0.059 0.66 0.608 0.633 0.876 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.808
Average program size in population (points): 34.462
Average percent parens in population: 0.299
Minimum age in population: 136.4146691030826
Maximum age in population: 140.5940359935433
Average age in population: 138.9932920213027
Median age in population: 139.0467870064092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.412
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 30981000
--- Timings ---
Current time: 1559582904110 milliseconds
Total Time:         239.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.3 seconds, 75.4%
Fitness Testing:     36.2 seconds, 15.1%
Report:              22.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Smallest problem report - generation 94
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range (integer_add in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop integer_stackdepth integer_lte exec_shove () exec_shove (integer_max boolean_pop))))
Lexicase best errors: [1 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range (integer_add in1 in2) in3 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max boolean_pop integer_stackdepth integer_lte exec_shove () exec_shove (integer_max boolean_pop))))
Zero cases best errors: [1 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 140 135 135 525 140 525 525 151 954)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (138 140 135 135 525 140 525 525 151 954)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 in2 in3 print_integer integer_stackdepth exec_dup_items boolean_xor boolean_frominteger exec_shove () exec_shove (integer_lte))
Errors: [1 1 1 1 0 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 14
Size: 18
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.632
Median total errors in population: 6
Error averages by case: (0.862 0.86 0.865 0.865 0.475 0.86 0.475 0.475 0.849 0.046)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.591
Average program size in population (points): 31.359
Average percent parens in population: 0.300
Minimum age in population: 137.491728243034
Maximum age in population: 142.1359594965768
Average age in population: 140.4270886661881
Median age in population: 140.5170723334135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 31221122
--- Timings ---
Current time: 1559582906570 milliseconds
Total Time:         241.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.3 seconds, 75.5%
Fitness Testing:     36.5 seconds, 15.1%
Report:              22.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Smallest problem report - generation 95
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (boolean_dup_items exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ())))))))
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (boolean_dup_items exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ())))))))
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 325 319 319 325 943 305 207 92 92)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (304 325 319 319 325 943 305 207 92 92)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction -16} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_shove})
Best program: (boolean_swap integer_flush in1 boolean_swap exec_y_when_autoconstructing (print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (integer_max -16 exec_stackdepth integer_inc) exec_shove ())))
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 21
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.769
Median total errors in population: 7
Error averages by case: (0.696 0.675 0.681 0.681 0.675 0.057 0.695 0.793 0.908 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.206
Average program size in population (points): 32.531
Average percent parens in population: 0.306
Minimum age in population: 138.9637066715089
Maximum age in population: 143.8564588772578
Average age in population: 141.9398824025031
Median age in population: 142.0149125052623
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 31446679
--- Timings ---
Current time: 1559582909025 milliseconds
Total Time:         244.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.4 seconds, 75.5%
Fitness Testing:     36.8 seconds, 15.1%
Report:              22.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Smallest problem report - generation 96
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (exec_do*range (exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ())) () ()))))))
Lexicase best errors: [0 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 38
Percent parens: 0.395
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (exec_do*range (exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ())) () ()))))))
Zero cases best errors: [0 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 38
Percent parens: 0.395
--- Lexicase Population Statistics ---
Count of elite individuals by case: (438 438 943 439 208 203 202 89 940 438)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (438 438 943 439 208 203 202 89 940 438)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_lte})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove (exec_shove (exec_do*range (integer_max boolean_pop exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (boolean_dup_items exec_s (integer_lte exec_shove () integer_stackdepth integer_lte) () ()) () ())))))))
Errors: [0 0 0 0 1 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 5.662
Median total errors in population: 6
Error averages by case: (0.562 0.562 0.057 0.561 0.792 0.797 0.798 0.911 0.06 0.562)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.064
Average program size in population (points): 32.599
Average percent parens in population: 0.312
Minimum age in population: 140.4969786747057
Maximum age in population: 145.3180204519916
Average age in population: 143.4388225465332
Median age in population: 143.4975798850399
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 31671879
--- Timings ---
Current time: 1559582911688 milliseconds
Total Time:         246.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.6 seconds, 75.6%
Fitness Testing:     37.0 seconds, 15.0%
Report:              23.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Smallest problem report - generation 97
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 89} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_swap boolean_invert_first_then_and boolean_swap boolean_xor integer_stackdepth in1 in2 boolean_and print_integer integer_stackdepth 89 boolean_swap boolean_frominteger boolean_pop exec_stackdepth exec_s (exec_y_when_autoconstructing (exec_s (integer_lte exec_shove (exec_if (exec_stackdepth) (boolean_eq exec_do*times (boolean_invert_second_then_and integer_inc exec_swap (integer_pop) ())))) () ())) () ())
Lexicase best errors: [0 0 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 89} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_swap boolean_invert_first_then_and boolean_swap boolean_xor integer_stackdepth in1 in2 boolean_and print_integer integer_stackdepth 89 boolean_swap boolean_frominteger boolean_pop exec_stackdepth exec_s (exec_y_when_autoconstructing (exec_s (integer_lte exec_shove (exec_if (exec_stackdepth) (boolean_eq exec_do*times (boolean_invert_second_then_and integer_inc exec_swap (integer_pop) ())))) () ())) () ())
Zero cases best errors: [0 0 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 116 954 116 227 238 116 122 486 227)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (116 116 954 116 227 238 116 122 486 227)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_rot} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max})
Best program: (boolean_swap exec_do*range (integer_stackdepth exec_rot (in2) () (in3 integer_shove) print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer exec_when (integer_pop integer_yankdup integer_flush exec_shove (exec_do*range (integer_max))))))
Errors: [0 0 0 0 1 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 29
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 7.282
Median total errors in population: 8
Error averages by case: (0.884 0.884 0.046 0.884 0.773 0.762 0.884 0.878 0.514 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.746
Average program size in population (points): 31.995
Average percent parens in population: 0.308
Minimum age in population: 142.0142739189383
Maximum age in population: 146.8558927559291
Average age in population: 144.9049754688199
Median age in population: 145.0068089883942
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 31887558
--- Timings ---
Current time: 1559582914076 milliseconds
Total Time:         249.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.6 seconds, 75.7%
Fitness Testing:     37.3 seconds, 15.0%
Report:              23.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Smallest problem report - generation 98
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_shove) in3 integer_shove print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove ())))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 22
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 2, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_shove) in3 integer_shove print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (print_integer exec_when (integer_pop boolean_xor exec_shove ())))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 22
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 102 218 514 515 103 103 953 953 631)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (102 102 218 514 515 103 103 953 953 631)
Population mean number of perfect (error zero) cases: 4.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor})
Best program: (boolean_swap exec_do*range (integer_stackdepth in1 in2) exec_shove (print_integer exec_when (integer_pop boolean_xor)))
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.806
Median total errors in population: 5
Error averages by case: (0.898 0.898 0.782 0.486 0.485 0.897 0.897 0.047 0.047 0.369)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.495
Average program size in population (points): 33.286
Average percent parens in population: 0.316
Minimum age in population: 143.6112682792181
Maximum age in population: 148.3235379685457
Average age in population: 146.4143005546404
Median age in population: 146.4619962828273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 32112023
--- Timings ---
Current time: 1559582916539 milliseconds
Total Time:         251.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.6 seconds, 75.8%
Fitness Testing:     37.5 seconds, 14.9%
Report:              23.4 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Smallest problem report - generation 99
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 82                 
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: 2                  
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 94                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 94                 
Correct output: 5                   | Program output: 55                 
Correct output: 10                  | Program output: 92                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 99                 
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 37                 
Correct output: 4                   | Program output: 96                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 46                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 93                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: 59                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: 95                 
Correct output: -92                 | Program output: 0                  
Correct output: -51                 | Program output: 5                  
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 70                 
Correct output: -96                 | Program output: -31                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: 80                 
Correct output: -85                 | Program output: 12                 
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: 83                 
Correct output: -25                 | Program output: 82                 
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -40                
Correct output: -65                 | Program output: -36                
Correct output: -74                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 82                 
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: 100                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: 55                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 91                 
Correct output: -40                 | Program output: -21                
Correct output: -58                 | Program output: 98                 
Correct output: -87                 | Program output: -38                
Correct output: -92                 | Program output: 84                 
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: 72                 
Correct output: -28                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: 6                  
Correct output: -58                 | Program output: 39                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: 17                 
Correct output: -59                 | Program output: 83                 
Correct output: -8                  | Program output: 57                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: 10                 
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 27                 
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_swap exec_do*range () integer_eq in1 exec_do*range (integer_stackdepth in1 in2) in3 print_integer boolean_dup_items integer_eq boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth) boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (exec_dup_items boolean_pop) ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_swap exec_do*range () integer_eq in1 exec_do*range (integer_stackdepth in1 in2) in3 print_integer boolean_dup_items integer_eq boolean_xor exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth) boolean_eq integer_dec boolean_invert_second_then_and integer_inc exec_swap (exec_dup_items boolean_pop) ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 2 1 2 115 455 115 455 455 115)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (114 2 1 2 115 455 115 455 455 115)
Population mean number of perfect (error zero) cases: 1.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 2, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (integer_max boolean_swap exec_do*range () in2 in3 print_integer integer_max integer_pop integer_shove print_integer integer_stackdepth integer_pop boolean_frominteger exec_shove (integer_shove exec_when (integer_pop boolean_xor exec_s (integer_lte exec_shove ()) () ())))
Errors: [0 1 1 1 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 8.171
Median total errors in population: 7
Error averages by case: (0.886 0.998 0.999 0.998 0.885 0.545 0.885 0.545 0.545 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.557
Average program size in population (points): 31.899
Average percent parens in population: 0.311
Minimum age in population: 145.332748899975
Maximum age in population: 149.9213245976114
Average age in population: 147.9263343524084
Median age in population: 147.9985681696529
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 32338128
--- Timings ---
Current time: 1559582918977 milliseconds
Total Time:         254.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.6 seconds, 75.8%
Fitness Testing:     37.8 seconds, 14.9%
Report:              23.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Smallest problem report - generation 100
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: 67                 
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 54                 
Correct output: 5                   | Program output: 29                 
Correct output: 10                  | Program output: 45                 
Correct output: 36                  | Program output: 41                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 51                 
Correct output: 16                  | Program output: 39                 
Correct output: 27                  | Program output: 89                 
Correct output: 4                   | Program output: 71                 
Correct output: 32                  | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 40                 
Correct output: 1                   | Program output: 83                 
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 23                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -2                 
Correct output: -52                 | Program output: 36                 
Correct output: -7                  | Program output: 47                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: 80                 
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: 43                 
Correct output: -96                 | Program output: -89                
Correct output: 5                   | Program output: 95                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: -45                
Correct output: -85                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: 83                 
Correct output: 34                  | Program output: 83                 
Correct output: -51                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: 48                 
Correct output: -65                 | Program output: -2                 
Correct output: -74                 | Program output: -4                 
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -72                
Correct output: -66                 | Program output: 69                 
Correct output: -96                 | Program output: -24                
Correct output: -96                 | Program output: -84                
Correct output: -90                 | Program output: 56                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -34                
Correct output: -87                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 41                 
Correct output: -63                 | Program output: 39                 
Correct output: -58                 | Program output: 1                  
Correct output: -28                 | Program output: 25                 
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 6                  
Correct output: -20                 | Program output: 99                 
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -1                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: 1                  
Correct output: -90                 | Program output: -63                
Correct output: -96                 | Program output: 42                 
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 in2)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 in2)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (401 2 266 551 2 267 282 952 268 402)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (401 2 266 551 2 267 282 952 268 402)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 in2)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 6.607
Median total errors in population: 7
Error averages by case: (0.599 0.998 0.734 0.449 0.998 0.733 0.718 0.048 0.732 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.294
Average program size in population (points): 32.706
Average percent parens in population: 0.309
Minimum age in population: 146.7751369038209
Maximum age in population: 151.6101632863607
Average age in population: 149.4408519618977
Median age in population: 149.4937787703459
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 32821092
--- Timings ---
Current time: 1559582921989 milliseconds
Total Time:         256.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.5 seconds, 75.8%
Fitness Testing:     38.3 seconds, 14.9%
Report:              23.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Smallest problem report - generation 101
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_dup exec_do*range (print_integer integer_stackdepth integer_pop boolean_frominteger) exec_shove (print_integer exec_shove (exec_shove ()))))
Lexicase best errors: [0 0 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 20
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_dup exec_do*range (print_integer integer_stackdepth integer_pop boolean_frominteger) exec_shove (print_integer exec_shove (exec_shove ()))))
Zero cases best errors: [0 0 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 20
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (260 264 195 728 260 194 230 231 239 442)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (260 264 195 728 260 194 230 231 239 442)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (boolean_swap exec_do*range () integer_stackdepth in1 boolean_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Errors: [0 0 1 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 37
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.957
Median total errors in population: 7
Error averages by case: (0.74 0.736 0.805 0.272 0.74 0.806 0.77 0.769 0.761 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.78
Average program size in population (points): 36.876
Average percent parens in population: 0.326
Minimum age in population: 148.555425835713
Maximum age in population: 152.4005874573151
Average age in population: 150.9083512580728
Median age in population: 150.9675903911784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 33271671
--- Timings ---
Current time: 1559582924627 milliseconds
Total Time:         259.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.5 seconds, 75.7%
Fitness Testing:     38.8 seconds, 14.9%
Report:              24.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Smallest problem report - generation 102
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (integer_stackdepth in1 boolean_yankdup) print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Lexicase best errors: [1 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (integer_stackdepth in1 boolean_yankdup) print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Zero cases best errors: [1 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 211 137 137 210 871 339 137 338 338)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (184 211 137 137 210 871 339 137 338 338)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (boolean_swap boolean_swap exec_do*range () exec_if (in1 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ()))))) ())
Errors: [1 1 1 1 1 0 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 7.098
Median total errors in population: 7
Error averages by case: (0.816 0.789 0.863 0.863 0.79 0.129 0.661 0.863 0.662 0.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.201
Average program size in population (points): 34.078
Average percent parens in population: 0.315
Minimum age in population: 149.555425835713
Maximum age in population: 154.2069187072154
Average age in population: 152.5698941422771
Median age in population: 152.6063781036794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 33698724
--- Timings ---
Current time: 1559582927173 milliseconds
Total Time:         262.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.4 seconds, 75.7%
Fitness Testing:     39.2 seconds, 14.9%
Report:              24.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Smallest problem report - generation 103
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: 67                 
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 54                 
Correct output: 5                   | Program output: 29                 
Correct output: 10                  | Program output: 45                 
Correct output: 36                  | Program output: 41                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 51                 
Correct output: 16                  | Program output: 39                 
Correct output: 27                  | Program output: 89                 
Correct output: 4                   | Program output: 71                 
Correct output: 32                  | Program output: 99                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 40                 
Correct output: 1                   | Program output: 83                 
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 23                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: 96                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -2                 
Correct output: -52                 | Program output: 36                 
Correct output: -7                  | Program output: 47                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: 28                 
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: 80                 
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: 43                 
Correct output: -96                 | Program output: -89                
Correct output: 5                   | Program output: 95                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: -45                
Correct output: -85                 | Program output: 85                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: 83                 
Correct output: 34                  | Program output: 83                 
Correct output: -51                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: 48                 
Correct output: -65                 | Program output: -2                 
Correct output: -74                 | Program output: -4                 
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -72                
Correct output: -66                 | Program output: 69                 
Correct output: -96                 | Program output: -24                
Correct output: -96                 | Program output: -84                
Correct output: -90                 | Program output: 56                 
Correct output: -6                  | Program output: 15                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -34                
Correct output: -87                 | Program output: 15                 
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 41                 
Correct output: -63                 | Program output: 39                 
Correct output: -58                 | Program output: 1                  
Correct output: -28                 | Program output: 25                 
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 6                  
Correct output: -20                 | Program output: 99                 
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -1                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: 1                  
Correct output: -90                 | Program output: -63                
Correct output: -96                 | Program output: 42                 
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: 23                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 in2)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Lexicase best errors: [1 0 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 in2)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Zero cases best errors: [1 0 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 97 328 97 217 217 97 217 97 303)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (328 97 328 97 217 217 97 217 97 303)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 in2)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_s_when_autoconstructing (exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ()) () ())))))
Errors: [1 0 1 0 1 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 45
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 8.002
Median total errors in population: 8
Error averages by case: (0.672 0.903 0.672 0.903 0.783 0.783 0.903 0.783 0.903 0.697)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.867
Average program size in population (points): 32.52
Average percent parens in population: 0.323
Minimum age in population: 151.7422733557857
Maximum age in population: 155.6595248533463
Average age in population: 154.0244421886227
Median age in population: 154.0819291653623
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 34053762
--- Timings ---
Current time: 1559582930388 milliseconds
Total Time:         265.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.6 seconds, 75.7%
Fitness Testing:     39.6 seconds, 14.9%
Report:              24.7 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Smallest problem report - generation 104
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 86                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 98                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 88                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 52                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: 77                 
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 97                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 77                 
Correct output: -11                 | Program output: 72                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 94                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 61                 
Correct output: 20                  | Program output: 96                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: 81                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 91                 
Correct output: -51                 | Program output: 54                 
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: 95                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 75                 
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: 95                 
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 73                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: 41                 
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 43                 
Correct output: -63                 | Program output: 77                 
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: 12                 
Correct output: -20                 | Program output: 61                 
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: 27                 
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 92                 
Correct output: -76                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap boolean_swap exec_do*range ()) integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte) () ()) () ())))))
Lexicase best errors: [0 1 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap boolean_swap exec_do*range ()) integer_stackdepth in1 in2 print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte) () ()) () ())))))
Zero cases best errors: [0 1 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 104 198 197 377 197 375 104 376 251)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (196 104 198 197 377 197 375 104 376 251)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor})
Best program: (in2 integer_swap print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (exec_shove (exec_do*range (boolean_xor)))))
Errors: [0 1 0 0 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 11
Size: 16
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.625
Median total errors in population: 7
Error averages by case: (0.804 0.896 0.802 0.803 0.623 0.803 0.625 0.896 0.624 0.749)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.361
Average program size in population (points): 34.329
Average percent parens in population: 0.315
Minimum age in population: 152.8005139890015
Maximum age in population: 157.3202170828564
Average age in population: 155.5247868185709
Median age in population: 155.5924703719971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 34644503
--- Timings ---
Current time: 1559582933330 milliseconds
Total Time:         268.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.8 seconds, 75.6%
Fitness Testing:     40.1 seconds, 15.0%
Report:              25.4 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Smallest problem report - generation 105
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -33                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: 82                 
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: 36                 
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 84                 
Correct output: 22                  | Program output: 79                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 23                 
Correct output: 5                   | Program output: 8                  
Correct output: 10                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 53                 
Correct output: 7                   | Program output: 60                 
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 63                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 76                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 82                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 94                 
Correct output: 20                  | Program output: 91                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 89                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -64                 | Program output: 37                 
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: 41                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -52                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -25                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: 94                 
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -19                
Correct output: -25                 | Program output: 18                 
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 94                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -8                 
Correct output: -65                 | Program output: 78                 
Correct output: -74                 | Program output: -57                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -62                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: 58                 
Correct output: -6                  | Program output: 85                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -38                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: 23                 
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: 58                 
Correct output: -88                 | Program output: 84                 
Correct output: -88                 | Program output: 98                 
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 36                 
Correct output: -90                 | Program output: -73                
Correct output: -59                 | Program output: 77                 
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 59                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 integer_gt) integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ()))))))
Lexicase best errors: [1 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 integer_gt) integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ()))))))
Zero cases best errors: [1 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 233 231 233 392 87 235 391 5 86)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (391 233 231 233 392 87 235 391 5 86)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 2, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte})
Best program: (boolean_swap exec_do*range (integer_div in1 boolean_swap exec_do*range (integer_stackdepth in4 integer_gt)) integer_swap print_integer integer_stackdepth integer_pop boolean_xor boolean_dup_times integer_stackdepth boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte) () ()) () ())))
Errors: [1 0 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 39
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 7.716
Median total errors in population: 7
Error averages by case: (0.609 0.767 0.769 0.767 0.608 0.913 0.765 0.609 0.995 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.834
Average program size in population (points): 37.003
Average percent parens in population: 0.325
Minimum age in population: 154.3190847672398
Maximum age in population: 158.8753719065723
Average age in population: 157.2227890629966
Median age in population: 157.3733487350298
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 35262545
--- Timings ---
Current time: 1559582936338 milliseconds
Total Time:         271.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.0 seconds, 75.5%
Fitness Testing:     40.8 seconds, 15.0%
Report:              25.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Smallest problem report - generation 106
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 290 290 475 475 178 291 475 475 476)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (180 290 290 475 475 178 291 475 475 476)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.395
Median total errors in population: 7
Error averages by case: (0.82 0.71 0.71 0.525 0.525 0.822 0.709 0.525 0.525 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.056
Average program size in population (points): 34.205
Average percent parens in population: 0.322
Minimum age in population: 155.6578929078883
Maximum age in population: 160.4630520323714
Average age in population: 159.0364278826063
Median age in population: 159.0767192658575
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 35528530
--- Timings ---
Current time: 1559582938861 milliseconds
Total Time:         273.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.0 seconds, 75.6%
Fitness Testing:     41.1 seconds, 15.0%
Report:              25.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Smallest problem report - generation 107
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Lexicase best errors: [0 1 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Zero cases best errors: [0 1 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (586 1000 940 927 1000 1000 946 1000 588 355)
Population mean number of elite cases: 8.34
Count of perfect (error zero) individuals by case: (586 0 940 927 0 0 946 0 588 355)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Errors: [0 1 0 0 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 5.658
Median total errors in population: 5
Error averages by case: (0.414 1.0 0.06 0.073 1.0 1.0 0.054 1.0 0.412 0.645)
Error minima by case: (0 1 0 0 1 1 0 1 0 0)
Average genome size in population (length): 28.456
Average program size in population (points): 38.853
Average percent parens in population: 0.269
Minimum age in population: 160.4387197090274
Maximum age in population: 161.8693331913404
Average age in population: 161.067831390742
Median age in population: 160.8693331913404
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 422
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 434
Syntactic diversity (% unique Push programs):	 0.314
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 35820456
--- Timings ---
Current time: 1559582941289 milliseconds
Total Time:         276.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.9 seconds, 75.6%
Fitness Testing:     41.4 seconds, 15.0%
Report:              25.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Smallest problem report - generation 108
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 46                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 59                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 38                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 46                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 92                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 71                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -46                
Correct output: -93                 | Program output: 22                 
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: 11                 
Correct output: -11                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -75                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: 45                 
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: 69                 
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: 35                 
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -89                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: -42                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: 31                 
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: 40                 
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -7                 
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (430 740 696 940 740 696 740 740 957 698)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (430 740 696 940 740 696 740 740 957 698)
Population mean number of perfect (error zero) cases: 7.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Best program: (in2 integer_swap integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (exec_do*range (boolean_dup boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth exec_s (integer_lte exec_s (integer_lte exec_shove ()) () ()) () ())))))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 2.623
Median total errors in population: 3
Error averages by case: (0.57 0.26 0.304 0.06 0.26 0.304 0.26 0.26 0.043 0.302)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.206
Average program size in population (points): 38.984
Average percent parens in population: 0.252
Minimum age in population: 161.4387197090274
Maximum age in population: 163.7616798207621
Average age in population: 162.458306527167
Median age in population: 162.5463730796056
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 283
Syntactic diversity (% unique Push programs):	 0.425
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 36129247
--- Timings ---
Current time: 1559582943729 milliseconds
Total Time:         278.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.8 seconds, 75.6%
Fitness Testing:     41.7 seconds, 15.0%
Report:              26.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Smallest problem report - generation 109
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 20                 
Correct output: 1                   | Program output: 1                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: 83                 
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: -96                
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 10                 
Correct output: 22                  | Program output: 70                 
Correct output: 52                  | Program output: 61                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 51                 
Correct output: 5                   | Program output: 5                  
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 16                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 80                 
Correct output: 32                  | Program output: 32                 
Correct output: 30                  | Program output: 45                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 38                 
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 33                 
Correct output: 18                  | Program output: 49                 
Correct output: 51                  | Program output: 53                 
Correct output: -40                 | Program output: 5                  
Correct output: -81                 | Program output: 31                 
Correct output: -93                 | Program output: -28                
Correct output: -64                 | Program output: -64                
Correct output: -52                 | Program output: -52                
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: -44                
Correct output: -11                 | Program output: -11                
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -48                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -1                 
Correct output: -73                 | Program output: 9                  
Correct output: -96                 | Program output: -82                
Correct output: 5                   | Program output: 48                 
Correct output: 20                  | Program output: 36                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -52                
Correct output: -94                 | Program output: -13                
Correct output: -95                 | Program output: -90                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 54                 
Correct output: -51                 | Program output: -36                
Correct output: -84                 | Program output: -75                
Correct output: -19                 | Program output: -14                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -34                
Correct output: -66                 | Program output: -40                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: 56                 
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -64                
Correct output: -90                 | Program output: 31                 
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: 92                 
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -88                
Correct output: 4                   | Program output: 4                  
Correct output: -63                 | Program output: -63                
Correct output: -58                 | Program output: -25                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -20                
Correct output: -58                 | Program output: 33                 
Correct output: -28                 | Program output: -28                
Correct output: -20                 | Program output: -20                
Correct output: -74                 | Program output: -74                
Correct output: -90                 | Program output: -85                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -96                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -96                 | Program output: 6                  
Correct output: -20                 | Program output: 18                 
Correct output: -76                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Lexicase best program: (integer_max boolean_swap in3 integer_swap boolean_swap exec_do*range (integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (integer_lte exec_s (integer_lte exec_shove ()) () ()))))))
Lexicase best errors: [1 0 0 0 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_shove})
Zero cases best program: (integer_max boolean_swap in3 integer_swap boolean_swap exec_do*range (integer_div in1 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (integer_lte exec_s (integer_lte exec_shove ()) () ()))))))
Zero cases best errors: [1 0 0 0 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 763 297 296 962 1 807 962 1 296)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (1 763 297 296 962 1 807 962 1 296)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth})
Best program: (integer_max boolean_swap in3 integer_swap boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor boolean_invert_second_then_and exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth))))))
Errors: [1 1 0 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 39
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.614
Median total errors in population: 6
Error averages by case: (0.999 0.237 0.703 0.704 0.038 0.999 0.193 0.038 0.999 0.704)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.305
Average program size in population (points): 38.469
Average percent parens in population: 0.265
Minimum age in population: 162.4387197090274
Maximum age in population: 165.5463730796056
Average age in population: 163.8812497952114
Median age in population: 163.9387197090274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 250
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 36435096
--- Timings ---
Current time: 1559582946687 milliseconds
Total Time:         281.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.8 seconds, 75.7%
Fitness Testing:     42.0 seconds, 14.9%
Report:              26.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Smallest problem report - generation 110
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: -76                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth})
Lexicase best program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 42
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth})
Zero cases best program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 927 306 953 658 941 953 653 653 403)
Population mean number of elite cases: 6.85
Count of perfect (error zero) individuals by case: (403 927 306 953 658 941 953 653 653 403)
Population mean number of perfect (error zero) cases: 6.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in4} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth})
Best program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 3.15
Median total errors in population: 3
Error averages by case: (0.597 0.073 0.694 0.047 0.342 0.059 0.047 0.347 0.347 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.285
Average program size in population (points): 38.958
Average percent parens in population: 0.249
Minimum age in population: 163.6001997648947
Maximum age in population: 167.1540264501839
Average age in population: 165.8528297199327
Median age in population: 165.9040264501839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 296
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.011
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 36756942
--- Timings ---
Current time: 1559582949289 milliseconds
Total Time:         284.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.8 seconds, 75.6%
Fitness Testing:     42.4 seconds, 14.9%
Report:              27.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 110
Successful program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 42


Auto-simplifying with starting size: 42
step: 0
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 500
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1000
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 1500
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2000
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 2500
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3000
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 3500
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4000
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 4500
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

step: 5000
program: (in4 integer_swap integer_div in1 boolean_swap integer_min boolean_swap exec_do*range (integer_div in2 boolean_swap integer_min integer_yankdup print_integer integer_stackdepth integer_pop boolean_xor exec_shove (integer_swap print_integer integer_stackdepth in2 boolean_xor exec_shove (exec_do*range (boolean_xor boolean_xor integer_shove exec_shove (exec_do*range (integer_max boolean_pop exec_stackdepth integer_lte boolean_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 42

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 110
Test total error for best: 221
Test mean error for best: 0.22100
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 1
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -98                 | Program output: -98                
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 5                  
Correct output: -63                 | Program output: -63                
Correct output: -98                 | Program output: -98                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -65                 | Program output: -65                
Correct output: -96                 | Program output: 50                 
Correct output: -65                 | Program output: -65                
Correct output: -32                 | Program output: -32                
Correct output: 62                  | Program output: 62                 
Correct output: -8                  | Program output: -8                 
Correct output: -1                  | Program output: -1                 
Correct output: 10                  | Program output: 37                 
Correct output: 22                  | Program output: 22                 
Correct output: 52                  | Program output: 52                 
Correct output: 4                   | Program output: 4                  
Correct output: 5                   | Program output: 5                  
Correct output: 10                  | Program output: 10                 
Correct output: 36                  | Program output: 36                 
Correct output: 5                   | Program output: 11                 
Correct output: 7                   | Program output: 7                  
Correct output: 16                  | Program output: 25                 
Correct output: 27                  | Program output: 27                 
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 74                 
Correct output: 30                  | Program output: 30                 
Correct output: 21                  | Program output: 21                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 18                  | Program output: 18                 
Correct output: 51                  | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -56                
Correct output: -52                 | Program output: 13                 
Correct output: -7                  | Program output: -7                 
Correct output: -44                 | Program output: -24                
Correct output: -11                 | Program output: 16                 
Correct output: -64                 | Program output: -64                
Correct output: -92                 | Program output: -92                
Correct output: -51                 | Program output: -51                
Correct output: -83                 | Program output: -83                
Correct output: -73                 | Program output: -73                
Correct output: -96                 | Program output: -96                
Correct output: 5                   | Program output: 5                  
Correct output: 20                  | Program output: 20                 
Correct output: -74                 | Program output: -74                
Correct output: -85                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -25                 | Program output: -25                
Correct output: 34                  | Program output: 34                 
Correct output: -51                 | Program output: -51                
Correct output: -84                 | Program output: -84                
Correct output: -19                 | Program output: -19                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
Correct output: -74                 | Program output: -74                
Correct output: -69                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -66                
Correct output: -96                 | Program output: -96                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -6                  | Program output: -6                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -40                 | Program output: -40                
Correct output: -58                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -92                 | Program output: -92                
Correct output: 4                   | Program output: 36                 
Correct output: -63                 | Program output: 12                 
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -28                
Correct output: -88                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -58                 | Program output: -58                
Correct output: -28                 | Program output: -13                
Correct output: -20                 | Program output: -11                
Correct output: -74                 | Program output: -22                
Correct output: -90                 | Program output: -90                
Correct output: -59                 | Program output: -59                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: -38                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -81                
Correct output: -96                 | Program output: -96                
Correct output: -20                 | Program output: -20                
Correct output: -76                 | Program output: -76                
;;******************************
