Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-40 -40 -33 -40] -40] [[-40 -92 -92 -92] -92] [[-91 -91 -91 -99] -99] [[25 76 76 76] 25] [[-10 -10 -10 30] -10] [[14 -86 14 14] -86] [[6 6 -80 6] -80] [[91 91 36 91] 36] [[-8 24 24 24] -8] [[1 68 1 1] 1] [(-76 -76 -76 -76) -76] [(30 30 30 30) 30] [(-66 -66 -66 -66) -66] [(-99 -99 -99 -99) -99] [(-29 -29 -29 -29) -29] [(96 30 26 10) 10] [(71 55 19 38) 19] [(19 17 25 25) 17] [(78 54 94 98) 54] [(56 37 26 84) 26] [(42 33 67 7) 7] [(5 82 79 13) 5] [(51 56 32 34) 32] [(39 15 15 55) 15] [(98 92 11 75) 11] [(85 23 94 58) 23] [(0 91 78 37) 0] [(31 19 78 94) 19] [(79 29 15 78) 15] [(60 11 38 29) 11] [(16 88 58 2) 2] [(86 71 80 39) 39] [(43 50 77 49) 43] [(41 67 4 96) 4] [(99 67 91 96) 67] [(-46 -9 72 29) -46] [(-26 40 23 37) -26] [(-22 11 61 -77) -77] [(44 -65 -83 8) -83] [(-32 -43 -3 -7) -43] [(-11 85 -35 -16) -35] [(96 10 -5 97) -5] [(84 -33 -96 -19) -96] [(13 5 -37 13) -37] [(19 26 -13 -48) -48] [(34 83 -54 -86) -86] [(-23 -69 36 94) -69] [(-5 81 -52 -29) -52] [(99 -14 96 84) -14] [(-91 -6 22 -51) -91] [(-66 -49 -31 -15) -66] [(79 23 -43 -97) -97] [(95 -66 63 -11) -66] [(97 -82 -43 75) -82] [(90 -65 -76 100) -76] [(19 77 26 90) 19] [(-12 45 19 -69) -69] [(98 50 -41 -72) -72] [(8 6 93 6) 6] [(64 -93 69 89) -93] [(-64 -93 73 -32) -93] [(-12 -20 -30 14) -30] [(-45 -11 92 -41) -45] [(23 -10 -5 -36) -36] [(3 23 86 -3) -3] [(-68 -81 -93 76) -93] [(-19 -62 96 53) -62] [(-21 -4 96 78) -21] [(-6 -53 7 -87) -87] [(43 -97 56 -67) -97] [(-97 -23 -43 5) -97] [(-65 0 -12 13) -65] [(-11 84 -80 51) -80] [(54 1 -94 -6) -94] [(4 58 -86 95) -86] [(65 50 -32 -25) -32] [(-93 81 -19 -27) -93] [(14 -19 84 -37) -37] [(61 -51 95 32) -51] [(48 44 -81 28) -81] [(-89 -55 -27 27) -89] [(-55 82 -25 24) -55] [(32 70 73 -94) -94] [(-45 39 47 21) -45] [(47 -97 -15 -5) -97] [(36 -33 97 8) -33] [(-82 -39 -40 100) -82] [(-92 47 28 -13) -92] [(-30 51 13 -64) -64] [(-4 44 16 -61) -61] [(28 91 -25 -1) -25] [(100 -7 -95 -94) -95] [(85 41 25 22) 22] [(-20 -70 -44 33) -70] [(-59 -50 87 -62) -62])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-40 -40 -33 -40] -40]
Train Case:   6 | Input/Output: [[-40 -92 -92 -92] -92]
Train Case:   7 | Input/Output: [[-91 -91 -91 -99] -99]
Train Case:   8 | Input/Output: [[25 76 76 76] 25]
Train Case:   9 | Input/Output: [[-10 -10 -10 30] -10]
Train Case:  10 | Input/Output: [[14 -86 14 14] -86]
Train Case:  11 | Input/Output: [[6 6 -80 6] -80]
Train Case:  12 | Input/Output: [[91 91 36 91] 36]
Train Case:  13 | Input/Output: [[-8 24 24 24] -8]
Train Case:  14 | Input/Output: [[1 68 1 1] 1]
Train Case:  15 | Input/Output: [(-76 -76 -76 -76) -76]
Train Case:  16 | Input/Output: [(30 30 30 30) 30]
Train Case:  17 | Input/Output: [(-66 -66 -66 -66) -66]
Train Case:  18 | Input/Output: [(-99 -99 -99 -99) -99]
Train Case:  19 | Input/Output: [(-29 -29 -29 -29) -29]
Train Case:  20 | Input/Output: [(96 30 26 10) 10]
Train Case:  21 | Input/Output: [(71 55 19 38) 19]
Train Case:  22 | Input/Output: [(19 17 25 25) 17]
Train Case:  23 | Input/Output: [(78 54 94 98) 54]
Train Case:  24 | Input/Output: [(56 37 26 84) 26]
Train Case:  25 | Input/Output: [(42 33 67 7) 7]
Train Case:  26 | Input/Output: [(5 82 79 13) 5]
Train Case:  27 | Input/Output: [(51 56 32 34) 32]
Train Case:  28 | Input/Output: [(39 15 15 55) 15]
Train Case:  29 | Input/Output: [(98 92 11 75) 11]
Train Case:  30 | Input/Output: [(85 23 94 58) 23]
Train Case:  31 | Input/Output: [(0 91 78 37) 0]
Train Case:  32 | Input/Output: [(31 19 78 94) 19]
Train Case:  33 | Input/Output: [(79 29 15 78) 15]
Train Case:  34 | Input/Output: [(60 11 38 29) 11]
Train Case:  35 | Input/Output: [(16 88 58 2) 2]
Train Case:  36 | Input/Output: [(86 71 80 39) 39]
Train Case:  37 | Input/Output: [(43 50 77 49) 43]
Train Case:  38 | Input/Output: [(41 67 4 96) 4]
Train Case:  39 | Input/Output: [(99 67 91 96) 67]
Train Case:  40 | Input/Output: [(-46 -9 72 29) -46]
Train Case:  41 | Input/Output: [(-26 40 23 37) -26]
Train Case:  42 | Input/Output: [(-22 11 61 -77) -77]
Train Case:  43 | Input/Output: [(44 -65 -83 8) -83]
Train Case:  44 | Input/Output: [(-32 -43 -3 -7) -43]
Train Case:  45 | Input/Output: [(-11 85 -35 -16) -35]
Train Case:  46 | Input/Output: [(96 10 -5 97) -5]
Train Case:  47 | Input/Output: [(84 -33 -96 -19) -96]
Train Case:  48 | Input/Output: [(13 5 -37 13) -37]
Train Case:  49 | Input/Output: [(19 26 -13 -48) -48]
Train Case:  50 | Input/Output: [(34 83 -54 -86) -86]
Train Case:  51 | Input/Output: [(-23 -69 36 94) -69]
Train Case:  52 | Input/Output: [(-5 81 -52 -29) -52]
Train Case:  53 | Input/Output: [(99 -14 96 84) -14]
Train Case:  54 | Input/Output: [(-91 -6 22 -51) -91]
Train Case:  55 | Input/Output: [(-66 -49 -31 -15) -66]
Train Case:  56 | Input/Output: [(79 23 -43 -97) -97]
Train Case:  57 | Input/Output: [(95 -66 63 -11) -66]
Train Case:  58 | Input/Output: [(97 -82 -43 75) -82]
Train Case:  59 | Input/Output: [(90 -65 -76 100) -76]
Train Case:  60 | Input/Output: [(19 77 26 90) 19]
Train Case:  61 | Input/Output: [(-12 45 19 -69) -69]
Train Case:  62 | Input/Output: [(98 50 -41 -72) -72]
Train Case:  63 | Input/Output: [(8 6 93 6) 6]
Train Case:  64 | Input/Output: [(64 -93 69 89) -93]
Train Case:  65 | Input/Output: [(-64 -93 73 -32) -93]
Train Case:  66 | Input/Output: [(-12 -20 -30 14) -30]
Train Case:  67 | Input/Output: [(-45 -11 92 -41) -45]
Train Case:  68 | Input/Output: [(23 -10 -5 -36) -36]
Train Case:  69 | Input/Output: [(3 23 86 -3) -3]
Train Case:  70 | Input/Output: [(-68 -81 -93 76) -93]
Train Case:  71 | Input/Output: [(-19 -62 96 53) -62]
Train Case:  72 | Input/Output: [(-21 -4 96 78) -21]
Train Case:  73 | Input/Output: [(-6 -53 7 -87) -87]
Train Case:  74 | Input/Output: [(43 -97 56 -67) -97]
Train Case:  75 | Input/Output: [(-97 -23 -43 5) -97]
Train Case:  76 | Input/Output: [(-65 0 -12 13) -65]
Train Case:  77 | Input/Output: [(-11 84 -80 51) -80]
Train Case:  78 | Input/Output: [(54 1 -94 -6) -94]
Train Case:  79 | Input/Output: [(4 58 -86 95) -86]
Train Case:  80 | Input/Output: [(65 50 -32 -25) -32]
Train Case:  81 | Input/Output: [(-93 81 -19 -27) -93]
Train Case:  82 | Input/Output: [(14 -19 84 -37) -37]
Train Case:  83 | Input/Output: [(61 -51 95 32) -51]
Train Case:  84 | Input/Output: [(48 44 -81 28) -81]
Train Case:  85 | Input/Output: [(-89 -55 -27 27) -89]
Train Case:  86 | Input/Output: [(-55 82 -25 24) -55]
Train Case:  87 | Input/Output: [(32 70 73 -94) -94]
Train Case:  88 | Input/Output: [(-45 39 47 21) -45]
Train Case:  89 | Input/Output: [(47 -97 -15 -5) -97]
Train Case:  90 | Input/Output: [(36 -33 97 8) -33]
Train Case:  91 | Input/Output: [(-82 -39 -40 100) -82]
Train Case:  92 | Input/Output: [(-92 47 28 -13) -92]
Train Case:  93 | Input/Output: [(-30 51 13 -64) -64]
Train Case:  94 | Input/Output: [(-4 44 16 -61) -61]
Train Case:  95 | Input/Output: [(28 91 -25 -1) -25]
Train Case:  96 | Input/Output: [(100 -7 -95 -94) -95]
Train Case:  97 | Input/Output: [(85 41 25 22) 22]
Train Case:  98 | Input/Output: [(-20 -70 -44 33) -70]
Train Case:  99 | Input/Output: [(-59 -50 87 -62) -62]
Test Case:   0 | Input/Output: [[-54 -54 -54 26] -54]
Test Case:   1 | Input/Output: [[-52 -68 -52 -52] -68]
Test Case:   2 | Input/Output: [[93 4 93 93] 4]
Test Case:   3 | Input/Output: [[58 -71 -71 -71] -71]
Test Case:   4 | Input/Output: [[65 65 1 65] 1]
Test Case:   5 | Input/Output: [[-98 -98 0 -98] -98]
Test Case:   6 | Input/Output: [[40 -61 -61 -61] -61]
Test Case:   7 | Input/Output: [[-10 49 49 49] -10]
Test Case:   8 | Input/Output: [[-24 25 -24 -24] -24]
Test Case:   9 | Input/Output: [[78 84 78 78] 78]
Test Case:  10 | Input/Output: [[69 69 69 -26] -26]
Test Case:  11 | Input/Output: [[73 73 -4 73] -4]
Test Case:  12 | Input/Output: [[-60 -79 -60 -60] -79]
Test Case:  13 | Input/Output: [[16 16 16 79] 16]
Test Case:  14 | Input/Output: [[-30 -78 -30 -30] -78]
Test Case:  15 | Input/Output: [[28 28 -7 28] -7]
Test Case:  16 | Input/Output: [[6 11 11 11] 6]
Test Case:  17 | Input/Output: [[-85 -85 -85 51] -85]
Test Case:  18 | Input/Output: [[12 12 28 12] 12]
Test Case:  19 | Input/Output: [[80 80 88 80] 80]
Test Case:  20 | Input/Output: [[31 -64 31 31] -64]
Test Case:  21 | Input/Output: [[-46 -46 -94 -46] -94]
Test Case:  22 | Input/Output: [[59 59 59 16] 16]
Test Case:  23 | Input/Output: [[100 100 100 -100] -100]
Test Case:  24 | Input/Output: [[-57 -57 -57 -78] -78]
Test Case:  25 | Input/Output: [[60 60 60 40] 40]
Test Case:  26 | Input/Output: [[95 8 95 95] 8]
Test Case:  27 | Input/Output: [[55 84 55 55] 55]
Test Case:  28 | Input/Output: [[61 25 61 61] 25]
Test Case:  29 | Input/Output: [[-46 24 24 24] -46]
Test Case:  30 | Input/Output: [[17 -10 -10 -10] -10]
Test Case:  31 | Input/Output: [[-27 -61 -61 -61] -61]
Test Case:  32 | Input/Output: [[93 93 37 93] 37]
Test Case:  33 | Input/Output: [[31 31 31 -74] -74]
Test Case:  34 | Input/Output: [[8 60 8 8] 8]
Test Case:  35 | Input/Output: [[-60 -38 -38 -38] -60]
Test Case:  36 | Input/Output: [[7 50 50 50] 7]
Test Case:  37 | Input/Output: [[-95 -95 -95 -21] -95]
Test Case:  38 | Input/Output: [[87 73 87 87] 73]
Test Case:  39 | Input/Output: [[-43 -74 -74 -74] -74]
Test Case:  40 | Input/Output: [[-13 86 86 86] -13]
Test Case:  41 | Input/Output: [[47 47 47 -25] -25]
Test Case:  42 | Input/Output: [[-90 -90 -90 -32] -90]
Test Case:  43 | Input/Output: [[91 61 91 91] 61]
Test Case:  44 | Input/Output: [[74 74 74 100] 74]
Test Case:  45 | Input/Output: [[-30 -30 -30 21] -30]
Test Case:  46 | Input/Output: [[-80 -50 -80 -80] -80]
Test Case:  47 | Input/Output: [[-64 66 66 66] -64]
Test Case:  48 | Input/Output: [[-40 -40 -40 -47] -47]
Test Case:  49 | Input/Output: [[43 43 43 -90] -90]
Test Case:  50 | Input/Output: [[-85 -85 -85 -86] -86]
Test Case:  51 | Input/Output: [[51 51 51 -32] -32]
Test Case:  52 | Input/Output: [[15 98 98 98] 15]
Test Case:  53 | Input/Output: [[75 23 75 75] 23]
Test Case:  54 | Input/Output: [[-48 42 42 42] -48]
Test Case:  55 | Input/Output: [[20 20 -85 20] -85]
Test Case:  56 | Input/Output: [[23 23 -37 23] -37]
Test Case:  57 | Input/Output: [[-36 -8 -8 -8] -36]
Test Case:  58 | Input/Output: [[-50 -50 -71 -50] -71]
Test Case:  59 | Input/Output: [[88 88 88 78] 78]
Test Case:  60 | Input/Output: [[14 14 -59 14] -59]
Test Case:  61 | Input/Output: [[53 53 53 14] 14]
Test Case:  62 | Input/Output: [[85 85 85 16] 16]
Test Case:  63 | Input/Output: [[6 6 6 -3] -3]
Test Case:  64 | Input/Output: [[78 -90 78 78] -90]
Test Case:  65 | Input/Output: [[96 96 -24 96] -24]
Test Case:  66 | Input/Output: [[68 45 45 45] 45]
Test Case:  67 | Input/Output: [[-54 63 63 63] -54]
Test Case:  68 | Input/Output: [[-39 53 53 53] -39]
Test Case:  69 | Input/Output: [[71 56 56 56] 56]
Test Case:  70 | Input/Output: [[-3 -3 -3 89] -3]
Test Case:  71 | Input/Output: [[-73 -73 -47 -73] -73]
Test Case:  72 | Input/Output: [[14 14 14 -63] -63]
Test Case:  73 | Input/Output: [[-75 -75 84 -75] -75]
Test Case:  74 | Input/Output: [[-50 3 3 3] -50]
Test Case:  75 | Input/Output: [[9 9 -92 9] -92]
Test Case:  76 | Input/Output: [[-74 -74 -74 -78] -78]
Test Case:  77 | Input/Output: [[-4 -4 -39 -4] -39]
Test Case:  78 | Input/Output: [[-8 -8 -8 -81] -81]
Test Case:  79 | Input/Output: [[-6 -6 -6 -13] -13]
Test Case:  80 | Input/Output: [[24 94 24 24] 24]
Test Case:  81 | Input/Output: [[87 87 87 0] 0]
Test Case:  82 | Input/Output: [[18 18 -72 18] -72]
Test Case:  83 | Input/Output: [[-9 -2 -9 -9] -9]
Test Case:  84 | Input/Output: [[16 -67 16 16] -67]
Test Case:  85 | Input/Output: [[20 20 20 -60] -60]
Test Case:  86 | Input/Output: [[78 78 78 68] 68]
Test Case:  87 | Input/Output: [[-10 39 -10 -10] -10]
Test Case:  88 | Input/Output: [[-19 -19 63 -19] -19]
Test Case:  89 | Input/Output: [[-94 -94 93 -94] -94]
Test Case:  90 | Input/Output: [[-62 36 36 36] -62]
Test Case:  91 | Input/Output: [[3 3 3 91] 3]
Test Case:  92 | Input/Output: [[44 -34 -34 -34] -34]
Test Case:  93 | Input/Output: [[-21 -95 -95 -95] -95]
Test Case:  94 | Input/Output: [[-53 -53 56 -53] -53]
Test Case:  95 | Input/Output: [[61 -3 61 61] -3]
Test Case:  96 | Input/Output: [[-32 -92 -32 -32] -92]
Test Case:  97 | Input/Output: [[1 1 1 -41] -41]
Test Case:  98 | Input/Output: [[81 81 81 83] 81]
Test Case:  99 | Input/Output: [[-67 -54 -54 -54] -67]
Test Case: 100 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 101 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 102 | Input/Output: [(31 31 31 31) 31]
Test Case: 103 | Input/Output: [(22 22 22 22) 22]
Test Case: 104 | Input/Output: [(27 27 27 27) 27]
Test Case: 105 | Input/Output: [(63 63 63 63) 63]
Test Case: 106 | Input/Output: [(66 66 66 66) 66]
Test Case: 107 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 108 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 109 | Input/Output: [(11 11 11 11) 11]
Test Case: 110 | Input/Output: [(9 9 9 9) 9]
Test Case: 111 | Input/Output: [(66 66 66 66) 66]
Test Case: 112 | Input/Output: [(34 34 34 34) 34]
Test Case: 113 | Input/Output: [(16 16 16 16) 16]
Test Case: 114 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 115 | Input/Output: [(1 1 1 1) 1]
Test Case: 116 | Input/Output: [(78 78 78 78) 78]
Test Case: 117 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 118 | Input/Output: [(58 58 58 58) 58]
Test Case: 119 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 120 | Input/Output: [(4 4 4 4) 4]
Test Case: 121 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 122 | Input/Output: [(6 6 6 6) 6]
Test Case: 123 | Input/Output: [(91 91 91 91) 91]
Test Case: 124 | Input/Output: [(33 33 33 33) 33]
Test Case: 125 | Input/Output: [(77 77 77 77) 77]
Test Case: 126 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 127 | Input/Output: [(52 52 52 52) 52]
Test Case: 128 | Input/Output: [(35 35 35 35) 35]
Test Case: 129 | Input/Output: [(7 7 7 7) 7]
Test Case: 130 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 131 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 132 | Input/Output: [(94 94 94 94) 94]
Test Case: 133 | Input/Output: [(100 100 100 100) 100]
Test Case: 134 | Input/Output: [(45 45 45 45) 45]
Test Case: 135 | Input/Output: [(18 18 18 18) 18]
Test Case: 136 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 137 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 138 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 139 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 140 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 141 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 142 | Input/Output: [(43 43 43 43) 43]
Test Case: 143 | Input/Output: [(3 3 3 3) 3]
Test Case: 144 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 145 | Input/Output: [(93 93 93 93) 93]
Test Case: 146 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 147 | Input/Output: [(70 70 70 70) 70]
Test Case: 148 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 149 | Input/Output: [(12 12 12 12) 12]
Test Case: 150 | Input/Output: [(80 80 80 80) 80]
Test Case: 151 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 152 | Input/Output: [(87 87 87 87) 87]
Test Case: 153 | Input/Output: [(76 76 76 76) 76]
Test Case: 154 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 155 | Input/Output: [(97 97 97 97) 97]
Test Case: 156 | Input/Output: [(32 32 32 32) 32]
Test Case: 157 | Input/Output: [(9 9 9 9) 9]
Test Case: 158 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 159 | Input/Output: [(98 98 98 98) 98]
Test Case: 160 | Input/Output: [(42 42 42 42) 42]
Test Case: 161 | Input/Output: [(44 44 44 44) 44]
Test Case: 162 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 163 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 164 | Input/Output: [(25 25 25 25) 25]
Test Case: 165 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 166 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 167 | Input/Output: [(8 8 8 8) 8]
Test Case: 168 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 169 | Input/Output: [(35 35 35 35) 35]
Test Case: 170 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 171 | Input/Output: [(37 37 37 37) 37]
Test Case: 172 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 173 | Input/Output: [(51 51 51 51) 51]
Test Case: 174 | Input/Output: [(62 62 62 62) 62]
Test Case: 175 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 176 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 177 | Input/Output: [(40 40 40 40) 40]
Test Case: 178 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 179 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 180 | Input/Output: [(82 82 82 82) 82]
Test Case: 181 | Input/Output: [(70 70 70 70) 70]
Test Case: 182 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 183 | Input/Output: [(64 64 64 64) 64]
Test Case: 184 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 185 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 186 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 187 | Input/Output: [(47 47 47 47) 47]
Test Case: 188 | Input/Output: [(24 24 24 24) 24]
Test Case: 189 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 190 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 191 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 192 | Input/Output: [(84 84 84 84) 84]
Test Case: 193 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 194 | Input/Output: [(44 44 44 44) 44]
Test Case: 195 | Input/Output: [(6 6 6 6) 6]
Test Case: 196 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 197 | Input/Output: [(36 36 36 36) 36]
Test Case: 198 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 199 | Input/Output: [(67 67 67 67) 67]
Test Case: 200 | Input/Output: [(32 9 49 18) 9]
Test Case: 201 | Input/Output: [(81 74 38 21) 21]
Test Case: 202 | Input/Output: [(100 0 85 24) 0]
Test Case: 203 | Input/Output: [(12 28 53 76) 12]
Test Case: 204 | Input/Output: [(80 12 7 39) 7]
Test Case: 205 | Input/Output: [(12 7 1 32) 1]
Test Case: 206 | Input/Output: [(16 16 72 76) 16]
Test Case: 207 | Input/Output: [(9 91 75 0) 0]
Test Case: 208 | Input/Output: [(85 85 77 31) 31]
Test Case: 209 | Input/Output: [(83 84 3 45) 3]
Test Case: 210 | Input/Output: [(58 26 8 86) 8]
Test Case: 211 | Input/Output: [(71 8 4 5) 4]
Test Case: 212 | Input/Output: [(100 81 1 59) 1]
Test Case: 213 | Input/Output: [(1 44 98 4) 1]
Test Case: 214 | Input/Output: [(53 36 39 58) 36]
Test Case: 215 | Input/Output: [(80 60 100 3) 3]
Test Case: 216 | Input/Output: [(18 91 97 48) 18]
Test Case: 217 | Input/Output: [(12 28 0 70) 0]
Test Case: 218 | Input/Output: [(93 57 8 55) 8]
Test Case: 219 | Input/Output: [(77 50 81 18) 18]
Test Case: 220 | Input/Output: [(47 45 86 40) 40]
Test Case: 221 | Input/Output: [(2 59 56 89) 2]
Test Case: 222 | Input/Output: [(24 22 87 72) 22]
Test Case: 223 | Input/Output: [(100 10 77 80) 10]
Test Case: 224 | Input/Output: [(42 22 56 43) 22]
Test Case: 225 | Input/Output: [(58 4 66 34) 4]
Test Case: 226 | Input/Output: [(60 29 61 57) 29]
Test Case: 227 | Input/Output: [(63 24 21 20) 20]
Test Case: 228 | Input/Output: [(5 28 15 67) 5]
Test Case: 229 | Input/Output: [(96 71 54 3) 3]
Test Case: 230 | Input/Output: [(97 81 41 72) 41]
Test Case: 231 | Input/Output: [(37 97 70 91) 37]
Test Case: 232 | Input/Output: [(82 11 69 4) 4]
Test Case: 233 | Input/Output: [(77 67 78 94) 67]
Test Case: 234 | Input/Output: [(53 58 4 37) 4]
Test Case: 235 | Input/Output: [(62 84 54 52) 52]
Test Case: 236 | Input/Output: [(66 12 71 5) 5]
Test Case: 237 | Input/Output: [(90 96 51 63) 51]
Test Case: 238 | Input/Output: [(36 93 40 8) 8]
Test Case: 239 | Input/Output: [(70 69 54 21) 21]
Test Case: 240 | Input/Output: [(91 30 57 60) 30]
Test Case: 241 | Input/Output: [(1 59 24 62) 1]
Test Case: 242 | Input/Output: [(78 48 65 60) 48]
Test Case: 243 | Input/Output: [(62 74 72 30) 30]
Test Case: 244 | Input/Output: [(3 58 28 31) 3]
Test Case: 245 | Input/Output: [(83 86 36 38) 36]
Test Case: 246 | Input/Output: [(69 9 76 58) 9]
Test Case: 247 | Input/Output: [(29 32 60 38) 29]
Test Case: 248 | Input/Output: [(21 100 29 6) 6]
Test Case: 249 | Input/Output: [(17 23 1 31) 1]
Test Case: 250 | Input/Output: [(64 96 59 30) 30]
Test Case: 251 | Input/Output: [(84 25 96 16) 16]
Test Case: 252 | Input/Output: [(35 12 66 86) 12]
Test Case: 253 | Input/Output: [(35 69 8 68) 8]
Test Case: 254 | Input/Output: [(14 5 41 81) 5]
Test Case: 255 | Input/Output: [(63 49 65 88) 49]
Test Case: 256 | Input/Output: [(32 44 13 40) 13]
Test Case: 257 | Input/Output: [(51 2 64 66) 2]
Test Case: 258 | Input/Output: [(8 62 98 88) 8]
Test Case: 259 | Input/Output: [(58 55 14 96) 14]
Test Case: 260 | Input/Output: [(41 54 38 22) 22]
Test Case: 261 | Input/Output: [(40 33 17 15) 15]
Test Case: 262 | Input/Output: [(31 62 63 35) 31]
Test Case: 263 | Input/Output: [(91 49 25 18) 18]
Test Case: 264 | Input/Output: [(15 30 76 11) 11]
Test Case: 265 | Input/Output: [(10 49 15 26) 10]
Test Case: 266 | Input/Output: [(67 47 66 70) 47]
Test Case: 267 | Input/Output: [(38 89 30 12) 12]
Test Case: 268 | Input/Output: [(34 42 76 45) 34]
Test Case: 269 | Input/Output: [(65 4 93 36) 4]
Test Case: 270 | Input/Output: [(48 45 12 35) 12]
Test Case: 271 | Input/Output: [(17 90 33 71) 17]
Test Case: 272 | Input/Output: [(67 76 51 3) 3]
Test Case: 273 | Input/Output: [(96 73 60 45) 45]
Test Case: 274 | Input/Output: [(1 17 54 75) 1]
Test Case: 275 | Input/Output: [(52 50 93 79) 50]
Test Case: 276 | Input/Output: [(22 91 72 72) 22]
Test Case: 277 | Input/Output: [(56 48 29 23) 23]
Test Case: 278 | Input/Output: [(58 13 31 89) 13]
Test Case: 279 | Input/Output: [(71 25 27 27) 25]
Test Case: 280 | Input/Output: [(97 64 68 31) 31]
Test Case: 281 | Input/Output: [(30 59 35 8) 8]
Test Case: 282 | Input/Output: [(70 31 60 97) 31]
Test Case: 283 | Input/Output: [(26 60 37 25) 25]
Test Case: 284 | Input/Output: [(86 41 9 87) 9]
Test Case: 285 | Input/Output: [(86 66 67 78) 66]
Test Case: 286 | Input/Output: [(95 52 5 29) 5]
Test Case: 287 | Input/Output: [(4 80 58 41) 4]
Test Case: 288 | Input/Output: [(32 99 20 13) 13]
Test Case: 289 | Input/Output: [(74 98 0 67) 0]
Test Case: 290 | Input/Output: [(11 75 35 49) 11]
Test Case: 291 | Input/Output: [(48 58 95 12) 12]
Test Case: 292 | Input/Output: [(7 32 5 1) 1]
Test Case: 293 | Input/Output: [(68 46 1 83) 1]
Test Case: 294 | Input/Output: [(35 72 96 18) 18]
Test Case: 295 | Input/Output: [(88 22 0 20) 0]
Test Case: 296 | Input/Output: [(53 12 79 42) 12]
Test Case: 297 | Input/Output: [(45 26 49 46) 26]
Test Case: 298 | Input/Output: [(92 66 9 47) 9]
Test Case: 299 | Input/Output: [(65 80 65 93) 65]
Test Case: 300 | Input/Output: [(22 81 81 2) 2]
Test Case: 301 | Input/Output: [(15 24 30 40) 15]
Test Case: 302 | Input/Output: [(16 88 65 84) 16]
Test Case: 303 | Input/Output: [(20 86 45 19) 19]
Test Case: 304 | Input/Output: [(83 36 36 12) 12]
Test Case: 305 | Input/Output: [(99 34 16 40) 16]
Test Case: 306 | Input/Output: [(84 12 77 4) 4]
Test Case: 307 | Input/Output: [(23 94 42 41) 23]
Test Case: 308 | Input/Output: [(21 44 32 2) 2]
Test Case: 309 | Input/Output: [(77 53 60 45) 45]
Test Case: 310 | Input/Output: [(86 31 44 58) 31]
Test Case: 311 | Input/Output: [(76 77 8 49) 8]
Test Case: 312 | Input/Output: [(89 10 7 88) 7]
Test Case: 313 | Input/Output: [(22 92 40 26) 22]
Test Case: 314 | Input/Output: [(98 90 99 73) 73]
Test Case: 315 | Input/Output: [(27 99 69 10) 10]
Test Case: 316 | Input/Output: [(50 98 28 87) 28]
Test Case: 317 | Input/Output: [(91 24 70 24) 24]
Test Case: 318 | Input/Output: [(90 100 50 99) 50]
Test Case: 319 | Input/Output: [(7 31 14 33) 7]
Test Case: 320 | Input/Output: [(25 52 37 92) 25]
Test Case: 321 | Input/Output: [(47 38 79 3) 3]
Test Case: 322 | Input/Output: [(87 89 81 73) 73]
Test Case: 323 | Input/Output: [(8 38 10 33) 8]
Test Case: 324 | Input/Output: [(59 61 10 61) 10]
Test Case: 325 | Input/Output: [(28 2 40 91) 2]
Test Case: 326 | Input/Output: [(88 84 87 3) 3]
Test Case: 327 | Input/Output: [(40 31 99 55) 31]
Test Case: 328 | Input/Output: [(60 77 55 41) 41]
Test Case: 329 | Input/Output: [(15 62 64 11) 11]
Test Case: 330 | Input/Output: [(47 95 57 19) 19]
Test Case: 331 | Input/Output: [(22 14 86 62) 14]
Test Case: 332 | Input/Output: [(9 35 21 47) 9]
Test Case: 333 | Input/Output: [(86 4 51 40) 4]
Test Case: 334 | Input/Output: [(83 67 87 100) 67]
Test Case: 335 | Input/Output: [(50 12 5 41) 5]
Test Case: 336 | Input/Output: [(100 38 54 81) 38]
Test Case: 337 | Input/Output: [(81 47 89 48) 47]
Test Case: 338 | Input/Output: [(62 32 16 95) 16]
Test Case: 339 | Input/Output: [(35 42 14 63) 14]
Test Case: 340 | Input/Output: [(99 70 82 86) 70]
Test Case: 341 | Input/Output: [(7 88 58 11) 7]
Test Case: 342 | Input/Output: [(30 9 5 72) 5]
Test Case: 343 | Input/Output: [(69 66 11 39) 11]
Test Case: 344 | Input/Output: [(94 14 59 10) 10]
Test Case: 345 | Input/Output: [(6 93 61 31) 6]
Test Case: 346 | Input/Output: [(52 31 19 39) 19]
Test Case: 347 | Input/Output: [(40 25 15 6) 6]
Test Case: 348 | Input/Output: [(88 63 26 14) 14]
Test Case: 349 | Input/Output: [(24 97 45 44) 24]
Test Case: 350 | Input/Output: [(57 82 73 25) 25]
Test Case: 351 | Input/Output: [(15 42 2 67) 2]
Test Case: 352 | Input/Output: [(50 13 54 78) 13]
Test Case: 353 | Input/Output: [(9 68 21 76) 9]
Test Case: 354 | Input/Output: [(8 25 68 94) 8]
Test Case: 355 | Input/Output: [(80 71 38 40) 38]
Test Case: 356 | Input/Output: [(62 100 96 78) 62]
Test Case: 357 | Input/Output: [(38 6 69 96) 6]
Test Case: 358 | Input/Output: [(71 67 31 0) 0]
Test Case: 359 | Input/Output: [(33 75 62 23) 23]
Test Case: 360 | Input/Output: [(21 85 21 49) 21]
Test Case: 361 | Input/Output: [(83 95 75 3) 3]
Test Case: 362 | Input/Output: [(10 36 70 61) 10]
Test Case: 363 | Input/Output: [(25 31 73 18) 18]
Test Case: 364 | Input/Output: [(47 1 16 9) 1]
Test Case: 365 | Input/Output: [(60 18 93 52) 18]
Test Case: 366 | Input/Output: [(66 9 21 58) 9]
Test Case: 367 | Input/Output: [(84 8 16 64) 8]
Test Case: 368 | Input/Output: [(100 22 66 4) 4]
Test Case: 369 | Input/Output: [(91 60 58 13) 13]
Test Case: 370 | Input/Output: [(88 60 61 91) 60]
Test Case: 371 | Input/Output: [(54 68 33 85) 33]
Test Case: 372 | Input/Output: [(37 76 17 51) 17]
Test Case: 373 | Input/Output: [(45 45 21 90) 21]
Test Case: 374 | Input/Output: [(42 7 97 67) 7]
Test Case: 375 | Input/Output: [(17 37 59 95) 17]
Test Case: 376 | Input/Output: [(60 10 77 8) 8]
Test Case: 377 | Input/Output: [(91 98 53 91) 53]
Test Case: 378 | Input/Output: [(4 28 0 96) 0]
Test Case: 379 | Input/Output: [(22 65 38 46) 22]
Test Case: 380 | Input/Output: [(44 90 41 83) 41]
Test Case: 381 | Input/Output: [(0 38 24 32) 0]
Test Case: 382 | Input/Output: [(58 71 48 45) 45]
Test Case: 383 | Input/Output: [(66 84 68 68) 66]
Test Case: 384 | Input/Output: [(27 40 70 14) 14]
Test Case: 385 | Input/Output: [(72 57 8 41) 8]
Test Case: 386 | Input/Output: [(40 43 48 67) 40]
Test Case: 387 | Input/Output: [(64 56 90 23) 23]
Test Case: 388 | Input/Output: [(35 76 67 77) 35]
Test Case: 389 | Input/Output: [(71 31 67 97) 31]
Test Case: 390 | Input/Output: [(84 12 43 73) 12]
Test Case: 391 | Input/Output: [(73 89 40 13) 13]
Test Case: 392 | Input/Output: [(12 9 100 86) 9]
Test Case: 393 | Input/Output: [(51 97 57 32) 32]
Test Case: 394 | Input/Output: [(65 18 100 72) 18]
Test Case: 395 | Input/Output: [(10 73 1 49) 1]
Test Case: 396 | Input/Output: [(57 34 27 49) 27]
Test Case: 397 | Input/Output: [(16 31 94 52) 16]
Test Case: 398 | Input/Output: [(75 70 36 41) 36]
Test Case: 399 | Input/Output: [(46 7 48 16) 7]
Test Case: 400 | Input/Output: [(6 -44 65 -42) -44]
Test Case: 401 | Input/Output: [(76 98 10 46) 10]
Test Case: 402 | Input/Output: [(95 62 -100 32) -100]
Test Case: 403 | Input/Output: [(29 12 -99 -14) -99]
Test Case: 404 | Input/Output: [(8 -7 35 -76) -76]
Test Case: 405 | Input/Output: [(59 -78 22 -91) -91]
Test Case: 406 | Input/Output: [(76 14 -60 -15) -60]
Test Case: 407 | Input/Output: [(86 -25 6 -26) -26]
Test Case: 408 | Input/Output: [(62 -84 66 95) -84]
Test Case: 409 | Input/Output: [(11 9 -99 88) -99]
Test Case: 410 | Input/Output: [(-48 -48 -26 -33) -48]
Test Case: 411 | Input/Output: [(15 16 -32 -72) -72]
Test Case: 412 | Input/Output: [(79 74 -4 -68) -68]
Test Case: 413 | Input/Output: [(-96 12 92 -67) -96]
Test Case: 414 | Input/Output: [(-55 -31 -93 67) -93]
Test Case: 415 | Input/Output: [(16 79 75 -17) -17]
Test Case: 416 | Input/Output: [(43 -32 19 65) -32]
Test Case: 417 | Input/Output: [(52 86 81 57) 52]
Test Case: 418 | Input/Output: [(-16 -1 -41 94) -41]
Test Case: 419 | Input/Output: [(73 -53 13 51) -53]
Test Case: 420 | Input/Output: [(-36 45 11 10) -36]
Test Case: 421 | Input/Output: [(-48 92 84 97) -48]
Test Case: 422 | Input/Output: [(-100 9 44 58) -100]
Test Case: 423 | Input/Output: [(78 88 -10 -35) -35]
Test Case: 424 | Input/Output: [(7 -23 62 26) -23]
Test Case: 425 | Input/Output: [(-12 -86 53 37) -86]
Test Case: 426 | Input/Output: [(-82 -20 -78 -78) -82]
Test Case: 427 | Input/Output: [(-18 -57 1 -24) -57]
Test Case: 428 | Input/Output: [(29 5 -2 44) -2]
Test Case: 429 | Input/Output: [(4 73 -39 65) -39]
Test Case: 430 | Input/Output: [(-20 -69 47 23) -69]
Test Case: 431 | Input/Output: [(-89 78 43 -54) -89]
Test Case: 432 | Input/Output: [(-26 46 -47 100) -47]
Test Case: 433 | Input/Output: [(7 -12 39 -92) -92]
Test Case: 434 | Input/Output: [(41 -19 -51 -76) -76]
Test Case: 435 | Input/Output: [(-26 30 68 90) -26]
Test Case: 436 | Input/Output: [(-67 45 -63 -19) -67]
Test Case: 437 | Input/Output: [(86 56 -74 -30) -74]
Test Case: 438 | Input/Output: [(100 -37 -44 -51) -51]
Test Case: 439 | Input/Output: [(-53 29 -75 -96) -96]
Test Case: 440 | Input/Output: [(45 36 94 -57) -57]
Test Case: 441 | Input/Output: [(-87 17 -12 66) -87]
Test Case: 442 | Input/Output: [(-66 75 80 -14) -66]
Test Case: 443 | Input/Output: [(-97 74 -74 -45) -97]
Test Case: 444 | Input/Output: [(23 50 -68 43) -68]
Test Case: 445 | Input/Output: [(42 1 -97 44) -97]
Test Case: 446 | Input/Output: [(-92 -83 -31 34) -92]
Test Case: 447 | Input/Output: [(60 71 12 -33) -33]
Test Case: 448 | Input/Output: [(99 25 65 -8) -8]
Test Case: 449 | Input/Output: [(33 -75 19 73) -75]
Test Case: 450 | Input/Output: [(67 83 -84 -69) -84]
Test Case: 451 | Input/Output: [(-86 -80 95 46) -86]
Test Case: 452 | Input/Output: [(22 50 -4 56) -4]
Test Case: 453 | Input/Output: [(-26 87 -20 -17) -26]
Test Case: 454 | Input/Output: [(-100 -67 -74 -54) -100]
Test Case: 455 | Input/Output: [(21 89 3 43) 3]
Test Case: 456 | Input/Output: [(-71 -78 -82 -29) -82]
Test Case: 457 | Input/Output: [(-50 3 9 43) -50]
Test Case: 458 | Input/Output: [(-92 -52 16 61) -92]
Test Case: 459 | Input/Output: [(-96 -30 43 -62) -96]
Test Case: 460 | Input/Output: [(-20 -27 22 24) -27]
Test Case: 461 | Input/Output: [(-17 26 -72 -12) -72]
Test Case: 462 | Input/Output: [(-12 -42 93 45) -42]
Test Case: 463 | Input/Output: [(37 -78 23 12) -78]
Test Case: 464 | Input/Output: [(70 -89 -43 -42) -89]
Test Case: 465 | Input/Output: [(86 -92 -18 17) -92]
Test Case: 466 | Input/Output: [(79 -24 -22 -3) -24]
Test Case: 467 | Input/Output: [(23 -78 13 -36) -78]
Test Case: 468 | Input/Output: [(49 -46 71 -52) -52]
Test Case: 469 | Input/Output: [(36 100 0 27) 0]
Test Case: 470 | Input/Output: [(62 72 83 -57) -57]
Test Case: 471 | Input/Output: [(1 -98 2 -75) -98]
Test Case: 472 | Input/Output: [(-17 -56 -22 0) -56]
Test Case: 473 | Input/Output: [(11 80 74 -24) -24]
Test Case: 474 | Input/Output: [(49 -27 -4 48) -27]
Test Case: 475 | Input/Output: [(17 -20 -36 -66) -66]
Test Case: 476 | Input/Output: [(-46 46 59 53) -46]
Test Case: 477 | Input/Output: [(-92 44 85 77) -92]
Test Case: 478 | Input/Output: [(-40 -100 90 -89) -100]
Test Case: 479 | Input/Output: [(-39 -61 84 -2) -61]
Test Case: 480 | Input/Output: [(85 -98 -17 -26) -98]
Test Case: 481 | Input/Output: [(58 33 -14 83) -14]
Test Case: 482 | Input/Output: [(33 -94 42 66) -94]
Test Case: 483 | Input/Output: [(72 -34 23 -73) -73]
Test Case: 484 | Input/Output: [(-92 78 63 93) -92]
Test Case: 485 | Input/Output: [(94 -60 30 20) -60]
Test Case: 486 | Input/Output: [(-28 26 -51 -70) -70]
Test Case: 487 | Input/Output: [(48 51 -50 81) -50]
Test Case: 488 | Input/Output: [(-42 -90 -31 -88) -90]
Test Case: 489 | Input/Output: [(-89 84 -52 -49) -89]
Test Case: 490 | Input/Output: [(36 -10 -6 62) -10]
Test Case: 491 | Input/Output: [(-32 68 89 15) -32]
Test Case: 492 | Input/Output: [(-35 63 -83 92) -83]
Test Case: 493 | Input/Output: [(-25 100 20 19) -25]
Test Case: 494 | Input/Output: [(-18 9 22 -57) -57]
Test Case: 495 | Input/Output: [(-82 81 -63 10) -82]
Test Case: 496 | Input/Output: [(87 42 84 28) 28]
Test Case: 497 | Input/Output: [(-53 93 -67 34) -67]
Test Case: 498 | Input/Output: [(-25 21 -84 -1) -84]
Test Case: 499 | Input/Output: [(-12 -49 -61 -30) -61]
Test Case: 500 | Input/Output: [(68 -23 43 63) -23]
Test Case: 501 | Input/Output: [(3 86 -30 -87) -87]
Test Case: 502 | Input/Output: [(98 -22 58 90) -22]
Test Case: 503 | Input/Output: [(-72 4 -86 -46) -86]
Test Case: 504 | Input/Output: [(12 98 -41 26) -41]
Test Case: 505 | Input/Output: [(-83 -59 -74 -13) -83]
Test Case: 506 | Input/Output: [(43 -9 72 54) -9]
Test Case: 507 | Input/Output: [(-95 -78 -49 -19) -95]
Test Case: 508 | Input/Output: [(-55 -42 22 -7) -55]
Test Case: 509 | Input/Output: [(-33 4 -88 82) -88]
Test Case: 510 | Input/Output: [(-6 56 -46 98) -46]
Test Case: 511 | Input/Output: [(-82 97 67 -27) -82]
Test Case: 512 | Input/Output: [(-63 2 93 -30) -63]
Test Case: 513 | Input/Output: [(-6 -89 -82 79) -89]
Test Case: 514 | Input/Output: [(-6 -54 33 -89) -89]
Test Case: 515 | Input/Output: [(-28 -88 -79 88) -88]
Test Case: 516 | Input/Output: [(6 -99 91 -81) -99]
Test Case: 517 | Input/Output: [(-79 -66 -19 -61) -79]
Test Case: 518 | Input/Output: [(51 66 48 84) 48]
Test Case: 519 | Input/Output: [(82 -64 -76 73) -76]
Test Case: 520 | Input/Output: [(5 0 9 17) 0]
Test Case: 521 | Input/Output: [(-98 49 -52 72) -98]
Test Case: 522 | Input/Output: [(1 35 4 62) 1]
Test Case: 523 | Input/Output: [(52 25 -69 98) -69]
Test Case: 524 | Input/Output: [(93 18 48 -62) -62]
Test Case: 525 | Input/Output: [(-63 -5 -47 -99) -99]
Test Case: 526 | Input/Output: [(27 79 54 -29) -29]
Test Case: 527 | Input/Output: [(29 23 17 -32) -32]
Test Case: 528 | Input/Output: [(8 -18 65 -96) -96]
Test Case: 529 | Input/Output: [(78 41 -59 -94) -94]
Test Case: 530 | Input/Output: [(-87 -45 53 89) -87]
Test Case: 531 | Input/Output: [(60 -82 -9 70) -82]
Test Case: 532 | Input/Output: [(52 -84 -42 1) -84]
Test Case: 533 | Input/Output: [(89 -34 95 -43) -43]
Test Case: 534 | Input/Output: [(-93 -15 38 -40) -93]
Test Case: 535 | Input/Output: [(91 -8 51 78) -8]
Test Case: 536 | Input/Output: [(-96 6 -66 25) -96]
Test Case: 537 | Input/Output: [(-4 -39 -68 98) -68]
Test Case: 538 | Input/Output: [(-33 -52 91 -76) -76]
Test Case: 539 | Input/Output: [(80 15 -22 83) -22]
Test Case: 540 | Input/Output: [(-33 -100 45 94) -100]
Test Case: 541 | Input/Output: [(2 64 22 75) 2]
Test Case: 542 | Input/Output: [(72 18 62 -94) -94]
Test Case: 543 | Input/Output: [(7 -20 79 -62) -62]
Test Case: 544 | Input/Output: [(10 -50 40 21) -50]
Test Case: 545 | Input/Output: [(5 66 -71 39) -71]
Test Case: 546 | Input/Output: [(67 15 43 84) 15]
Test Case: 547 | Input/Output: [(56 70 -100 32) -100]
Test Case: 548 | Input/Output: [(100 19 -86 18) -86]
Test Case: 549 | Input/Output: [(93 93 -77 60) -77]
Test Case: 550 | Input/Output: [(74 -53 64 50) -53]
Test Case: 551 | Input/Output: [(95 28 38 22) 22]
Test Case: 552 | Input/Output: [(-85 -88 -48 -80) -88]
Test Case: 553 | Input/Output: [(-35 -58 6 -94) -94]
Test Case: 554 | Input/Output: [(56 -83 44 79) -83]
Test Case: 555 | Input/Output: [(-85 99 68 -67) -85]
Test Case: 556 | Input/Output: [(37 5 -50 57) -50]
Test Case: 557 | Input/Output: [(-63 40 16 -47) -63]
Test Case: 558 | Input/Output: [(-1 -99 -37 32) -99]
Test Case: 559 | Input/Output: [(64 89 -33 -50) -50]
Test Case: 560 | Input/Output: [(79 -50 49 96) -50]
Test Case: 561 | Input/Output: [(99 -3 -57 -64) -64]
Test Case: 562 | Input/Output: [(-100 61 -34 -28) -100]
Test Case: 563 | Input/Output: [(-15 16 -6 45) -15]
Test Case: 564 | Input/Output: [(88 85 -58 -21) -58]
Test Case: 565 | Input/Output: [(22 74 -43 77) -43]
Test Case: 566 | Input/Output: [(-99 -3 52 -34) -99]
Test Case: 567 | Input/Output: [(58 -87 -7 -53) -87]
Test Case: 568 | Input/Output: [(65 -9 -21 -61) -61]
Test Case: 569 | Input/Output: [(61 -24 88 43) -24]
Test Case: 570 | Input/Output: [(92 -97 76 -64) -97]
Test Case: 571 | Input/Output: [(-84 5 -19 72) -84]
Test Case: 572 | Input/Output: [(-30 57 -51 22) -51]
Test Case: 573 | Input/Output: [(23 -24 -79 21) -79]
Test Case: 574 | Input/Output: [(6 59 29 -61) -61]
Test Case: 575 | Input/Output: [(47 -19 63 -37) -37]
Test Case: 576 | Input/Output: [(-71 -24 -32 33) -71]
Test Case: 577 | Input/Output: [(-93 -44 82 89) -93]
Test Case: 578 | Input/Output: [(-96 44 -1 -99) -99]
Test Case: 579 | Input/Output: [(-67 -33 -25 -57) -67]
Test Case: 580 | Input/Output: [(43 88 -39 -70) -70]
Test Case: 581 | Input/Output: [(16 -50 -44 39) -50]
Test Case: 582 | Input/Output: [(-45 97 26 69) -45]
Test Case: 583 | Input/Output: [(-24 39 -81 -17) -81]
Test Case: 584 | Input/Output: [(13 -24 25 -93) -93]
Test Case: 585 | Input/Output: [(56 -57 -39 75) -57]
Test Case: 586 | Input/Output: [(100 56 -54 44) -54]
Test Case: 587 | Input/Output: [(-74 -76 69 -7) -76]
Test Case: 588 | Input/Output: [(-96 -71 -61 -29) -96]
Test Case: 589 | Input/Output: [(71 -59 53 -32) -59]
Test Case: 590 | Input/Output: [(-4 -84 -48 -54) -84]
Test Case: 591 | Input/Output: [(-96 31 43 95) -96]
Test Case: 592 | Input/Output: [(9 -37 -26 -14) -37]
Test Case: 593 | Input/Output: [(-21 -78 -53 94) -78]
Test Case: 594 | Input/Output: [(77 52 90 19) 19]
Test Case: 595 | Input/Output: [(53 86 24 -76) -76]
Test Case: 596 | Input/Output: [(-97 47 -12 -86) -97]
Test Case: 597 | Input/Output: [(-99 -81 -56 -28) -99]
Test Case: 598 | Input/Output: [(-37 -42 -75 26) -75]
Test Case: 599 | Input/Output: [(61 -23 -55 -79) -79]
Test Case: 600 | Input/Output: [(-55 88 -22 -62) -62]
Test Case: 601 | Input/Output: [(96 95 -55 -1) -55]
Test Case: 602 | Input/Output: [(-89 46 92 31) -89]
Test Case: 603 | Input/Output: [(58 -66 19 8) -66]
Test Case: 604 | Input/Output: [(-33 -50 -49 44) -50]
Test Case: 605 | Input/Output: [(-29 -52 -100 -72) -100]
Test Case: 606 | Input/Output: [(-85 58 -13 -85) -85]
Test Case: 607 | Input/Output: [(72 -93 12 -54) -93]
Test Case: 608 | Input/Output: [(-32 -42 49 38) -42]
Test Case: 609 | Input/Output: [(65 75 44 36) 36]
Test Case: 610 | Input/Output: [(-90 -92 -6 2) -92]
Test Case: 611 | Input/Output: [(35 96 -73 80) -73]
Test Case: 612 | Input/Output: [(29 -70 -51 -85) -85]
Test Case: 613 | Input/Output: [(-57 49 -92 -7) -92]
Test Case: 614 | Input/Output: [(-34 5 54 -44) -44]
Test Case: 615 | Input/Output: [(-23 33 -14 -53) -53]
Test Case: 616 | Input/Output: [(-48 -47 59 -55) -55]
Test Case: 617 | Input/Output: [(31 8 -63 69) -63]
Test Case: 618 | Input/Output: [(-29 100 21 -22) -29]
Test Case: 619 | Input/Output: [(68 85 6 -23) -23]
Test Case: 620 | Input/Output: [(79 13 32 59) 13]
Test Case: 621 | Input/Output: [(-81 -49 78 -17) -81]
Test Case: 622 | Input/Output: [(66 14 28 0) 0]
Test Case: 623 | Input/Output: [(45 -48 -65 -56) -65]
Test Case: 624 | Input/Output: [(72 -43 54 18) -43]
Test Case: 625 | Input/Output: [(23 75 60 40) 23]
Test Case: 626 | Input/Output: [(74 -2 -53 -50) -53]
Test Case: 627 | Input/Output: [(15 84 -21 -28) -28]
Test Case: 628 | Input/Output: [(-86 -83 -4 53) -86]
Test Case: 629 | Input/Output: [(24 14 97 -17) -17]
Test Case: 630 | Input/Output: [(-34 -40 66 -57) -57]
Test Case: 631 | Input/Output: [(96 -76 67 -90) -90]
Test Case: 632 | Input/Output: [(38 22 6 -30) -30]
Test Case: 633 | Input/Output: [(-49 63 -89 -94) -94]
Test Case: 634 | Input/Output: [(69 87 86 -6) -6]
Test Case: 635 | Input/Output: [(46 36 74 -95) -95]
Test Case: 636 | Input/Output: [(-53 15 91 47) -53]
Test Case: 637 | Input/Output: [(97 -83 1 60) -83]
Test Case: 638 | Input/Output: [(-87 -1 92 21) -87]
Test Case: 639 | Input/Output: [(19 90 99 92) 19]
Test Case: 640 | Input/Output: [(68 -44 -89 -24) -89]
Test Case: 641 | Input/Output: [(30 -1 20 21) -1]
Test Case: 642 | Input/Output: [(47 -53 92 -48) -53]
Test Case: 643 | Input/Output: [(-96 -37 57 1) -96]
Test Case: 644 | Input/Output: [(55 -28 -56 -16) -56]
Test Case: 645 | Input/Output: [(28 -79 -62 13) -79]
Test Case: 646 | Input/Output: [(-28 -43 -56 99) -56]
Test Case: 647 | Input/Output: [(25 -97 -48 -18) -97]
Test Case: 648 | Input/Output: [(-30 -97 36 13) -97]
Test Case: 649 | Input/Output: [(57 65 63 75) 57]
Test Case: 650 | Input/Output: [(87 -16 65 91) -16]
Test Case: 651 | Input/Output: [(-73 92 53 -83) -83]
Test Case: 652 | Input/Output: [(-25 -25 -31 42) -31]
Test Case: 653 | Input/Output: [(54 -57 -46 29) -57]
Test Case: 654 | Input/Output: [(-9 -2 -66 -70) -70]
Test Case: 655 | Input/Output: [(52 9 75 35) 9]
Test Case: 656 | Input/Output: [(-72 97 35 -72) -72]
Test Case: 657 | Input/Output: [(22 75 -21 -8) -21]
Test Case: 658 | Input/Output: [(50 22 -86 -85) -86]
Test Case: 659 | Input/Output: [(-81 -86 68 32) -86]
Test Case: 660 | Input/Output: [(-61 -2 93 -36) -61]
Test Case: 661 | Input/Output: [(-76 66 27 80) -76]
Test Case: 662 | Input/Output: [(-75 4 78 -92) -92]
Test Case: 663 | Input/Output: [(84 -34 61 2) -34]
Test Case: 664 | Input/Output: [(-10 -74 -43 29) -74]
Test Case: 665 | Input/Output: [(-16 15 73 -30) -30]
Test Case: 666 | Input/Output: [(-27 -20 -28 49) -28]
Test Case: 667 | Input/Output: [(-65 -77 68 28) -77]
Test Case: 668 | Input/Output: [(35 -67 80 60) -67]
Test Case: 669 | Input/Output: [(0 -77 31 79) -77]
Test Case: 670 | Input/Output: [(-60 -29 33 25) -60]
Test Case: 671 | Input/Output: [(-68 76 40 -89) -89]
Test Case: 672 | Input/Output: [(-3 -78 95 89) -78]
Test Case: 673 | Input/Output: [(-74 -55 -64 40) -74]
Test Case: 674 | Input/Output: [(47 80 46 -83) -83]
Test Case: 675 | Input/Output: [(90 62 54 -4) -4]
Test Case: 676 | Input/Output: [(92 49 31 -44) -44]
Test Case: 677 | Input/Output: [(51 -39 -59 99) -59]
Test Case: 678 | Input/Output: [(9 19 -6 -30) -30]
Test Case: 679 | Input/Output: [(28 0 -61 70) -61]
Test Case: 680 | Input/Output: [(-29 5 -87 -75) -87]
Test Case: 681 | Input/Output: [(-53 -30 15 -99) -99]
Test Case: 682 | Input/Output: [(79 -73 -48 -13) -73]
Test Case: 683 | Input/Output: [(3 -73 71 36) -73]
Test Case: 684 | Input/Output: [(-92 79 -54 100) -92]
Test Case: 685 | Input/Output: [(51 -44 39 42) -44]
Test Case: 686 | Input/Output: [(-16 28 75 -67) -67]
Test Case: 687 | Input/Output: [(-9 -54 20 13) -54]
Test Case: 688 | Input/Output: [(85 56 -81 55) -81]
Test Case: 689 | Input/Output: [(90 70 8 68) 8]
Test Case: 690 | Input/Output: [(47 28 -63 85) -63]
Test Case: 691 | Input/Output: [(57 -3 -96 -9) -96]
Test Case: 692 | Input/Output: [(-93 -86 29 35) -93]
Test Case: 693 | Input/Output: [(-39 49 49 -48) -48]
Test Case: 694 | Input/Output: [(-52 30 14 63) -52]
Test Case: 695 | Input/Output: [(-3 30 -42 -18) -42]
Test Case: 696 | Input/Output: [(57 44 79 -41) -41]
Test Case: 697 | Input/Output: [(-52 -75 71 -46) -75]
Test Case: 698 | Input/Output: [(-34 32 87 25) -34]
Test Case: 699 | Input/Output: [(14 -90 35 -88) -90]
Test Case: 700 | Input/Output: [(-31 26 59 -42) -42]
Test Case: 701 | Input/Output: [(-16 73 -37 71) -37]
Test Case: 702 | Input/Output: [(-45 -74 21 53) -74]
Test Case: 703 | Input/Output: [(-26 81 16 90) -26]
Test Case: 704 | Input/Output: [(2 -82 -53 70) -82]
Test Case: 705 | Input/Output: [(-59 -48 -6 66) -59]
Test Case: 706 | Input/Output: [(-36 87 -9 41) -36]
Test Case: 707 | Input/Output: [(-24 -48 -25 42) -48]
Test Case: 708 | Input/Output: [(45 64 19 -33) -33]
Test Case: 709 | Input/Output: [(-74 38 34 21) -74]
Test Case: 710 | Input/Output: [(91 38 53 -1) -1]
Test Case: 711 | Input/Output: [(-18 97 -65 44) -65]
Test Case: 712 | Input/Output: [(100 22 99 38) 22]
Test Case: 713 | Input/Output: [(-10 10 58 -2) -10]
Test Case: 714 | Input/Output: [(30 -44 83 99) -44]
Test Case: 715 | Input/Output: [(98 -25 1 2) -25]
Test Case: 716 | Input/Output: [(-83 -23 35 38) -83]
Test Case: 717 | Input/Output: [(-33 79 -32 -27) -33]
Test Case: 718 | Input/Output: [(54 66 -53 30) -53]
Test Case: 719 | Input/Output: [(23 8 23 9) 8]
Test Case: 720 | Input/Output: [(55 61 -88 -52) -88]
Test Case: 721 | Input/Output: [(46 21 47 22) 21]
Test Case: 722 | Input/Output: [(-92 92 23 -98) -98]
Test Case: 723 | Input/Output: [(-20 -98 -26 56) -98]
Test Case: 724 | Input/Output: [(-17 -31 -60 -75) -75]
Test Case: 725 | Input/Output: [(-51 40 37 -65) -65]
Test Case: 726 | Input/Output: [(-8 45 -86 29) -86]
Test Case: 727 | Input/Output: [(-68 -83 89 -9) -83]
Test Case: 728 | Input/Output: [(28 30 34 54) 28]
Test Case: 729 | Input/Output: [(-18 55 87 95) -18]
Test Case: 730 | Input/Output: [(42 97 -79 46) -79]
Test Case: 731 | Input/Output: [(64 16 66 74) 16]
Test Case: 732 | Input/Output: [(66 -93 -97 -58) -97]
Test Case: 733 | Input/Output: [(20 91 -15 73) -15]
Test Case: 734 | Input/Output: [(83 95 -32 18) -32]
Test Case: 735 | Input/Output: [(4 7 39 -22) -22]
Test Case: 736 | Input/Output: [(-19 -39 89 -50) -50]
Test Case: 737 | Input/Output: [(100 -76 54 87) -76]
Test Case: 738 | Input/Output: [(61 35 -36 -42) -42]
Test Case: 739 | Input/Output: [(79 -75 50 88) -75]
Test Case: 740 | Input/Output: [(-92 38 37 -63) -92]
Test Case: 741 | Input/Output: [(-74 -45 -34 -21) -74]
Test Case: 742 | Input/Output: [(-51 16 -6 6) -51]
Test Case: 743 | Input/Output: [(-90 79 -9 11) -90]
Test Case: 744 | Input/Output: [(-30 36 49 27) -30]
Test Case: 745 | Input/Output: [(3 -26 -1 11) -26]
Test Case: 746 | Input/Output: [(1 43 44 54) 1]
Test Case: 747 | Input/Output: [(-64 -51 28 -10) -64]
Test Case: 748 | Input/Output: [(94 -54 57 96) -54]
Test Case: 749 | Input/Output: [(-86 -49 41 20) -86]
Test Case: 750 | Input/Output: [(-42 -76 51 11) -76]
Test Case: 751 | Input/Output: [(95 -46 13 -4) -46]
Test Case: 752 | Input/Output: [(23 -26 22 -87) -87]
Test Case: 753 | Input/Output: [(19 -27 -20 -14) -27]
Test Case: 754 | Input/Output: [(-80 -82 -12 -64) -82]
Test Case: 755 | Input/Output: [(-77 -52 -83 18) -83]
Test Case: 756 | Input/Output: [(-34 -15 20 -35) -35]
Test Case: 757 | Input/Output: [(76 52 26 60) 26]
Test Case: 758 | Input/Output: [(-34 87 100 49) -34]
Test Case: 759 | Input/Output: [(-61 67 -52 -32) -61]
Test Case: 760 | Input/Output: [(25 -93 -22 -84) -93]
Test Case: 761 | Input/Output: [(55 -69 23 -16) -69]
Test Case: 762 | Input/Output: [(54 -9 3 -49) -49]
Test Case: 763 | Input/Output: [(-54 86 84 42) -54]
Test Case: 764 | Input/Output: [(-19 -39 80 33) -39]
Test Case: 765 | Input/Output: [(-87 -55 95 45) -87]
Test Case: 766 | Input/Output: [(-60 85 84 -14) -60]
Test Case: 767 | Input/Output: [(-26 -19 62 -90) -90]
Test Case: 768 | Input/Output: [(-63 18 29 -78) -78]
Test Case: 769 | Input/Output: [(-67 9 63 -74) -74]
Test Case: 770 | Input/Output: [(10 38 15 -87) -87]
Test Case: 771 | Input/Output: [(-56 -75 95 15) -75]
Test Case: 772 | Input/Output: [(4 -42 -82 -56) -82]
Test Case: 773 | Input/Output: [(-46 -68 49 -56) -68]
Test Case: 774 | Input/Output: [(55 50 -94 36) -94]
Test Case: 775 | Input/Output: [(15 51 4 -27) -27]
Test Case: 776 | Input/Output: [(-18 55 -14 -20) -20]
Test Case: 777 | Input/Output: [(81 6 30 87) 6]
Test Case: 778 | Input/Output: [(-71 -64 76 20) -71]
Test Case: 779 | Input/Output: [(-57 89 65 -89) -89]
Test Case: 780 | Input/Output: [(-28 64 74 3) -28]
Test Case: 781 | Input/Output: [(-5 56 -82 -8) -82]
Test Case: 782 | Input/Output: [(-21 97 100 -40) -40]
Test Case: 783 | Input/Output: [(14 86 19 74) 14]
Test Case: 784 | Input/Output: [(33 9 29 -3) -3]
Test Case: 785 | Input/Output: [(-21 10 61 -54) -54]
Test Case: 786 | Input/Output: [(-69 -27 -62 27) -69]
Test Case: 787 | Input/Output: [(89 -69 73 34) -69]
Test Case: 788 | Input/Output: [(-33 -21 86 -41) -41]
Test Case: 789 | Input/Output: [(82 -96 11 -90) -96]
Test Case: 790 | Input/Output: [(-95 37 -69 38) -95]
Test Case: 791 | Input/Output: [(59 -98 -50 -88) -98]
Test Case: 792 | Input/Output: [(53 -96 15 -15) -96]
Test Case: 793 | Input/Output: [(-70 -71 -78 36) -78]
Test Case: 794 | Input/Output: [(-98 -19 -6 88) -98]
Test Case: 795 | Input/Output: [(-67 -42 14 -19) -67]
Test Case: 796 | Input/Output: [(16 16 -30 -70) -70]
Test Case: 797 | Input/Output: [(56 -11 34 -60) -60]
Test Case: 798 | Input/Output: [(-51 5 99 -4) -51]
Test Case: 799 | Input/Output: [(-10 87 -65 -13) -65]
Test Case: 800 | Input/Output: [(21 80 4 59) 4]
Test Case: 801 | Input/Output: [(67 37 -7 -64) -64]
Test Case: 802 | Input/Output: [(-100 -57 81 38) -100]
Test Case: 803 | Input/Output: [(89 -22 -70 -60) -70]
Test Case: 804 | Input/Output: [(-88 52 55 -4) -88]
Test Case: 805 | Input/Output: [(42 -39 81 40) -39]
Test Case: 806 | Input/Output: [(-99 86 7 20) -99]
Test Case: 807 | Input/Output: [(22 4 -44 -23) -44]
Test Case: 808 | Input/Output: [(-33 68 95 1) -33]
Test Case: 809 | Input/Output: [(39 -84 84 -2) -84]
Test Case: 810 | Input/Output: [(20 57 -45 -33) -45]
Test Case: 811 | Input/Output: [(83 29 -11 67) -11]
Test Case: 812 | Input/Output: [(-98 -14 32 -25) -98]
Test Case: 813 | Input/Output: [(100 84 -87 88) -87]
Test Case: 814 | Input/Output: [(-34 52 13 -7) -34]
Test Case: 815 | Input/Output: [(-62 91 24 8) -62]
Test Case: 816 | Input/Output: [(-37 77 -97 34) -97]
Test Case: 817 | Input/Output: [(31 83 -68 65) -68]
Test Case: 818 | Input/Output: [(75 -86 -93 -58) -93]
Test Case: 819 | Input/Output: [(-13 -8 -31 14) -31]
Test Case: 820 | Input/Output: [(77 -82 42 94) -82]
Test Case: 821 | Input/Output: [(-8 9 -34 49) -34]
Test Case: 822 | Input/Output: [(25 -72 76 74) -72]
Test Case: 823 | Input/Output: [(34 -27 94 40) -27]
Test Case: 824 | Input/Output: [(51 -95 95 64) -95]
Test Case: 825 | Input/Output: [(60 -38 -39 3) -39]
Test Case: 826 | Input/Output: [(-31 47 40 -61) -61]
Test Case: 827 | Input/Output: [(2 13 92 -40) -40]
Test Case: 828 | Input/Output: [(-27 -49 -74 40) -74]
Test Case: 829 | Input/Output: [(94 48 -87 76) -87]
Test Case: 830 | Input/Output: [(93 21 -39 20) -39]
Test Case: 831 | Input/Output: [(-35 -43 -16 -13) -43]
Test Case: 832 | Input/Output: [(-40 -86 92 -31) -86]
Test Case: 833 | Input/Output: [(-96 -66 -44 -73) -96]
Test Case: 834 | Input/Output: [(90 99 33 -96) -96]
Test Case: 835 | Input/Output: [(58 -14 -54 44) -54]
Test Case: 836 | Input/Output: [(-75 -61 -61 88) -75]
Test Case: 837 | Input/Output: [(17 -88 91 84) -88]
Test Case: 838 | Input/Output: [(-14 -66 -66 27) -66]
Test Case: 839 | Input/Output: [(36 -78 52 -100) -100]
Test Case: 840 | Input/Output: [(-38 -58 -83 85) -83]
Test Case: 841 | Input/Output: [(-9 -1 -36 -57) -57]
Test Case: 842 | Input/Output: [(38 -17 -19 66) -19]
Test Case: 843 | Input/Output: [(89 13 39 83) 13]
Test Case: 844 | Input/Output: [(-57 46 -43 82) -57]
Test Case: 845 | Input/Output: [(-6 -40 17 58) -40]
Test Case: 846 | Input/Output: [(42 -82 -73 -59) -82]
Test Case: 847 | Input/Output: [(-67 62 23 16) -67]
Test Case: 848 | Input/Output: [(-76 -37 94 32) -76]
Test Case: 849 | Input/Output: [(-43 -42 63 65) -43]
Test Case: 850 | Input/Output: [(-78 38 16 16) -78]
Test Case: 851 | Input/Output: [(7 15 -56 -70) -70]
Test Case: 852 | Input/Output: [(-22 -4 -65 12) -65]
Test Case: 853 | Input/Output: [(40 80 81 -93) -93]
Test Case: 854 | Input/Output: [(37 -94 93 -36) -94]
Test Case: 855 | Input/Output: [(-27 10 9 -56) -56]
Test Case: 856 | Input/Output: [(-48 -13 -61 -95) -95]
Test Case: 857 | Input/Output: [(-66 -19 60 -58) -66]
Test Case: 858 | Input/Output: [(76 -13 9 -29) -29]
Test Case: 859 | Input/Output: [(44 -55 88 -18) -55]
Test Case: 860 | Input/Output: [(-10 -4 60 84) -10]
Test Case: 861 | Input/Output: [(-33 -16 65 40) -33]
Test Case: 862 | Input/Output: [(-68 65 9 63) -68]
Test Case: 863 | Input/Output: [(-77 47 -96 34) -96]
Test Case: 864 | Input/Output: [(-46 36 26 76) -46]
Test Case: 865 | Input/Output: [(43 -30 92 -23) -30]
Test Case: 866 | Input/Output: [(-32 27 -71 -34) -71]
Test Case: 867 | Input/Output: [(-34 50 18 33) -34]
Test Case: 868 | Input/Output: [(-7 -6 90 -32) -32]
Test Case: 869 | Input/Output: [(59 27 -24 55) -24]
Test Case: 870 | Input/Output: [(52 -75 -89 -6) -89]
Test Case: 871 | Input/Output: [(-76 -75 -12 8) -76]
Test Case: 872 | Input/Output: [(-20 -97 97 95) -97]
Test Case: 873 | Input/Output: [(35 -7 -43 -37) -43]
Test Case: 874 | Input/Output: [(22 1 7 2) 1]
Test Case: 875 | Input/Output: [(74 91 93 -65) -65]
Test Case: 876 | Input/Output: [(49 97 -80 13) -80]
Test Case: 877 | Input/Output: [(-24 2 -36 18) -36]
Test Case: 878 | Input/Output: [(-68 -82 80 -63) -82]
Test Case: 879 | Input/Output: [(12 -65 -40 23) -65]
Test Case: 880 | Input/Output: [(100 11 60 39) 11]
Test Case: 881 | Input/Output: [(68 30 46 24) 24]
Test Case: 882 | Input/Output: [(-3 24 -2 52) -3]
Test Case: 883 | Input/Output: [(-41 42 22 -64) -64]
Test Case: 884 | Input/Output: [(74 -47 -32 55) -47]
Test Case: 885 | Input/Output: [(28 6 6 94) 6]
Test Case: 886 | Input/Output: [(-65 -80 53 -91) -91]
Test Case: 887 | Input/Output: [(-92 20 77 43) -92]
Test Case: 888 | Input/Output: [(-29 -86 56 -20) -86]
Test Case: 889 | Input/Output: [(48 51 -70 -19) -70]
Test Case: 890 | Input/Output: [(-32 63 -60 6) -60]
Test Case: 891 | Input/Output: [(-33 -95 2 89) -95]
Test Case: 892 | Input/Output: [(-68 -17 10 3) -68]
Test Case: 893 | Input/Output: [(-87 -84 40 -26) -87]
Test Case: 894 | Input/Output: [(4 22 -22 -98) -98]
Test Case: 895 | Input/Output: [(-8 4 66 -20) -20]
Test Case: 896 | Input/Output: [(29 49 -8 92) -8]
Test Case: 897 | Input/Output: [(91 -31 -25 9) -31]
Test Case: 898 | Input/Output: [(-50 83 38 -41) -50]
Test Case: 899 | Input/Output: [(-31 34 -53 -74) -74]
Test Case: 900 | Input/Output: [(-97 -46 35 -66) -97]
Test Case: 901 | Input/Output: [(-46 -24 55 23) -46]
Test Case: 902 | Input/Output: [(-42 -66 -31 31) -66]
Test Case: 903 | Input/Output: [(-77 31 -43 6) -77]
Test Case: 904 | Input/Output: [(43 69 -42 17) -42]
Test Case: 905 | Input/Output: [(27 -42 -1 -9) -42]
Test Case: 906 | Input/Output: [(80 54 -50 91) -50]
Test Case: 907 | Input/Output: [(-56 -62 98 93) -62]
Test Case: 908 | Input/Output: [(-53 -22 30 -79) -79]
Test Case: 909 | Input/Output: [(24 -76 37 -58) -76]
Test Case: 910 | Input/Output: [(75 -10 34 -59) -59]
Test Case: 911 | Input/Output: [(4 92 -13 5) -13]
Test Case: 912 | Input/Output: [(71 -9 89 51) -9]
Test Case: 913 | Input/Output: [(35 65 73 -96) -96]
Test Case: 914 | Input/Output: [(-17 42 74 95) -17]
Test Case: 915 | Input/Output: [(36 91 -34 5) -34]
Test Case: 916 | Input/Output: [(-93 95 -70 -87) -93]
Test Case: 917 | Input/Output: [(-32 -87 98 -67) -87]
Test Case: 918 | Input/Output: [(-4 -34 -13 -58) -58]
Test Case: 919 | Input/Output: [(61 15 -9 94) -9]
Test Case: 920 | Input/Output: [(98 -76 -18 92) -76]
Test Case: 921 | Input/Output: [(8 -12 -41 58) -41]
Test Case: 922 | Input/Output: [(-20 36 -26 -4) -26]
Test Case: 923 | Input/Output: [(91 95 84 -95) -95]
Test Case: 924 | Input/Output: [(93 -53 26 -20) -53]
Test Case: 925 | Input/Output: [(76 61 60 89) 60]
Test Case: 926 | Input/Output: [(-25 29 22 20) -25]
Test Case: 927 | Input/Output: [(-76 -34 9 -96) -96]
Test Case: 928 | Input/Output: [(11 55 81 64) 11]
Test Case: 929 | Input/Output: [(74 10 -73 33) -73]
Test Case: 930 | Input/Output: [(10 86 92 -37) -37]
Test Case: 931 | Input/Output: [(25 70 -34 36) -34]
Test Case: 932 | Input/Output: [(85 70 28 -22) -22]
Test Case: 933 | Input/Output: [(-4 63 36 -85) -85]
Test Case: 934 | Input/Output: [(-46 45 6 64) -46]
Test Case: 935 | Input/Output: [(-50 67 9 -42) -50]
Test Case: 936 | Input/Output: [(32 -35 28 -97) -97]
Test Case: 937 | Input/Output: [(90 59 -5 46) -5]
Test Case: 938 | Input/Output: [(-8 21 83 -74) -74]
Test Case: 939 | Input/Output: [(21 25 73 63) 21]
Test Case: 940 | Input/Output: [(54 -84 56 14) -84]
Test Case: 941 | Input/Output: [(39 -9 77 -90) -90]
Test Case: 942 | Input/Output: [(-4 55 -98 8) -98]
Test Case: 943 | Input/Output: [(-60 -33 -85 -71) -85]
Test Case: 944 | Input/Output: [(-92 19 84 -73) -92]
Test Case: 945 | Input/Output: [(-53 -73 -25 5) -73]
Test Case: 946 | Input/Output: [(-41 88 -37 -61) -61]
Test Case: 947 | Input/Output: [(54 33 -52 -17) -52]
Test Case: 948 | Input/Output: [(-1 94 -41 -17) -41]
Test Case: 949 | Input/Output: [(-97 -51 67 -75) -97]
Test Case: 950 | Input/Output: [(-77 -56 -13 -83) -83]
Test Case: 951 | Input/Output: [(-100 12 -75 -27) -100]
Test Case: 952 | Input/Output: [(100 72 -18 -95) -95]
Test Case: 953 | Input/Output: [(96 -67 14 -29) -67]
Test Case: 954 | Input/Output: [(-43 -13 77 -10) -43]
Test Case: 955 | Input/Output: [(-71 74 62 16) -71]
Test Case: 956 | Input/Output: [(-4 62 -86 -50) -86]
Test Case: 957 | Input/Output: [(7 65 -44 -59) -59]
Test Case: 958 | Input/Output: [(93 -95 33 -95) -95]
Test Case: 959 | Input/Output: [(31 99 -1 -34) -34]
Test Case: 960 | Input/Output: [(-44 -43 -55 47) -55]
Test Case: 961 | Input/Output: [(-23 95 51 88) -23]
Test Case: 962 | Input/Output: [(29 -32 -36 -36) -36]
Test Case: 963 | Input/Output: [(49 -33 -77 29) -77]
Test Case: 964 | Input/Output: [(-77 8 42 72) -77]
Test Case: 965 | Input/Output: [(76 -28 -22 34) -28]
Test Case: 966 | Input/Output: [(3 7 -10 51) -10]
Test Case: 967 | Input/Output: [(53 3 -54 -97) -97]
Test Case: 968 | Input/Output: [(-32 43 98 -19) -32]
Test Case: 969 | Input/Output: [(84 -82 90 39) -82]
Test Case: 970 | Input/Output: [(15 -58 -34 -83) -83]
Test Case: 971 | Input/Output: [(-98 -21 -16 -4) -98]
Test Case: 972 | Input/Output: [(96 -47 46 -99) -99]
Test Case: 973 | Input/Output: [(46 -77 -47 19) -77]
Test Case: 974 | Input/Output: [(-70 -37 16 83) -70]
Test Case: 975 | Input/Output: [(-82 39 83 37) -82]
Test Case: 976 | Input/Output: [(-77 9 -14 0) -77]
Test Case: 977 | Input/Output: [(-52 63 70 -6) -52]
Test Case: 978 | Input/Output: [(-90 -77 30 35) -90]
Test Case: 979 | Input/Output: [(49 -34 21 95) -34]
Test Case: 980 | Input/Output: [(85 -29 99 2) -29]
Test Case: 981 | Input/Output: [(25 -56 65 23) -56]
Test Case: 982 | Input/Output: [(81 96 52 77) 52]
Test Case: 983 | Input/Output: [(-52 77 54 28) -52]
Test Case: 984 | Input/Output: [(31 -45 -71 25) -71]
Test Case: 985 | Input/Output: [(47 44 91 -40) -40]
Test Case: 986 | Input/Output: [(84 14 -25 24) -25]
Test Case: 987 | Input/Output: [(-34 74 -76 -44) -76]
Test Case: 988 | Input/Output: [(-9 -95 41 42) -95]
Test Case: 989 | Input/Output: [(86 -19 65 -94) -94]
Test Case: 990 | Input/Output: [(-19 -70 40 30) -70]
Test Case: 991 | Input/Output: [(-50 -27 54 -64) -64]
Test Case: 992 | Input/Output: [(-53 -66 -26 45) -66]
Test Case: 993 | Input/Output: [(67 78 66 -20) -20]
Test Case: 994 | Input/Output: [(10 -71 -100 -78) -100]
Test Case: 995 | Input/Output: [(4 83 31 5) 4]
Test Case: 996 | Input/Output: [(46 6 93 85) 6]
Test Case: 997 | Input/Output: [(-27 31 -85 -53) -85]
Test Case: 998 | Input/Output: [(-73 36 99 41) -73]
Test Case: 999 | Input/Output: [(-4 -71 -42 -35) -71]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -18 -53 -117 -42 118 53 14 -91 -107 42 -76 46 -94 115 -46 80
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-40 -40 -33 -40] -40] [[-40 -92 -92 -92] -92] [[-91 -91 -91 -99] -99] [[25 76 76 76] 25] [[-10 -10 -10 30] -10] [[14 -86 14 14] -86] [[6 6 -80 6] -80] [[91 91 36 91] 36] [[-8 24 24 24] -8] [[1 68 1 1] 1] [(-76 -76 -76 -76) -76] [(30 30 30 30) 30] [(-66 -66 -66 -66) -66] [(-99 -99 -99 -99) -99] [(-29 -29 -29 -29) -29] [(96 30 26 10) 10] [(71 55 19 38) 19] [(19 17 25 25) 17] [(78 54 94 98) 54] [(56 37 26 84) 26] [(42 33 67 7) 7] [(5 82 79 13) 5] [(51 56 32 34) 32] [(39 15 15 55) 15] [(98 92 11 75) 11] [(85 23 94 58) 23] [(0 91 78 37) 0] [(31 19 78 94) 19] [(79 29 15 78) 15] [(60 11 38 29) 11] [(16 88 58 2) 2] [(86 71 80 39) 39] [(43 50 77 49) 43] [(41 67 4 96) 4] [(99 67 91 96) 67] [(-46 -9 72 29) -46] [(-26 40 23 37) -26] [(-22 11 61 -77) -77] [(44 -65 -83 8) -83] [(-32 -43 -3 -7) -43] [(-11 85 -35 -16) -35] [(96 10 -5 97) -5] [(84 -33 -96 -19) -96] [(13 5 -37 13) -37] [(19 26 -13 -48) -48] [(34 83 -54 -86) -86] [(-23 -69 36 94) -69] [(-5 81 -52 -29) -52] [(99 -14 96 84) -14] [(-91 -6 22 -51) -91] [(-66 -49 -31 -15) -66] [(79 23 -43 -97) -97] [(95 -66 63 -11) -66] [(97 -82 -43 75) -82] [(90 -65 -76 100) -76] [(19 77 26 90) 19] [(-12 45 19 -69) -69] [(98 50 -41 -72) -72] [(8 6 93 6) 6] [(64 -93 69 89) -93] [(-64 -93 73 -32) -93] [(-12 -20 -30 14) -30] [(-45 -11 92 -41) -45] [(23 -10 -5 -36) -36] [(3 23 86 -3) -3] [(-68 -81 -93 76) -93] [(-19 -62 96 53) -62] [(-21 -4 96 78) -21] [(-6 -53 7 -87) -87] [(43 -97 56 -67) -97] [(-97 -23 -43 5) -97] [(-65 0 -12 13) -65] [(-11 84 -80 51) -80] [(54 1 -94 -6) -94] [(4 58 -86 95) -86] [(65 50 -32 -25) -32] [(-93 81 -19 -27) -93] [(14 -19 84 -37) -37] [(61 -51 95 32) -51] [(48 44 -81 28) -81] [(-89 -55 -27 27) -89] [(-55 82 -25 24) -55] [(32 70 73 -94) -94] [(-45 39 47 21) -45] [(47 -97 -15 -5) -97] [(36 -33 97 8) -33] [(-82 -39 -40 100) -82] [(-92 47 28 -13) -92] [(-30 51 13 -64) -64] [(-4 44 16 -61) -61] [(28 91 -25 -1) -25] [(100 -7 -95 -94) -95] [(85 41 25 22) 22] [(-20 -70 -44 33) -70] [(-59 -50 87 -62) -62])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -99                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: 30                 
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 38                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 98                 
Correct output: 26                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 13                 
Correct output: 32                  | Program output: 34                 
Correct output: 15                  | Program output: 55                 
Correct output: 11                  | Program output: 75                 
Correct output: 23                  | Program output: 58                 
Correct output: 0                   | Program output: 37                 
Correct output: 19                  | Program output: 94                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 49                 
Correct output: 4                   | Program output: 96                 
Correct output: 67                  | Program output: 96                 
Correct output: -46                 | Program output: 29                 
Correct output: -26                 | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 8                  
Correct output: -43                 | Program output: -7                 
Correct output: -35                 | Program output: -16                
Correct output: -5                  | Program output: 97                 
Correct output: -96                 | Program output: -19                
Correct output: -37                 | Program output: 13                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: 94                 
Correct output: -52                 | Program output: -29                
Correct output: -14                 | Program output: 84                 
Correct output: -91                 | Program output: -51                
Correct output: -66                 | Program output: -15                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -11                
Correct output: -82                 | Program output: 75                 
Correct output: -76                 | Program output: 100                
Correct output: 19                  | Program output: 90                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: 89                 
Correct output: -93                 | Program output: -32                
Correct output: -30                 | Program output: 14                 
Correct output: -45                 | Program output: -41                
Correct output: -36                 | Program output: -36                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 53                 
Correct output: -21                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -67                
Correct output: -97                 | Program output: 5                  
Correct output: -65                 | Program output: 13                 
Correct output: -80                 | Program output: 51                 
Correct output: -94                 | Program output: -6                 
Correct output: -86                 | Program output: 95                 
Correct output: -32                 | Program output: -25                
Correct output: -93                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: 32                 
Correct output: -81                 | Program output: 28                 
Correct output: -89                 | Program output: 27                 
Correct output: -55                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 21                 
Correct output: -97                 | Program output: -5                 
Correct output: -33                 | Program output: 8                  
Correct output: -82                 | Program output: 100                
Correct output: -92                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -1                 
Correct output: -95                 | Program output: -94                
Correct output: 22                  | Program output: 22                 
Correct output: -70                 | Program output: 33                 
Correct output: -62                 | Program output: -62                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_486} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_242} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction tagged_43} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction 33} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_828} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times})
Lexicase best program: (exec_s_when_autoconstructing (integer_max) (exec_rot (boolean_xor) (exec_flush) (in4 boolean_invert_second_then_and print_integer integer_yank integer_lt integer_mult exec_when (boolean_frominteger exec_do*times (integer_inc) boolean_yankdup) print_boolean) exec_when (integer_gt boolean_invert_second_then_and integer_dup_items) exec_k_when_autoconstructing (tag_integer_486 boolean_frominteger integer_dup_times boolean_flush tagged_242 in1 boolean_invert_first_then_and exec_empty) (boolean_eq exec_y (integer_dup_times boolean_yankdup boolean_invert_first_then_and exec_do*range (boolean_or boolean_shove integer_rot exec_dup_times (boolean_invert_second_then_and exec_do*count () boolean_or print_integer) integer_dup_items integer_stackdepth boolean_eq) tagged_43) exec_s_when_autoconstructing () (boolean_flush) (boolean_yankdup) exec_flush) 33 integer_add tag_integer_828) (boolean_swap integer_fromboolean) boolean_dup_items exec_s (exec_eq) (boolean_or print_boolean exec_dup (integer_lte exec_while () integer_lte integer_rot integer_max exec_if (boolean_invert_first_then_and boolean_dup_times boolean_empty exec_do*times () exec_noop exec_do*while (integer_yankdup exec_do*times (exec_pop (exec_do*count (exec_y_when_autoconstructing (exec_do*count (exec_rot () (exec_empty exec_swap () (boolean_stackdepth) integer_yank boolean_and) () exec_s_when_autoconstructing (integer_min exec_if (integer_gte) (exec_flush print_exec (integer_sub integer_yank integer_flush integer_dup) exec_when (boolean_and integer_dup_times))) () ()))))))) ())) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 145
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_flush} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_486} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_242} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_eq} {:close 1, :instruction tagged_43} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction 33} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_828} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 2, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times})
Zero cases best program: (exec_s_when_autoconstructing (integer_max) (exec_rot (boolean_xor) (exec_flush) (in4 boolean_invert_second_then_and print_integer integer_yank integer_lt integer_mult exec_when (boolean_frominteger exec_do*times (integer_inc) boolean_yankdup) print_boolean) exec_when (integer_gt boolean_invert_second_then_and integer_dup_items) exec_k_when_autoconstructing (tag_integer_486 boolean_frominteger integer_dup_times boolean_flush tagged_242 in1 boolean_invert_first_then_and exec_empty) (boolean_eq exec_y (integer_dup_times boolean_yankdup boolean_invert_first_then_and exec_do*range (boolean_or boolean_shove integer_rot exec_dup_times (boolean_invert_second_then_and exec_do*count () boolean_or print_integer) integer_dup_items integer_stackdepth boolean_eq) tagged_43) exec_s_when_autoconstructing () (boolean_flush) (boolean_yankdup) exec_flush) 33 integer_add tag_integer_828) (boolean_swap integer_fromboolean) boolean_dup_items exec_s (exec_eq) (boolean_or print_boolean exec_dup (integer_lte exec_while () integer_lte integer_rot integer_max exec_if (boolean_invert_first_then_and boolean_dup_times boolean_empty exec_do*times () exec_noop exec_do*while (integer_yankdup exec_do*times (exec_pop (exec_do*count (exec_y_when_autoconstructing (exec_do*count (exec_rot () (exec_empty exec_swap () (boolean_stackdepth) integer_yank boolean_and) () exec_s_when_autoconstructing (integer_min exec_if (integer_gte) (exec_flush print_exec (integer_sub integer_yank integer_flush integer_dup) exec_when (boolean_and integer_dup_times))) () ()))))))) ())) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 145
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 7 5 14 14 3 3 4 3)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (4 4 7 5 14 14 3 3 4 3)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_lte} {:close 2, :instruction tagged_443} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_595} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction print_exec} {:close 2, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_noop})
Best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop boolean_or boolean_yank exec_s_when_autoconstructing (integer_dup_times) (integer_stackdepth in4 print_integer integer_mod) (boolean_dup) exec_do*while () boolean_frominteger integer_min boolean_or boolean_dup_items integer_lte tagged_443 boolean_dup_times boolean_flush tag_boolean_595 boolean_xor exec_k (integer_lte exec_dup ()) (exec_do*times (integer_eq exec_eq exec_do*count () print_integer) print_exec (exec_while ()) integer_dec exec_when () exec_noop))
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 9.939
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.993 0.995 0.986 0.986 0.997 0.997 0.996 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.63
Average program size in population (points): 69.942
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.264
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475430
--- Timings ---
Current time: 1559582798386 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.7%
Reproduction:         0.7 seconds, 27.5%
Fitness Testing:      1.9 seconds, 68.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: 72                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: 96                 
Correct output: -91                 | Program output: 22                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: 63                 
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: 69                 
Correct output: -93                 | Program output: 73                 
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: 92                 
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 96                 
Correct output: -21                 | Program output: 96                 
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 56                 
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: 84                 
Correct output: -51                 | Program output: 95                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: 97                 
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction -69})
Lexicase best program: (exec_dup_items integer_shove integer_lt integer_gt exec_k_when_autoconstructing (integer_lt in3 boolean_flush) (integer_mod) print_boolean print_integer boolean_or exec_dup_times () exec_empty -69)
Lexicase best errors: [0 1 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 19
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction -69})
Zero cases best program: (exec_dup_items integer_shove integer_lt integer_gt exec_k_when_autoconstructing (integer_lt in3 boolean_flush) (integer_mod) print_boolean print_integer boolean_or exec_dup_times () exec_empty -69)
Zero cases best errors: [0 1 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 19
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 219 354 353 164 157 729 218 376 157)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (157 219 354 353 164 157 729 218 376 157)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction -69})
Best program: (exec_dup_items integer_shove integer_lt integer_gt exec_k_when_autoconstructing (integer_lt in3 boolean_flush) (integer_mod) print_boolean print_integer boolean_or exec_dup_times () exec_empty -69)
Errors: [0 1 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 19
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.116
Median total errors in population: 7
Error averages by case: (0.843 0.781 0.646 0.647 0.836 0.843 0.271 0.782 0.624 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.295
Average program size in population (points): 75.094
Average percent parens in population: 0.290
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.523
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 870325
--- Timings ---
Current time: 1559582801051 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 46.7%
Fitness Testing:      2.5 seconds, 44.9%
Report:               0.4 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: 72                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: 96                 
Correct output: -91                 | Program output: 22                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: 63                 
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: 69                 
Correct output: -93                 | Program output: 73                 
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: 92                 
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 96                 
Correct output: -21                 | Program output: 96                 
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 56                 
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: 84                 
Correct output: -51                 | Program output: 95                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: 97                 
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_169} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 2, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 36} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Lexicase best program: (boolean_frominteger integer_empty tagged_169 boolean_dup_items exec_swap (print_integer integer_gte) (boolean_invert_first_then_and boolean_yankdup) integer_empty in3 print_integer integer_empty exec_s (exec_stackdepth) (exec_dup (exec_flush exec_pop (integer_min exec_dup_items exec_k () (integer_pop boolean_frominteger) 36 integer_mod exec_while (exec_rot () (boolean_shove integer_dup) (integer_mult integer_empty) boolean_swap integer_mod)))) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_169} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 2, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 36} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod})
Zero cases best program: (boolean_frominteger integer_empty tagged_169 boolean_dup_items exec_swap (print_integer integer_gte) (boolean_invert_first_then_and boolean_yankdup) integer_empty in3 print_integer integer_empty exec_s (exec_stackdepth) (exec_dup (exec_flush exec_pop (integer_min exec_dup_items exec_k () (integer_pop boolean_frominteger) 36 integer_mod exec_while (exec_rot () (boolean_shove integer_dup) (integer_mult integer_empty) boolean_swap integer_mod)))) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (388 253 388 74 71 387 920 205 205 205)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (388 253 388 74 71 387 920 205 205 205)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction -6} {:close 2, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -92} {:close 0, :instruction boolean_swap})
Best program: (exec_dup_times () in2 in3 print_integer exec_k_when_autoconstructing (exec_while (in3 boolean_invert_second_then_and -6) exec_swap () () boolean_swap) (exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_swap (boolean_empty exec_do*while () exec_do*range (integer_flush integer_stackdepth exec_while (exec_dup_times (-92 boolean_swap)))) ())) () ()))
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 40
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 6.904
Median total errors in population: 6
Error averages by case: (0.612 0.747 0.612 0.926 0.929 0.613 0.08 0.795 0.795 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.413
Average program size in population (points): 61.758
Average percent parens in population: 0.295
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9825
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1276391
--- Timings ---
Current time: 1559582804427 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         5.1 seconds, 57.9%
Fitness Testing:      3.0 seconds, 33.9%
Report:               0.6 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: 72                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: 96                 
Correct output: -91                 | Program output: 22                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: 63                 
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: 69                 
Correct output: -93                 | Program output: 73                 
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: 92                 
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 96                 
Correct output: -21                 | Program output: 96                 
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 56                 
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: 84                 
Correct output: -51                 | Program output: 95                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: 97                 
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction -6} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -92} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_119} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_dup_times () in2 in3 print_integer exec_k_when_autoconstructing (exec_while (in3 boolean_invert_second_then_and -6) exec_swap () (boolean_swap) exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_swap (boolean_empty exec_do*while () exec_do*range (integer_flush integer_stackdepth exec_while (exec_dup_times (-92 exec_k (exec_rot (boolean_empty integer_shove) (boolean_dup_times boolean_or exec_if (integer_dup_items boolean_rot print_boolean integer_div) (boolean_shove integer_dup) exec_y_when_autoconstructing (exec_do*times (boolean_and integer_fromboolean integer_div boolean_dup boolean_invert_first_then_and) boolean_dup_items) in3 print_integer tagged_119 integer_gt boolean_eq) ()) ())))) ())) () ()) ())
Lexicase best errors: [1 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction -6} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction -92} {:close 0, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_119} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_dup_times () in2 in3 print_integer exec_k_when_autoconstructing (exec_while (in3 boolean_invert_second_then_and -6) exec_swap () (boolean_swap) exec_s_when_autoconstructing (exec_y_when_autoconstructing (exec_swap (boolean_empty exec_do*while () exec_do*range (integer_flush integer_stackdepth exec_while (exec_dup_times (-92 exec_k (exec_rot (boolean_empty integer_shove) (boolean_dup_times boolean_or exec_if (integer_dup_items boolean_rot print_boolean integer_div) (boolean_shove integer_dup) exec_y_when_autoconstructing (exec_do*times (boolean_and integer_fromboolean integer_div boolean_dup boolean_invert_first_then_and) boolean_dup_items) in3 print_integer tagged_119 integer_gt boolean_eq) ()) ())))) ())) () ()) ())
Zero cases best errors: [1 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 902 322 207 89 278 322 322 322 902)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (89 902 322 207 89 278 322 322 322 902)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_169} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 2, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 36} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 1, :instruction print_integer})
Best program: (boolean_frominteger integer_empty tagged_169 boolean_dup_items exec_swap (print_integer integer_gte) (boolean_invert_first_then_and boolean_yankdup) integer_empty in3 print_integer integer_empty exec_s (exec_stackdepth) (exec_dup (exec_flush exec_pop (integer_min exec_dup_items exec_k () (integer_pop boolean_frominteger) 36 integer_mod exec_while (exec_rot (exec_do*times (integer_eq exec_eq exec_do*count () print_integer)) () ())))) ())
Errors: [1 0 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.245
Median total errors in population: 7
Error averages by case: (0.911 0.098 0.678 0.793 0.911 0.722 0.678 0.678 0.678 0.098)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.042
Average program size in population (points): 65.905
Average percent parens in population: 0.281
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4745
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1613046
--- Timings ---
Current time: 1559582807329 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.4 seconds, 62.9%
Fitness Testing:      3.4 seconds, 29.0%
Report:               0.9 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -40                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 96                 
Correct output: 19                  | Program output: 71                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 56                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 39                 
Correct output: 11                  | Program output: 98                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 60                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 41                 
Correct output: 67                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -22                
Correct output: -83                 | Program output: 44                 
Correct output: -43                 | Program output: -32                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: 96                 
Correct output: -96                 | Program output: 84                 
Correct output: -37                 | Program output: 13                 
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -23                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: 95                 
Correct output: -82                 | Program output: 97                 
Correct output: -76                 | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 8                  
Correct output: -93                 | Program output: 64                 
Correct output: -93                 | Program output: -64                
Correct output: -30                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 23                 
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -68                
Correct output: -62                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -87                 | Program output: -6                 
Correct output: -97                 | Program output: 43                 
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: 54                 
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: 14                 
Correct output: -51                 | Program output: 61                 
Correct output: -81                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: 47                 
Correct output: -33                 | Program output: 36                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: 100                
Correct output: 22                  | Program output: 85                 
Correct output: -70                 | Program output: -20                
Correct output: -62                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_gt})
Lexicase best program: (boolean_shove boolean_shove exec_do*count (in1) print_integer integer_lte boolean_stackdepth in2 integer_max integer_dup boolean_invert_first_then_and boolean_or integer_yankdup integer_shove exec_pop (integer_inc exec_rot (integer_yank exec_stackdepth exec_flush integer_mult integer_empty integer_sub exec_do*count () exec_when (integer_mult exec_noop boolean_not integer_div) print_boolean boolean_empty boolean_and boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (boolean_pop boolean_pop) (integer_gt)) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_gt})
Zero cases best program: (boolean_shove boolean_shove exec_do*count (in1) print_integer integer_lte boolean_stackdepth in2 integer_max integer_dup boolean_invert_first_then_and boolean_or integer_yankdup integer_shove exec_pop (integer_inc exec_rot (integer_yank exec_stackdepth exec_flush integer_mult integer_empty integer_sub exec_do*count () exec_when (integer_mult exec_noop boolean_not integer_div) print_boolean boolean_empty boolean_and boolean_dup_times boolean_dup_items exec_k_when_autoconstructing (boolean_pop boolean_pop) (integer_gt)) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 687 100 919 110 100 100 229 477 100)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (102 687 100 919 110 100 100 229 477 100)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction tag_exec_945} {:close 0, :instruction in2} {:close 0, :instruction tagged_406} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_264} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_yankdup} {:close 0, :instruction tagged_7} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times})
Best program: (integer_min exec_stackdepth integer_flush exec_while (integer_sub boolean_shove boolean_stackdepth boolean_flush) boolean_not boolean_rot exec_noop boolean_stackdepth integer_gte tag_exec_945 (in2 tagged_406 integer_sub) integer_min exec_do*while () integer_rot integer_stackdepth integer_empty 100 integer_mult exec_noop tag_integer_264 integer_add integer_div integer_div integer_yank exec_k_when_autoconstructing () (exec_k (integer_gt integer_empty) (integer_flush) integer_empty exec_do*times (in1) print_integer in4 exec_flush exec_yank) exec_yankdup tagged_7 exec_rot (boolean_dup_times) () ())
Errors: [0 0 0 0 1 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 58
Percent parens: 0.207
--- Population Statistics ---
Average total errors in population: 7.076
Median total errors in population: 7
Error averages by case: (0.898 0.313 0.9 0.081 0.89 0.9 0.9 0.771 0.523 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.499
Average program size in population (points): 57.693
Average percent parens in population: 0.292
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.943625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2024309
--- Timings ---
Current time: 1559582810680 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.0 seconds, 66.4%
Fitness Testing:      3.9 seconds, 25.8%
Report:               1.1 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 37                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 92                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 67                 
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 40                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 85                 
Correct output: -5                  | Program output: 10                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: 26                 
Correct output: -86                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: 81                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: 23                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: 45                 
Correct output: -72                 | Program output: 50                 
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: 84                 
Correct output: -94                 | Program output: 1                  
Correct output: -86                 | Program output: 58                 
Correct output: -32                 | Program output: 50                 
Correct output: -93                 | Program output: 81                 
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 44                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: 82                 
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 47                 
Correct output: -64                 | Program output: 51                 
Correct output: -61                 | Program output: 44                 
Correct output: -25                 | Program output: 91                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 41                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_292} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_empty})
Lexicase best program: (exec_do*times (integer_max integer_lte exec_s_when_autoconstructing () (integer_shove) (exec_empty in2 exec_y (exec_rot (boolean_flush print_integer exec_pop (in1 boolean_eq) exec_k (tag_boolean_292 integer_mult exec_s_when_autoconstructing () (integer_dec integer_flush) (integer_pop integer_sub) boolean_dup integer_dup_times exec_rot (boolean_empty) () ()) ()) () ()))))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_292} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_empty})
Zero cases best program: (exec_do*times (integer_max integer_lte exec_s_when_autoconstructing () (integer_shove) (exec_empty in2 exec_y (exec_rot (boolean_flush print_integer exec_pop (in1 boolean_eq) exec_k (tag_boolean_292 integer_mult exec_s_when_autoconstructing () (integer_dec integer_flush) (integer_pop integer_sub) boolean_dup integer_dup_times exec_rot (boolean_empty) () ()) ()) () ()))))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 107 124 124 107 124 107 107 221 563)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (231 107 124 124 107 124 107 107 221 563)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_473} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction -10} {:close 0, :instruction integer_add} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 1, :instruction tag_boolean_57} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_flush})
Best program: (exec_do*range () exec_empty boolean_invert_first_then_and boolean_xor integer_eq in2 print_integer exec_rot (boolean_pop) (integer_rot) (integer_div boolean_stackdepth exec_y (exec_yankdup exec_y_when_autoconstructing (exec_if (tag_integer_473 integer_stackdepth boolean_not integer_div) () exec_y (exec_swap (integer_flush integer_lt) (-10 integer_add integer_inc in1 integer_min exec_y_when_autoconstructing () exec_if (tag_boolean_57) (boolean_invert_second_then_and integer_pop integer_flush)))))))
Errors: [0 0 1 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 50
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 8.185
Median total errors in population: 9
Error averages by case: (0.769 0.893 0.876 0.876 0.893 0.876 0.893 0.893 0.779 0.437)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.464
Average program size in population (points): 65.876
Average percent parens in population: 0.260
Minimum age in population: 5.4375
Maximum age in population: 9.1875
Average age in population: 7.45
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2399192
--- Timings ---
Current time: 1559582814233 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.4 seconds, 68.3%
Fitness Testing:      4.3 seconds, 23.7%
Report:               1.4 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 765
Test mean error for best: 0.76500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: 72                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: 85                 
Correct output: -5                  | Program output: 10                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: 26                 
Correct output: -86                 | Program output: 83                 
Correct output: -69                 | Program output: 36                 
Correct output: -52                 | Program output: 81                 
Correct output: -14                 | Program output: 96                 
Correct output: -91                 | Program output: 22                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: 23                 
Correct output: -66                 | Program output: 63                 
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: 50                 
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: 69                 
Correct output: -93                 | Program output: 73                 
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: 92                 
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: 96                 
Correct output: -21                 | Program output: 96                 
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 56                 
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: 84                 
Correct output: -94                 | Program output: 1                  
Correct output: -86                 | Program output: 58                 
Correct output: -32                 | Program output: 50                 
Correct output: -93                 | Program output: 81                 
Correct output: -37                 | Program output: 84                 
Correct output: -51                 | Program output: 95                 
Correct output: -81                 | Program output: 44                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: 82                 
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: 97                 
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: 91                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop in3 boolean_yank in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.268
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop in3 boolean_yank in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.268
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 911 904 1 79 81 1000 1000 522 1)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (0 911 904 1 79 81 0 0 522 1)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop in3 boolean_yank in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 71
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.501
Median total errors in population: 7
Error averages by case: (1.0 0.089 0.096 0.999 0.921 0.919 1.0 1.0 0.478 0.999)
Error minima by case: (1 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 44.84
Average program size in population (points): 63.849
Average percent parens in population: 0.303
Minimum age in population: 6.5
Maximum age in population: 10.5625
Average age in population: 8.8816875
Median age in population: 8.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2941283
--- Timings ---
Current time: 1559582817422 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.8 seconds, 67.5%
Fitness Testing:      4.9 seconds, 22.4%
Report:               2.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -40                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 96                 
Correct output: 19                  | Program output: 71                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 56                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 39                 
Correct output: 11                  | Program output: 98                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 60                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 41                 
Correct output: 67                  | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -22                
Correct output: -83                 | Program output: 44                 
Correct output: -43                 | Program output: -32                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: 96                 
Correct output: -96                 | Program output: 84                 
Correct output: -37                 | Program output: 13                 
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -23                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: 99                 
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: 95                 
Correct output: -82                 | Program output: 97                 
Correct output: -76                 | Program output: 90                 
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 8                  
Correct output: -93                 | Program output: 64                 
Correct output: -93                 | Program output: -64                
Correct output: -30                 | Program output: -12                
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 23                 
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -68                
Correct output: -62                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -87                 | Program output: -6                 
Correct output: -97                 | Program output: 43                 
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: 54                 
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: 14                 
Correct output: -51                 | Program output: 61                 
Correct output: -81                 | Program output: 48                 
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: 47                 
Correct output: -33                 | Program output: 36                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: 100                
Correct output: 22                  | Program output: 85                 
Correct output: -70                 | Program output: -20                
Correct output: -62                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction -69})
Lexicase best program: (boolean_shove boolean_shove exec_do*count (in1) print_integer integer_lte boolean_stackdepth in2 integer_max integer_dup exec_flush boolean_flush integer_mod print_boolean print_integer boolean_or exec_dup_times () exec_empty -69)
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_mod} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction -69})
Zero cases best program: (boolean_shove boolean_shove exec_do*count (in1) print_integer integer_lte boolean_stackdepth in2 integer_max integer_dup exec_flush boolean_flush integer_mod print_boolean print_integer boolean_or exec_dup_times () exec_empty -69)
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 4 351 363 1000 3 5 887 1000 526)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (348 4 351 363 0 3 5 887 0 526)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_while} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_exec_399} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_while} {:close 1, :instruction print_exec})
Best program: (boolean_shove boolean_shove exec_do*count (in1) print_integer integer_lte boolean_stackdepth in2 integer_max integer_dup boolean_invert_first_then_and boolean_or integer_yankdup integer_shove exec_pop () integer_inc exec_rot (integer_yank exec_stackdepth exec_flush integer_mult integer_min exec_swap (exec_dup (boolean_stackdepth boolean_pop) integer_mult exec_while (exec_flush integer_lte) exec_swap (exec_when () integer_mult exec_when (integer_dup) integer_swap boolean_swap) () boolean_or boolean_eq boolean_xor exec_when (exec_dup () exec_y (boolean_yank tag_exec_399 (exec_empty integer_mod exec_yankdup exec_s_when_autoconstructing (in2 print_exec (integer_dec exec_while () print_exec ())) () ())))) ()) () ())
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 54
Size: 78
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.513
Median total errors in population: 8
Error averages by case: (0.652 0.996 0.649 0.637 1.0 0.997 0.995 0.113 1.0 0.474)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 50.174
Average program size in population (points): 67.889
Average percent parens in population: 0.258
Minimum age in population: 7.75
Maximum age in population: 12.109375
Average age in population: 10.6975
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 277
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3237139
--- Timings ---
Current time: 1559582820357 milliseconds
Total Time:          24.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.1 seconds, 69.0%
Fitness Testing:      5.2 seconds, 21.1%
Report:               2.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: 72                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: 36                 
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: 96                 
Correct output: -91                 | Program output: 22                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: 63                 
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: 69                 
Correct output: -93                 | Program output: 73                 
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: 92                 
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 96                 
Correct output: -21                 | Program output: 96                 
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: 56                 
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: 84                 
Correct output: -51                 | Program output: 95                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: 97                 
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction -88} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tagged_267} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_869} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop in3 boolean_yank boolean_yankdup print_integer -88 exec_s () (boolean_xor) (boolean_dup_items tagged_267) exec_noop integer_dup_times exec_dup (integer_min) exec_while (boolean_invert_second_then_and exec_shove (exec_shove (in1 integer_dup_items boolean_invert_second_then_and) exec_s_when_autoconstructing (boolean_pop integer_swap exec_when (boolean_swap)) (boolean_or exec_stackdepth tagged_869 boolean_shove) (boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) exec_eq boolean_invert_second_then_and) boolean_not exec_when (integer_sub) in2)
Lexicase best errors: [1 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction -88} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tagged_267} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_869} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop in3 boolean_yank boolean_yankdup print_integer -88 exec_s () (boolean_xor) (boolean_dup_items tagged_267) exec_noop integer_dup_times exec_dup (integer_min) exec_while (boolean_invert_second_then_and exec_shove (exec_shove (in1 integer_dup_items boolean_invert_second_then_and) exec_s_when_autoconstructing (boolean_pop integer_swap exec_when (boolean_swap)) (boolean_or exec_stackdepth tagged_869 boolean_shove) (boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) exec_eq boolean_invert_second_then_and) boolean_not exec_when (integer_sub) in2)
Zero cases best errors: [1 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 888 888 268 385 395 254 1 1 267)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (234 888 888 268 385 395 254 1 1 267)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction -88} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction tagged_267} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_869} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (integer_pop integer_mod) boolean_swap boolean_pop in3 boolean_yank boolean_yankdup print_integer -88 exec_s () (boolean_xor) (boolean_dup_items tagged_267) exec_noop integer_dup_times exec_dup (integer_min) exec_while (boolean_invert_second_then_and exec_shove (exec_shove (in1 integer_dup_items boolean_invert_second_then_and) exec_s_when_autoconstructing (boolean_pop integer_swap exec_when (boolean_swap)) (boolean_or exec_stackdepth tagged_869 boolean_shove) (boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) exec_eq boolean_invert_second_then_and) boolean_not exec_when (integer_sub) in2)
Errors: [1 0 0 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 68
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.419
Median total errors in population: 6
Error averages by case: (0.766 0.112 0.112 0.732 0.615 0.605 0.746 0.999 0.999 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.789
Average program size in population (points): 67.609
Average percent parens in population: 0.261
Minimum age in population: 8.75
Maximum age in population: 13.859375
Average age in population: 12.312671875
Median age in population: 12.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3514130
--- Timings ---
Current time: 1559582822897 milliseconds
Total Time:          27.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.1 seconds, 69.9%
Fitness Testing:      5.6 seconds, 20.3%
Report:               2.6 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 582
Test mean error for best: 0.58200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -40                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 68                 
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 37                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 92                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 67                 
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 40                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: 44                 
Correct output: -43                 | Program output: -32                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: 84                 
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -66                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: 97                 
Correct output: -76                 | Program output: 90                 
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: 45                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -12                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: 23                 
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: 47                 
Correct output: -64                 | Program output: 51                 
Correct output: -61                 | Program output: 44                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: 100                
Correct output: 22                  | Program output: 41                 
Correct output: -70                 | Program output: -20                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_when} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_exec_399} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_dup) integer_swap integer_inc boolean_or boolean_eq integer_min exec_when () exec_dup ()) (exec_y (boolean_yank) tag_exec_399 (exec_empty integer_mod)) ())))
Lexicase best errors: [0 1 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_when} {:close 2, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_yank} {:close 0, :instruction tag_exec_399} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_dup) integer_swap integer_inc boolean_or boolean_eq integer_min exec_when () exec_dup ()) (exec_y (boolean_yank) tag_exec_399 (exec_empty integer_mod)) ())))
Zero cases best errors: [0 1 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 241 200 152 239 510 509 510 144 532)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (907 241 200 152 239 510 509 510 144 532)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Errors: [0 1 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 6.056
Median total errors in population: 5
Error averages by case: (0.093 0.759 0.8 0.848 0.761 0.49 0.491 0.49 0.856 0.468)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.689
Average program size in population (points): 67.267
Average percent parens in population: 0.260
Minimum age in population: 11.0
Maximum age in population: 15.51171875
Average age in population: 13.79827734375
Median age in population: 13.8671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3904782
--- Timings ---
Current time: 1559582825561 milliseconds
Total Time:          30.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.1 seconds, 70.4%
Fitness Testing:      6.0 seconds, 19.9%
Report:               2.8 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output:                    
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 96                 
Correct output: 19                  | Program output: 71                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 56                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 39                 
Correct output: 11                  | Program output: 98                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 41                 
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 48                 
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 85                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))
Lexicase best errors: [1 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))
Zero cases best errors: [1 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (322 17 505 17 325 227 94 321 573 92)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (322 17 505 17 325 227 94 321 573 92)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))
Errors: [1 0 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 55
Size: 74
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 7.507
Median total errors in population: 7
Error averages by case: (0.678 0.983 0.495 0.983 0.675 0.773 0.906 0.679 0.427 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.766
Average program size in population (points): 68.583
Average percent parens in population: 0.259
Minimum age in population: 12.8515625
Maximum age in population: 17.123046875
Average age in population: 15.37046484375
Median age in population: 15.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4252151
--- Timings ---
Current time: 1559582828330 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 70.7%
Fitness Testing:      6.4 seconds, 19.5%
Report:               3.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 boolean_and in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 boolean_and in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 178 449 512 75 379 635 171 303 671)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (890 178 449 512 75 379 635 171 303 671)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) integer_sub) in2) () ())))
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 54
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 5.737
Median total errors in population: 5
Error averages by case: (0.11 0.822 0.551 0.488 0.925 0.621 0.365 0.829 0.697 0.329)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.65
Average program size in population (points): 70.98
Average percent parens in population: 0.257
Minimum age in population: 14.203125
Maximum age in population: 18.28515625
Average age in population: 16.8306796875
Median age in population: 16.876953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.008
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4631820
--- Timings ---
Current time: 1559582830932 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 70.8%
Fitness Testing:      6.8 seconds, 19.2%
Report:               3.5 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (exec_do*range () integer_sub) in2)) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (exec_do*range () integer_sub) in2)) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (391 726 715 357 343 391 358 52 381 155)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (391 726 715 357 343 391 358 52 381 155)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 boolean_and in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 exec_while (exec_k () (boolean_eq exec_shove (integer_shove integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2))))))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 55
Size: 75
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.131
Median total errors in population: 8
Error averages by case: (0.609 0.274 0.285 0.643 0.657 0.609 0.642 0.948 0.619 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.504
Average program size in population (points): 70.878
Average percent parens in population: 0.259
Minimum age in population: 16.4140625
Maximum age in population: 20.0009765625
Average age in population: 18.21699853515625
Median age in population: 18.29296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5099635
--- Timings ---
Current time: 1559582833627 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.0 seconds, 71.0%
Fitness Testing:      7.3 seconds, 19.1%
Report:               3.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (integer_pop integer_mod) in2 boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 print_boolean in2 exec_k () (integer_gt boolean_yankdup boolean_dup boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (integer_pop integer_mod) in2 boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 print_boolean in2 exec_k () (integer_gt boolean_yankdup boolean_dup boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (844 9 887 1000 1000 887 5 1000 694 595)
Population mean number of elite cases: 6.92
Count of perfect (error zero) individuals by case: (844 9 887 0 0 887 5 0 694 595)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (in1 integer_mod) boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 boolean_and in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_empty integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (boolean_xor in1) tagged_440) (exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) integer_yank exec_k (integer_sub) (in2)))
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 72
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 6.079
Median total errors in population: 6
Error averages by case: (0.156 0.991 0.113 1.0 1.0 0.113 0.995 1.0 0.306 0.405)
Error minima by case: (0 0 0 1 1 0 0 1 0 0)
Average genome size in population (length): 52.03
Average program size in population (points): 70.271
Average percent parens in population: 0.260
Minimum age in population: 18.169921875
Maximum age in population: 21.660888671875
Average age in population: 19.67182934570312
Median age in population: 19.760498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5442396
--- Timings ---
Current time: 1559582836252 milliseconds
Total Time:          40.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.9 seconds, 71.3%
Fitness Testing:      7.6 seconds, 18.8%
Report:               3.9 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while () in1 integer_mod boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 boolean_and in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) (exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)) ()))))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while () in1 integer_mod boolean_swap boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 boolean_and in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup exec_k () (boolean_eq exec_shove (integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) (exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)) ()))))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 417 1000 86 456 416 1000 435 864)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (0 0 417 0 86 456 416 0 435 864)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction integer_sub} {:close 1, :instruction in2})
Best program: (exec_do*while (integer_pop integer_mod) in2 boolean_pop in3 boolean_stackdepth in3 exec_y_when_autoconstructing () in2 in3 print_boolean in2 exec_k () (integer_gt boolean_yankdup boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_dup_times print_integer boolean_dup_items exec_when (in3 boolean_yankdup integer_gte) boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_pop tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) boolean_swap)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (integer_sub) (in2)))
Errors: [1 1 0 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 73
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 7.326
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.583 1.0 0.914 0.544 0.584 1.0 0.565 0.136)
Error minima by case: (1 1 0 1 0 0 0 1 0 0)
Average genome size in population (length): 54.441
Average program size in population (points): 73.331
Average percent parens in population: 0.258
Minimum age in population: 19.169921875
Maximum age in population: 23.2869873046875
Average age in population: 20.91337426757812
Median age in population: 20.849609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5900816
--- Timings ---
Current time: 1559582839179 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.9 seconds, 71.2%
Fitness Testing:      8.1 seconds, 18.7%
Report:               4.3 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 0                  
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 0                  
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 0                  
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 40                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: 45                 
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 48                 
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 47                 
Correct output: -64                 | Program output: 51                 
Correct output: -61                 | Program output: 44                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) integer_yank)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (boolean_empty) (in2)))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) integer_yank)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (boolean_empty) (in2)))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 882 607 686 10 378 609 132 378 1000)
Population mean number of elite cases: 5.09
Count of perfect (error zero) individuals by case: (404 882 607 686 10 378 609 132 378 0)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) integer_yank)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (boolean_empty) (in2)))
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 58
Size: 77
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 5.914
Median total errors in population: 6
Error averages by case: (0.596 0.118 0.393 0.314 0.99 0.622 0.391 0.868 0.622 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 53.596
Average program size in population (points): 72.387
Average percent parens in population: 0.259
Minimum age in population: 20.169921875
Maximum age in population: 24.61480712890625
Average age in population: 22.55326721191406
Median age in population: 22.62255859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6241956
--- Timings ---
Current time: 1559582842006 milliseconds
Total Time:          46.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 71.1%
Fitness Testing:      8.5 seconds, 18.4%
Report:               4.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 0                  
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 0                  
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 0                  
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 40                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: 45                 
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 48                 
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 47                 
Correct output: -64                 | Program output: 51                 
Correct output: -61                 | Program output: 44                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) integer_yank)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (boolean_empty) (in2)))
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) integer_yank)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (boolean_empty) (in2)))
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 891 647 580 1000 380 1 912 1000 914)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (152 891 647 580 0 380 1 912 0 914)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) exec_dup_times (exec_do*while (in1) integer_yank)) (exec_eq boolean_invert_second_then_and) (boolean_not exec_k (boolean_empty) (in2)))
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 77
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 5.523
Median total errors in population: 5
Error averages by case: (0.848 0.109 0.353 0.42 1.0 0.62 0.999 0.088 1.0 0.086)
Error minima by case: (0 0 0 0 1 0 0 0 1 0)
Average genome size in population (length): 58.61
Average program size in population (points): 78.168
Average percent parens in population: 0.250
Minimum age in population: 22.3798828125
Maximum age in population: 25.24172973632812
Average age in population: 23.98615515136719
Median age in population: 23.96522521972656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.007
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6770748
--- Timings ---
Current time: 1559582845078 milliseconds
Total Time:          49.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 70.7%
Fitness Testing:      9.1 seconds, 18.5%
Report:               5.2 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 454
Test mean error for best: 0.45400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 0N                 
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output:                    
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: 1                  
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not exec_k (boolean_empty) (in2))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not exec_k (boolean_empty) (in2))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (908 58 26 908 47 6 671 1000 314 1000)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (908 58 26 908 47 6 671 0 314 0)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not exec_k (boolean_empty) (in2))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 62
Size: 81
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 7.062
Median total errors in population: 7
Error averages by case: (0.092 0.942 0.974 0.092 0.953 0.994 0.329 1.0 0.686 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 57.478
Average program size in population (points): 75.945
Average percent parens in population: 0.243
Minimum age in population: 23.3798828125
Maximum age in population: 27.0687255859375
Average age in population: 25.71358973693848
Median age in population: 25.85934448242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7324577
--- Timings ---
Current time: 1559582848102 milliseconds
Total Time:          52.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.8 seconds, 70.3%
Fitness Testing:      9.7 seconds, 18.6%
Report:               5.7 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 532
Test mean error for best: 0.53200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 96                 
Correct output: 19                  | Program output: 71                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 56                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 39                 
Correct output: 11                  | Program output: 98                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 41                 
Correct output: 67                  | Program output: 99                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: 1                  
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 48                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (exec_do*count (boolean_invert_first_then_and in2) in3 integer_dup_times) in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap integer_div tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not exec_k (boolean_empty) (in2))
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (exec_do*count (boolean_invert_first_then_and in2) in3 integer_dup_times) in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap integer_div tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not exec_k (boolean_empty) (in2))
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 105 652 19 651 923 18 100 812)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (1 0 105 652 19 651 923 18 100 812)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440})
Best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440)) () ())
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 68
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.719
Median total errors in population: 6
Error averages by case: (0.999 1.0 0.895 0.348 0.981 0.349 0.077 0.982 0.9 0.188)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.262
Average program size in population (points): 80.427
Average percent parens in population: 0.238
Minimum age in population: 26.85934448242188
Maximum age in population: 28.36578369140625
Average age in population: 27.43907801818848
Median age in population: 27.85934448242188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 325
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.149
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7876189
--- Timings ---
Current time: 1559582851079 milliseconds
Total Time:          55.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.8 seconds, 70.0%
Fitness Testing:     10.4 seconds, 18.7%
Report:               6.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 38                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 98                 
Correct output: 26                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 13                 
Correct output: 32                  | Program output: 34                 
Correct output: 15                  | Program output: 55                 
Correct output: 11                  | Program output: 75                 
Correct output: 23                  | Program output: 58                 
Correct output: 0                   | Program output: 37                 
Correct output: 19                  | Program output: 94                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 49                 
Correct output: 4                   | Program output: 96                 
Correct output: 67                  | Program output: 96                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 37                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -16                
Correct output: -5                  | Program output: 97                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -29                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 90                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: 51                 
Correct output: -94                 | Program output: 1                  
Correct output: -86                 | Program output: 95                 
Correct output: -32                 | Program output: -25                
Correct output: -93                 | Program output: -27                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 28                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -1                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not boolean_and boolean_empty in2)
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and) boolean_not boolean_and boolean_empty in2)
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 63 56 2 771 216 770 153 353 433)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (139 63 56 2 771 216 770 153 353 433)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction in4})
Best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and) in2 in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when () in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) in4) () ())
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 7.044
Median total errors in population: 7
Error averages by case: (0.861 0.937 0.944 0.998 0.229 0.784 0.23 0.847 0.647 0.567)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.933
Average program size in population (points): 80.836
Average percent parens in population: 0.245
Minimum age in population: 27.85934448242188
Maximum age in population: 30.36578369140625
Average age in population: 29.0974807434082
Median age in population: 29.11256408691406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.007
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8458796
--- Timings ---
Current time: 1559582854096 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.7 seconds, 69.7%
Fitness Testing:     11.0 seconds, 18.9%
Report:               6.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 563
Test mean error for best: 0.56300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 0                  
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -22                
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: 10                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: 0N                 
Correct output: -86                 | Program output: 0N                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -1N                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 0N                 
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: 1                  
Correct output: -86                 | Program output: -1N                
Correct output: -32                 | Program output: 0N                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -1N                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 0N                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction in1})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_yankdup print_integer boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq in4 in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap in2) exec_swap () (integer_div boolean_invert_second_then_and boolean_swap in2) boolean_eq integer_shove in2) (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap tagged_440) exec_dup_times (exec_do*while (in1) in1)) () ()) ())
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction in1})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) boolean_swap) boolean_pop in3 boolean_stackdepth in3 integer_dup_times in2 in3 integer_dup_times in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) integer_yankdup print_integer boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq in4 in2 boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap in2) exec_swap () (integer_div boolean_invert_second_then_and boolean_swap in2) boolean_eq integer_shove in2) (boolean_eq exec_shove (integer_gte integer_rot) integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap tagged_440) exec_dup_times (exec_do*while (in1) in1)) () ()) ())
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 3 706 497 1 208 83 423 673 141)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (125 3 706 497 1 208 83 423 673 141)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 1, :instruction in2})
Best program: (exec_do*while (boolean_shove boolean_shove in2) boolean_stackdepth in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_gte integer_rot integer_dup integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (exec_do*while (in1) tagged_440) boolean_dup_items exec_do*while (in1) integer_yank) () (exec_eq boolean_invert_second_then_and boolean_not exec_k (boolean_empty) (in2)))
Errors: [1 1 0 0 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 88
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 7.14
Median total errors in population: 7
Error averages by case: (0.875 0.997 0.294 0.503 0.999 0.792 0.917 0.577 0.327 0.859)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.615
Average program size in population (points): 73.907
Average percent parens in population: 0.246
Minimum age in population: 28.92572021484375
Maximum age in population: 32.36578369140625
Average age in population: 30.93039807510376
Median age in population: 31.00254821777344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.006
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8962399
--- Timings ---
Current time: 1559582857057 milliseconds
Total Time:          61.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.7 seconds, 69.7%
Fitness Testing:     11.6 seconds, 18.9%
Report:               6.9 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 38                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 98                 
Correct output: 26                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 13                 
Correct output: 32                  | Program output: 34                 
Correct output: 15                  | Program output: 55                 
Correct output: 11                  | Program output: 75                 
Correct output: 23                  | Program output: 58                 
Correct output: 0                   | Program output: 37                 
Correct output: 19                  | Program output: 94                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 49                 
Correct output: 4                   | Program output: 96                 
Correct output: 67                  | Program output: 96                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 37                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -16                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -29                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 90                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: 51                 
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 95                 
Correct output: -32                 | Program output: -25                
Correct output: -93                 | Program output: -27                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 28                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -1                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times) in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte exec_dup_items) integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440 exec_dup_times (exec_do*while (in1) tagged_440 exec_dup_times (integer_yank)) in4) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 66
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times) in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte exec_dup_items) integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440 exec_dup_times (exec_do*while (in1) tagged_440 exec_dup_times (integer_yank)) in4) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 66
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (654 490 242 126 353 68 543 326 629 220)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (654 490 242 126 353 68 543 326 629 220)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_323} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_323 exec_dup_times (exec_do*while (in1) tagged_440 exec_dup_times (integer_yank)) in4) ()) () ())
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 51
Size: 68
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.349
Median total errors in population: 6
Error averages by case: (0.346 0.51 0.758 0.874 0.647 0.932 0.457 0.674 0.371 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.945
Average program size in population (points): 73.817
Average percent parens in population: 0.243
Minimum age in population: 29.92572021484375
Maximum age in population: 34.08920860290527
Average age in population: 32.49718509864807
Median age in population: 32.47508144378662
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.009
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9474241
--- Timings ---
Current time: 1559582859936 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.6 seconds, 69.5%
Fitness Testing:     12.2 seconds, 18.9%
Report:               7.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Lexicase best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items integer_sub tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440 exec_dup_times (exec_do*while () in1) tagged_440 exec_dup_times (integer_yank)) (in4)) () ())
Lexicase best errors: [0 1 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Zero cases best program: (exec_do*while (boolean_shove boolean_shove in2) in3 in2 exec_k () (integer_gt boolean_invert_first_then_and in2) in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items integer_sub tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440 exec_dup_times (exec_do*while () in1) tagged_440 exec_dup_times (integer_yank)) (in4)) () ())
Zero cases best errors: [0 1 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (884 9 24 609 4 615 5 261 589 649)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (884 9 24 609 4 615 5 261 589 649)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 0, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_yank} {:close 0, :instruction in4})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not integer_rot) integer_min exec_s_when_autoconstructing (exec_swap (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440 exec_dup_times (boolean_swap boolean_stackdepth tagged_440 exec_dup_times (exec_do*while (in1) tagged_440 exec_dup_times (integer_yank)) in4)) ()) () ())
Errors: [0 1 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 63
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.351
Median total errors in population: 6
Error averages by case: (0.116 0.991 0.976 0.391 0.996 0.385 0.995 0.739 0.411 0.351)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.328
Average program size in population (points): 69.357
Average percent parens in population: 0.245
Minimum age in population: 30.92572021484375
Maximum age in population: 35.40793132781982
Average age in population: 33.62383989620209
Median age in population: 33.69627094268799
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.007
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9940200
--- Timings ---
Current time: 1559582862713 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.6 seconds, 69.4%
Fitness Testing:     12.7 seconds, 18.9%
Report:               7.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 494
Test mean error for best: 0.49400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output:                    
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -16                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -29                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -25                
Correct output: -93                 | Program output: -27                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -1                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_603} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove exec_pop (boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_shove in2) in4 exec_shove (exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and integer_lte boolean_stackdepth tagged_603) exec_dup_times (exec_do*while (in1) tagged_440) in4) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 65
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_603} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove exec_pop (boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_shove in2) in4 exec_shove (exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and integer_lte boolean_stackdepth tagged_603) exec_dup_times (exec_do*while (in1) tagged_440) in4) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 65
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (493 108 81 73 274 266 362 577 107 357)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (493 108 81 73 274 266 362 577 107 357)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_603} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in1} {:close 1, :instruction tagged_440} {:close 0, :instruction in4})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove exec_pop (boolean_eq exec_shove (integer_gte integer_rot) integer_min integer_shove in2) in4 exec_shove (exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and integer_lte boolean_stackdepth tagged_603) exec_dup_times (exec_do*while (in1) tagged_440) in4) () ()))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 50
Size: 65
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.302
Median total errors in population: 7
Error averages by case: (0.507 0.892 0.919 0.927 0.726 0.734 0.638 0.423 0.893 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.999
Average program size in population (points): 75.031
Average percent parens in population: 0.254
Minimum age in population: 33.44496440887451
Maximum age in population: 37.08294868469238
Average age in population: 35.1953094291687
Median age in population: 35.3687310218811
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.009
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.236
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10466663
--- Timings ---
Current time: 1559582865512 milliseconds
Total Time:          69.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 69.4%
Fitness Testing:     13.3 seconds, 19.0%
Report:               8.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 491
Test mean error for best: 0.49100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 96                 
Correct output: 19                  | Program output: 71                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 56                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 98                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 99                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 89
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 89
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (769 850 412 1000 17 73 805 901 705 905)
Population mean number of elite cases: 6.44
Count of perfect (error zero) individuals by case: (769 850 412 0 17 73 805 901 705 905)
Population mean number of perfect (error zero) cases: 5.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 69
Size: 89
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 4.563
Median total errors in population: 4
Error averages by case: (0.231 0.15 0.588 1.0 0.983 0.927 0.195 0.099 0.295 0.095)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 50.649
Average program size in population (points): 66.796
Average percent parens in population: 0.241
Minimum age in population: 34.44496440887451
Maximum age in population: 38.39842534065247
Average age in population: 36.5197833173275
Median age in population: 36.71288347244263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.009
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10844538
--- Timings ---
Current time: 1559582868266 milliseconds
Total Time:          72.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.5 seconds, 69.6%
Fitness Testing:     13.7 seconds, 18.8%
Report:               8.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 512
Test mean error for best: 0.51200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 96                 
Correct output: 19                  | Program output: 71                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 56                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 86                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 99                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43-43             
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 51-30              
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 85                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) boolean_yank in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 88
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) boolean_yank in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 88
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 1000 859 534 811 667 656 193 535 741)
Population mean number of elite cases: 6.24
Count of perfect (error zero) individuals by case: (239 0 859 534 811 667 656 193 535 741)
Population mean number of perfect (error zero) cases: 5.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 2, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove () integer_gte exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when () in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 69
Size: 89
Percent parens: 0.225
--- Population Statistics ---
Average total errors in population: 4.765
Median total errors in population: 4
Error averages by case: (0.761 1.0 0.141 0.466 0.189 0.333 0.344 0.807 0.465 0.259)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.779
Average program size in population (points): 88.306
Average percent parens in population: 0.232
Minimum age in population: 36.75229740142822
Maximum age in population: 39.56181144714355
Average age in population: 38.5995975985527
Median age in population: 38.3514838218689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 270
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.009
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11407438
--- Timings ---
Current time: 1559582871297 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 69.5%
Fitness Testing:     14.3 seconds, 18.9%
Report:               8.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 586
Test mean error for best: 0.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 37                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 82                 
Correct output: 32                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 88                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 67                 
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 40                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output:                    
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -27                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 47                 
Correct output: -64                 | Program output: 51                 
Correct output: -61                 | Program output: 44                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 41                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (exec_do*while (exec_do*count (integer_mod) exec_k () (integer_gt integer_pop)) boolean_pop in3 boolean_stackdepth in3 integer_dup_times boolean_stackdepth in3 exec_k () (integer_dup_times) in2 in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) integer_mod exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_gte integer_rot) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div integer_swap in1)) () ()))
Lexicase best errors: [0 0 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 101
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (exec_do*while (exec_do*count (integer_mod) exec_k () (integer_gt integer_pop)) boolean_pop in3 boolean_stackdepth in3 integer_dup_times boolean_stackdepth in3 exec_k () (integer_dup_times) in2 in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) integer_mod exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_gte integer_rot) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (boolean_eq boolean_eq exec_shove (integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div integer_swap in1)) () ()))
Zero cases best errors: [0 0 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 101
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (402 883 1 68 102 402 1000 630 888 703)
Population mean number of elite cases: 5.08
Count of perfect (error zero) individuals by case: (402 883 1 68 102 402 0 630 888 703)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mod} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (exec_do*while (exec_do*count (exec_do*while (exec_do*count (integer_mod) boolean_swap)) boolean_pop in3 boolean_stackdepth in3 integer_dup_times) in2 in3 exec_k () (integer_dup_times) in2 in3 exec_k () (integer_gt boolean_stackdepth exec_while (boolean_not exec_dup_items exec_eq tag_integer_875)) integer_mod exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 integer_flush integer_yankdup integer_gte integer_rot exec_if (integer_gte in2) (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 0 1 0 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 86
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.921
Median total errors in population: 6
Error averages by case: (0.598 0.117 0.999 0.932 0.898 0.598 1.0 0.37 0.112 0.297)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 65.292
Average program size in population (points): 84.831
Average percent parens in population: 0.231
Minimum age in population: 37.75229740142822
Maximum age in population: 41.40406572818756
Average age in population: 39.9863137434721
Median age in population: 40.25229740142822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11890264
--- Timings ---
Current time: 1559582874171 milliseconds
Total Time:          78.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 69.4%
Fitness Testing:     14.7 seconds, 18.8%
Report:               9.2 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 514
Test mean error for best: 0.51400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 564 25 269 331 736 247 27 721 95)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (332 564 25 269 331 736 247 27 721 95)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Errors: [0 1 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.653
Median total errors in population: 6
Error averages by case: (0.668 0.436 0.975 0.731 0.669 0.264 0.753 0.973 0.279 0.905)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.402
Average program size in population (points): 86.932
Average percent parens in population: 0.235
Minimum age in population: 38.75229740142822
Maximum age in population: 43.00426912307739
Average age in population: 41.68090114349127
Median age in population: 41.8514838218689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.007
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12372066
--- Timings ---
Current time: 1559582877064 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.4 seconds, 69.4%
Fitness Testing:     15.3 seconds, 18.8%
Report:               9.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 514
Test mean error for best: 0.51400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 50                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: 70                 
Correct output: -45                 | Program output: 39                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_837} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_837) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_837} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_837) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 38 320 404 891 168 17 268 293 175)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (270 38 320 404 891 168 17 268 293 175)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gte} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq boolean_yankdup) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (integer_gte in2) (integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ()))
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.156
Median total errors in population: 7
Error averages by case: (0.73 0.962 0.68 0.596 0.109 0.832 0.983 0.732 0.707 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.895
Average program size in population (points): 89.369
Average percent parens in population: 0.229
Minimum age in population: 40.60199230909348
Maximum age in population: 44.73913636803627
Average age in population: 43.13406450670958
Median age in population: 43.07073453068733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12900211
--- Timings ---
Current time: 1559582880004 milliseconds
Total Time:          84.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.4 seconds, 69.3%
Fitness Testing:     15.8 seconds, 18.7%
Report:              10.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup integer_max) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_empty boolean_not exec_dup_items exec_eq boolean_dup_items) integer_mod in3 boolean_yankdup integer_dec) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_shove (boolean_pop)))
Lexicase best errors: [1 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup integer_max) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_empty boolean_not exec_dup_items exec_eq boolean_dup_items) integer_mod in3 boolean_yankdup integer_dec) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_shove (boolean_pop)))
Zero cases best errors: [1 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 3 901 901 900 5 472 728 45 482)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (229 3 901 901 900 5 472 728 45 482)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 77
Size: 98
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.334
Median total errors in population: 5
Error averages by case: (0.771 0.997 0.099 0.099 0.1 0.995 0.528 0.272 0.955 0.518)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.486
Average program size in population (points): 87.185
Average percent parens in population: 0.226
Minimum age in population: 42.37678891420364
Maximum age in population: 46.24919900298119
Average age in population: 44.62649111318588
Median age in population: 44.72673806548119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.008
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.363
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13411908
--- Timings ---
Current time: 1559582882981 milliseconds
Total Time:          87.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.4 seconds, 69.3%
Fitness Testing:     16.3 seconds, 18.7%
Report:              10.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_if (in1 in2 boolean_eq boolean_eq integer_shove integer_shove in2) (boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () () integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) (exec_dup_times (integer_swap in1)) ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_if (in1 in2 boolean_eq boolean_eq integer_shove integer_shove in2) (boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () () integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) (exec_dup_times (integer_swap in1)) ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (393 571 417 82 656 187 394 89 592 18)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (393 571 417 82 656 187 394 89 592 18)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (boolean_invert_first_then_and exec_shove (boolean_not exec_shove (boolean_yankdup exec_eq tag_integer_875)) exec_dup (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_yank) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 0 0 1 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 77
Size: 98
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 6.601
Median total errors in population: 6
Error averages by case: (0.607 0.429 0.583 0.918 0.344 0.813 0.606 0.911 0.408 0.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.197
Average program size in population (points): 84.961
Average percent parens in population: 0.220
Minimum age in population: 44.45416742563248
Maximum age in population: 47.53320880234241
Average age in population: 46.09714128422737
Median age in population: 46.1363210901618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.007
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.251
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13912642
--- Timings ---
Current time: 1559582885893 milliseconds
Total Time:          90.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.4 seconds, 69.3%
Fitness Testing:     16.8 seconds, 18.7%
Report:              10.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 568
Test mean error for best: 0.56800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 11                 
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 1198               
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 79                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 6741               
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35-11             
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -1319              
Correct output: -86                 | Program output: -5434              
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52-5              
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -4323              
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -4198              
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80-11             
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -864               
Correct output: -32                 | Program output: -3265              
Correct output: -93                 | Program output: -19-93             
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -8148              
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25-55             
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: 51                 
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -2528              
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 exec_shove (boolean_not exec_flush integer_gte exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 exec_shove (boolean_not exec_flush integer_gte exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 104 431 427 68 255 504 391 367 25)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (403 104 431 427 68 255 504 391 367 25)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 exec_shove (boolean_not exec_flush integer_gte exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 68
Size: 85
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.025
Median total errors in population: 6
Error averages by case: (0.597 0.896 0.569 0.573 0.932 0.745 0.496 0.609 0.633 0.975)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.635
Average program size in population (points): 93.378
Average percent parens in population: 0.222
Minimum age in population: 46.11426348984241
Maximum age in population: 49.12602471187711
Average age in population: 47.18563067758083
Median age in population: 47.21111306548119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.008
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14449116
--- Timings ---
Current time: 1559582888845 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.5 seconds, 69.2%
Fitness Testing:     17.4 seconds, 18.7%
Report:              11.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 520
Test mean error for best: 0.52000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4-99               
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6-80               
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 30                 
Correct output: 19                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 37                 
Correct output: 7                   | Program output: 33                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 51                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 92                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 71                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 41                 
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output:                    
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5-37               
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: 23                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 50                 
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 4                  
Correct output: -32                 | Program output: 50                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 44                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 41                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_1041} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and tag_integer_1041) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_1041} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and tag_integer_1041) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq integer_shove integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (90 59 718 555 79 50 759 524 660 163)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (90 59 718 555 79 50 759 524 660 163)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq exec_dup (in2 exec_shove (boolean_not exec_flush integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod exec_shove (in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 6.343
Median total errors in population: 6
Error averages by case: (0.91 0.941 0.282 0.445 0.921 0.95 0.241 0.476 0.34 0.837)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.073
Average program size in population (points): 89.977
Average percent parens in population: 0.210
Minimum age in population: 47.11426348984241
Maximum age in population: 50.70488213375211
Average age in population: 48.98316382676549
Median age in population: 48.92676348984241
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.009
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.384
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14923122
--- Timings ---
Current time: 1559582891760 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 69.2%
Fitness Testing:     17.9 seconds, 18.6%
Report:              11.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 501
Test mean error for best: 0.50100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4-99               
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 0N                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 8N                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 10N                
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 11                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output:                    
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 513-37             
Correct output: -48                 | Program output: -1N                
Correct output: -86                 | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 0N                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 23                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: 0N                 
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 44                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 0N                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -1N                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_1041} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and tag_integer_1041) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_do*while (in1 in2) boolean_eq boolean_eq integer_shove integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 94
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_1041} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and tag_integer_1041) exec_shove (print_integer) boolean_dup_items exec_when (in3 boolean_yankdup in2) boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_do*while (in1 in2) boolean_eq boolean_eq integer_shove integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 94
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 614 7 880 485 234 166 890 606 845)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (239 614 7 880 485 234 166 890 606 845)
Population mean number of perfect (error zero) cases: 4.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items exec_when (in3 in1 in2) boolean_eq exec_dup (in2 exec_shove (boolean_not exec_flush integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod exec_shove (in2) boolean_eq integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 0 1 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 87
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 5.034
Median total errors in population: 4
Error averages by case: (0.761 0.386 0.993 0.12 0.515 0.766 0.834 0.11 0.394 0.155)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.932
Average program size in population (points): 91.391
Average percent parens in population: 0.235
Minimum age in population: 49.39238213375211
Maximum age in population: 51.73926348984241
Average age in population: 50.42368360299058
Median age in population: 50.5689382776618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.009
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 15399876
--- Timings ---
Current time: 1559582894693 milliseconds
Total Time:          99.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 69.2%
Fitness Testing:     18.4 seconds, 18.6%
Report:              12.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output:                    
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -23                
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_1041} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and tag_integer_1041) exec_shove (print_integer) boolean_dup_items exec_when () in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_do*while (in1 in2) boolean_eq boolean_eq integer_shove integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 94
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction tag_integer_1041} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and tag_integer_1041) exec_shove (print_integer) boolean_dup_items exec_when () in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_do*while (in1 in2) boolean_eq boolean_eq integer_shove integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 94
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (752 418 550 845 693 376 244 116 793 847)
Population mean number of elite cases: 5.63
Count of perfect (error zero) individuals by case: (752 418 550 845 693 376 244 116 793 847)
Population mean number of perfect (error zero) cases: 5.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction in1})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times in2 in2 exec_k () (integer_gt boolean_stackdepth boolean_invert_first_then_and integer_mult exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer) boolean_dup_items in3 boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq exec_shove (boolean_not exec_shove (integer_shove exec_pop (integer_stackdepth exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875)) exec_shove (print_integer boolean_dup_items) integer_mod in3 boolean_yankdup in2) boolean_eq integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) integer_gte integer_rot) exec_do*while (in1 in2) boolean_eq boolean_eq integer_shove integer_shove in2 boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times (integer_swap in1)) () ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 76
Size: 95
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.366
Median total errors in population: 3
Error averages by case: (0.248 0.582 0.45 0.155 0.307 0.624 0.756 0.884 0.207 0.153)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.126
Average program size in population (points): 89.752
Average percent parens in population: 0.229
Minimum age in population: 50.5689382776618
Maximum age in population: 53.15410088375211
Average age in population: 52.26561789541971
Median age in population: 52.1158132776618
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.01
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 15921663
--- Timings ---
Current time: 1559582897730 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 69.2%
Fitness Testing:     19.0 seconds, 18.6%
Report:              12.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 520
Test mean error for best: 0.52000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -40                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 54                  | Program output: 54                 
Correct output: 26                  | Program output: 37                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 13                 
Correct output: 32                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 75                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 78                 
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 49                 
Correct output: 4                   | Program output: 67                 
Correct output: 67                  | Program output: 67                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 23                 
Correct output: -77                 | Program output: 61                 
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -32                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: 10                 
Correct output: -96                 | Program output: 84                 
Correct output: -37                 | Program output: 5                  
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: 95                 
Correct output: -82                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: 19                  | Program output: 77                 
Correct output: -69                 | Program output: 19                 
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -64                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: 23                 
Correct output: -3                  | Program output: 7396               
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -6                 
Correct output: -97                 | Program output: 43                 
Correct output: -97                 | Program output: -43                
Correct output: -65                 | Program output: -12                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -25                
Correct output: -93                 | Program output: -19                
Correct output: -37                 | Program output: 14                 
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 28                 
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 47                 
Correct output: -97                 | Program output: 47                 
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -40                
Correct output: -92                 | Program output: 28                 
Correct output: -64                 | Program output: 13                 
Correct output: -61                 | Program output: 16                 
Correct output: -25                 | Program output: -1                 
Correct output: -95                 | Program output: 100                
Correct output: 22                  | Program output: 22                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_eq integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot in2) boolean_eq integer_shove in2 boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_eq integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot in2) boolean_eq integer_shove in2 boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (855 41 203 277 760 256 168 16 48 574)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (855 41 203 277 760 256 168 16 48 574)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) integer_mult in2 integer_max exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) integer_mod in3) boolean_yankdup in2 boolean_eq integer_shove in2 boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_yank boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ())
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 72
Size: 94
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 6.802
Median total errors in population: 7
Error averages by case: (0.145 0.959 0.797 0.723 0.24 0.744 0.832 0.984 0.952 0.426)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.166
Average program size in population (points): 89.994
Average percent parens in population: 0.231
Minimum age in population: 52.5689382776618
Maximum age in population: 55.08652434777468
Average age in population: 54.04248501818161
Median age in population: 54.01738213375211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.008
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 16412088
--- Timings ---
Current time: 1559582900690 milliseconds
Total Time:         104.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 69.1%
Fitness Testing:     19.5 seconds, 18.6%
Report:              12.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 595
Test mean error for best: 0.59500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 37                 
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: 44                 
Correct output: -43                 | Program output: -3                 
Correct output: -35                 | Program output: -16                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -29                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: 22                 
Correct output: -66                 | Program output: -31                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: 97                 
Correct output: -76                 | Program output: 90                 
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: 73                 
Correct output: -30                 | Program output: -12                
Correct output: -45                 | Program output: 92                 
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 86                 
Correct output: -93                 | Program output: -68                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: 7                  
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: 51                 
Correct output: -94                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -27                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: 24                 
Correct output: -94                 | Program output: 73                 
Correct output: -45                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -20                
Correct output: -62                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq in2) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div)) () ()) ()))))
Lexicase best errors: [0 1 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 123
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq in2) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div)) () ()) ()))))
Zero cases best errors: [0 1 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 123
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (57 175 150 132 83 470 56 177 433 200)
Population mean number of elite cases: 1.93
Count of perfect (error zero) individuals by case: (57 175 150 132 83 470 56 177 433 200)
Population mean number of perfect (error zero) cases: 1.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq in2) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div)) () ()) ()))))
Errors: [0 1 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 92
Size: 123
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 8.067
Median total errors in population: 8
Error averages by case: (0.943 0.825 0.85 0.868 0.917 0.53 0.944 0.823 0.567 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.787
Average program size in population (points): 94.328
Average percent parens in population: 0.237
Minimum age in population: 53.5689382776618
Maximum age in population: 57.08652434777468
Average age in population: 55.78288475193712
Median age in population: 55.8703126157634
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.008
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 16942733
--- Timings ---
Current time: 1559582903703 milliseconds
Total Time:         107.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.5 seconds, 69.1%
Fitness Testing:     20.1 seconds, 18.6%
Report:              13.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 517
Test mean error for best: 0.51700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output:                    
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 91                 
Correct output: -8                  | Program output: 24                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 10                 
Correct output: 19                  | Program output: 38                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 98                 
Correct output: 26                  | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 5                   | Program output: 13                 
Correct output: 32                  | Program output: 34                 
Correct output: 15                  | Program output: 55                 
Correct output: 11                  | Program output: 75                 
Correct output: 23                  | Program output: 58                 
Correct output: 0                   | Program output: 37                 
Correct output: 19                  | Program output: 94                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 39                 
Correct output: 43                  | Program output: 49                 
Correct output: 4                   | Program output: 96                 
Correct output: 67                  | Program output: 96                 
Correct output: -46                 | Program output: -46                
Correct output: -26                 | Program output: 37                 
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -16                
Correct output: -5                  | Program output: 97                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output: 13                 
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -29                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 90                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output:                    
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output:                    
Correct output: -80                 | Program output: 51                 
Correct output: -94                 | Program output: -6                 
Correct output: -86                 | Program output: 95                 
Correct output: -32                 | Program output: -25                
Correct output: -93                 | Program output: -27                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: 24                 
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: 21                 
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -13                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -1                 
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq exec_dup_items) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and integer_lte boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ())))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 116
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq exec_dup_items) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and integer_lte boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ())))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 116
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 338 309 169 240 229 510 592 340 271)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (87 338 309 169 240 229 510 592 340 271)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div)) () ()) ()))))
Errors: [0 0 0 1 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 98
Size: 130
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.915
Median total errors in population: 7
Error averages by case: (0.913 0.662 0.691 0.831 0.76 0.771 0.49 0.408 0.66 0.729)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.369
Average program size in population (points): 107.083
Average percent parens in population: 0.248
Minimum age in population: 55.8703126157634
Maximum age in population: 58.99453374929726
Average age in population: 57.78743960867531
Median age in population: 57.76742957148235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.008
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.297
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 17493779
--- Timings ---
Current time: 1559582906794 milliseconds
Total Time:         111.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.6 seconds, 69.0%
Fitness Testing:     20.6 seconds, 18.6%
Report:              13.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 390
Test mean error for best: 0.39000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 76                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 25                 
Correct output: 54                  | Program output: 94                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 67                 
Correct output: 5                   | Program output: 79                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 94                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 78                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 58                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 77                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -46                
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -22                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -11                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: 19                 
Correct output: -86                 | Program output: 34                 
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -97                 | Program output: 79                 
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 26                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: 98                 
Correct output: 6                   | Program output: 93                 
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -21                
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -11                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: 65                 
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: 28                 
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in1 integer_rot exec_k () (integer_gt in3 exec_k () (boolean_shove in3 in1) in4) integer_rot exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_pop (tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove () integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ())) ())))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 126
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_pop} {:close 1, :instruction tag_integer_875} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in1 integer_rot exec_k () (integer_gt in3 exec_k () (boolean_shove in3 in1) in4) integer_rot exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_pop (tag_integer_875) integer_shove in2) boolean_eq exec_shove (integer_gte integer_rot) exec_if (in1 in2) (boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove () integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ())) ())))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 126
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 495 624 214 528 207 244 215 110 476)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (296 495 624 214 528 207 244 215 110 476)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in1 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq exec_stackdepth exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove boolean_invert_second_then_and integer_rot in2) boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()) ()))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 78
Size: 105
Percent parens: 0.257
--- Population Statistics ---
Average total errors in population: 6.591
Median total errors in population: 6
Error averages by case: (0.704 0.505 0.376 0.786 0.472 0.793 0.756 0.785 0.89 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 83.91
Average program size in population (points): 112.493
Average percent parens in population: 0.253
Minimum age in population: 57.20712783024646
Maximum age in population: 60.71433196496218
Average age in population: 59.2455545946366
Median age in population: 59.28962463577045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.009
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 18066742
--- Timings ---
Current time: 1559582909838 milliseconds
Total Time:         114.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 68.9%
Fitness Testing:     21.2 seconds, 18.6%
Report:              14.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: 14                 
Correct output: -80                 | Program output: -80                
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 16                 
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -46                
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -22                
Correct output: -83                 | Program output: -83                
Correct output: -43                 | Program output: -32                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -96                
Correct output: -37                 | Program output: -37                
Correct output: -48                 | Program output: -13                
Correct output: -86                 | Program output: -54                
Correct output: -69                 | Program output: -23                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: 96                 
Correct output: -91                 | Program output: -91                
Correct output: -66                 | Program output: -66                
Correct output: -97                 | Program output: -43                
Correct output: -66                 | Program output: 63                 
Correct output: -82                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -12                
Correct output: -72                 | Program output: -41                
Correct output: 6                   | Program output: 8                  
Correct output: -93                 | Program output: 64                 
Correct output: -93                 | Program output: -64                
Correct output: -30                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -36                 | Program output: -5                 
Correct output: -3                  | Program output: 3                  
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -19                
Correct output: -21                 | Program output: -21                
Correct output: -87                 | Program output: -6                 
Correct output: -97                 | Program output: 43                 
Correct output: -97                 | Program output: -97                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: 14                 
Correct output: -51                 | Program output: 61                 
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -89                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 32                 
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -15                
Correct output: -33                 | Program output: 36                 
Correct output: -82                 | Program output: -82                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -30                
Correct output: -61                 | Program output: -4                 
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -95                
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -44                
Correct output: -62                 | Program output: -59                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in1 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq exec_stackdepth exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove boolean_invert_second_then_and integer_rot in2) boolean_eq integer_shove integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 103
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in1 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq exec_stackdepth exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove boolean_invert_second_then_and integer_rot in2) boolean_eq integer_shove integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 103
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 649 273 380 309 260 273 399 481 269)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (218 649 273 380 309 260 273 399 481 269)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_mult boolean_invert_first_then_and boolean_shove boolean_shove in1 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) boolean_eq exec_stackdepth exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (boolean_eq exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove boolean_invert_second_then_and integer_rot in2) boolean_eq integer_shove in2) (boolean_eq exec_do*while (exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ())) ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 78
Size: 106
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 6.489
Median total errors in population: 7
Error averages by case: (0.782 0.351 0.727 0.62 0.691 0.74 0.727 0.601 0.519 0.731)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.563
Average program size in population (points): 118.518
Average percent parens in population: 0.261
Minimum age in population: 58.76742957148235
Maximum age in population: 61.97583078977186
Average age in population: 60.8027243255346
Median age in population: 60.73734234301082
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.01
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 18707406
--- Timings ---
Current time: 1559582913017 milliseconds
Total Time:         117.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.7 seconds, 68.8%
Fitness Testing:     21.8 seconds, 18.6%
Report:              14.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 312
Test mean error for best: 0.31200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 1
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output:                    
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Lexicase best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_rot boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 123
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Zero cases best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not exec_dup_items exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_rot boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 123
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 569 604 744 262 260 480 729 368 469)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (253 569 604 744 262 260 480 729 368 469)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 1, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 2, :instruction tag_integer_875} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction tag_integer_875} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction tagged_440} {:close 0, :instruction exec_dup_times})
Best program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 94
Size: 123
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 5.262
Median total errors in population: 4
Error averages by case: (0.747 0.431 0.396 0.256 0.738 0.74 0.52 0.271 0.632 0.531)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 82.581
Average program size in population (points): 110.504
Average percent parens in population: 0.253
Minimum age in population: 60.79405474531814
Maximum age in population: 63.72226690770185
Average age in population: 62.06842968496804
Median age in population: 62.22401702766365
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.011
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.302
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 19297122
--- Timings ---
Current time: 1559582916170 milliseconds
Total Time:         120.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.7 seconds, 68.8%
Fitness Testing:     22.4 seconds, 18.6%
Report:              15.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 40
Successful program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 123


Auto-simplifying with starting size: 123
step: 0
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 500
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 1000
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 1500
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 2000
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 2500
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 3000
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 3500
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 4000
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 4500
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

step: 5000
program: (boolean_invert_first_then_and boolean_shove boolean_shove in3 integer_dup_times boolean_invert_first_then_and boolean_shove boolean_shove in3 in1 in4 in2 exec_k () (integer_gt in3 exec_k () (integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items print_boolean boolean_not integer_add exec_eq tag_integer_875)) in4 in2 exec_k () (integer_gt integer_gt boolean_stackdepth print_boolean boolean_not exec_dup_items exec_eq tag_integer_875) boolean_eq integer_shove exec_pop (boolean_invert_first_then_and boolean_not exec_dup_items exec_eq tag_integer_875) exec_shove (print_integer boolean_dup_items) exec_when (in2 boolean_eq exec_shove (boolean_not exec_shove (integer_gte exec_eq tag_integer_875) boolean_eq in2) boolean_eq boolean_eq exec_when (integer_shove in2) boolean_eq) exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (boolean_yankdup in2) (boolean_eq integer_shove in2) (boolean_eq integer_min exec_s_when_autoconstructing (exec_swap () (integer_shove in2) boolean_eq) (exec_shove (integer_gte integer_rot) integer_min exec_s_when_autoconstructing (exec_swap () (integer_div boolean_invert_second_then_and boolean_swap boolean_stackdepth tagged_440) exec_dup_times ()) () ()) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 123

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 312
Test mean error for best: 0.31200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 1
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 1
Test Case   78 | Error: 1
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 1
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -99                 | Program output: -91                
Correct output: 25                  | Program output: 25                 
Correct output: -10                 | Program output: -10                
Correct output: -86                 | Program output: -86                
Correct output: -80                 | Program output: 6                  
Correct output: 36                  | Program output: 36                 
Correct output: -8                  | Program output: -8                 
Correct output: 1                   | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: 30                  | Program output: 30                 
Correct output: -66                 | Program output: -66                
Correct output: -99                 | Program output: -99                
Correct output: -29                 | Program output: -29                
Correct output: 10                  | Program output: 26                 
Correct output: 19                  | Program output: 19                 
Correct output: 17                  | Program output: 19                 
Correct output: 54                  | Program output: 78                 
Correct output: 26                  | Program output: 26                 
Correct output: 7                   | Program output: 42                 
Correct output: 5                   | Program output: 5                  
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 23                  | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 31                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 38                 
Correct output: 2                   | Program output: 2                  
Correct output: 39                  | Program output: 80                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 67                  | Program output: 91                 
Correct output: -46                 | Program output: -9                 
Correct output: -26                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -83                 | Program output: -65                
Correct output: -43                 | Program output: -43                
Correct output: -35                 | Program output: -35                
Correct output: -5                  | Program output: -5                 
Correct output: -96                 | Program output: -33                
Correct output: -37                 | Program output:                    
Correct output: -48                 | Program output: -48                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -69                
Correct output: -52                 | Program output: -52                
Correct output: -14                 | Program output: -14                
Correct output: -91                 | Program output: -6                 
Correct output: -66                 | Program output: -49                
Correct output: -97                 | Program output: -97                
Correct output: -66                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -65                
Correct output: 19                  | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -72                 | Program output: -72                
Correct output: 6                   | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -93                 | Program output: -93                
Correct output: -30                 | Program output: -20                
Correct output: -45                 | Program output: -11                
Correct output: -36                 | Program output: -10                
Correct output: -3                  | Program output: -3                 
Correct output: -93                 | Program output: -81                
Correct output: -62                 | Program output: -62                
Correct output: -21                 | Program output: -4                 
Correct output: -87                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output:                    
Correct output: -65                 | Program output: 0                  
Correct output: -80                 | Program output: -80                
Correct output: -94                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -32                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -37                 | Program output: -19                
Correct output: -51                 | Program output: -51                
Correct output: -81                 | Program output: -81                
Correct output: -89                 | Program output: -55                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: -94                
Correct output: -45                 | Program output: -45                
Correct output: -97                 | Program output: -97                
Correct output: -33                 | Program output: -33                
Correct output: -82                 | Program output: -39                
Correct output: -92                 | Program output: -92                
Correct output: -64                 | Program output: -64                
Correct output: -61                 | Program output: -61                
Correct output: -25                 | Program output: -25                
Correct output: -95                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -50                
;;******************************
