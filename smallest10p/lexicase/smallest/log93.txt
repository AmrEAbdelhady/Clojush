Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x44c27b8b clojush.problems.software.smallest$fn__7461@44c27b8b] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x33399052 clojush.instructions.tag$tag_instruction_erc$fn__2160@33399052] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x460b77d6 clojush.instructions.tag$tagged_instruction_erc$fn__2166@460b77d6] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x52a75c12 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@52a75c12]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x61288814 clojush.problems.software.smallest$smallest_initial_report@61288814]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x6669cba clojush.problems.software.smallest$smallest_report@6669cba]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[62 45 62 62] 45] [[71 94 71 71] 71] [[-29 -29 -50 -29] -50] [[-6 -91 -6 -6] -91] [[-42 -42 -51 -42] -51] [[-11 18 -11 -11] -11] [[16 41 16 16] 16] [[-69 37 37 37] -69] [[18 94 18 18] 18] [[3 3 72 3] 3] [(19 19 19 19) 19] [(-49 -49 -49 -49) -49] [(-6 -6 -6 -6) -6] [(-16 -16 -16 -16) -16] [(81 81 81 81) 81] [(18 66 3 56) 3] [(55 24 12 62) 12] [(90 34 23 98) 23] [(96 95 91 0) 0] [(75 20 56 86) 20] [(50 59 59 72) 50] [(87 91 94 83) 83] [(33 47 88 86) 33] [(25 29 35 37) 25] [(43 92 88 75) 43] [(93 95 4 99) 4] [(73 35 90 6) 6] [(69 33 79 20) 20] [(46 91 94 39) 39] [(50 76 65 98) 50] [(63 15 11 78) 11] [(30 83 18 67) 18] [(94 60 36 87) 36] [(48 59 74 0) 0] [(52 40 52 60) 40] [(82 71 -50 -61) -61] [(-78 74 -37 -49) -78] [(-80 42 -71 -79) -80] [(61 -16 -4 -34) -34] [(83 -48 -88 -11) -88] [(-87 -20 -21 9) -87] [(51 -94 -85 -90) -94] [(-56 50 -54 41) -56] [(7 18 -4 -100) -100] [(-78 49 -74 -76) -78] [(-78 -67 48 -57) -78] [(25 83 -57 93) -57] [(-72 -9 84 -42) -72] [(-50 -6 80 -3) -50] [(80 -26 -37 23) -37] [(96 17 -9 86) -9] [(-18 -5 82 -15) -18] [(96 57 32 43) 32] [(-22 84 40 64) -22] [(90 -1 -25 65) -25] [(38 67 -45 -31) -45] [(52 57 -5 -17) -17] [(-25 -76 75 -61) -76] [(-54 6 2 -48) -54] [(-83 -30 -9 89) -83] [(-61 -33 93 -45) -61] [(48 56 -35 39) -35] [(57 73 -72 -16) -72] [(23 -77 16 49) -77] [(87 64 -93 21) -93] [(31 -47 27 -59) -59] [(-77 -88 -33 37) -88] [(-60 5 27 -63) -63] [(33 -1 -91 -96) -96] [(59 -50 73 -97) -97] [(-53 23 82 -23) -53] [(43 75 42 10) 10] [(28 -26 -88 -41) -88] [(39 69 -36 74) -36] [(-5 74 47 30) -5] [(47 46 -99 14) -99] [(32 -88 11 34) -88] [(20 -35 0 9) -35] [(-72 55 -48 61) -72] [(-79 30 52 6) -79] [(21 -49 50 100) -49] [(-2 -14 23 47) -14] [(-9 97 52 -78) -78] [(53 9 16 -72) -72] [(15 -6 77 89) -6] [(-55 -78 -40 19) -78] [(88 30 -83 31) -83] [(-20 30 15 41) -20] [(-36 68 -47 -25) -47] [(97 31 98 -75) -75] [(92 8 -38 -84) -84] [(0 1 -48 -6) -48] [(45 -50 -18 -55) -55] [(39 61 54 63) 39] [(87 -12 82 69) -12])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[62 45 62 62] 45]
Train Case:   6 | Input/Output: [[71 94 71 71] 71]
Train Case:   7 | Input/Output: [[-29 -29 -50 -29] -50]
Train Case:   8 | Input/Output: [[-6 -91 -6 -6] -91]
Train Case:   9 | Input/Output: [[-42 -42 -51 -42] -51]
Train Case:  10 | Input/Output: [[-11 18 -11 -11] -11]
Train Case:  11 | Input/Output: [[16 41 16 16] 16]
Train Case:  12 | Input/Output: [[-69 37 37 37] -69]
Train Case:  13 | Input/Output: [[18 94 18 18] 18]
Train Case:  14 | Input/Output: [[3 3 72 3] 3]
Train Case:  15 | Input/Output: [(19 19 19 19) 19]
Train Case:  16 | Input/Output: [(-49 -49 -49 -49) -49]
Train Case:  17 | Input/Output: [(-6 -6 -6 -6) -6]
Train Case:  18 | Input/Output: [(-16 -16 -16 -16) -16]
Train Case:  19 | Input/Output: [(81 81 81 81) 81]
Train Case:  20 | Input/Output: [(18 66 3 56) 3]
Train Case:  21 | Input/Output: [(55 24 12 62) 12]
Train Case:  22 | Input/Output: [(90 34 23 98) 23]
Train Case:  23 | Input/Output: [(96 95 91 0) 0]
Train Case:  24 | Input/Output: [(75 20 56 86) 20]
Train Case:  25 | Input/Output: [(50 59 59 72) 50]
Train Case:  26 | Input/Output: [(87 91 94 83) 83]
Train Case:  27 | Input/Output: [(33 47 88 86) 33]
Train Case:  28 | Input/Output: [(25 29 35 37) 25]
Train Case:  29 | Input/Output: [(43 92 88 75) 43]
Train Case:  30 | Input/Output: [(93 95 4 99) 4]
Train Case:  31 | Input/Output: [(73 35 90 6) 6]
Train Case:  32 | Input/Output: [(69 33 79 20) 20]
Train Case:  33 | Input/Output: [(46 91 94 39) 39]
Train Case:  34 | Input/Output: [(50 76 65 98) 50]
Train Case:  35 | Input/Output: [(63 15 11 78) 11]
Train Case:  36 | Input/Output: [(30 83 18 67) 18]
Train Case:  37 | Input/Output: [(94 60 36 87) 36]
Train Case:  38 | Input/Output: [(48 59 74 0) 0]
Train Case:  39 | Input/Output: [(52 40 52 60) 40]
Train Case:  40 | Input/Output: [(82 71 -50 -61) -61]
Train Case:  41 | Input/Output: [(-78 74 -37 -49) -78]
Train Case:  42 | Input/Output: [(-80 42 -71 -79) -80]
Train Case:  43 | Input/Output: [(61 -16 -4 -34) -34]
Train Case:  44 | Input/Output: [(83 -48 -88 -11) -88]
Train Case:  45 | Input/Output: [(-87 -20 -21 9) -87]
Train Case:  46 | Input/Output: [(51 -94 -85 -90) -94]
Train Case:  47 | Input/Output: [(-56 50 -54 41) -56]
Train Case:  48 | Input/Output: [(7 18 -4 -100) -100]
Train Case:  49 | Input/Output: [(-78 49 -74 -76) -78]
Train Case:  50 | Input/Output: [(-78 -67 48 -57) -78]
Train Case:  51 | Input/Output: [(25 83 -57 93) -57]
Train Case:  52 | Input/Output: [(-72 -9 84 -42) -72]
Train Case:  53 | Input/Output: [(-50 -6 80 -3) -50]
Train Case:  54 | Input/Output: [(80 -26 -37 23) -37]
Train Case:  55 | Input/Output: [(96 17 -9 86) -9]
Train Case:  56 | Input/Output: [(-18 -5 82 -15) -18]
Train Case:  57 | Input/Output: [(96 57 32 43) 32]
Train Case:  58 | Input/Output: [(-22 84 40 64) -22]
Train Case:  59 | Input/Output: [(90 -1 -25 65) -25]
Train Case:  60 | Input/Output: [(38 67 -45 -31) -45]
Train Case:  61 | Input/Output: [(52 57 -5 -17) -17]
Train Case:  62 | Input/Output: [(-25 -76 75 -61) -76]
Train Case:  63 | Input/Output: [(-54 6 2 -48) -54]
Train Case:  64 | Input/Output: [(-83 -30 -9 89) -83]
Train Case:  65 | Input/Output: [(-61 -33 93 -45) -61]
Train Case:  66 | Input/Output: [(48 56 -35 39) -35]
Train Case:  67 | Input/Output: [(57 73 -72 -16) -72]
Train Case:  68 | Input/Output: [(23 -77 16 49) -77]
Train Case:  69 | Input/Output: [(87 64 -93 21) -93]
Train Case:  70 | Input/Output: [(31 -47 27 -59) -59]
Train Case:  71 | Input/Output: [(-77 -88 -33 37) -88]
Train Case:  72 | Input/Output: [(-60 5 27 -63) -63]
Train Case:  73 | Input/Output: [(33 -1 -91 -96) -96]
Train Case:  74 | Input/Output: [(59 -50 73 -97) -97]
Train Case:  75 | Input/Output: [(-53 23 82 -23) -53]
Train Case:  76 | Input/Output: [(43 75 42 10) 10]
Train Case:  77 | Input/Output: [(28 -26 -88 -41) -88]
Train Case:  78 | Input/Output: [(39 69 -36 74) -36]
Train Case:  79 | Input/Output: [(-5 74 47 30) -5]
Train Case:  80 | Input/Output: [(47 46 -99 14) -99]
Train Case:  81 | Input/Output: [(32 -88 11 34) -88]
Train Case:  82 | Input/Output: [(20 -35 0 9) -35]
Train Case:  83 | Input/Output: [(-72 55 -48 61) -72]
Train Case:  84 | Input/Output: [(-79 30 52 6) -79]
Train Case:  85 | Input/Output: [(21 -49 50 100) -49]
Train Case:  86 | Input/Output: [(-2 -14 23 47) -14]
Train Case:  87 | Input/Output: [(-9 97 52 -78) -78]
Train Case:  88 | Input/Output: [(53 9 16 -72) -72]
Train Case:  89 | Input/Output: [(15 -6 77 89) -6]
Train Case:  90 | Input/Output: [(-55 -78 -40 19) -78]
Train Case:  91 | Input/Output: [(88 30 -83 31) -83]
Train Case:  92 | Input/Output: [(-20 30 15 41) -20]
Train Case:  93 | Input/Output: [(-36 68 -47 -25) -47]
Train Case:  94 | Input/Output: [(97 31 98 -75) -75]
Train Case:  95 | Input/Output: [(92 8 -38 -84) -84]
Train Case:  96 | Input/Output: [(0 1 -48 -6) -48]
Train Case:  97 | Input/Output: [(45 -50 -18 -55) -55]
Train Case:  98 | Input/Output: [(39 61 54 63) 39]
Train Case:  99 | Input/Output: [(87 -12 82 69) -12]
Test Case:   0 | Input/Output: [[99 5 99 99] 5]
Test Case:   1 | Input/Output: [[99 13 13 13] 13]
Test Case:   2 | Input/Output: [[-6 -44 -6 -6] -44]
Test Case:   3 | Input/Output: [[-23 -23 -23 18] -23]
Test Case:   4 | Input/Output: [[-49 60 -49 -49] -49]
Test Case:   5 | Input/Output: [[-65 -65 -65 -18] -65]
Test Case:   6 | Input/Output: [[-26 -30 -26 -26] -30]
Test Case:   7 | Input/Output: [[71 73 73 73] 71]
Test Case:   8 | Input/Output: [[0 -94 -94 -94] -94]
Test Case:   9 | Input/Output: [[54 54 74 54] 54]
Test Case:  10 | Input/Output: [[-25 -73 -25 -25] -73]
Test Case:  11 | Input/Output: [[1 1 -17 1] -17]
Test Case:  12 | Input/Output: [[77 -55 77 77] -55]
Test Case:  13 | Input/Output: [[-90 70 -90 -90] -90]
Test Case:  14 | Input/Output: [[-30 -23 -30 -30] -30]
Test Case:  15 | Input/Output: [[17 4 17 17] 4]
Test Case:  16 | Input/Output: [[-14 -14 -14 -17] -17]
Test Case:  17 | Input/Output: [[-14 -31 -31 -31] -31]
Test Case:  18 | Input/Output: [[-5 -5 -5 -54] -54]
Test Case:  19 | Input/Output: [[-55 -55 -55 70] -55]
Test Case:  20 | Input/Output: [[93 93 100 93] 93]
Test Case:  21 | Input/Output: [[9 -22 9 9] -22]
Test Case:  22 | Input/Output: [[20 20 -48 20] -48]
Test Case:  23 | Input/Output: [[52 52 -63 52] -63]
Test Case:  24 | Input/Output: [[-63 -19 -19 -19] -63]
Test Case:  25 | Input/Output: [[-1 -86 -1 -1] -86]
Test Case:  26 | Input/Output: [[86 86 -75 86] -75]
Test Case:  27 | Input/Output: [[38 -12 -12 -12] -12]
Test Case:  28 | Input/Output: [[62 -63 62 62] -63]
Test Case:  29 | Input/Output: [[33 33 33 74] 33]
Test Case:  30 | Input/Output: [[69 69 -9 69] -9]
Test Case:  31 | Input/Output: [[97 97 97 97] 97]
Test Case:  32 | Input/Output: [[86 86 86 28] 28]
Test Case:  33 | Input/Output: [[-51 -51 -86 -51] -86]
Test Case:  34 | Input/Output: [[-3 -3 83 -3] -3]
Test Case:  35 | Input/Output: [[-59 -35 -35 -35] -59]
Test Case:  36 | Input/Output: [[91 91 43 91] 43]
Test Case:  37 | Input/Output: [[-2 -2 73 -2] -2]
Test Case:  38 | Input/Output: [[68 -71 -71 -71] -71]
Test Case:  39 | Input/Output: [[68 68 68 52] 52]
Test Case:  40 | Input/Output: [[13 13 -69 13] -69]
Test Case:  41 | Input/Output: [[-81 -40 -81 -81] -81]
Test Case:  42 | Input/Output: [[47 47 0 47] 0]
Test Case:  43 | Input/Output: [[68 68 26 68] 26]
Test Case:  44 | Input/Output: [[-73 -73 -73 -36] -73]
Test Case:  45 | Input/Output: [[-68 20 20 20] -68]
Test Case:  46 | Input/Output: [[-19 -19 -19 79] -19]
Test Case:  47 | Input/Output: [[61 61 61 -80] -80]
Test Case:  48 | Input/Output: [[24 24 88 24] 24]
Test Case:  49 | Input/Output: [[-9 -9 59 -9] -9]
Test Case:  50 | Input/Output: [[82 82 -39 82] -39]
Test Case:  51 | Input/Output: [[-21 -21 -21 -100] -100]
Test Case:  52 | Input/Output: [[-68 -82 -68 -68] -82]
Test Case:  53 | Input/Output: [[-18 -18 17 -18] -18]
Test Case:  54 | Input/Output: [[-76 -65 -65 -65] -76]
Test Case:  55 | Input/Output: [[45 5 5 5] 5]
Test Case:  56 | Input/Output: [[18 18 18 61] 18]
Test Case:  57 | Input/Output: [[-65 -65 -65 66] -65]
Test Case:  58 | Input/Output: [[91 -58 91 91] -58]
Test Case:  59 | Input/Output: [[6 6 -42 6] -42]
Test Case:  60 | Input/Output: [[-28 -23 -23 -23] -28]
Test Case:  61 | Input/Output: [[34 22 34 34] 22]
Test Case:  62 | Input/Output: [[26 26 26 53] 26]
Test Case:  63 | Input/Output: [[79 -49 -49 -49] -49]
Test Case:  64 | Input/Output: [[85 -11 85 85] -11]
Test Case:  65 | Input/Output: [[-9 -30 -30 -30] -30]
Test Case:  66 | Input/Output: [[11 11 11 -97] -97]
Test Case:  67 | Input/Output: [[23 -54 23 23] -54]
Test Case:  68 | Input/Output: [[7 -9 7 7] -9]
Test Case:  69 | Input/Output: [[73 73 73 -64] -64]
Test Case:  70 | Input/Output: [[73 73 8 73] 8]
Test Case:  71 | Input/Output: [[-52 -52 -52 -39] -52]
Test Case:  72 | Input/Output: [[-75 -75 -6 -75] -75]
Test Case:  73 | Input/Output: [[15 -97 15 15] -97]
Test Case:  74 | Input/Output: [[-88 -81 -88 -88] -88]
Test Case:  75 | Input/Output: [[-32 25 25 25] -32]
Test Case:  76 | Input/Output: [[91 91 90 91] 90]
Test Case:  77 | Input/Output: [[-17 -8 -8 -8] -17]
Test Case:  78 | Input/Output: [[-15 -81 -15 -15] -81]
Test Case:  79 | Input/Output: [[87 87 87 -84] -84]
Test Case:  80 | Input/Output: [[-9 -6 -9 -9] -9]
Test Case:  81 | Input/Output: [[12 19 19 19] 12]
Test Case:  82 | Input/Output: [[-25 -25 48 -25] -25]
Test Case:  83 | Input/Output: [[99 99 -86 99] -86]
Test Case:  84 | Input/Output: [[-56 -21 -56 -56] -56]
Test Case:  85 | Input/Output: [[77 -7 -7 -7] -7]
Test Case:  86 | Input/Output: [[53 93 53 53] 53]
Test Case:  87 | Input/Output: [[-9 -9 -9 -99] -99]
Test Case:  88 | Input/Output: [[-38 9 9 9] -38]
Test Case:  89 | Input/Output: [[-26 -26 -26 -33] -33]
Test Case:  90 | Input/Output: [[57 89 57 57] 57]
Test Case:  91 | Input/Output: [[10 12 12 12] 10]
Test Case:  92 | Input/Output: [[-32 -32 87 -32] -32]
Test Case:  93 | Input/Output: [[-73 -40 -40 -40] -73]
Test Case:  94 | Input/Output: [[25 25 25 -67] -67]
Test Case:  95 | Input/Output: [[82 82 -99 82] -99]
Test Case:  96 | Input/Output: [[31 31 -77 31] -77]
Test Case:  97 | Input/Output: [[8 8 27 8] 8]
Test Case:  98 | Input/Output: [[-5 30 -5 -5] -5]
Test Case:  99 | Input/Output: [[-63 5 5 5] -63]
Test Case: 100 | Input/Output: [(30 30 30 30) 30]
Test Case: 101 | Input/Output: [(35 35 35 35) 35]
Test Case: 102 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 103 | Input/Output: [(57 57 57 57) 57]
Test Case: 104 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 105 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 106 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 107 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 108 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 109 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 110 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 111 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 112 | Input/Output: [(92 92 92 92) 92]
Test Case: 113 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 114 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 115 | Input/Output: [(36 36 36 36) 36]
Test Case: 116 | Input/Output: [(0 0 0 0) 0]
Test Case: 117 | Input/Output: [(5 5 5 5) 5]
Test Case: 118 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 119 | Input/Output: [(74 74 74 74) 74]
Test Case: 120 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 121 | Input/Output: [(38 38 38 38) 38]
Test Case: 122 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 123 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 124 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 125 | Input/Output: [(7 7 7 7) 7]
Test Case: 126 | Input/Output: [(80 80 80 80) 80]
Test Case: 127 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 128 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 129 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 130 | Input/Output: [(11 11 11 11) 11]
Test Case: 131 | Input/Output: [(67 67 67 67) 67]
Test Case: 132 | Input/Output: [(19 19 19 19) 19]
Test Case: 133 | Input/Output: [(35 35 35 35) 35]
Test Case: 134 | Input/Output: [(40 40 40 40) 40]
Test Case: 135 | Input/Output: [(72 72 72 72) 72]
Test Case: 136 | Input/Output: [(93 93 93 93) 93]
Test Case: 137 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 138 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 139 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 140 | Input/Output: [(29 29 29 29) 29]
Test Case: 141 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 142 | Input/Output: [(39 39 39 39) 39]
Test Case: 143 | Input/Output: [(62 62 62 62) 62]
Test Case: 144 | Input/Output: [(79 79 79 79) 79]
Test Case: 145 | Input/Output: [(50 50 50 50) 50]
Test Case: 146 | Input/Output: [(22 22 22 22) 22]
Test Case: 147 | Input/Output: [(52 52 52 52) 52]
Test Case: 148 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 149 | Input/Output: [(21 21 21 21) 21]
Test Case: 150 | Input/Output: [(28 28 28 28) 28]
Test Case: 151 | Input/Output: [(29 29 29 29) 29]
Test Case: 152 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 153 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 154 | Input/Output: [(2 2 2 2) 2]
Test Case: 155 | Input/Output: [(28 28 28 28) 28]
Test Case: 156 | Input/Output: [(6 6 6 6) 6]
Test Case: 157 | Input/Output: [(38 38 38 38) 38]
Test Case: 158 | Input/Output: [(52 52 52 52) 52]
Test Case: 159 | Input/Output: [(63 63 63 63) 63]
Test Case: 160 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 161 | Input/Output: [(35 35 35 35) 35]
Test Case: 162 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 163 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 164 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 165 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 166 | Input/Output: [(65 65 65 65) 65]
Test Case: 167 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 168 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 169 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 170 | Input/Output: [(42 42 42 42) 42]
Test Case: 171 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 172 | Input/Output: [(92 92 92 92) 92]
Test Case: 173 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 174 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 175 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 176 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 177 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 178 | Input/Output: [(64 64 64 64) 64]
Test Case: 179 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 180 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 181 | Input/Output: [(45 45 45 45) 45]
Test Case: 182 | Input/Output: [(74 74 74 74) 74]
Test Case: 183 | Input/Output: [(60 60 60 60) 60]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(40 40 40 40) 40]
Test Case: 186 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 187 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 188 | Input/Output: [(66 66 66 66) 66]
Test Case: 189 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 190 | Input/Output: [(65 65 65 65) 65]
Test Case: 191 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 192 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 193 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 194 | Input/Output: [(50 50 50 50) 50]
Test Case: 195 | Input/Output: [(89 89 89 89) 89]
Test Case: 196 | Input/Output: [(8 8 8 8) 8]
Test Case: 197 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 198 | Input/Output: [(61 61 61 61) 61]
Test Case: 199 | Input/Output: [(53 53 53 53) 53]
Test Case: 200 | Input/Output: [(77 62 89 98) 62]
Test Case: 201 | Input/Output: [(42 88 92 5) 5]
Test Case: 202 | Input/Output: [(45 24 11 68) 11]
Test Case: 203 | Input/Output: [(38 68 46 50) 38]
Test Case: 204 | Input/Output: [(20 35 18 70) 18]
Test Case: 205 | Input/Output: [(41 91 49 41) 41]
Test Case: 206 | Input/Output: [(36 21 25 7) 7]
Test Case: 207 | Input/Output: [(50 40 39 0) 0]
Test Case: 208 | Input/Output: [(74 78 83 48) 48]
Test Case: 209 | Input/Output: [(15 80 80 100) 15]
Test Case: 210 | Input/Output: [(12 2 10 38) 2]
Test Case: 211 | Input/Output: [(21 20 33 53) 20]
Test Case: 212 | Input/Output: [(96 13 96 8) 8]
Test Case: 213 | Input/Output: [(21 38 81 96) 21]
Test Case: 214 | Input/Output: [(69 87 20 74) 20]
Test Case: 215 | Input/Output: [(81 41 16 54) 16]
Test Case: 216 | Input/Output: [(60 9 90 48) 9]
Test Case: 217 | Input/Output: [(80 22 65 42) 22]
Test Case: 218 | Input/Output: [(100 19 88 25) 19]
Test Case: 219 | Input/Output: [(78 13 64 62) 13]
Test Case: 220 | Input/Output: [(41 100 80 86) 41]
Test Case: 221 | Input/Output: [(92 94 36 47) 36]
Test Case: 222 | Input/Output: [(32 28 99 76) 28]
Test Case: 223 | Input/Output: [(85 74 6 28) 6]
Test Case: 224 | Input/Output: [(44 28 5 83) 5]
Test Case: 225 | Input/Output: [(32 17 29 87) 17]
Test Case: 226 | Input/Output: [(17 48 7 87) 7]
Test Case: 227 | Input/Output: [(12 49 50 21) 12]
Test Case: 228 | Input/Output: [(26 76 82 71) 26]
Test Case: 229 | Input/Output: [(40 24 93 47) 24]
Test Case: 230 | Input/Output: [(35 9 13 50) 9]
Test Case: 231 | Input/Output: [(87 70 97 62) 62]
Test Case: 232 | Input/Output: [(10 18 72 40) 10]
Test Case: 233 | Input/Output: [(23 55 29 39) 23]
Test Case: 234 | Input/Output: [(63 92 57 0) 0]
Test Case: 235 | Input/Output: [(54 43 8 40) 8]
Test Case: 236 | Input/Output: [(61 47 24 0) 0]
Test Case: 237 | Input/Output: [(84 78 71 29) 29]
Test Case: 238 | Input/Output: [(99 29 15 15) 15]
Test Case: 239 | Input/Output: [(51 40 64 54) 40]
Test Case: 240 | Input/Output: [(34 73 65 92) 34]
Test Case: 241 | Input/Output: [(66 13 91 17) 13]
Test Case: 242 | Input/Output: [(36 29 5 67) 5]
Test Case: 243 | Input/Output: [(37 95 24 11) 11]
Test Case: 244 | Input/Output: [(61 45 51 93) 45]
Test Case: 245 | Input/Output: [(67 21 92 0) 0]
Test Case: 246 | Input/Output: [(53 21 75 64) 21]
Test Case: 247 | Input/Output: [(37 13 0 17) 0]
Test Case: 248 | Input/Output: [(37 79 71 78) 37]
Test Case: 249 | Input/Output: [(48 47 73 33) 33]
Test Case: 250 | Input/Output: [(85 62 100 60) 60]
Test Case: 251 | Input/Output: [(38 38 28 33) 28]
Test Case: 252 | Input/Output: [(75 55 77 0) 0]
Test Case: 253 | Input/Output: [(13 32 56 48) 13]
Test Case: 254 | Input/Output: [(23 17 2 58) 2]
Test Case: 255 | Input/Output: [(2 68 76 24) 2]
Test Case: 256 | Input/Output: [(2 1 68 64) 1]
Test Case: 257 | Input/Output: [(62 27 32 31) 27]
Test Case: 258 | Input/Output: [(64 84 39 15) 15]
Test Case: 259 | Input/Output: [(12 6 96 84) 6]
Test Case: 260 | Input/Output: [(84 76 59 15) 15]
Test Case: 261 | Input/Output: [(83 88 68 12) 12]
Test Case: 262 | Input/Output: [(32 52 33 6) 6]
Test Case: 263 | Input/Output: [(14 32 100 86) 14]
Test Case: 264 | Input/Output: [(89 52 76 66) 52]
Test Case: 265 | Input/Output: [(65 13 100 17) 13]
Test Case: 266 | Input/Output: [(62 43 15 82) 15]
Test Case: 267 | Input/Output: [(3 79 99 8) 3]
Test Case: 268 | Input/Output: [(92 53 58 85) 53]
Test Case: 269 | Input/Output: [(72 9 9 74) 9]
Test Case: 270 | Input/Output: [(33 96 68 19) 19]
Test Case: 271 | Input/Output: [(77 67 21 33) 21]
Test Case: 272 | Input/Output: [(39 39 87 27) 27]
Test Case: 273 | Input/Output: [(55 49 72 52) 49]
Test Case: 274 | Input/Output: [(52 2 30 96) 2]
Test Case: 275 | Input/Output: [(78 69 70 45) 45]
Test Case: 276 | Input/Output: [(53 100 24 0) 0]
Test Case: 277 | Input/Output: [(94 72 84 28) 28]
Test Case: 278 | Input/Output: [(21 46 32 3) 3]
Test Case: 279 | Input/Output: [(88 38 82 76) 38]
Test Case: 280 | Input/Output: [(14 90 92 21) 14]
Test Case: 281 | Input/Output: [(43 20 29 18) 18]
Test Case: 282 | Input/Output: [(17 6 70 27) 6]
Test Case: 283 | Input/Output: [(5 60 81 93) 5]
Test Case: 284 | Input/Output: [(43 86 76 60) 43]
Test Case: 285 | Input/Output: [(26 5 52 62) 5]
Test Case: 286 | Input/Output: [(25 7 15 78) 7]
Test Case: 287 | Input/Output: [(89 76 52 66) 52]
Test Case: 288 | Input/Output: [(59 22 62 13) 13]
Test Case: 289 | Input/Output: [(91 40 65 51) 40]
Test Case: 290 | Input/Output: [(82 99 43 18) 18]
Test Case: 291 | Input/Output: [(14 68 43 84) 14]
Test Case: 292 | Input/Output: [(89 77 41 97) 41]
Test Case: 293 | Input/Output: [(79 93 37 81) 37]
Test Case: 294 | Input/Output: [(43 1 13 61) 1]
Test Case: 295 | Input/Output: [(38 27 93 81) 27]
Test Case: 296 | Input/Output: [(33 99 82 21) 21]
Test Case: 297 | Input/Output: [(61 49 28 24) 24]
Test Case: 298 | Input/Output: [(62 3 89 60) 3]
Test Case: 299 | Input/Output: [(91 70 40 71) 40]
Test Case: 300 | Input/Output: [(99 81 45 93) 45]
Test Case: 301 | Input/Output: [(27 40 90 79) 27]
Test Case: 302 | Input/Output: [(84 83 28 92) 28]
Test Case: 303 | Input/Output: [(18 52 29 35) 18]
Test Case: 304 | Input/Output: [(67 17 82 12) 12]
Test Case: 305 | Input/Output: [(35 25 25 84) 25]
Test Case: 306 | Input/Output: [(53 0 13 96) 0]
Test Case: 307 | Input/Output: [(15 93 89 45) 15]
Test Case: 308 | Input/Output: [(71 20 80 0) 0]
Test Case: 309 | Input/Output: [(23 53 14 48) 14]
Test Case: 310 | Input/Output: [(2 74 5 28) 2]
Test Case: 311 | Input/Output: [(48 88 52 83) 48]
Test Case: 312 | Input/Output: [(33 59 21 66) 21]
Test Case: 313 | Input/Output: [(72 20 40 39) 20]
Test Case: 314 | Input/Output: [(39 73 93 61) 39]
Test Case: 315 | Input/Output: [(83 77 94 61) 61]
Test Case: 316 | Input/Output: [(5 59 4 16) 4]
Test Case: 317 | Input/Output: [(25 32 12 42) 12]
Test Case: 318 | Input/Output: [(57 64 11 76) 11]
Test Case: 319 | Input/Output: [(35 96 99 1) 1]
Test Case: 320 | Input/Output: [(85 26 100 5) 5]
Test Case: 321 | Input/Output: [(38 28 97 80) 28]
Test Case: 322 | Input/Output: [(56 39 21 100) 21]
Test Case: 323 | Input/Output: [(51 75 49 87) 49]
Test Case: 324 | Input/Output: [(81 38 91 83) 38]
Test Case: 325 | Input/Output: [(73 57 10 42) 10]
Test Case: 326 | Input/Output: [(24 96 30 82) 24]
Test Case: 327 | Input/Output: [(4 59 66 34) 4]
Test Case: 328 | Input/Output: [(67 13 7 36) 7]
Test Case: 329 | Input/Output: [(38 44 100 82) 38]
Test Case: 330 | Input/Output: [(40 77 86 59) 40]
Test Case: 331 | Input/Output: [(71 92 47 32) 32]
Test Case: 332 | Input/Output: [(22 43 36 36) 22]
Test Case: 333 | Input/Output: [(84 23 43 6) 6]
Test Case: 334 | Input/Output: [(25 23 28 93) 23]
Test Case: 335 | Input/Output: [(55 93 81 66) 55]
Test Case: 336 | Input/Output: [(67 57 69 91) 57]
Test Case: 337 | Input/Output: [(56 68 45 39) 39]
Test Case: 338 | Input/Output: [(95 46 67 44) 44]
Test Case: 339 | Input/Output: [(55 45 38 7) 7]
Test Case: 340 | Input/Output: [(73 6 78 20) 6]
Test Case: 341 | Input/Output: [(32 100 84 80) 32]
Test Case: 342 | Input/Output: [(66 69 37 98) 37]
Test Case: 343 | Input/Output: [(74 95 49 7) 7]
Test Case: 344 | Input/Output: [(100 59 10 29) 10]
Test Case: 345 | Input/Output: [(81 62 20 22) 20]
Test Case: 346 | Input/Output: [(60 92 31 68) 31]
Test Case: 347 | Input/Output: [(16 64 69 33) 16]
Test Case: 348 | Input/Output: [(38 7 5 63) 5]
Test Case: 349 | Input/Output: [(7 59 37 52) 7]
Test Case: 350 | Input/Output: [(64 15 97 74) 15]
Test Case: 351 | Input/Output: [(100 44 34 23) 23]
Test Case: 352 | Input/Output: [(45 14 97 50) 14]
Test Case: 353 | Input/Output: [(93 47 1 20) 1]
Test Case: 354 | Input/Output: [(45 73 30 54) 30]
Test Case: 355 | Input/Output: [(64 21 61 14) 14]
Test Case: 356 | Input/Output: [(35 49 5 18) 5]
Test Case: 357 | Input/Output: [(18 73 43 96) 18]
Test Case: 358 | Input/Output: [(54 56 72 51) 51]
Test Case: 359 | Input/Output: [(17 36 42 90) 17]
Test Case: 360 | Input/Output: [(37 73 55 77) 37]
Test Case: 361 | Input/Output: [(62 54 52 36) 36]
Test Case: 362 | Input/Output: [(27 99 46 33) 27]
Test Case: 363 | Input/Output: [(63 12 78 75) 12]
Test Case: 364 | Input/Output: [(82 43 2 45) 2]
Test Case: 365 | Input/Output: [(65 34 53 70) 34]
Test Case: 366 | Input/Output: [(44 16 6 19) 6]
Test Case: 367 | Input/Output: [(25 88 48 69) 25]
Test Case: 368 | Input/Output: [(0 68 75 30) 0]
Test Case: 369 | Input/Output: [(6 20 3 61) 3]
Test Case: 370 | Input/Output: [(94 55 97 93) 55]
Test Case: 371 | Input/Output: [(34 83 76 37) 34]
Test Case: 372 | Input/Output: [(41 39 98 10) 10]
Test Case: 373 | Input/Output: [(76 36 8 46) 8]
Test Case: 374 | Input/Output: [(22 88 100 62) 22]
Test Case: 375 | Input/Output: [(27 55 95 55) 27]
Test Case: 376 | Input/Output: [(82 11 2 92) 2]
Test Case: 377 | Input/Output: [(12 34 100 78) 12]
Test Case: 378 | Input/Output: [(97 0 94 46) 0]
Test Case: 379 | Input/Output: [(21 51 96 64) 21]
Test Case: 380 | Input/Output: [(83 21 1 14) 1]
Test Case: 381 | Input/Output: [(7 100 24 84) 7]
Test Case: 382 | Input/Output: [(26 99 85 4) 4]
Test Case: 383 | Input/Output: [(45 93 8 57) 8]
Test Case: 384 | Input/Output: [(91 5 26 1) 1]
Test Case: 385 | Input/Output: [(83 27 85 47) 27]
Test Case: 386 | Input/Output: [(49 78 17 37) 17]
Test Case: 387 | Input/Output: [(58 24 40 5) 5]
Test Case: 388 | Input/Output: [(34 26 30 10) 10]
Test Case: 389 | Input/Output: [(91 69 17 91) 17]
Test Case: 390 | Input/Output: [(55 58 56 70) 55]
Test Case: 391 | Input/Output: [(17 19 53 79) 17]
Test Case: 392 | Input/Output: [(65 33 48 11) 11]
Test Case: 393 | Input/Output: [(75 53 21 17) 17]
Test Case: 394 | Input/Output: [(82 41 75 46) 41]
Test Case: 395 | Input/Output: [(36 93 84 1) 1]
Test Case: 396 | Input/Output: [(65 50 87 36) 36]
Test Case: 397 | Input/Output: [(45 23 88 58) 23]
Test Case: 398 | Input/Output: [(31 17 60 18) 17]
Test Case: 399 | Input/Output: [(74 7 68 65) 7]
Test Case: 400 | Input/Output: [(-12 7 -8 -9) -12]
Test Case: 401 | Input/Output: [(-59 97 -78 -22) -78]
Test Case: 402 | Input/Output: [(31 7 -86 -12) -86]
Test Case: 403 | Input/Output: [(13 69 24 78) 13]
Test Case: 404 | Input/Output: [(61 40 20 64) 20]
Test Case: 405 | Input/Output: [(54 35 97 25) 25]
Test Case: 406 | Input/Output: [(44 46 -66 100) -66]
Test Case: 407 | Input/Output: [(40 -88 -88 -35) -88]
Test Case: 408 | Input/Output: [(23 -63 28 97) -63]
Test Case: 409 | Input/Output: [(-92 -82 94 30) -92]
Test Case: 410 | Input/Output: [(24 88 -57 7) -57]
Test Case: 411 | Input/Output: [(47 -77 27 16) -77]
Test Case: 412 | Input/Output: [(100 -39 -1 -58) -58]
Test Case: 413 | Input/Output: [(20 -95 1 -66) -95]
Test Case: 414 | Input/Output: [(-99 62 89 -87) -99]
Test Case: 415 | Input/Output: [(51 -42 -10 -72) -72]
Test Case: 416 | Input/Output: [(26 -89 45 80) -89]
Test Case: 417 | Input/Output: [(43 -90 79 -67) -90]
Test Case: 418 | Input/Output: [(-40 -92 -6 88) -92]
Test Case: 419 | Input/Output: [(54 -88 72 -77) -88]
Test Case: 420 | Input/Output: [(16 66 -25 -11) -25]
Test Case: 421 | Input/Output: [(38 -52 -41 -3) -52]
Test Case: 422 | Input/Output: [(25 37 39 -98) -98]
Test Case: 423 | Input/Output: [(10 -69 -39 97) -69]
Test Case: 424 | Input/Output: [(-91 -4 12 73) -91]
Test Case: 425 | Input/Output: [(49 98 36 47) 36]
Test Case: 426 | Input/Output: [(-61 89 -26 99) -61]
Test Case: 427 | Input/Output: [(-63 -97 -76 3) -97]
Test Case: 428 | Input/Output: [(-97 -65 100 42) -97]
Test Case: 429 | Input/Output: [(-9 -31 36 -56) -56]
Test Case: 430 | Input/Output: [(-31 32 36 -98) -98]
Test Case: 431 | Input/Output: [(-33 -4 -31 21) -33]
Test Case: 432 | Input/Output: [(85 90 37 76) 37]
Test Case: 433 | Input/Output: [(8 35 -15 -42) -42]
Test Case: 434 | Input/Output: [(-82 -7 -64 -67) -82]
Test Case: 435 | Input/Output: [(-85 -100 -25 72) -100]
Test Case: 436 | Input/Output: [(49 64 23 -38) -38]
Test Case: 437 | Input/Output: [(26 99 83 99) 26]
Test Case: 438 | Input/Output: [(23 -11 23 -95) -95]
Test Case: 439 | Input/Output: [(-4 -23 -34 77) -34]
Test Case: 440 | Input/Output: [(-78 27 24 60) -78]
Test Case: 441 | Input/Output: [(36 14 13 -92) -92]
Test Case: 442 | Input/Output: [(55 -93 -66 48) -93]
Test Case: 443 | Input/Output: [(15 -40 60 47) -40]
Test Case: 444 | Input/Output: [(87 79 4 86) 4]
Test Case: 445 | Input/Output: [(-13 41 -38 98) -38]
Test Case: 446 | Input/Output: [(-50 -57 84 -80) -80]
Test Case: 447 | Input/Output: [(62 6 74 66) 6]
Test Case: 448 | Input/Output: [(-19 -13 -53 23) -53]
Test Case: 449 | Input/Output: [(18 -44 -82 95) -82]
Test Case: 450 | Input/Output: [(62 -13 39 -79) -79]
Test Case: 451 | Input/Output: [(-85 39 -7 1) -85]
Test Case: 452 | Input/Output: [(-47 36 -43 -2) -47]
Test Case: 453 | Input/Output: [(-56 -44 73 81) -56]
Test Case: 454 | Input/Output: [(28 71 47 -64) -64]
Test Case: 455 | Input/Output: [(-22 16 21 -75) -75]
Test Case: 456 | Input/Output: [(-77 -2 88 35) -77]
Test Case: 457 | Input/Output: [(53 83 -58 13) -58]
Test Case: 458 | Input/Output: [(83 -66 -98 -87) -98]
Test Case: 459 | Input/Output: [(13 29 -45 -17) -45]
Test Case: 460 | Input/Output: [(33 12 -83 70) -83]
Test Case: 461 | Input/Output: [(29 76 37 19) 19]
Test Case: 462 | Input/Output: [(-45 -85 -83 -58) -85]
Test Case: 463 | Input/Output: [(12 49 50 -67) -67]
Test Case: 464 | Input/Output: [(-86 -39 -86 96) -86]
Test Case: 465 | Input/Output: [(11 46 37 56) 11]
Test Case: 466 | Input/Output: [(81 -16 16 -95) -95]
Test Case: 467 | Input/Output: [(-83 80 94 -93) -93]
Test Case: 468 | Input/Output: [(-90 82 35 -2) -90]
Test Case: 469 | Input/Output: [(51 71 19 -44) -44]
Test Case: 470 | Input/Output: [(-82 8 -88 8) -88]
Test Case: 471 | Input/Output: [(83 -20 54 69) -20]
Test Case: 472 | Input/Output: [(99 84 -84 8) -84]
Test Case: 473 | Input/Output: [(-67 -87 -17 -61) -87]
Test Case: 474 | Input/Output: [(-73 90 52 70) -73]
Test Case: 475 | Input/Output: [(-97 -29 23 14) -97]
Test Case: 476 | Input/Output: [(-99 -89 99 -37) -99]
Test Case: 477 | Input/Output: [(51 -10 77 -34) -34]
Test Case: 478 | Input/Output: [(78 -50 -88 61) -88]
Test Case: 479 | Input/Output: [(17 -80 20 9) -80]
Test Case: 480 | Input/Output: [(74 8 -13 -64) -64]
Test Case: 481 | Input/Output: [(4 41 71 23) 4]
Test Case: 482 | Input/Output: [(-20 4 -48 83) -48]
Test Case: 483 | Input/Output: [(73 -94 -82 -52) -94]
Test Case: 484 | Input/Output: [(29 -31 79 -14) -31]
Test Case: 485 | Input/Output: [(-42 -18 61 -96) -96]
Test Case: 486 | Input/Output: [(-68 78 18 -13) -68]
Test Case: 487 | Input/Output: [(21 9 -17 66) -17]
Test Case: 488 | Input/Output: [(-97 84 23 54) -97]
Test Case: 489 | Input/Output: [(-38 7 -59 95) -59]
Test Case: 490 | Input/Output: [(-73 -47 59 80) -73]
Test Case: 491 | Input/Output: [(73 6 1 -34) -34]
Test Case: 492 | Input/Output: [(-39 -19 -87 12) -87]
Test Case: 493 | Input/Output: [(84 -16 -71 -31) -71]
Test Case: 494 | Input/Output: [(-24 2 49 -42) -42]
Test Case: 495 | Input/Output: [(-70 -7 64 98) -70]
Test Case: 496 | Input/Output: [(-25 -6 27 -26) -26]
Test Case: 497 | Input/Output: [(64 -24 -62 77) -62]
Test Case: 498 | Input/Output: [(-82 39 23 19) -82]
Test Case: 499 | Input/Output: [(25 83 -57 31) -57]
Test Case: 500 | Input/Output: [(88 83 -70 11) -70]
Test Case: 501 | Input/Output: [(-88 10 -17 76) -88]
Test Case: 502 | Input/Output: [(82 -4 -38 73) -38]
Test Case: 503 | Input/Output: [(28 0 -51 -41) -51]
Test Case: 504 | Input/Output: [(-24 89 -14 71) -24]
Test Case: 505 | Input/Output: [(-76 -71 -25 21) -76]
Test Case: 506 | Input/Output: [(-59 54 -23 16) -59]
Test Case: 507 | Input/Output: [(19 41 87 48) 19]
Test Case: 508 | Input/Output: [(29 65 -14 -18) -18]
Test Case: 509 | Input/Output: [(-26 61 -64 6) -64]
Test Case: 510 | Input/Output: [(-20 -67 73 -80) -80]
Test Case: 511 | Input/Output: [(63 -34 -94 62) -94]
Test Case: 512 | Input/Output: [(100 44 61 41) 41]
Test Case: 513 | Input/Output: [(40 68 67 -22) -22]
Test Case: 514 | Input/Output: [(43 0 -50 -43) -50]
Test Case: 515 | Input/Output: [(-95 -66 -43 45) -95]
Test Case: 516 | Input/Output: [(-45 42 -99 1) -99]
Test Case: 517 | Input/Output: [(-59 91 85 -93) -93]
Test Case: 518 | Input/Output: [(-54 -7 -72 52) -72]
Test Case: 519 | Input/Output: [(74 87 15 -70) -70]
Test Case: 520 | Input/Output: [(-12 -8 25 -76) -76]
Test Case: 521 | Input/Output: [(97 -57 91 20) -57]
Test Case: 522 | Input/Output: [(69 -20 33 -79) -79]
Test Case: 523 | Input/Output: [(-21 58 -62 53) -62]
Test Case: 524 | Input/Output: [(-44 -28 13 -77) -77]
Test Case: 525 | Input/Output: [(73 43 -99 -76) -99]
Test Case: 526 | Input/Output: [(-18 -41 -8 7) -41]
Test Case: 527 | Input/Output: [(74 89 -63 -68) -68]
Test Case: 528 | Input/Output: [(-21 -93 80 -67) -93]
Test Case: 529 | Input/Output: [(74 58 91 -76) -76]
Test Case: 530 | Input/Output: [(-40 93 12 -81) -81]
Test Case: 531 | Input/Output: [(13 41 25 89) 13]
Test Case: 532 | Input/Output: [(-94 40 -8 64) -94]
Test Case: 533 | Input/Output: [(-79 93 11 58) -79]
Test Case: 534 | Input/Output: [(-10 67 -95 -92) -95]
Test Case: 535 | Input/Output: [(-47 66 -97 -53) -97]
Test Case: 536 | Input/Output: [(33 48 22 -45) -45]
Test Case: 537 | Input/Output: [(-26 2 -16 -61) -61]
Test Case: 538 | Input/Output: [(-98 -80 -92 59) -98]
Test Case: 539 | Input/Output: [(17 96 56 -52) -52]
Test Case: 540 | Input/Output: [(-31 -18 -85 77) -85]
Test Case: 541 | Input/Output: [(-86 16 1 -14) -86]
Test Case: 542 | Input/Output: [(-70 -85 -83 -26) -85]
Test Case: 543 | Input/Output: [(-82 -9 -30 -62) -82]
Test Case: 544 | Input/Output: [(-15 -12 -39 -44) -44]
Test Case: 545 | Input/Output: [(-100 18 71 62) -100]
Test Case: 546 | Input/Output: [(46 87 -68 5) -68]
Test Case: 547 | Input/Output: [(-9 -90 -5 -14) -90]
Test Case: 548 | Input/Output: [(75 -73 -42 52) -73]
Test Case: 549 | Input/Output: [(75 -70 96 30) -70]
Test Case: 550 | Input/Output: [(-87 -13 83 10) -87]
Test Case: 551 | Input/Output: [(93 94 -65 40) -65]
Test Case: 552 | Input/Output: [(-76 94 -41 58) -76]
Test Case: 553 | Input/Output: [(-12 55 -11 -93) -93]
Test Case: 554 | Input/Output: [(59 74 -59 72) -59]
Test Case: 555 | Input/Output: [(-71 14 66 -42) -71]
Test Case: 556 | Input/Output: [(94 -39 -96 -24) -96]
Test Case: 557 | Input/Output: [(78 -75 -55 -74) -75]
Test Case: 558 | Input/Output: [(-52 -31 6 -61) -61]
Test Case: 559 | Input/Output: [(-76 58 17 81) -76]
Test Case: 560 | Input/Output: [(-36 53 -42 -88) -88]
Test Case: 561 | Input/Output: [(37 22 -40 -45) -45]
Test Case: 562 | Input/Output: [(31 39 -72 -87) -87]
Test Case: 563 | Input/Output: [(2 -18 -50 -80) -80]
Test Case: 564 | Input/Output: [(-73 37 40 -54) -73]
Test Case: 565 | Input/Output: [(73 75 -95 74) -95]
Test Case: 566 | Input/Output: [(-13 -54 95 -23) -54]
Test Case: 567 | Input/Output: [(-99 61 58 32) -99]
Test Case: 568 | Input/Output: [(-96 61 81 -65) -96]
Test Case: 569 | Input/Output: [(-26 33 79 -51) -51]
Test Case: 570 | Input/Output: [(-79 62 13 24) -79]
Test Case: 571 | Input/Output: [(17 45 -94 76) -94]
Test Case: 572 | Input/Output: [(-57 -41 -84 -39) -84]
Test Case: 573 | Input/Output: [(75 -54 90 -69) -69]
Test Case: 574 | Input/Output: [(86 -47 18 81) -47]
Test Case: 575 | Input/Output: [(28 43 97 -51) -51]
Test Case: 576 | Input/Output: [(-27 -87 -74 70) -87]
Test Case: 577 | Input/Output: [(34 29 18 -69) -69]
Test Case: 578 | Input/Output: [(16 -90 10 13) -90]
Test Case: 579 | Input/Output: [(79 75 -81 -92) -92]
Test Case: 580 | Input/Output: [(-82 35 -90 24) -90]
Test Case: 581 | Input/Output: [(23 -79 -52 -43) -79]
Test Case: 582 | Input/Output: [(-93 -81 42 63) -93]
Test Case: 583 | Input/Output: [(-27 -38 -47 30) -47]
Test Case: 584 | Input/Output: [(-15 52 -20 31) -20]
Test Case: 585 | Input/Output: [(60 -4 -36 4) -36]
Test Case: 586 | Input/Output: [(50 -38 11 -28) -38]
Test Case: 587 | Input/Output: [(11 -47 85 -21) -47]
Test Case: 588 | Input/Output: [(-4 -49 8 10) -49]
Test Case: 589 | Input/Output: [(-20 55 -86 -10) -86]
Test Case: 590 | Input/Output: [(35 23 -19 -20) -20]
Test Case: 591 | Input/Output: [(-46 28 -95 48) -95]
Test Case: 592 | Input/Output: [(83 -39 69 -19) -39]
Test Case: 593 | Input/Output: [(-33 65 -11 -41) -41]
Test Case: 594 | Input/Output: [(97 -6 50 21) -6]
Test Case: 595 | Input/Output: [(-76 44 77 82) -76]
Test Case: 596 | Input/Output: [(-5 -3 -3 -15) -15]
Test Case: 597 | Input/Output: [(-26 68 84 -49) -49]
Test Case: 598 | Input/Output: [(-97 2 7 -46) -97]
Test Case: 599 | Input/Output: [(11 -46 -83 7) -83]
Test Case: 600 | Input/Output: [(32 -81 36 -1) -81]
Test Case: 601 | Input/Output: [(90 67 -2 -24) -24]
Test Case: 602 | Input/Output: [(-64 60 -78 -28) -78]
Test Case: 603 | Input/Output: [(-30 84 51 37) -30]
Test Case: 604 | Input/Output: [(30 -98 -33 -88) -98]
Test Case: 605 | Input/Output: [(25 -25 28 -77) -77]
Test Case: 606 | Input/Output: [(-69 40 58 -1) -69]
Test Case: 607 | Input/Output: [(95 -84 85 -45) -84]
Test Case: 608 | Input/Output: [(-6 99 -11 2) -11]
Test Case: 609 | Input/Output: [(-60 -10 -6 70) -60]
Test Case: 610 | Input/Output: [(48 73 -72 35) -72]
Test Case: 611 | Input/Output: [(-33 20 66 37) -33]
Test Case: 612 | Input/Output: [(86 25 7 23) 7]
Test Case: 613 | Input/Output: [(29 4 82 -17) -17]
Test Case: 614 | Input/Output: [(-73 -94 52 83) -94]
Test Case: 615 | Input/Output: [(27 -26 9 97) -26]
Test Case: 616 | Input/Output: [(23 -7 88 -18) -18]
Test Case: 617 | Input/Output: [(43 -54 -7 -68) -68]
Test Case: 618 | Input/Output: [(78 51 -32 57) -32]
Test Case: 619 | Input/Output: [(34 27 90 -26) -26]
Test Case: 620 | Input/Output: [(-26 -4 -70 89) -70]
Test Case: 621 | Input/Output: [(-82 -34 95 -87) -87]
Test Case: 622 | Input/Output: [(59 -79 -41 -54) -79]
Test Case: 623 | Input/Output: [(-8 -1 68 -97) -97]
Test Case: 624 | Input/Output: [(73 11 -71 50) -71]
Test Case: 625 | Input/Output: [(66 -80 -6 -14) -80]
Test Case: 626 | Input/Output: [(78 -3 68 -15) -15]
Test Case: 627 | Input/Output: [(-98 58 61 89) -98]
Test Case: 628 | Input/Output: [(-12 -9 82 -33) -33]
Test Case: 629 | Input/Output: [(31 8 -23 -44) -44]
Test Case: 630 | Input/Output: [(-25 -40 -33 58) -40]
Test Case: 631 | Input/Output: [(38 3 -4 -93) -93]
Test Case: 632 | Input/Output: [(-46 -62 -73 99) -73]
Test Case: 633 | Input/Output: [(-46 26 -14 -20) -46]
Test Case: 634 | Input/Output: [(-53 -11 -48 -81) -81]
Test Case: 635 | Input/Output: [(86 18 89 25) 18]
Test Case: 636 | Input/Output: [(-62 -44 35 46) -62]
Test Case: 637 | Input/Output: [(87 76 -68 -83) -83]
Test Case: 638 | Input/Output: [(-32 100 44 3) -32]
Test Case: 639 | Input/Output: [(40 -78 85 -99) -99]
Test Case: 640 | Input/Output: [(-73 56 -30 97) -73]
Test Case: 641 | Input/Output: [(-65 -3 -53 51) -65]
Test Case: 642 | Input/Output: [(-20 59 47 -37) -37]
Test Case: 643 | Input/Output: [(-100 6 -55 -99) -100]
Test Case: 644 | Input/Output: [(58 -26 -86 -75) -86]
Test Case: 645 | Input/Output: [(-93 37 -6 46) -93]
Test Case: 646 | Input/Output: [(72 -17 -6 -58) -58]
Test Case: 647 | Input/Output: [(-24 37 -6 68) -24]
Test Case: 648 | Input/Output: [(-51 -47 -63 71) -63]
Test Case: 649 | Input/Output: [(-61 -41 -82 -100) -100]
Test Case: 650 | Input/Output: [(100 -71 35 -32) -71]
Test Case: 651 | Input/Output: [(-26 26 19 80) -26]
Test Case: 652 | Input/Output: [(43 -90 -96 65) -96]
Test Case: 653 | Input/Output: [(57 -1 20 -13) -13]
Test Case: 654 | Input/Output: [(45 94 -38 -52) -52]
Test Case: 655 | Input/Output: [(-19 -36 19 87) -36]
Test Case: 656 | Input/Output: [(58 -14 75 -75) -75]
Test Case: 657 | Input/Output: [(0 9 -40 59) -40]
Test Case: 658 | Input/Output: [(-40 82 -74 -77) -77]
Test Case: 659 | Input/Output: [(5 77 -22 -1) -22]
Test Case: 660 | Input/Output: [(-4 -69 -58 8) -69]
Test Case: 661 | Input/Output: [(70 58 -98 87) -98]
Test Case: 662 | Input/Output: [(-26 -2 -48 36) -48]
Test Case: 663 | Input/Output: [(54 -28 73 -14) -28]
Test Case: 664 | Input/Output: [(12 38 -42 -43) -43]
Test Case: 665 | Input/Output: [(39 84 -82 -93) -93]
Test Case: 666 | Input/Output: [(-64 -92 -49 -29) -92]
Test Case: 667 | Input/Output: [(-23 23 37 -39) -39]
Test Case: 668 | Input/Output: [(-25 33 55 -82) -82]
Test Case: 669 | Input/Output: [(71 40 30 -56) -56]
Test Case: 670 | Input/Output: [(-94 -7 16 -79) -94]
Test Case: 671 | Input/Output: [(-97 93 91 -95) -97]
Test Case: 672 | Input/Output: [(-50 2 -48 100) -50]
Test Case: 673 | Input/Output: [(-38 -33 -89 20) -89]
Test Case: 674 | Input/Output: [(-89 -79 64 -66) -89]
Test Case: 675 | Input/Output: [(90 -45 -73 9) -73]
Test Case: 676 | Input/Output: [(39 -5 54 50) -5]
Test Case: 677 | Input/Output: [(31 -61 68 -87) -87]
Test Case: 678 | Input/Output: [(-32 66 -83 -8) -83]
Test Case: 679 | Input/Output: [(17 63 -57 96) -57]
Test Case: 680 | Input/Output: [(84 -17 60 47) -17]
Test Case: 681 | Input/Output: [(58 62 100 68) 58]
Test Case: 682 | Input/Output: [(-18 44 -2 -37) -37]
Test Case: 683 | Input/Output: [(-34 -9 -15 96) -34]
Test Case: 684 | Input/Output: [(-28 58 -7 -37) -37]
Test Case: 685 | Input/Output: [(38 85 2 59) 2]
Test Case: 686 | Input/Output: [(-78 -69 -61 -73) -78]
Test Case: 687 | Input/Output: [(68 -43 -79 -82) -82]
Test Case: 688 | Input/Output: [(-40 7 -75 44) -75]
Test Case: 689 | Input/Output: [(66 -29 31 32) -29]
Test Case: 690 | Input/Output: [(-51 66 31 -51) -51]
Test Case: 691 | Input/Output: [(6 46 85 -34) -34]
Test Case: 692 | Input/Output: [(-2 -44 -43 94) -44]
Test Case: 693 | Input/Output: [(82 69 -53 33) -53]
Test Case: 694 | Input/Output: [(88 -20 82 76) -20]
Test Case: 695 | Input/Output: [(-76 14 -28 -15) -76]
Test Case: 696 | Input/Output: [(38 -24 -28 13) -28]
Test Case: 697 | Input/Output: [(-81 -59 -33 -48) -81]
Test Case: 698 | Input/Output: [(57 -22 11 56) -22]
Test Case: 699 | Input/Output: [(-59 62 -8 -92) -92]
Test Case: 700 | Input/Output: [(-2 75 14 78) -2]
Test Case: 701 | Input/Output: [(-62 17 -74 76) -74]
Test Case: 702 | Input/Output: [(74 97 25 19) 19]
Test Case: 703 | Input/Output: [(71 25 30 -63) -63]
Test Case: 704 | Input/Output: [(-21 55 -21 85) -21]
Test Case: 705 | Input/Output: [(-87 2 -52 5) -87]
Test Case: 706 | Input/Output: [(27 36 -14 -45) -45]
Test Case: 707 | Input/Output: [(-97 76 -60 -49) -97]
Test Case: 708 | Input/Output: [(-63 2 20 63) -63]
Test Case: 709 | Input/Output: [(-42 71 10 99) -42]
Test Case: 710 | Input/Output: [(44 13 -62 -68) -68]
Test Case: 711 | Input/Output: [(-79 -90 -77 7) -90]
Test Case: 712 | Input/Output: [(37 37 66 97) 37]
Test Case: 713 | Input/Output: [(35 73 -60 64) -60]
Test Case: 714 | Input/Output: [(-30 -16 1 -96) -96]
Test Case: 715 | Input/Output: [(86 -98 -12 33) -98]
Test Case: 716 | Input/Output: [(74 -84 -95 -98) -98]
Test Case: 717 | Input/Output: [(-79 37 -99 -98) -99]
Test Case: 718 | Input/Output: [(-60 27 87 25) -60]
Test Case: 719 | Input/Output: [(97 50 -42 -7) -42]
Test Case: 720 | Input/Output: [(-57 95 92 85) -57]
Test Case: 721 | Input/Output: [(-61 32 -43 -96) -96]
Test Case: 722 | Input/Output: [(-62 12 32 7) -62]
Test Case: 723 | Input/Output: [(-43 100 -29 -16) -43]
Test Case: 724 | Input/Output: [(74 20 16 -61) -61]
Test Case: 725 | Input/Output: [(-83 29 12 56) -83]
Test Case: 726 | Input/Output: [(28 -28 -74 73) -74]
Test Case: 727 | Input/Output: [(70 72 25 -77) -77]
Test Case: 728 | Input/Output: [(-53 -88 -19 -72) -88]
Test Case: 729 | Input/Output: [(-39 25 -19 -61) -61]
Test Case: 730 | Input/Output: [(-41 86 -81 12) -81]
Test Case: 731 | Input/Output: [(59 40 93 -16) -16]
Test Case: 732 | Input/Output: [(90 78 39 -6) -6]
Test Case: 733 | Input/Output: [(-43 83 -29 92) -43]
Test Case: 734 | Input/Output: [(-27 31 99 96) -27]
Test Case: 735 | Input/Output: [(38 -71 -68 23) -71]
Test Case: 736 | Input/Output: [(54 68 -2 93) -2]
Test Case: 737 | Input/Output: [(-3 49 -64 -23) -64]
Test Case: 738 | Input/Output: [(51 -61 89 18) -61]
Test Case: 739 | Input/Output: [(-1 -81 -71 -16) -81]
Test Case: 740 | Input/Output: [(77 95 -12 97) -12]
Test Case: 741 | Input/Output: [(-7 -56 97 -63) -63]
Test Case: 742 | Input/Output: [(30 -10 79 66) -10]
Test Case: 743 | Input/Output: [(-79 -72 -41 -35) -79]
Test Case: 744 | Input/Output: [(-91 14 -82 90) -91]
Test Case: 745 | Input/Output: [(-5 42 48 -31) -31]
Test Case: 746 | Input/Output: [(32 88 -43 -51) -51]
Test Case: 747 | Input/Output: [(-3 35 -44 -53) -53]
Test Case: 748 | Input/Output: [(61 30 31 -16) -16]
Test Case: 749 | Input/Output: [(17 13 76 -21) -21]
Test Case: 750 | Input/Output: [(-63 58 95 45) -63]
Test Case: 751 | Input/Output: [(-26 61 71 16) -26]
Test Case: 752 | Input/Output: [(96 25 100 -62) -62]
Test Case: 753 | Input/Output: [(49 -3 -26 55) -26]
Test Case: 754 | Input/Output: [(46 -34 -78 16) -78]
Test Case: 755 | Input/Output: [(3 30 61 2) 2]
Test Case: 756 | Input/Output: [(-87 39 -56 3) -87]
Test Case: 757 | Input/Output: [(64 84 24 19) 19]
Test Case: 758 | Input/Output: [(-94 20 17 62) -94]
Test Case: 759 | Input/Output: [(78 90 23 84) 23]
Test Case: 760 | Input/Output: [(29 -93 14 26) -93]
Test Case: 761 | Input/Output: [(-22 -33 -37 42) -37]
Test Case: 762 | Input/Output: [(-1 73 1 -10) -10]
Test Case: 763 | Input/Output: [(-40 -20 -90 -46) -90]
Test Case: 764 | Input/Output: [(-34 69 73 -62) -62]
Test Case: 765 | Input/Output: [(-94 42 -75 -99) -99]
Test Case: 766 | Input/Output: [(3 -57 -15 44) -57]
Test Case: 767 | Input/Output: [(62 -45 12 -59) -59]
Test Case: 768 | Input/Output: [(9 -69 -14 10) -69]
Test Case: 769 | Input/Output: [(18 42 -94 15) -94]
Test Case: 770 | Input/Output: [(-5 -30 100 -42) -42]
Test Case: 771 | Input/Output: [(78 -1 27 72) -1]
Test Case: 772 | Input/Output: [(-72 -73 62 88) -73]
Test Case: 773 | Input/Output: [(29 82 98 -17) -17]
Test Case: 774 | Input/Output: [(25 -21 71 60) -21]
Test Case: 775 | Input/Output: [(-86 34 9 94) -86]
Test Case: 776 | Input/Output: [(-16 7 -27 -29) -29]
Test Case: 777 | Input/Output: [(-79 -72 -19 -93) -93]
Test Case: 778 | Input/Output: [(17 -77 35 -46) -77]
Test Case: 779 | Input/Output: [(-32 -32 25 -50) -50]
Test Case: 780 | Input/Output: [(-98 -46 4 -69) -98]
Test Case: 781 | Input/Output: [(74 16 99 28) 16]
Test Case: 782 | Input/Output: [(-7 -76 -95 -40) -95]
Test Case: 783 | Input/Output: [(-11 30 -30 -69) -69]
Test Case: 784 | Input/Output: [(-26 -35 -80 61) -80]
Test Case: 785 | Input/Output: [(-70 85 -7 76) -70]
Test Case: 786 | Input/Output: [(27 48 -31 -33) -33]
Test Case: 787 | Input/Output: [(-27 -68 59 -80) -80]
Test Case: 788 | Input/Output: [(-12 90 70 -60) -60]
Test Case: 789 | Input/Output: [(50 -18 12 -32) -32]
Test Case: 790 | Input/Output: [(97 13 18 83) 13]
Test Case: 791 | Input/Output: [(-84 76 -4 -51) -84]
Test Case: 792 | Input/Output: [(25 28 89 -64) -64]
Test Case: 793 | Input/Output: [(55 -4 -80 -99) -99]
Test Case: 794 | Input/Output: [(-62 -63 -84 -60) -84]
Test Case: 795 | Input/Output: [(2 79 -4 88) -4]
Test Case: 796 | Input/Output: [(12 64 70 49) 12]
Test Case: 797 | Input/Output: [(84 -27 -35 36) -35]
Test Case: 798 | Input/Output: [(-65 30 -83 78) -83]
Test Case: 799 | Input/Output: [(-12 -76 -50 60) -76]
Test Case: 800 | Input/Output: [(-87 92 67 -28) -87]
Test Case: 801 | Input/Output: [(9 -24 -68 48) -68]
Test Case: 802 | Input/Output: [(61 23 20 -34) -34]
Test Case: 803 | Input/Output: [(-31 48 -63 55) -63]
Test Case: 804 | Input/Output: [(9 70 33 -32) -32]
Test Case: 805 | Input/Output: [(-3 -29 -87 57) -87]
Test Case: 806 | Input/Output: [(2 -24 -12 40) -24]
Test Case: 807 | Input/Output: [(-45 8 -41 38) -45]
Test Case: 808 | Input/Output: [(-80 9 -94 -7) -94]
Test Case: 809 | Input/Output: [(-81 30 10 -56) -81]
Test Case: 810 | Input/Output: [(-24 -92 -89 2) -92]
Test Case: 811 | Input/Output: [(-78 -49 43 21) -78]
Test Case: 812 | Input/Output: [(-50 62 86 -15) -50]
Test Case: 813 | Input/Output: [(-5 39 80 -32) -32]
Test Case: 814 | Input/Output: [(61 -19 72 -86) -86]
Test Case: 815 | Input/Output: [(-67 97 -75 91) -75]
Test Case: 816 | Input/Output: [(-55 -12 0 61) -55]
Test Case: 817 | Input/Output: [(-22 78 -32 -90) -90]
Test Case: 818 | Input/Output: [(-39 72 68 2) -39]
Test Case: 819 | Input/Output: [(-43 -93 -31 80) -93]
Test Case: 820 | Input/Output: [(0 -29 56 -83) -83]
Test Case: 821 | Input/Output: [(-37 32 -71 98) -71]
Test Case: 822 | Input/Output: [(47 -48 44 0) -48]
Test Case: 823 | Input/Output: [(-57 -78 -86 -94) -94]
Test Case: 824 | Input/Output: [(35 13 64 52) 13]
Test Case: 825 | Input/Output: [(-1 -2 -7 20) -7]
Test Case: 826 | Input/Output: [(21 19 -54 44) -54]
Test Case: 827 | Input/Output: [(-81 47 47 96) -81]
Test Case: 828 | Input/Output: [(40 33 31 94) 31]
Test Case: 829 | Input/Output: [(65 -95 -34 13) -95]
Test Case: 830 | Input/Output: [(-93 98 -54 -72) -93]
Test Case: 831 | Input/Output: [(-81 74 9 -100) -100]
Test Case: 832 | Input/Output: [(-89 -1 -6 66) -89]
Test Case: 833 | Input/Output: [(-33 11 97 -93) -93]
Test Case: 834 | Input/Output: [(3 88 65 26) 3]
Test Case: 835 | Input/Output: [(14 34 -25 27) -25]
Test Case: 836 | Input/Output: [(12 -79 60 -43) -79]
Test Case: 837 | Input/Output: [(80 31 -15 -72) -72]
Test Case: 838 | Input/Output: [(-44 86 -87 -73) -87]
Test Case: 839 | Input/Output: [(-51 37 60 43) -51]
Test Case: 840 | Input/Output: [(57 63 46 29) 29]
Test Case: 841 | Input/Output: [(100 55 65 52) 52]
Test Case: 842 | Input/Output: [(70 15 -44 -29) -44]
Test Case: 843 | Input/Output: [(13 79 38 13) 13]
Test Case: 844 | Input/Output: [(64 26 -36 -100) -100]
Test Case: 845 | Input/Output: [(-51 22 -24 70) -51]
Test Case: 846 | Input/Output: [(-49 79 -6 29) -49]
Test Case: 847 | Input/Output: [(-92 31 -40 67) -92]
Test Case: 848 | Input/Output: [(-81 43 -24 -64) -81]
Test Case: 849 | Input/Output: [(5 -19 -33 49) -33]
Test Case: 850 | Input/Output: [(-84 41 -94 -7) -94]
Test Case: 851 | Input/Output: [(-52 -20 1 64) -52]
Test Case: 852 | Input/Output: [(94 -82 -20 -88) -88]
Test Case: 853 | Input/Output: [(-29 11 8 -77) -77]
Test Case: 854 | Input/Output: [(64 38 79 42) 38]
Test Case: 855 | Input/Output: [(100 80 -57 -51) -57]
Test Case: 856 | Input/Output: [(-29 -21 40 -36) -36]
Test Case: 857 | Input/Output: [(6 -65 4 77) -65]
Test Case: 858 | Input/Output: [(35 33 -43 -91) -91]
Test Case: 859 | Input/Output: [(29 38 51 -44) -44]
Test Case: 860 | Input/Output: [(0 1 41 -65) -65]
Test Case: 861 | Input/Output: [(40 -78 -32 -6) -78]
Test Case: 862 | Input/Output: [(48 22 -66 -19) -66]
Test Case: 863 | Input/Output: [(28 45 34 74) 28]
Test Case: 864 | Input/Output: [(32 -52 90 58) -52]
Test Case: 865 | Input/Output: [(83 -16 56 -19) -19]
Test Case: 866 | Input/Output: [(84 -21 -1 27) -21]
Test Case: 867 | Input/Output: [(66 -37 -3 27) -37]
Test Case: 868 | Input/Output: [(-56 -78 -75 42) -78]
Test Case: 869 | Input/Output: [(95 -84 82 -94) -94]
Test Case: 870 | Input/Output: [(85 -30 26 86) -30]
Test Case: 871 | Input/Output: [(44 -23 -31 -96) -96]
Test Case: 872 | Input/Output: [(-4 -20 65 41) -20]
Test Case: 873 | Input/Output: [(-100 -10 40 70) -100]
Test Case: 874 | Input/Output: [(-52 -54 -46 37) -54]
Test Case: 875 | Input/Output: [(81 79 -87 83) -87]
Test Case: 876 | Input/Output: [(37 -38 -42 46) -42]
Test Case: 877 | Input/Output: [(-96 5 44 58) -96]
Test Case: 878 | Input/Output: [(84 45 -45 -91) -91]
Test Case: 879 | Input/Output: [(-14 -66 54 -49) -66]
Test Case: 880 | Input/Output: [(50 13 20 -59) -59]
Test Case: 881 | Input/Output: [(8 1 32 43) 1]
Test Case: 882 | Input/Output: [(63 13 20 84) 13]
Test Case: 883 | Input/Output: [(28 -100 18 -10) -100]
Test Case: 884 | Input/Output: [(-5 -100 62 -77) -100]
Test Case: 885 | Input/Output: [(-27 -87 -70 31) -87]
Test Case: 886 | Input/Output: [(38 -83 -39 -53) -83]
Test Case: 887 | Input/Output: [(-58 48 -55 73) -58]
Test Case: 888 | Input/Output: [(29 62 -8 -21) -21]
Test Case: 889 | Input/Output: [(88 87 -74 90) -74]
Test Case: 890 | Input/Output: [(-65 73 69 22) -65]
Test Case: 891 | Input/Output: [(-65 36 88 -20) -65]
Test Case: 892 | Input/Output: [(-9 -74 -12 4) -74]
Test Case: 893 | Input/Output: [(74 -80 17 3) -80]
Test Case: 894 | Input/Output: [(100 53 -29 38) -29]
Test Case: 895 | Input/Output: [(72 49 -87 -6) -87]
Test Case: 896 | Input/Output: [(-93 48 32 -13) -93]
Test Case: 897 | Input/Output: [(32 -84 18 85) -84]
Test Case: 898 | Input/Output: [(3 29 -36 -27) -36]
Test Case: 899 | Input/Output: [(-11 86 -42 -2) -42]
Test Case: 900 | Input/Output: [(99 17 -55 -33) -55]
Test Case: 901 | Input/Output: [(-100 7 -99 65) -100]
Test Case: 902 | Input/Output: [(7 71 32 -91) -91]
Test Case: 903 | Input/Output: [(16 -78 69 -95) -95]
Test Case: 904 | Input/Output: [(93 76 -6 48) -6]
Test Case: 905 | Input/Output: [(-69 75 88 -78) -78]
Test Case: 906 | Input/Output: [(79 68 93 78) 68]
Test Case: 907 | Input/Output: [(25 -47 -71 44) -71]
Test Case: 908 | Input/Output: [(-72 77 -54 -88) -88]
Test Case: 909 | Input/Output: [(63 -13 42 14) -13]
Test Case: 910 | Input/Output: [(-44 -8 83 84) -44]
Test Case: 911 | Input/Output: [(92 91 30 60) 30]
Test Case: 912 | Input/Output: [(49 55 35 -2) -2]
Test Case: 913 | Input/Output: [(95 -8 75 -99) -99]
Test Case: 914 | Input/Output: [(57 -12 -61 94) -61]
Test Case: 915 | Input/Output: [(-38 47 10 -96) -96]
Test Case: 916 | Input/Output: [(19 -17 4 -80) -80]
Test Case: 917 | Input/Output: [(97 66 32 -48) -48]
Test Case: 918 | Input/Output: [(-51 99 43 -4) -51]
Test Case: 919 | Input/Output: [(-57 35 -45 3) -57]
Test Case: 920 | Input/Output: [(-11 -35 27 -98) -98]
Test Case: 921 | Input/Output: [(52 73 -65 32) -65]
Test Case: 922 | Input/Output: [(45 99 51 -59) -59]
Test Case: 923 | Input/Output: [(4 68 -87 26) -87]
Test Case: 924 | Input/Output: [(67 -81 5 52) -81]
Test Case: 925 | Input/Output: [(-32 -7 -90 -61) -90]
Test Case: 926 | Input/Output: [(-8 8 -44 -100) -100]
Test Case: 927 | Input/Output: [(81 2 65 39) 2]
Test Case: 928 | Input/Output: [(78 10 -7 -55) -55]
Test Case: 929 | Input/Output: [(-84 1 48 -62) -84]
Test Case: 930 | Input/Output: [(96 6 -5 -30) -30]
Test Case: 931 | Input/Output: [(49 35 59 28) 28]
Test Case: 932 | Input/Output: [(-60 83 65 -34) -60]
Test Case: 933 | Input/Output: [(45 15 -38 -34) -38]
Test Case: 934 | Input/Output: [(19 -80 -57 64) -80]
Test Case: 935 | Input/Output: [(-59 53 -54 100) -59]
Test Case: 936 | Input/Output: [(-1 -73 -64 -89) -89]
Test Case: 937 | Input/Output: [(-36 -26 60 34) -36]
Test Case: 938 | Input/Output: [(-70 23 -29 -48) -70]
Test Case: 939 | Input/Output: [(22 -57 4 23) -57]
Test Case: 940 | Input/Output: [(47 97 -26 64) -26]
Test Case: 941 | Input/Output: [(-68 -34 -40 67) -68]
Test Case: 942 | Input/Output: [(88 -29 97 72) -29]
Test Case: 943 | Input/Output: [(-33 59 49 -56) -56]
Test Case: 944 | Input/Output: [(-9 89 -52 64) -52]
Test Case: 945 | Input/Output: [(36 48 -86 -56) -86]
Test Case: 946 | Input/Output: [(-43 5 1 -47) -47]
Test Case: 947 | Input/Output: [(58 21 33 -30) -30]
Test Case: 948 | Input/Output: [(-11 -5 83 48) -11]
Test Case: 949 | Input/Output: [(96 -88 -27 61) -88]
Test Case: 950 | Input/Output: [(-74 95 43 -36) -74]
Test Case: 951 | Input/Output: [(14 -84 -41 31) -84]
Test Case: 952 | Input/Output: [(23 60 32 -2) -2]
Test Case: 953 | Input/Output: [(30 55 16 40) 16]
Test Case: 954 | Input/Output: [(-18 -86 -42 -67) -86]
Test Case: 955 | Input/Output: [(45 -98 7 -65) -98]
Test Case: 956 | Input/Output: [(-40 27 -8 65) -40]
Test Case: 957 | Input/Output: [(-37 43 2 9) -37]
Test Case: 958 | Input/Output: [(-95 14 -66 -27) -95]
Test Case: 959 | Input/Output: [(4 51 -32 43) -32]
Test Case: 960 | Input/Output: [(93 -72 86 -98) -98]
Test Case: 961 | Input/Output: [(-51 -43 31 70) -51]
Test Case: 962 | Input/Output: [(52 -11 -33 -85) -85]
Test Case: 963 | Input/Output: [(-88 -63 43 -69) -88]
Test Case: 964 | Input/Output: [(-71 -65 -43 -46) -71]
Test Case: 965 | Input/Output: [(-96 -57 -59 87) -96]
Test Case: 966 | Input/Output: [(-80 -31 -98 97) -98]
Test Case: 967 | Input/Output: [(71 -70 -25 -6) -70]
Test Case: 968 | Input/Output: [(-47 -42 59 -88) -88]
Test Case: 969 | Input/Output: [(36 49 99 2) 2]
Test Case: 970 | Input/Output: [(-28 -24 95 -94) -94]
Test Case: 971 | Input/Output: [(-93 -99 -93 -22) -99]
Test Case: 972 | Input/Output: [(-28 -1 84 -61) -61]
Test Case: 973 | Input/Output: [(16 -20 -55 20) -55]
Test Case: 974 | Input/Output: [(-65 85 -25 -14) -65]
Test Case: 975 | Input/Output: [(-16 6 -8 43) -16]
Test Case: 976 | Input/Output: [(48 43 14 -21) -21]
Test Case: 977 | Input/Output: [(-88 25 -56 -84) -88]
Test Case: 978 | Input/Output: [(21 -44 -33 17) -44]
Test Case: 979 | Input/Output: [(13 -93 36 -61) -93]
Test Case: 980 | Input/Output: [(-73 51 -56 -10) -73]
Test Case: 981 | Input/Output: [(61 -74 -98 -6) -98]
Test Case: 982 | Input/Output: [(98 -14 -22 -23) -23]
Test Case: 983 | Input/Output: [(93 -94 38 7) -94]
Test Case: 984 | Input/Output: [(-65 50 -87 -60) -87]
Test Case: 985 | Input/Output: [(92 88 88 85) 85]
Test Case: 986 | Input/Output: [(29 -61 99 23) -61]
Test Case: 987 | Input/Output: [(25 68 90 -87) -87]
Test Case: 988 | Input/Output: [(39 -8 71 34) -8]
Test Case: 989 | Input/Output: [(60 -1 13 81) -1]
Test Case: 990 | Input/Output: [(-26 79 89 -52) -52]
Test Case: 991 | Input/Output: [(-29 -29 -9 42) -29]
Test Case: 992 | Input/Output: [(96 9 7 -53) -53]
Test Case: 993 | Input/Output: [(67 -4 75 -92) -92]
Test Case: 994 | Input/Output: [(-59 15 -36 13) -59]
Test Case: 995 | Input/Output: [(47 -5 -22 39) -22]
Test Case: 996 | Input/Output: [(-96 34 -83 -77) -96]
Test Case: 997 | Input/Output: [(-92 35 -82 -82) -92]
Test Case: 998 | Input/Output: [(-44 15 -71 26) -71]
Test Case: 999 | Input/Output: [(-42 31 -52 -7) -52]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x44c27b8b clojush.problems.software.smallest$fn__7461@44c27b8b] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x33399052 clojush.instructions.tag$tag_instruction_erc$fn__2160@33399052] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x460b77d6 clojush.instructions.tag$tagged_instruction_erc$fn__2166@460b77d6] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x52a75c12 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@52a75c12]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x61288814 clojush.problems.software.smallest$smallest_initial_report@61288814]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x6669cba clojush.problems.software.smallest$smallest_report@6669cba]
random-screen = false
random-seed = -76 -99 101 -91 110 -79 -53 116 -86 -57 1 20 -21 -128 -4 -110
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[62 45 62 62] 45] [[71 94 71 71] 71] [[-29 -29 -50 -29] -50] [[-6 -91 -6 -6] -91] [[-42 -42 -51 -42] -51] [[-11 18 -11 -11] -11] [[16 41 16 16] 16] [[-69 37 37 37] -69] [[18 94 18 18] 18] [[3 3 72 3] 3] [(19 19 19 19) 19] [(-49 -49 -49 -49) -49] [(-6 -6 -6 -6) -6] [(-16 -16 -16 -16) -16] [(81 81 81 81) 81] [(18 66 3 56) 3] [(55 24 12 62) 12] [(90 34 23 98) 23] [(96 95 91 0) 0] [(75 20 56 86) 20] [(50 59 59 72) 50] [(87 91 94 83) 83] [(33 47 88 86) 33] [(25 29 35 37) 25] [(43 92 88 75) 43] [(93 95 4 99) 4] [(73 35 90 6) 6] [(69 33 79 20) 20] [(46 91 94 39) 39] [(50 76 65 98) 50] [(63 15 11 78) 11] [(30 83 18 67) 18] [(94 60 36 87) 36] [(48 59 74 0) 0] [(52 40 52 60) 40] [(82 71 -50 -61) -61] [(-78 74 -37 -49) -78] [(-80 42 -71 -79) -80] [(61 -16 -4 -34) -34] [(83 -48 -88 -11) -88] [(-87 -20 -21 9) -87] [(51 -94 -85 -90) -94] [(-56 50 -54 41) -56] [(7 18 -4 -100) -100] [(-78 49 -74 -76) -78] [(-78 -67 48 -57) -78] [(25 83 -57 93) -57] [(-72 -9 84 -42) -72] [(-50 -6 80 -3) -50] [(80 -26 -37 23) -37] [(96 17 -9 86) -9] [(-18 -5 82 -15) -18] [(96 57 32 43) 32] [(-22 84 40 64) -22] [(90 -1 -25 65) -25] [(38 67 -45 -31) -45] [(52 57 -5 -17) -17] [(-25 -76 75 -61) -76] [(-54 6 2 -48) -54] [(-83 -30 -9 89) -83] [(-61 -33 93 -45) -61] [(48 56 -35 39) -35] [(57 73 -72 -16) -72] [(23 -77 16 49) -77] [(87 64 -93 21) -93] [(31 -47 27 -59) -59] [(-77 -88 -33 37) -88] [(-60 5 27 -63) -63] [(33 -1 -91 -96) -96] [(59 -50 73 -97) -97] [(-53 23 82 -23) -53] [(43 75 42 10) 10] [(28 -26 -88 -41) -88] [(39 69 -36 74) -36] [(-5 74 47 30) -5] [(47 46 -99 14) -99] [(32 -88 11 34) -88] [(20 -35 0 9) -35] [(-72 55 -48 61) -72] [(-79 30 52 6) -79] [(21 -49 50 100) -49] [(-2 -14 23 47) -14] [(-9 97 52 -78) -78] [(53 9 16 -72) -72] [(15 -6 77 89) -6] [(-55 -78 -40 19) -78] [(88 30 -83 31) -83] [(-20 30 15 41) -20] [(-36 68 -47 -25) -47] [(97 31 98 -75) -75] [(92 8 -38 -84) -84] [(0 1 -48 -6) -48] [(45 -50 -18 -55) -55] [(39 61 54 63) 39] [(87 -12 82 69) -12])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -29                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 18                 
Correct output: 12                  | Program output: 55                 
Correct output: 23                  | Program output: 90                 
Correct output: 0                   | Program output: 96                 
Correct output: 20                  | Program output: 75                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 87                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 93                 
Correct output: 6                   | Program output: 73                 
Correct output: 20                  | Program output: 69                 
Correct output: 39                  | Program output: 46                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 63                 
Correct output: 18                  | Program output: 30                 
Correct output: 36                  | Program output: 94                 
Correct output: 0                   | Program output: 48                 
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: 82                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 61                 
Correct output: -88                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 51                 
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: 25                 
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: 80                 
Correct output: -9                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 96                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: 90                 
Correct output: -45                 | Program output: 38                 
Correct output: -17                 | Program output: 52                 
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: 48                 
Correct output: -72                 | Program output: 57                 
Correct output: -77                 | Program output: 23                 
Correct output: -93                 | Program output: 87                 
Correct output: -59                 | Program output: 31                 
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -97                 | Program output: 59                 
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 43                 
Correct output: -88                 | Program output: 28                 
Correct output: -36                 | Program output: 39                 
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: 47                 
Correct output: -88                 | Program output: 32                 
Correct output: -35                 | Program output: 20                 
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -9                 
Correct output: -72                 | Program output: 53                 
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: 88                 
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -36                
Correct output: -75                 | Program output: 97                 
Correct output: -84                 | Program output: 92                 
Correct output: -48                 | Program output: 0                  
Correct output: -55                 | Program output: 45                 
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_exec_914} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_325} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_133} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Lexicase best program: (boolean_invert_first_then_and in1 in4 exec_eq boolean_dup tag_exec_914 () exec_swap (integer_div boolean_frominteger boolean_and exec_noop print_integer exec_eq) (in4) boolean_and tagged_325 exec_when () exec_if (integer_inc boolean_swap exec_dup (exec_y_when_autoconstructing (exec_eq integer_stackdepth) boolean_yankdup integer_mult boolean_and exec_s_when_autoconstructing (boolean_not in3 boolean_shove exec_do*range (integer_dec integer_eq print_exec (exec_dup_items in1 exec_when (exec_rot () (exec_k_when_autoconstructing (boolean_stackdepth boolean_and print_integer) (exec_shove (in1) integer_yankdup integer_gte exec_noop in3) print_exec (boolean_yankdup tag_integer_133 print_boolean print_integer) exec_dup_items print_newline in4) (exec_do*times (exec_dup (boolean_dup_times) boolean_pop integer_mult)) boolean_dup_items exec_do*times () boolean_invert_second_then_and integer_inc boolean_shove)))) () ())) ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_exec_914} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_325} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_133} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Zero cases best program: (boolean_invert_first_then_and in1 in4 exec_eq boolean_dup tag_exec_914 () exec_swap (integer_div boolean_frominteger boolean_and exec_noop print_integer exec_eq) (in4) boolean_and tagged_325 exec_when () exec_if (integer_inc boolean_swap exec_dup (exec_y_when_autoconstructing (exec_eq integer_stackdepth) boolean_yankdup integer_mult boolean_and exec_s_when_autoconstructing (boolean_not in3 boolean_shove exec_do*range (integer_dec integer_eq print_exec (exec_dup_items in1 exec_when (exec_rot () (exec_k_when_autoconstructing (boolean_stackdepth boolean_and print_integer) (exec_shove (in1) integer_yankdup integer_gte exec_noop in3) print_exec (boolean_yankdup tag_integer_133 print_boolean print_integer) exec_dup_items print_newline in4) (exec_do*times (exec_dup (boolean_dup_times) boolean_pop integer_mult)) boolean_dup_items exec_do*times () boolean_invert_second_then_and integer_inc boolean_shove)))) () ())) ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 2 1 8 2 8 2 1 2 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (10 2 1 8 2 8 2 1 2 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_253} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush})
Best program: (exec_dup () boolean_dup_times boolean_xor boolean_dup integer_pop in1 exec_k_when_autoconstructing (exec_empty boolean_eq integer_yankdup print_integer) () exec_flush boolean_invert_second_then_and exec_k_when_autoconstructing () (integer_dup_items boolean_swap exec_pop (integer_lte boolean_rot exec_noop print_boolean exec_stackdepth print_boolean in2 boolean_stackdepth in4 exec_dup () integer_eq boolean_dup_items) print_exec (exec_y (integer_shove exec_shove (exec_dup () exec_yank) in1 exec_flush boolean_and print_newline) boolean_shove integer_dec boolean_invert_second_then_and) integer_add integer_rot boolean_eq exec_eq integer_lt exec_do*times (print_exec (integer_eq) exec_do*count (boolean_dup boolean_yankdup exec_k () (exec_y_when_autoconstructing () exec_k (integer_shove) (integer_dup_items) boolean_yankdup integer_dup_times integer_dup_times integer_lte exec_k (tagged_253 integer_yank integer_dup_items exec_stackdepth -1 boolean_yankdup boolean_frominteger boolean_swap) (integer_flush boolean_flush) integer_pop integer_gte exec_k_when_autoconstructing (integer_add boolean_rot exec_dup_times () exec_noop exec_dup (exec_k_when_autoconstructing () (exec_while (exec_noop integer_div) integer_fromboolean exec_s_when_autoconstructing () (integer_lte boolean_empty) (exec_flush integer_lt) in1 integer_swap integer_empty integer_flush))) ())))))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 95
Size: 127
Percent parens: 0.252
--- Population Statistics ---
Average total errors in population: 9.962
Median total errors in population: 10
Error averages by case: (0.99 0.998 0.999 0.992 0.998 0.992 0.998 0.999 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.247
Average program size in population (points): 67.868
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 468196
--- Timings ---
Current time: 1559584644773 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 31.0%
Fitness Testing:      1.7 seconds, 64.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -29                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 18                 
Correct output: 12                  | Program output: 55                 
Correct output: 23                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 75                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 87                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 93                 
Correct output: 6                   | Program output: 73                 
Correct output: 20                  | Program output: 69                 
Correct output: 39                  | Program output: 46                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 63                 
Correct output: 18                  | Program output: 30                 
Correct output: 36                  | Program output: 94                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: 82                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 61                 
Correct output: -88                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 51                 
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: 25                 
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: 80                 
Correct output: -9                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 96                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: 90                 
Correct output: -45                 | Program output: 38                 
Correct output: -17                 | Program output: 52                 
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: 48                 
Correct output: -72                 | Program output: 57                 
Correct output: -77                 | Program output: 23                 
Correct output: -93                 | Program output: 87                 
Correct output: -59                 | Program output: 31                 
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -97                 | Program output: 59                 
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 43                 
Correct output: -88                 | Program output: 28                 
Correct output: -36                 | Program output: 39                 
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: 47                 
Correct output: -88                 | Program output: 32                 
Correct output: -35                 | Program output: 20                 
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -9                 
Correct output: -72                 | Program output: 53                 
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: 88                 
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -36                
Correct output: -75                 | Program output: 97                 
Correct output: -84                 | Program output: 92                 
Correct output: -48                 | Program output: 0                  
Correct output: -55                 | Program output: 45                 
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_253} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_dup () boolean_dup_times boolean_xor boolean_dup integer_pop in1 exec_k_when_autoconstructing (exec_empty boolean_eq integer_yankdup print_integer) () exec_flush boolean_invert_second_then_and exec_k_when_autoconstructing () (integer_dup_items boolean_swap exec_pop (integer_lte boolean_rot exec_noop print_boolean exec_stackdepth print_boolean in2 boolean_stackdepth in4 exec_dup () integer_eq boolean_dup_items) print_exec (exec_y (integer_shove exec_shove (exec_dup () exec_yank) in1 exec_flush boolean_and print_newline) boolean_shove integer_dec boolean_invert_second_then_and) integer_add integer_rot boolean_eq exec_eq integer_lt exec_do*times (print_exec (integer_eq) exec_do*count (boolean_dup boolean_yankdup exec_k () (exec_y_when_autoconstructing () exec_k (integer_shove) (integer_dup_items) boolean_yankdup integer_dup_times integer_dup_times integer_lte exec_k (tagged_253 integer_yank integer_dup_items exec_stackdepth -1 boolean_yankdup boolean_frominteger boolean_swap) (integer_flush boolean_flush) integer_pop integer_gte exec_k_when_autoconstructing (integer_add boolean_rot exec_dup_times () exec_noop exec_dup (exec_k_when_autoconstructing () (exec_while (exec_noop integer_div) integer_fromboolean exec_s_when_autoconstructing () (integer_lte boolean_empty) (exec_flush integer_lt) in1 integer_swap integer_empty integer_flush))) ())))))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 127
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yankdup} {:close 2, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction exec_y} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_exec} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_k} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_k} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_k} {:close 0, :instruction tagged_253} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_dup () boolean_dup_times boolean_xor boolean_dup integer_pop in1 exec_k_when_autoconstructing (exec_empty boolean_eq integer_yankdup print_integer) () exec_flush boolean_invert_second_then_and exec_k_when_autoconstructing () (integer_dup_items boolean_swap exec_pop (integer_lte boolean_rot exec_noop print_boolean exec_stackdepth print_boolean in2 boolean_stackdepth in4 exec_dup () integer_eq boolean_dup_items) print_exec (exec_y (integer_shove exec_shove (exec_dup () exec_yank) in1 exec_flush boolean_and print_newline) boolean_shove integer_dec boolean_invert_second_then_and) integer_add integer_rot boolean_eq exec_eq integer_lt exec_do*times (print_exec (integer_eq) exec_do*count (boolean_dup boolean_yankdup exec_k () (exec_y_when_autoconstructing () exec_k (integer_shove) (integer_dup_items) boolean_yankdup integer_dup_times integer_dup_times integer_lte exec_k (tagged_253 integer_yank integer_dup_items exec_stackdepth -1 boolean_yankdup boolean_frominteger boolean_swap) (integer_flush boolean_flush) integer_pop integer_gte exec_k_when_autoconstructing (integer_add boolean_rot exec_dup_times () exec_noop exec_dup (exec_k_when_autoconstructing () (exec_while (exec_noop integer_div) integer_fromboolean exec_s_when_autoconstructing () (integer_lte boolean_empty) (exec_flush integer_lt) in1 integer_swap integer_empty integer_flush))) ())))))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 127
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 238 126 238 239 644 127 280 238 280)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (239 238 126 238 239 644 127 280 238 280)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_exec_914} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_325} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_133} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (boolean_invert_first_then_and in1 in4 exec_eq boolean_dup tag_exec_914 () exec_swap (integer_div boolean_frominteger boolean_and exec_noop print_integer exec_eq) (in4) boolean_and tagged_325 exec_when () exec_if (integer_inc boolean_swap exec_dup (exec_y_when_autoconstructing (exec_eq integer_stackdepth) boolean_yankdup integer_mult boolean_and exec_s_when_autoconstructing (boolean_not in3 boolean_shove exec_do*range (integer_dec integer_eq print_exec (exec_dup_items in1 exec_when (exec_rot () (exec_k_when_autoconstructing (boolean_stackdepth boolean_and print_integer) (exec_shove (in1) integer_yankdup integer_gte exec_noop in3) print_exec (boolean_yankdup tag_integer_133 print_boolean print_integer) exec_dup_items print_newline in4) (exec_do*times (exec_dup (boolean_dup_times) boolean_pop integer_mult)) boolean_dup_items exec_do*times () boolean_invert_second_then_and integer_inc boolean_shove)))) () ())) ())
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 67
Size: 92
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 7.351
Median total errors in population: 7
Error averages by case: (0.761 0.762 0.874 0.762 0.761 0.356 0.873 0.72 0.762 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.791
Average program size in population (points): 62.653
Average percent parens in population: 0.288
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.538
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1080244
--- Timings ---
Current time: 1559584647205 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.3 seconds, 45.8%
Fitness Testing:      2.3 seconds, 45.8%
Report:               0.3 seconds,  6.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -29                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -42                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 18                 
Correct output: 12                  | Program output: 55                 
Correct output: 23                  | Program output: 90                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 75                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 87                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 93                 
Correct output: 6                   | Program output: 73                 
Correct output: 20                  | Program output: 69                 
Correct output: 39                  | Program output: 46                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 63                 
Correct output: 18                  | Program output: 30                 
Correct output: 36                  | Program output: 94                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: 82                 
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 61                 
Correct output: -88                 | Program output: 83                 
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: 51                 
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: 7                  
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: 25                 
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: 80                 
Correct output: -9                  | Program output: 96                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 96                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: 90                 
Correct output: -45                 | Program output: 38                 
Correct output: -17                 | Program output: 52                 
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: 48                 
Correct output: -72                 | Program output: 57                 
Correct output: -77                 | Program output: 23                 
Correct output: -93                 | Program output: 87                 
Correct output: -59                 | Program output: 31                 
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -97                 | Program output: 59                 
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 43                 
Correct output: -88                 | Program output: 28                 
Correct output: -36                 | Program output: 39                 
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: 47                 
Correct output: -88                 | Program output: 32                 
Correct output: -35                 | Program output: 20                 
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -9                 
Correct output: -72                 | Program output: 53                 
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: 88                 
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -36                
Correct output: -75                 | Program output: 97                 
Correct output: -84                 | Program output: 92                 
Correct output: -48                 | Program output: 0                  
Correct output: -55                 | Program output: 45                 
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 87                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_exec_914} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_325} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer})
Lexicase best program: (boolean_invert_first_then_and in1 in4 exec_eq boolean_dup tag_exec_914 () exec_swap (integer_div boolean_frominteger boolean_and exec_noop print_integer exec_eq) (in4) boolean_and tagged_325 exec_when () exec_if (integer_inc boolean_swap exec_dup (exec_y_when_autoconstructing (exec_eq integer_stackdepth) boolean_yankdup integer_mult boolean_and exec_s_when_autoconstructing (boolean_not in3 boolean_shove exec_do*range (integer_dec integer_eq print_exec (exec_dup_items in1 exec_when (exec_rot () (exec_k_when_autoconstructing (boolean_stackdepth boolean_and print_integer) ()) ())))) () ())) ())
Lexicase best errors: [1 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction tag_exec_914} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_325} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer})
Zero cases best program: (boolean_invert_first_then_and in1 in4 exec_eq boolean_dup tag_exec_914 () exec_swap (integer_div boolean_frominteger boolean_and exec_noop print_integer exec_eq) (in4) boolean_and tagged_325 exec_when () exec_if (integer_inc boolean_swap exec_dup (exec_y_when_autoconstructing (exec_eq integer_stackdepth) boolean_yankdup integer_mult boolean_and exec_s_when_autoconstructing (boolean_not in3 boolean_shove exec_do*range (integer_dec integer_eq print_exec (exec_dup_items in1 exec_when (exec_rot () (exec_k_when_autoconstructing (boolean_stackdepth boolean_and print_integer) ()) ())))) () ())) ())
Zero cases best errors: [1 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 1000 485 483 890 431 483 215 190 431)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (215 0 485 483 890 431 483 215 190 431)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction in4} {:close 1, :instruction boolean_and} {:close 0, :instruction tagged_325} {:close 1, :instruction exec_when} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_and} {:close 1, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_integer_133} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_newline} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_shove})
Best program: (boolean_invert_first_then_and in1 in4 exec_eq boolean_dup boolean_dup_times exec_swap (integer_div boolean_frominteger boolean_and exec_noop print_integer exec_eq) (in4) boolean_and tagged_325 exec_when () exec_if (integer_inc boolean_swap exec_dup (exec_y_when_autoconstructing (exec_eq integer_stackdepth) boolean_yankdup integer_mult boolean_and exec_s_when_autoconstructing (boolean_not print_integer boolean_shove exec_do*range (integer_dec integer_eq print_exec (exec_dup_items in1 exec_when (exec_rot () (exec_k_when_autoconstructing (boolean_stackdepth boolean_and print_integer) (exec_shove (in1) integer_yankdup integer_gte integer_dup_items in3) print_exec (boolean_yankdup tag_integer_133 print_boolean print_integer) exec_dup_items print_newline in4) (exec_do*times (exec_dup (boolean_dup_times) boolean_pop integer_mult)) boolean_dup_items exec_do*times () boolean_invert_second_then_and integer_inc boolean_shove)))) () ())) ())
Errors: [1 1 0 0 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 67
Size: 91
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 6.177
Median total errors in population: 6
Error averages by case: (0.785 1.0 0.515 0.517 0.11 0.569 0.517 0.785 0.81 0.569)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.971
Average program size in population (points): 65.88
Average percent parens in population: 0.271
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0245
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1651611
--- Timings ---
Current time: 1559584650134 milliseconds
Total Time:           8.0 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.5 seconds, 55.8%
Fitness Testing:      2.9 seconds, 35.7%
Report:               0.6 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 87                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 73                 
Correct output: 20                  | Program output: 69                 
Correct output: 39                  | Program output: 46                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 48                 
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -5                 
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: 27                 
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -60                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: 59                 
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -9                 
Correct output: -72                 | Program output: 16                 
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: 97                 
Correct output: -84                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -18                
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Lexicase best program: (integer_min boolean_dup exec_do*times (exec_k_when_autoconstructing (integer_gte) (boolean_eq boolean_yank in1) integer_gt) integer_eq print_boolean in3 integer_min integer_add boolean_dup print_integer exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Zero cases best program: (integer_min boolean_dup exec_do*times (exec_k_when_autoconstructing (integer_gte) (boolean_eq boolean_yank in1) integer_gt) integer_eq print_boolean in3 integer_min integer_add boolean_dup print_integer exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (855 294 562 442 442 295 122 122 442 442)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (855 294 562 442 442 295 122 122 442 442)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Best program: (integer_min boolean_dup exec_do*times (exec_k_when_autoconstructing (integer_gte) (boolean_eq boolean_yank in1) integer_gt) integer_eq print_boolean in3 integer_min integer_add boolean_dup print_integer exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.982
Median total errors in population: 6
Error averages by case: (0.145 0.706 0.438 0.558 0.558 0.705 0.878 0.878 0.558 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.17
Average program size in population (points): 62.041
Average percent parens in population: 0.289
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.46
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2276236
--- Timings ---
Current time: 1559584654230 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.0 seconds, 61.5%
Fitness Testing:      3.4 seconds, 30.3%
Report:               0.8 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 91                 
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 87                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 73                 
Correct output: 20                  | Program output: 69                 
Correct output: 39                  | Program output: 46                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 48                 
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -50                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -4                 
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -85                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -4                 
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -5                 
Correct output: -76                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: 27                 
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -60                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: 59                 
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 42                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -9                 
Correct output: -72                 | Program output: 16                 
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: 97                 
Correct output: -84                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -18                
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 82                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Lexicase best program: (integer_min boolean_dup exec_do*times (exec_k_when_autoconstructing (integer_gte) (boolean_eq boolean_yank in1) integer_gt) integer_eq print_boolean in3 integer_min integer_add boolean_dup print_integer exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Zero cases best program: (integer_min boolean_dup exec_do*times (exec_k_when_autoconstructing (integer_gte) (boolean_eq boolean_yank in1) integer_gt) integer_eq print_boolean in3 integer_min integer_add boolean_dup print_integer exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (690 696 690 695 216 1000 703 1000 690 1000)
Population mean number of elite cases: 7.38
Count of perfect (error zero) individuals by case: (690 696 690 695 216 0 703 0 690 0)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Best program: (integer_min boolean_dup exec_do*times (exec_k_when_autoconstructing (integer_gte) (boolean_eq boolean_yank in1) integer_gt) integer_eq print_boolean in3 integer_min integer_add boolean_dup print_integer exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop in2 tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 5.62
Median total errors in population: 4
Error averages by case: (0.31 0.304 0.31 0.305 0.784 1.0 0.297 1.0 0.31 1.0)
Error minima by case: (0 0 0 0 0 1 0 1 0 1)
Average genome size in population (length): 31.426
Average program size in population (points): 45.222
Average percent parens in population: 0.306
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.605125
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 438
Genome diversity (% unique genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 453
Syntactic diversity (% unique Push programs):	 0.402
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3565478
--- Timings ---
Current time: 1559584658276 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 58.1%
Fitness Testing:      4.5 seconds, 29.5%
Report:               1.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 395
Test mean error for best: 0.39500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 59                 
Correct output: 83                  | Program output: 83                 
Correct output: 33                  | Program output: 86                 
Correct output: 25                  | Program output: 35                 
Correct output: 43                  | Program output: 75                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -49                
Correct output: -80                 | Program output: -79                
Correct output: -34                 | Program output: -34                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -21                
Correct output: -94                 | Program output: -90                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -78                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -42                
Correct output: -50                 | Program output: -3                 
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -15                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -61                
Correct output: -54                 | Program output: -48                
Correct output: -83                 | Program output: -9                 
Correct output: -61                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -33                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -53                 | Program output: -23                
Correct output: 10                  | Program output: 10                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -48                
Correct output: -79                 | Program output: 6                  
Correct output: -49                 | Program output: 50                 
Correct output: -14                 | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -72                 | Program output: -72                
Correct output: -6                  | Program output: 77                 
Correct output: -78                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: 15                 
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: 39                  | Program output: 54                 
Correct output: -12                 | Program output: 69                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Lexicase best program: (exec_while (boolean_dup_items) boolean_eq boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank) (boolean_frominteger in4 boolean_pop in3 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))))
Lexicase best errors: [0 1 1 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Zero cases best program: (exec_while (boolean_dup_items) boolean_eq boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank) (boolean_frominteger in4 boolean_pop in3 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))))
Zero cases best errors: [0 1 1 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 1000 656 220 224 885 885 885 884 656)
Population mean number of elite cases: 6.51
Count of perfect (error zero) individuals by case: (220 0 656 220 224 885 885 885 884 656)
Population mean number of perfect (error zero) cases: 5.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Best program: (exec_while (boolean_dup_items) boolean_eq boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank) (boolean_frominteger in4 boolean_pop in3 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ())))))
Errors: [0 1 1 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.485
Median total errors in population: 4
Error averages by case: (0.78 1.0 0.344 0.78 0.776 0.115 0.115 0.115 0.116 0.344)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.822
Average program size in population (points): 46.193
Average percent parens in population: 0.312
Minimum age in population: 5.5
Maximum age in population: 8.5
Average age in population: 7.12
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 295
Genome diversity (% unique genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 308
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4757106
--- Timings ---
Current time: 1559584661911 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 55.2%
Fitness Testing:      5.6 seconds, 29.3%
Report:               2.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 395
Test mean error for best: 0.39500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: 37                 
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 59                 
Correct output: 83                  | Program output: 83                 
Correct output: 33                  | Program output: 86                 
Correct output: 25                  | Program output: 35                 
Correct output: 43                  | Program output: 75                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 65                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -49                
Correct output: -80                 | Program output: -79                
Correct output: -34                 | Program output: -34                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -21                
Correct output: -94                 | Program output: -90                
Correct output: -56                 | Program output: -54                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -76                
Correct output: -78                 | Program output: -57                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -42                
Correct output: -50                 | Program output: -3                 
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -15                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: 40                 
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -61                
Correct output: -54                 | Program output: -48                
Correct output: -83                 | Program output: -9                 
Correct output: -61                 | Program output: -45                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -33                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -53                 | Program output: -23                
Correct output: 10                  | Program output: 10                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: 30                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -48                
Correct output: -79                 | Program output: 6                  
Correct output: -49                 | Program output: 50                 
Correct output: -14                 | Program output: 23                 
Correct output: -78                 | Program output: -78                
Correct output: -72                 | Program output: -72                
Correct output: -6                  | Program output: 77                 
Correct output: -78                 | Program output: -40                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: 15                 
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: 39                  | Program output: 54                 
Correct output: -12                 | Program output: 69                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y})
Lexicase best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y ()) ())) ()))) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 47
Percent parens: 0.383
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y})
Zero cases best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y ()) ())) ()))) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 47
Percent parens: 0.383
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 814 484 814 903 561 330 404 814 484)
Population mean number of elite cases: 6.09
Count of perfect (error zero) individuals by case: (484 814 484 814 903 561 330 404 814 484)
Population mean number of perfect (error zero) cases: 6.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y})
Best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank exec_shove (in4 boolean_dup in3 integer_min integer_add boolean_dup print_integer) exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y ()) ()))) () ()))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 42
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 3.908
Median total errors in population: 4
Error averages by case: (0.516 0.186 0.516 0.186 0.097 0.439 0.67 0.596 0.186 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.248
Average program size in population (points): 46.261
Average percent parens in population: 0.326
Minimum age in population: 6.75
Maximum age in population: 10.25
Average age in population: 8.75846875
Median age in population: 8.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5882968
--- Timings ---
Current time: 1559584665225 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.3 seconds, 53.7%
Fitness Testing:      6.6 seconds, 29.0%
Report:               3.8 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 187
Test mean error for best: 0.18700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 83                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -61                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 10                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -72                 | Program output: -72                
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 69                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Lexicase best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 50
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Zero cases best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 50
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 440 655 655 630 440 871 629 440 629)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (0 440 655 655 630 440 871 629 440 629)
Population mean number of perfect (error zero) cases: 5.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 50
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 4.611
Median total errors in population: 4
Error averages by case: (1.0 0.56 0.345 0.345 0.37 0.56 0.129 0.371 0.56 0.371)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.913
Average program size in population (points): 46.327
Average percent parens in population: 0.333
Minimum age in population: 8.0
Maximum age in population: 12.0625
Average age in population: 10.555984375
Median age in population: 10.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.575
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7021272
--- Timings ---
Current time: 1559584669074 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.1 seconds, 53.7%
Fitness Testing:      7.7 seconds, 29.2%
Report:               4.4 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 187
Test mean error for best: 0.18700
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 83                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -61                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 10                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -72                 | Program output: -72                
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 69                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Lexicase best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 50
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Zero cases best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 50
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (870 876 872 873 874 887 876 884 873 874)
Population mean number of elite cases: 8.76
Count of perfect (error zero) individuals by case: (870 876 872 873 874 887 876 884 873 874)
Population mean number of perfect (error zero) cases: 8.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_min} {:close 1, :instruction tag_exec_37} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_exec_269} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_integer_698})
Best program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 50
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 1.241
Median total errors in population: 0
Error averages by case: (0.13 0.124 0.128 0.127 0.126 0.113 0.124 0.116 0.127 0.126)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.862
Average program size in population (points): 49.79
Average percent parens in population: 0.320
Minimum age in population: 12.375
Maximum age in population: 13.375
Average age in population: 12.858
Median age in population: 12.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 590
Genome diversity (% unique genomes):	 0.371
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 604
Syntactic diversity (% unique Push programs):	 0.359
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8369670
--- Timings ---
Current time: 1559584673203 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.0 seconds, 52.9%
Fitness Testing:      8.8 seconds, 29.1%
Report:               5.4 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 8
Successful program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 50


Auto-simplifying with starting size: 50
step: 0
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 500
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1000
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 1500
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2000
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 2500
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3000
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 3500
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4000
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 4500
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

step: 5000
program: (exec_while (boolean_dup_items) boolean_shove boolean_dup_items exec_y (exec_s_when_autoconstructing (boolean_yank boolean_frominteger in4 boolean_dup in3 integer_min in1 integer_min integer_add boolean_dup print_integer) (exec_when (integer_dup_items exec_y_when_autoconstructing (boolean_eq exec_k (integer_dup_items) (exec_do*while () integer_min) tag_exec_37 () exec_k (exec_y (boolean_pop boolean_rot tag_exec_269 (boolean_and boolean_empty tag_integer_698))) ()))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 50

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 187
Test mean error for best: 0.18700
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 45                  | Program output: 62                 
Correct output: 71                  | Program output: 71                 
Correct output: -50                 | Program output: -50                
Correct output: -91                 | Program output: -6                 
Correct output: -51                 | Program output: -51                
Correct output: -11                 | Program output: -11                
Correct output: 16                  | Program output: 16                 
Correct output: -69                 | Program output: -69                
Correct output: 18                  | Program output: 18                 
Correct output: 3                   | Program output: 3                  
Correct output: 19                  | Program output: 19                 
Correct output: -49                 | Program output: -49                
Correct output: -6                  | Program output: -6                 
Correct output: -16                 | Program output: -16                
Correct output: 81                  | Program output: 81                 
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 20                  | Program output: 56                 
Correct output: 50                  | Program output: 50                 
Correct output: 83                  | Program output: 83                 
Correct output: 33                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 43                  | Program output: 43                 
Correct output: 4                   | Program output: 4                  
Correct output: 6                   | Program output: 6                  
Correct output: 20                  | Program output: 20                 
Correct output: 39                  | Program output: 39                 
Correct output: 50                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 40                  | Program output: 52                 
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -78                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -88                 | Program output: -88                
Correct output: -87                 | Program output: -87                
Correct output: -94                 | Program output: -90                
Correct output: -56                 | Program output: -56                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -78                 | Program output: -78                
Correct output: -57                 | Program output: -57                
Correct output: -72                 | Program output: -72                
Correct output: -50                 | Program output: -50                
Correct output: -37                 | Program output: -37                
Correct output: -9                  | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: 32                  | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -25                 | Program output: -25                
Correct output: -45                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -76                 | Program output: -61                
Correct output: -54                 | Program output: -54                
Correct output: -83                 | Program output: -83                
Correct output: -61                 | Program output: -61                
Correct output: -35                 | Program output: -35                
Correct output: -72                 | Program output: -72                
Correct output: -77                 | Program output: 16                 
Correct output: -93                 | Program output: -93                
Correct output: -59                 | Program output: -59                
Correct output: -88                 | Program output: -77                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -97                
Correct output: -53                 | Program output: -53                
Correct output: 10                  | Program output: 10                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -5                  | Program output: -5                 
Correct output: -99                 | Program output: -99                
Correct output: -88                 | Program output: 11                 
Correct output: -35                 | Program output: 0                  
Correct output: -72                 | Program output: -72                
Correct output: -79                 | Program output: -79                
Correct output: -49                 | Program output: 21                 
Correct output: -14                 | Program output: -2                 
Correct output: -78                 | Program output: -78                
Correct output: -72                 | Program output: -72                
Correct output: -6                  | Program output: 15                 
Correct output: -78                 | Program output: -55                
Correct output: -83                 | Program output: -83                
Correct output: -20                 | Program output: -20                
Correct output: -47                 | Program output: -47                
Correct output: -75                 | Program output: -75                
Correct output: -84                 | Program output: -84                
Correct output: -48                 | Program output: -48                
Correct output: -55                 | Program output: -55                
Correct output: 39                  | Program output: 39                 
Correct output: -12                 | Program output: 69                 
;;******************************
