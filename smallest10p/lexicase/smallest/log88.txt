Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 29 -38 29] -38] [[-70 -70 -70 46] -70] [[-67 -67 -66 -67] -67] [[88 -72 88 88] -72] [[-26 -26 -26 -26] -26] [[-42 76 76 76] -42] [[-9 -9 -9 100] -9] [[15 81 15 15] 15] [[6 -54 -54 -54] -54] [[-49 -49 -49 36] -49] [(45 45 45 45) 45] [(83 83 83 83) 83] [(-82 -82 -82 -82) -82] [(84 84 84 84) 84] [(-68 -68 -68 -68) -68] [(59 87 40 33) 33] [(92 23 83 12) 12] [(42 31 41 7) 7] [(97 11 10 8) 8] [(99 72 88 3) 3] [(26 66 9 78) 9] [(97 77 96 74) 74] [(22 77 38 46) 22] [(100 94 8 26) 8] [(18 19 19 80) 18] [(12 84 40 40) 12] [(56 28 97 48) 28] [(11 42 81 44) 11] [(55 9 78 47) 9] [(76 91 16 6) 6] [(3 20 51 78) 3] [(91 68 81 77) 68] [(45 56 57 17) 17] [(30 53 63 94) 30] [(66 25 2 20) 2] [(61 55 29 31) 29] [(35 -85 90 -94) -94] [(-83 -93 95 73) -93] [(19 81 37 -2) -2] [(-19 -69 19 72) -69] [(-80 -7 3 5) -80] [(-15 -12 65 -81) -81] [(-45 85 62 -52) -52] [(3 -42 -6 -71) -71] [(-21 46 -56 -84) -84] [(34 24 -15 47) -15] [(100 23 -84 96) -84] [(8 -92 1 -62) -92] [(17 -32 -82 31) -82] [(-11 -54 25 -87) -87] [(-21 -83 81 -97) -97] [(92 3 42 85) 3] [(-4 -49 -3 63) -49] [(-15 -51 78 -26) -51] [(0 93 -32 28) -32] [(37 -70 -28 -71) -71] [(33 -39 -72 -85) -85] [(21 39 -11 -3) -11] [(15 54 -86 -85) -86] [(-96 34 97 44) -96] [(-69 -52 51 -15) -69] [(-41 -15 -56 49) -56] [(18 87 42 -72) -72] [(23 -40 -2 -73) -73] [(-5 4 -64 89) -64] [(-98 -12 4 87) -98] [(-68 91 45 15) -68] [(-36 -61 -21 62) -61] [(-71 -81 87 100) -81] [(23 -83 65 58) -83] [(91 -72 56 -9) -72] [(56 79 -18 92) -18] [(83 47 40 -81) -81] [(-77 35 72 -50) -77] [(-14 -70 -81 84) -81] [(-13 -83 84 98) -83] [(74 -3 62 -84) -84] [(93 84 -52 89) -52] [(-25 -45 -32 -96) -96] [(-91 92 64 96) -91] [(-11 94 39 48) -11] [(-22 -43 -24 -23) -43] [(-60 83 77 15) -60] [(-27 90 72 -14) -27] [(-47 56 99 -71) -71] [(-15 45 70 16) -15] [(1 -2 38 -4) -4] [(-92 -37 2 -70) -92] [(-14 31 48 -19) -19] [(-100 -98 -93 -24) -100] [(-76 79 -90 -36) -90] [(13 55 85 39) 13] [(93 38 -98 42) -98] [(-90 96 -7 -32) -90] [(-50 75 -16 88) -50])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[29 29 -38 29] -38]
Train Case:   6 | Input/Output: [[-70 -70 -70 46] -70]
Train Case:   7 | Input/Output: [[-67 -67 -66 -67] -67]
Train Case:   8 | Input/Output: [[88 -72 88 88] -72]
Train Case:   9 | Input/Output: [[-26 -26 -26 -26] -26]
Train Case:  10 | Input/Output: [[-42 76 76 76] -42]
Train Case:  11 | Input/Output: [[-9 -9 -9 100] -9]
Train Case:  12 | Input/Output: [[15 81 15 15] 15]
Train Case:  13 | Input/Output: [[6 -54 -54 -54] -54]
Train Case:  14 | Input/Output: [[-49 -49 -49 36] -49]
Train Case:  15 | Input/Output: [(45 45 45 45) 45]
Train Case:  16 | Input/Output: [(83 83 83 83) 83]
Train Case:  17 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  18 | Input/Output: [(84 84 84 84) 84]
Train Case:  19 | Input/Output: [(-68 -68 -68 -68) -68]
Train Case:  20 | Input/Output: [(59 87 40 33) 33]
Train Case:  21 | Input/Output: [(92 23 83 12) 12]
Train Case:  22 | Input/Output: [(42 31 41 7) 7]
Train Case:  23 | Input/Output: [(97 11 10 8) 8]
Train Case:  24 | Input/Output: [(99 72 88 3) 3]
Train Case:  25 | Input/Output: [(26 66 9 78) 9]
Train Case:  26 | Input/Output: [(97 77 96 74) 74]
Train Case:  27 | Input/Output: [(22 77 38 46) 22]
Train Case:  28 | Input/Output: [(100 94 8 26) 8]
Train Case:  29 | Input/Output: [(18 19 19 80) 18]
Train Case:  30 | Input/Output: [(12 84 40 40) 12]
Train Case:  31 | Input/Output: [(56 28 97 48) 28]
Train Case:  32 | Input/Output: [(11 42 81 44) 11]
Train Case:  33 | Input/Output: [(55 9 78 47) 9]
Train Case:  34 | Input/Output: [(76 91 16 6) 6]
Train Case:  35 | Input/Output: [(3 20 51 78) 3]
Train Case:  36 | Input/Output: [(91 68 81 77) 68]
Train Case:  37 | Input/Output: [(45 56 57 17) 17]
Train Case:  38 | Input/Output: [(30 53 63 94) 30]
Train Case:  39 | Input/Output: [(66 25 2 20) 2]
Train Case:  40 | Input/Output: [(61 55 29 31) 29]
Train Case:  41 | Input/Output: [(35 -85 90 -94) -94]
Train Case:  42 | Input/Output: [(-83 -93 95 73) -93]
Train Case:  43 | Input/Output: [(19 81 37 -2) -2]
Train Case:  44 | Input/Output: [(-19 -69 19 72) -69]
Train Case:  45 | Input/Output: [(-80 -7 3 5) -80]
Train Case:  46 | Input/Output: [(-15 -12 65 -81) -81]
Train Case:  47 | Input/Output: [(-45 85 62 -52) -52]
Train Case:  48 | Input/Output: [(3 -42 -6 -71) -71]
Train Case:  49 | Input/Output: [(-21 46 -56 -84) -84]
Train Case:  50 | Input/Output: [(34 24 -15 47) -15]
Train Case:  51 | Input/Output: [(100 23 -84 96) -84]
Train Case:  52 | Input/Output: [(8 -92 1 -62) -92]
Train Case:  53 | Input/Output: [(17 -32 -82 31) -82]
Train Case:  54 | Input/Output: [(-11 -54 25 -87) -87]
Train Case:  55 | Input/Output: [(-21 -83 81 -97) -97]
Train Case:  56 | Input/Output: [(92 3 42 85) 3]
Train Case:  57 | Input/Output: [(-4 -49 -3 63) -49]
Train Case:  58 | Input/Output: [(-15 -51 78 -26) -51]
Train Case:  59 | Input/Output: [(0 93 -32 28) -32]
Train Case:  60 | Input/Output: [(37 -70 -28 -71) -71]
Train Case:  61 | Input/Output: [(33 -39 -72 -85) -85]
Train Case:  62 | Input/Output: [(21 39 -11 -3) -11]
Train Case:  63 | Input/Output: [(15 54 -86 -85) -86]
Train Case:  64 | Input/Output: [(-96 34 97 44) -96]
Train Case:  65 | Input/Output: [(-69 -52 51 -15) -69]
Train Case:  66 | Input/Output: [(-41 -15 -56 49) -56]
Train Case:  67 | Input/Output: [(18 87 42 -72) -72]
Train Case:  68 | Input/Output: [(23 -40 -2 -73) -73]
Train Case:  69 | Input/Output: [(-5 4 -64 89) -64]
Train Case:  70 | Input/Output: [(-98 -12 4 87) -98]
Train Case:  71 | Input/Output: [(-68 91 45 15) -68]
Train Case:  72 | Input/Output: [(-36 -61 -21 62) -61]
Train Case:  73 | Input/Output: [(-71 -81 87 100) -81]
Train Case:  74 | Input/Output: [(23 -83 65 58) -83]
Train Case:  75 | Input/Output: [(91 -72 56 -9) -72]
Train Case:  76 | Input/Output: [(56 79 -18 92) -18]
Train Case:  77 | Input/Output: [(83 47 40 -81) -81]
Train Case:  78 | Input/Output: [(-77 35 72 -50) -77]
Train Case:  79 | Input/Output: [(-14 -70 -81 84) -81]
Train Case:  80 | Input/Output: [(-13 -83 84 98) -83]
Train Case:  81 | Input/Output: [(74 -3 62 -84) -84]
Train Case:  82 | Input/Output: [(93 84 -52 89) -52]
Train Case:  83 | Input/Output: [(-25 -45 -32 -96) -96]
Train Case:  84 | Input/Output: [(-91 92 64 96) -91]
Train Case:  85 | Input/Output: [(-11 94 39 48) -11]
Train Case:  86 | Input/Output: [(-22 -43 -24 -23) -43]
Train Case:  87 | Input/Output: [(-60 83 77 15) -60]
Train Case:  88 | Input/Output: [(-27 90 72 -14) -27]
Train Case:  89 | Input/Output: [(-47 56 99 -71) -71]
Train Case:  90 | Input/Output: [(-15 45 70 16) -15]
Train Case:  91 | Input/Output: [(1 -2 38 -4) -4]
Train Case:  92 | Input/Output: [(-92 -37 2 -70) -92]
Train Case:  93 | Input/Output: [(-14 31 48 -19) -19]
Train Case:  94 | Input/Output: [(-100 -98 -93 -24) -100]
Train Case:  95 | Input/Output: [(-76 79 -90 -36) -90]
Train Case:  96 | Input/Output: [(13 55 85 39) 13]
Train Case:  97 | Input/Output: [(93 38 -98 42) -98]
Train Case:  98 | Input/Output: [(-90 96 -7 -32) -90]
Train Case:  99 | Input/Output: [(-50 75 -16 88) -50]
Test Case:   0 | Input/Output: [[-18 97 97 97] -18]
Test Case:   1 | Input/Output: [[92 -50 -50 -50] -50]
Test Case:   2 | Input/Output: [[-97 19 19 19] -97]
Test Case:   3 | Input/Output: [[77 -90 -90 -90] -90]
Test Case:   4 | Input/Output: [[15 15 9 15] 9]
Test Case:   5 | Input/Output: [[92 92 99 92] 92]
Test Case:   6 | Input/Output: [[-56 -4 -4 -4] -56]
Test Case:   7 | Input/Output: [[-18 -18 -18 -1] -18]
Test Case:   8 | Input/Output: [[95 89 89 89] 89]
Test Case:   9 | Input/Output: [[-94 96 -94 -94] -94]
Test Case:  10 | Input/Output: [[97 -64 -64 -64] -64]
Test Case:  11 | Input/Output: [[36 36 -40 36] -40]
Test Case:  12 | Input/Output: [[40 40 -46 40] -46]
Test Case:  13 | Input/Output: [[44 -48 44 44] -48]
Test Case:  14 | Input/Output: [[2 2 -34 2] -34]
Test Case:  15 | Input/Output: [[-31 98 -31 -31] -31]
Test Case:  16 | Input/Output: [[-62 -62 -62 -15] -62]
Test Case:  17 | Input/Output: [[-80 -80 -80 -27] -80]
Test Case:  18 | Input/Output: [[80 80 24 80] 24]
Test Case:  19 | Input/Output: [[6 6 55 6] 6]
Test Case:  20 | Input/Output: [[0 0 60 0] 0]
Test Case:  21 | Input/Output: [[25 92 25 25] 25]
Test Case:  22 | Input/Output: [[89 60 89 89] 60]
Test Case:  23 | Input/Output: [[23 23 -51 23] -51]
Test Case:  24 | Input/Output: [[-72 26 26 26] -72]
Test Case:  25 | Input/Output: [[59 -52 59 59] -52]
Test Case:  26 | Input/Output: [[-80 45 -80 -80] -80]
Test Case:  27 | Input/Output: [[-77 91 -77 -77] -77]
Test Case:  28 | Input/Output: [[-91 -11 -91 -91] -91]
Test Case:  29 | Input/Output: [[56 56 -9 56] -9]
Test Case:  30 | Input/Output: [[0 0 0 -52] -52]
Test Case:  31 | Input/Output: [[-29 24 24 24] -29]
Test Case:  32 | Input/Output: [[-63 83 83 83] -63]
Test Case:  33 | Input/Output: [[39 39 39 32] 32]
Test Case:  34 | Input/Output: [[62 9 9 9] 9]
Test Case:  35 | Input/Output: [[55 55 67 55] 55]
Test Case:  36 | Input/Output: [[-88 -75 -88 -88] -88]
Test Case:  37 | Input/Output: [[8 -62 -62 -62] -62]
Test Case:  38 | Input/Output: [[-24 -65 -65 -65] -65]
Test Case:  39 | Input/Output: [[-61 -61 -57 -61] -61]
Test Case:  40 | Input/Output: [[75 12 12 12] 12]
Test Case:  41 | Input/Output: [[-99 -99 -21 -99] -99]
Test Case:  42 | Input/Output: [[71 71 -15 71] -15]
Test Case:  43 | Input/Output: [[-100 56 56 56] -100]
Test Case:  44 | Input/Output: [[94 94 94 40] 40]
Test Case:  45 | Input/Output: [[-32 81 81 81] -32]
Test Case:  46 | Input/Output: [[15 15 -29 15] -29]
Test Case:  47 | Input/Output: [[-83 -83 82 -83] -83]
Test Case:  48 | Input/Output: [[-24 -24 -24 -73] -73]
Test Case:  49 | Input/Output: [[90 90 -69 90] -69]
Test Case:  50 | Input/Output: [[-40 -40 -40 62] -40]
Test Case:  51 | Input/Output: [[77 -91 77 77] -91]
Test Case:  52 | Input/Output: [[52 -88 -88 -88] -88]
Test Case:  53 | Input/Output: [[-26 -26 -26 42] -26]
Test Case:  54 | Input/Output: [[-51 13 -51 -51] -51]
Test Case:  55 | Input/Output: [[66 66 98 66] 66]
Test Case:  56 | Input/Output: [[15 83 15 15] 15]
Test Case:  57 | Input/Output: [[-27 19 -27 -27] -27]
Test Case:  58 | Input/Output: [[-31 -31 -67 -31] -67]
Test Case:  59 | Input/Output: [[-73 -73 55 -73] -73]
Test Case:  60 | Input/Output: [[-78 -10 -10 -10] -78]
Test Case:  61 | Input/Output: [[5 5 17 5] 5]
Test Case:  62 | Input/Output: [[-35 -72 -72 -72] -72]
Test Case:  63 | Input/Output: [[-50 27 -50 -50] -50]
Test Case:  64 | Input/Output: [[-98 9 -98 -98] -98]
Test Case:  65 | Input/Output: [[40 1 40 40] 1]
Test Case:  66 | Input/Output: [[-62 -72 -62 -62] -72]
Test Case:  67 | Input/Output: [[33 -43 -43 -43] -43]
Test Case:  68 | Input/Output: [[1 59 1 1] 1]
Test Case:  69 | Input/Output: [[-49 -49 -49 84] -49]
Test Case:  70 | Input/Output: [[-80 -80 -58 -80] -80]
Test Case:  71 | Input/Output: [[95 95 95 -67] -67]
Test Case:  72 | Input/Output: [[-90 -9 -90 -90] -90]
Test Case:  73 | Input/Output: [[-96 26 -96 -96] -96]
Test Case:  74 | Input/Output: [[30 30 -32 30] -32]
Test Case:  75 | Input/Output: [[38 40 38 38] 38]
Test Case:  76 | Input/Output: [[73 73 73 66] 66]
Test Case:  77 | Input/Output: [[49 -41 -41 -41] -41]
Test Case:  78 | Input/Output: [[-40 29 -40 -40] -40]
Test Case:  79 | Input/Output: [[12 -11 -11 -11] -11]
Test Case:  80 | Input/Output: [[79 84 84 84] 79]
Test Case:  81 | Input/Output: [[62 62 62 72] 62]
Test Case:  82 | Input/Output: [[58 -53 58 58] -53]
Test Case:  83 | Input/Output: [[-24 61 -24 -24] -24]
Test Case:  84 | Input/Output: [[16 -4 -4 -4] -4]
Test Case:  85 | Input/Output: [[81 81 79 81] 79]
Test Case:  86 | Input/Output: [[68 68 68 75] 68]
Test Case:  87 | Input/Output: [[93 93 42 93] 42]
Test Case:  88 | Input/Output: [[88 21 21 21] 21]
Test Case:  89 | Input/Output: [[52 52 52 87] 52]
Test Case:  90 | Input/Output: [[4 4 35 4] 4]
Test Case:  91 | Input/Output: [[-94 -94 -94 53] -94]
Test Case:  92 | Input/Output: [[22 22 14 22] 14]
Test Case:  93 | Input/Output: [[65 65 -53 65] -53]
Test Case:  94 | Input/Output: [[-11 4 -11 -11] -11]
Test Case:  95 | Input/Output: [[-10 -10 15 -10] -10]
Test Case:  96 | Input/Output: [[-64 -64 -50 -64] -64]
Test Case:  97 | Input/Output: [[30 30 30 27] 27]
Test Case:  98 | Input/Output: [[-90 11 11 11] -90]
Test Case:  99 | Input/Output: [[-33 -25 -25 -25] -33]
Test Case: 100 | Input/Output: [(1 1 1 1) 1]
Test Case: 101 | Input/Output: [(64 64 64 64) 64]
Test Case: 102 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 103 | Input/Output: [(57 57 57 57) 57]
Test Case: 104 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 105 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 106 | Input/Output: [(91 91 91 91) 91]
Test Case: 107 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 108 | Input/Output: [(42 42 42 42) 42]
Test Case: 109 | Input/Output: [(92 92 92 92) 92]
Test Case: 110 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 111 | Input/Output: [(72 72 72 72) 72]
Test Case: 112 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 113 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 114 | Input/Output: [(94 94 94 94) 94]
Test Case: 115 | Input/Output: [(75 75 75 75) 75]
Test Case: 116 | Input/Output: [(82 82 82 82) 82]
Test Case: 117 | Input/Output: [(63 63 63 63) 63]
Test Case: 118 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 119 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 120 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 121 | Input/Output: [(29 29 29 29) 29]
Test Case: 122 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 123 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 124 | Input/Output: [(11 11 11 11) 11]
Test Case: 125 | Input/Output: [(76 76 76 76) 76]
Test Case: 126 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 127 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 128 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 129 | Input/Output: [(39 39 39 39) 39]
Test Case: 130 | Input/Output: [(14 14 14 14) 14]
Test Case: 131 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 132 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 133 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 134 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 135 | Input/Output: [(21 21 21 21) 21]
Test Case: 136 | Input/Output: [(36 36 36 36) 36]
Test Case: 137 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 138 | Input/Output: [(33 33 33 33) 33]
Test Case: 139 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 140 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 141 | Input/Output: [(8 8 8 8) 8]
Test Case: 142 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 143 | Input/Output: [(75 75 75 75) 75]
Test Case: 144 | Input/Output: [(28 28 28 28) 28]
Test Case: 145 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 146 | Input/Output: [(35 35 35 35) 35]
Test Case: 147 | Input/Output: [(39 39 39 39) 39]
Test Case: 148 | Input/Output: [(81 81 81 81) 81]
Test Case: 149 | Input/Output: [(8 8 8 8) 8]
Test Case: 150 | Input/Output: [(75 75 75 75) 75]
Test Case: 151 | Input/Output: [(32 32 32 32) 32]
Test Case: 152 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 153 | Input/Output: [(23 23 23 23) 23]
Test Case: 154 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 155 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 156 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 157 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 158 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 159 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 160 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 161 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 162 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 163 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 164 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 165 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 166 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 167 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 168 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 169 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 170 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 171 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 172 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 173 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 174 | Input/Output: [(66 66 66 66) 66]
Test Case: 175 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 176 | Input/Output: [(41 41 41 41) 41]
Test Case: 177 | Input/Output: [(57 57 57 57) 57]
Test Case: 178 | Input/Output: [(100 100 100 100) 100]
Test Case: 179 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 180 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 181 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 182 | Input/Output: [(66 66 66 66) 66]
Test Case: 183 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 184 | Input/Output: [(25 25 25 25) 25]
Test Case: 185 | Input/Output: [(8 8 8 8) 8]
Test Case: 186 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 187 | Input/Output: [(3 3 3 3) 3]
Test Case: 188 | Input/Output: [(6 6 6 6) 6]
Test Case: 189 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 190 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 191 | Input/Output: [(23 23 23 23) 23]
Test Case: 192 | Input/Output: [(49 49 49 49) 49]
Test Case: 193 | Input/Output: [(57 57 57 57) 57]
Test Case: 194 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 195 | Input/Output: [(40 40 40 40) 40]
Test Case: 196 | Input/Output: [(72 72 72 72) 72]
Test Case: 197 | Input/Output: [(12 12 12 12) 12]
Test Case: 198 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 199 | Input/Output: [(35 35 35 35) 35]
Test Case: 200 | Input/Output: [(60 33 35 80) 33]
Test Case: 201 | Input/Output: [(44 48 79 0) 0]
Test Case: 202 | Input/Output: [(31 85 19 64) 19]
Test Case: 203 | Input/Output: [(63 93 20 31) 20]
Test Case: 204 | Input/Output: [(49 4 75 20) 4]
Test Case: 205 | Input/Output: [(39 66 47 97) 39]
Test Case: 206 | Input/Output: [(24 2 98 16) 2]
Test Case: 207 | Input/Output: [(19 33 5 38) 5]
Test Case: 208 | Input/Output: [(34 13 8 36) 8]
Test Case: 209 | Input/Output: [(42 79 35 21) 21]
Test Case: 210 | Input/Output: [(42 60 89 26) 26]
Test Case: 211 | Input/Output: [(71 85 64 95) 64]
Test Case: 212 | Input/Output: [(47 62 83 30) 30]
Test Case: 213 | Input/Output: [(83 12 1 15) 1]
Test Case: 214 | Input/Output: [(76 82 22 17) 17]
Test Case: 215 | Input/Output: [(26 32 58 8) 8]
Test Case: 216 | Input/Output: [(98 11 83 32) 11]
Test Case: 217 | Input/Output: [(22 100 62 76) 22]
Test Case: 218 | Input/Output: [(8 0 43 31) 0]
Test Case: 219 | Input/Output: [(59 60 94 69) 59]
Test Case: 220 | Input/Output: [(65 47 86 49) 47]
Test Case: 221 | Input/Output: [(54 11 21 19) 11]
Test Case: 222 | Input/Output: [(61 51 82 50) 50]
Test Case: 223 | Input/Output: [(68 0 1 44) 0]
Test Case: 224 | Input/Output: [(100 84 89 87) 84]
Test Case: 225 | Input/Output: [(61 40 0 34) 0]
Test Case: 226 | Input/Output: [(61 2 66 52) 2]
Test Case: 227 | Input/Output: [(19 21 25 76) 19]
Test Case: 228 | Input/Output: [(85 24 48 23) 23]
Test Case: 229 | Input/Output: [(57 86 80 43) 43]
Test Case: 230 | Input/Output: [(87 87 46 56) 46]
Test Case: 231 | Input/Output: [(21 16 62 25) 16]
Test Case: 232 | Input/Output: [(58 98 67 44) 44]
Test Case: 233 | Input/Output: [(23 24 37 76) 23]
Test Case: 234 | Input/Output: [(60 100 32 54) 32]
Test Case: 235 | Input/Output: [(62 56 15 28) 15]
Test Case: 236 | Input/Output: [(68 8 31 68) 8]
Test Case: 237 | Input/Output: [(64 13 53 46) 13]
Test Case: 238 | Input/Output: [(34 78 93 36) 34]
Test Case: 239 | Input/Output: [(65 39 38 97) 38]
Test Case: 240 | Input/Output: [(34 77 76 76) 34]
Test Case: 241 | Input/Output: [(37 3 1 33) 1]
Test Case: 242 | Input/Output: [(79 45 70 51) 45]
Test Case: 243 | Input/Output: [(3 19 50 82) 3]
Test Case: 244 | Input/Output: [(34 41 44 92) 34]
Test Case: 245 | Input/Output: [(93 67 92 40) 40]
Test Case: 246 | Input/Output: [(21 45 12 77) 12]
Test Case: 247 | Input/Output: [(33 42 73 76) 33]
Test Case: 248 | Input/Output: [(56 14 78 52) 14]
Test Case: 249 | Input/Output: [(39 5 75 85) 5]
Test Case: 250 | Input/Output: [(85 42 28 67) 28]
Test Case: 251 | Input/Output: [(80 20 95 61) 20]
Test Case: 252 | Input/Output: [(47 56 6 47) 6]
Test Case: 253 | Input/Output: [(69 34 59 56) 34]
Test Case: 254 | Input/Output: [(6 54 100 59) 6]
Test Case: 255 | Input/Output: [(41 46 0 27) 0]
Test Case: 256 | Input/Output: [(96 27 6 50) 6]
Test Case: 257 | Input/Output: [(59 53 92 30) 30]
Test Case: 258 | Input/Output: [(73 71 29 62) 29]
Test Case: 259 | Input/Output: [(46 70 1 24) 1]
Test Case: 260 | Input/Output: [(38 89 37 6) 6]
Test Case: 261 | Input/Output: [(62 24 81 94) 24]
Test Case: 262 | Input/Output: [(66 91 12 88) 12]
Test Case: 263 | Input/Output: [(32 47 37 47) 32]
Test Case: 264 | Input/Output: [(13 31 58 92) 13]
Test Case: 265 | Input/Output: [(20 79 96 49) 20]
Test Case: 266 | Input/Output: [(23 56 49 66) 23]
Test Case: 267 | Input/Output: [(6 98 78 51) 6]
Test Case: 268 | Input/Output: [(7 34 55 79) 7]
Test Case: 269 | Input/Output: [(27 42 14 15) 14]
Test Case: 270 | Input/Output: [(3 40 100 57) 3]
Test Case: 271 | Input/Output: [(18 40 60 31) 18]
Test Case: 272 | Input/Output: [(22 68 70 68) 22]
Test Case: 273 | Input/Output: [(86 73 38 88) 38]
Test Case: 274 | Input/Output: [(62 94 91 96) 62]
Test Case: 275 | Input/Output: [(33 79 9 43) 9]
Test Case: 276 | Input/Output: [(22 92 5 36) 5]
Test Case: 277 | Input/Output: [(34 15 25 10) 10]
Test Case: 278 | Input/Output: [(19 95 13 64) 13]
Test Case: 279 | Input/Output: [(95 68 59 76) 59]
Test Case: 280 | Input/Output: [(41 52 52 5) 5]
Test Case: 281 | Input/Output: [(34 72 44 27) 27]
Test Case: 282 | Input/Output: [(97 16 95 85) 16]
Test Case: 283 | Input/Output: [(75 73 43 64) 43]
Test Case: 284 | Input/Output: [(0 72 71 79) 0]
Test Case: 285 | Input/Output: [(61 4 28 48) 4]
Test Case: 286 | Input/Output: [(79 90 31 7) 7]
Test Case: 287 | Input/Output: [(67 55 8 18) 8]
Test Case: 288 | Input/Output: [(76 100 15 18) 15]
Test Case: 289 | Input/Output: [(49 16 96 35) 16]
Test Case: 290 | Input/Output: [(80 27 59 33) 27]
Test Case: 291 | Input/Output: [(78 10 43 79) 10]
Test Case: 292 | Input/Output: [(99 91 16 93) 16]
Test Case: 293 | Input/Output: [(83 78 61 48) 48]
Test Case: 294 | Input/Output: [(62 10 37 25) 10]
Test Case: 295 | Input/Output: [(48 26 94 54) 26]
Test Case: 296 | Input/Output: [(60 24 10 2) 2]
Test Case: 297 | Input/Output: [(50 45 74 56) 45]
Test Case: 298 | Input/Output: [(42 49 3 63) 3]
Test Case: 299 | Input/Output: [(38 90 27 55) 27]
Test Case: 300 | Input/Output: [(64 34 22 75) 22]
Test Case: 301 | Input/Output: [(79 90 51 81) 51]
Test Case: 302 | Input/Output: [(86 1 39 70) 1]
Test Case: 303 | Input/Output: [(82 33 32 27) 27]
Test Case: 304 | Input/Output: [(90 33 34 88) 33]
Test Case: 305 | Input/Output: [(34 57 13 95) 13]
Test Case: 306 | Input/Output: [(88 100 75 89) 75]
Test Case: 307 | Input/Output: [(54 51 53 89) 51]
Test Case: 308 | Input/Output: [(79 46 53 59) 46]
Test Case: 309 | Input/Output: [(2 16 22 32) 2]
Test Case: 310 | Input/Output: [(30 89 85 78) 30]
Test Case: 311 | Input/Output: [(22 18 36 100) 18]
Test Case: 312 | Input/Output: [(89 0 28 76) 0]
Test Case: 313 | Input/Output: [(83 12 68 73) 12]
Test Case: 314 | Input/Output: [(60 86 16 8) 8]
Test Case: 315 | Input/Output: [(70 63 22 69) 22]
Test Case: 316 | Input/Output: [(29 14 15 53) 14]
Test Case: 317 | Input/Output: [(79 96 88 0) 0]
Test Case: 318 | Input/Output: [(0 15 40 13) 0]
Test Case: 319 | Input/Output: [(94 38 82 27) 27]
Test Case: 320 | Input/Output: [(42 7 61 51) 7]
Test Case: 321 | Input/Output: [(14 89 42 15) 14]
Test Case: 322 | Input/Output: [(90 7 63 95) 7]
Test Case: 323 | Input/Output: [(49 26 24 97) 24]
Test Case: 324 | Input/Output: [(98 96 66 3) 3]
Test Case: 325 | Input/Output: [(14 78 99 90) 14]
Test Case: 326 | Input/Output: [(45 73 39 24) 24]
Test Case: 327 | Input/Output: [(77 90 56 24) 24]
Test Case: 328 | Input/Output: [(16 81 68 65) 16]
Test Case: 329 | Input/Output: [(84 63 97 90) 63]
Test Case: 330 | Input/Output: [(81 24 86 32) 24]
Test Case: 331 | Input/Output: [(47 39 62 29) 29]
Test Case: 332 | Input/Output: [(87 93 67 100) 67]
Test Case: 333 | Input/Output: [(92 86 68 58) 58]
Test Case: 334 | Input/Output: [(23 50 31 22) 22]
Test Case: 335 | Input/Output: [(82 62 9 73) 9]
Test Case: 336 | Input/Output: [(33 83 28 80) 28]
Test Case: 337 | Input/Output: [(33 83 84 83) 33]
Test Case: 338 | Input/Output: [(36 68 82 68) 36]
Test Case: 339 | Input/Output: [(58 10 99 81) 10]
Test Case: 340 | Input/Output: [(26 19 47 68) 19]
Test Case: 341 | Input/Output: [(99 30 5 11) 5]
Test Case: 342 | Input/Output: [(39 65 71 45) 39]
Test Case: 343 | Input/Output: [(90 75 9 73) 9]
Test Case: 344 | Input/Output: [(87 48 2 25) 2]
Test Case: 345 | Input/Output: [(54 43 54 11) 11]
Test Case: 346 | Input/Output: [(89 44 47 93) 44]
Test Case: 347 | Input/Output: [(80 42 91 67) 42]
Test Case: 348 | Input/Output: [(81 67 26 31) 26]
Test Case: 349 | Input/Output: [(14 47 91 24) 14]
Test Case: 350 | Input/Output: [(33 61 3 22) 3]
Test Case: 351 | Input/Output: [(38 16 24 5) 5]
Test Case: 352 | Input/Output: [(53 68 95 43) 43]
Test Case: 353 | Input/Output: [(87 70 11 64) 11]
Test Case: 354 | Input/Output: [(94 27 46 24) 24]
Test Case: 355 | Input/Output: [(53 46 42 41) 41]
Test Case: 356 | Input/Output: [(60 44 93 56) 44]
Test Case: 357 | Input/Output: [(94 75 97 99) 75]
Test Case: 358 | Input/Output: [(8 21 23 52) 8]
Test Case: 359 | Input/Output: [(28 2 22 87) 2]
Test Case: 360 | Input/Output: [(81 75 6 16) 6]
Test Case: 361 | Input/Output: [(96 2 42 46) 2]
Test Case: 362 | Input/Output: [(21 32 91 75) 21]
Test Case: 363 | Input/Output: [(82 75 3 80) 3]
Test Case: 364 | Input/Output: [(99 85 33 75) 33]
Test Case: 365 | Input/Output: [(43 90 33 82) 33]
Test Case: 366 | Input/Output: [(30 10 58 2) 2]
Test Case: 367 | Input/Output: [(37 72 25 48) 25]
Test Case: 368 | Input/Output: [(54 78 82 87) 54]
Test Case: 369 | Input/Output: [(30 92 42 77) 30]
Test Case: 370 | Input/Output: [(71 21 91 10) 10]
Test Case: 371 | Input/Output: [(23 1 8 62) 1]
Test Case: 372 | Input/Output: [(19 20 44 50) 19]
Test Case: 373 | Input/Output: [(22 79 47 51) 22]
Test Case: 374 | Input/Output: [(33 96 62 7) 7]
Test Case: 375 | Input/Output: [(25 29 18 88) 18]
Test Case: 376 | Input/Output: [(44 6 46 49) 6]
Test Case: 377 | Input/Output: [(30 77 31 89) 30]
Test Case: 378 | Input/Output: [(68 47 49 18) 18]
Test Case: 379 | Input/Output: [(54 57 61 39) 39]
Test Case: 380 | Input/Output: [(99 44 52 59) 44]
Test Case: 381 | Input/Output: [(57 75 65 62) 57]
Test Case: 382 | Input/Output: [(40 91 75 50) 40]
Test Case: 383 | Input/Output: [(37 63 30 50) 30]
Test Case: 384 | Input/Output: [(2 87 86 75) 2]
Test Case: 385 | Input/Output: [(51 85 36 96) 36]
Test Case: 386 | Input/Output: [(58 41 40 11) 11]
Test Case: 387 | Input/Output: [(2 80 91 56) 2]
Test Case: 388 | Input/Output: [(92 5 90 62) 5]
Test Case: 389 | Input/Output: [(41 63 54 5) 5]
Test Case: 390 | Input/Output: [(13 25 75 63) 13]
Test Case: 391 | Input/Output: [(26 25 57 70) 25]
Test Case: 392 | Input/Output: [(47 64 83 39) 39]
Test Case: 393 | Input/Output: [(51 44 70 2) 2]
Test Case: 394 | Input/Output: [(43 3 85 59) 3]
Test Case: 395 | Input/Output: [(7 78 21 5) 5]
Test Case: 396 | Input/Output: [(88 21 42 17) 17]
Test Case: 397 | Input/Output: [(95 56 28 44) 28]
Test Case: 398 | Input/Output: [(38 96 40 47) 38]
Test Case: 399 | Input/Output: [(62 16 93 91) 16]
Test Case: 400 | Input/Output: [(-23 -32 50 -79) -79]
Test Case: 401 | Input/Output: [(84 -17 11 -19) -19]
Test Case: 402 | Input/Output: [(-62 -68 98 25) -68]
Test Case: 403 | Input/Output: [(-50 -87 64 -87) -87]
Test Case: 404 | Input/Output: [(90 -13 -5 -58) -58]
Test Case: 405 | Input/Output: [(72 -93 -82 -91) -93]
Test Case: 406 | Input/Output: [(-75 11 -32 -49) -75]
Test Case: 407 | Input/Output: [(-82 4 -99 -100) -100]
Test Case: 408 | Input/Output: [(-49 96 -29 69) -49]
Test Case: 409 | Input/Output: [(-1 -44 93 98) -44]
Test Case: 410 | Input/Output: [(42 84 51 -22) -22]
Test Case: 411 | Input/Output: [(-28 -3 -21 -33) -33]
Test Case: 412 | Input/Output: [(88 -7 -45 12) -45]
Test Case: 413 | Input/Output: [(63 -11 80 82) -11]
Test Case: 414 | Input/Output: [(58 76 26 -3) -3]
Test Case: 415 | Input/Output: [(84 75 1 -89) -89]
Test Case: 416 | Input/Output: [(-21 -19 -83 80) -83]
Test Case: 417 | Input/Output: [(53 89 -42 96) -42]
Test Case: 418 | Input/Output: [(-94 20 -32 -26) -94]
Test Case: 419 | Input/Output: [(-9 12 11 72) -9]
Test Case: 420 | Input/Output: [(-45 25 37 -9) -45]
Test Case: 421 | Input/Output: [(66 24 -94 -27) -94]
Test Case: 422 | Input/Output: [(79 87 37 -26) -26]
Test Case: 423 | Input/Output: [(-72 85 -91 26) -91]
Test Case: 424 | Input/Output: [(15 -68 88 -59) -68]
Test Case: 425 | Input/Output: [(23 -90 -5 76) -90]
Test Case: 426 | Input/Output: [(-41 -56 -10 28) -56]
Test Case: 427 | Input/Output: [(88 -74 32 -34) -74]
Test Case: 428 | Input/Output: [(73 -26 4 -14) -26]
Test Case: 429 | Input/Output: [(-95 96 30 82) -95]
Test Case: 430 | Input/Output: [(-25 16 5 -39) -39]
Test Case: 431 | Input/Output: [(-94 -12 -67 31) -94]
Test Case: 432 | Input/Output: [(60 -63 73 42) -63]
Test Case: 433 | Input/Output: [(87 47 21 13) 13]
Test Case: 434 | Input/Output: [(-64 -71 87 -27) -71]
Test Case: 435 | Input/Output: [(-70 42 -9 19) -70]
Test Case: 436 | Input/Output: [(89 74 -66 -64) -66]
Test Case: 437 | Input/Output: [(-72 11 61 -20) -72]
Test Case: 438 | Input/Output: [(42 13 87 11) 11]
Test Case: 439 | Input/Output: [(65 73 84 -14) -14]
Test Case: 440 | Input/Output: [(29 -1 39 -26) -26]
Test Case: 441 | Input/Output: [(-27 -3 -23 -6) -27]
Test Case: 442 | Input/Output: [(-36 34 -1 -46) -46]
Test Case: 443 | Input/Output: [(-90 -39 -36 -93) -93]
Test Case: 444 | Input/Output: [(40 -24 -59 82) -59]
Test Case: 445 | Input/Output: [(94 21 -27 42) -27]
Test Case: 446 | Input/Output: [(-82 23 41 50) -82]
Test Case: 447 | Input/Output: [(99 33 89 69) 33]
Test Case: 448 | Input/Output: [(-90 99 -48 96) -90]
Test Case: 449 | Input/Output: [(0 33 64 -66) -66]
Test Case: 450 | Input/Output: [(54 -25 72 100) -25]
Test Case: 451 | Input/Output: [(88 1 -7 62) -7]
Test Case: 452 | Input/Output: [(-47 -79 63 94) -79]
Test Case: 453 | Input/Output: [(-57 -61 -43 74) -61]
Test Case: 454 | Input/Output: [(-15 3 60 -6) -15]
Test Case: 455 | Input/Output: [(61 -71 68 97) -71]
Test Case: 456 | Input/Output: [(81 72 -54 -51) -54]
Test Case: 457 | Input/Output: [(33 27 -12 99) -12]
Test Case: 458 | Input/Output: [(7 38 -55 73) -55]
Test Case: 459 | Input/Output: [(-31 -21 86 70) -31]
Test Case: 460 | Input/Output: [(-17 43 -22 79) -22]
Test Case: 461 | Input/Output: [(61 43 -61 -24) -61]
Test Case: 462 | Input/Output: [(-96 33 10 57) -96]
Test Case: 463 | Input/Output: [(-49 49 31 -16) -49]
Test Case: 464 | Input/Output: [(-55 95 -57 7) -57]
Test Case: 465 | Input/Output: [(-52 84 80 -93) -93]
Test Case: 466 | Input/Output: [(85 50 -19 36) -19]
Test Case: 467 | Input/Output: [(-1 -39 36 70) -39]
Test Case: 468 | Input/Output: [(46 25 -48 60) -48]
Test Case: 469 | Input/Output: [(-7 -6 21 25) -7]
Test Case: 470 | Input/Output: [(-82 0 -3 -29) -82]
Test Case: 471 | Input/Output: [(-10 -84 -92 -76) -92]
Test Case: 472 | Input/Output: [(-6 4 7 -70) -70]
Test Case: 473 | Input/Output: [(6 -24 -17 2) -24]
Test Case: 474 | Input/Output: [(-31 23 -39 95) -39]
Test Case: 475 | Input/Output: [(33 57 9 70) 9]
Test Case: 476 | Input/Output: [(14 59 50 -9) -9]
Test Case: 477 | Input/Output: [(85 -88 98 -63) -88]
Test Case: 478 | Input/Output: [(29 -19 -87 61) -87]
Test Case: 479 | Input/Output: [(83 79 -64 68) -64]
Test Case: 480 | Input/Output: [(53 22 -13 51) -13]
Test Case: 481 | Input/Output: [(-50 -14 -9 66) -50]
Test Case: 482 | Input/Output: [(-17 79 6 -61) -61]
Test Case: 483 | Input/Output: [(15 29 59 -99) -99]
Test Case: 484 | Input/Output: [(66 95 0 -60) -60]
Test Case: 485 | Input/Output: [(24 -18 92 -25) -25]
Test Case: 486 | Input/Output: [(-7 29 95 -59) -59]
Test Case: 487 | Input/Output: [(-19 69 -28 -31) -31]
Test Case: 488 | Input/Output: [(89 -37 -74 -3) -74]
Test Case: 489 | Input/Output: [(67 92 60 61) 60]
Test Case: 490 | Input/Output: [(-39 12 63 -94) -94]
Test Case: 491 | Input/Output: [(-25 -59 43 -7) -59]
Test Case: 492 | Input/Output: [(36 62 19 -66) -66]
Test Case: 493 | Input/Output: [(21 -43 55 -58) -58]
Test Case: 494 | Input/Output: [(-73 -38 -66 48) -73]
Test Case: 495 | Input/Output: [(97 -51 -55 2) -55]
Test Case: 496 | Input/Output: [(-82 -94 6 98) -94]
Test Case: 497 | Input/Output: [(87 51 4 37) 4]
Test Case: 498 | Input/Output: [(-57 86 13 25) -57]
Test Case: 499 | Input/Output: [(-68 -78 -33 -55) -78]
Test Case: 500 | Input/Output: [(29 57 -61 16) -61]
Test Case: 501 | Input/Output: [(54 -84 30 64) -84]
Test Case: 502 | Input/Output: [(-67 -5 74 46) -67]
Test Case: 503 | Input/Output: [(-76 -37 -81 10) -81]
Test Case: 504 | Input/Output: [(20 -42 31 -56) -56]
Test Case: 505 | Input/Output: [(-92 9 18 12) -92]
Test Case: 506 | Input/Output: [(6 6 -54 69) -54]
Test Case: 507 | Input/Output: [(-89 -97 -97 -89) -97]
Test Case: 508 | Input/Output: [(33 57 -7 18) -7]
Test Case: 509 | Input/Output: [(-59 -40 75 75) -59]
Test Case: 510 | Input/Output: [(-94 -24 55 -55) -94]
Test Case: 511 | Input/Output: [(-31 63 -93 -21) -93]
Test Case: 512 | Input/Output: [(-23 71 95 -35) -35]
Test Case: 513 | Input/Output: [(29 -33 59 71) -33]
Test Case: 514 | Input/Output: [(-54 44 -85 -30) -85]
Test Case: 515 | Input/Output: [(-49 -38 100 4) -49]
Test Case: 516 | Input/Output: [(-38 77 44 -87) -87]
Test Case: 517 | Input/Output: [(16 30 62 51) 16]
Test Case: 518 | Input/Output: [(48 6 -89 -62) -89]
Test Case: 519 | Input/Output: [(-1 -93 9 -39) -93]
Test Case: 520 | Input/Output: [(-11 7 4 8) -11]
Test Case: 521 | Input/Output: [(-83 23 12 29) -83]
Test Case: 522 | Input/Output: [(-22 -93 -57 49) -93]
Test Case: 523 | Input/Output: [(39 51 -31 -20) -31]
Test Case: 524 | Input/Output: [(21 92 -82 12) -82]
Test Case: 525 | Input/Output: [(-90 -100 -54 65) -100]
Test Case: 526 | Input/Output: [(47 -49 -17 -15) -49]
Test Case: 527 | Input/Output: [(-18 -35 -7 1) -35]
Test Case: 528 | Input/Output: [(-97 -69 -72 -19) -97]
Test Case: 529 | Input/Output: [(43 -41 22 17) -41]
Test Case: 530 | Input/Output: [(77 -10 -63 82) -63]
Test Case: 531 | Input/Output: [(12 -90 -56 58) -90]
Test Case: 532 | Input/Output: [(-67 -98 2 -62) -98]
Test Case: 533 | Input/Output: [(66 -41 17 89) -41]
Test Case: 534 | Input/Output: [(22 -37 -69 43) -69]
Test Case: 535 | Input/Output: [(-32 -55 -16 -66) -66]
Test Case: 536 | Input/Output: [(84 -42 15 25) -42]
Test Case: 537 | Input/Output: [(4 -63 36 -41) -63]
Test Case: 538 | Input/Output: [(-63 -17 -85 59) -85]
Test Case: 539 | Input/Output: [(-73 -27 46 -23) -73]
Test Case: 540 | Input/Output: [(48 -58 -2 70) -58]
Test Case: 541 | Input/Output: [(-59 -27 54 54) -59]
Test Case: 542 | Input/Output: [(-77 20 -24 -18) -77]
Test Case: 543 | Input/Output: [(87 19 -95 -12) -95]
Test Case: 544 | Input/Output: [(1 -90 68 -13) -90]
Test Case: 545 | Input/Output: [(1 43 -75 41) -75]
Test Case: 546 | Input/Output: [(-96 85 -2 9) -96]
Test Case: 547 | Input/Output: [(51 99 -99 -3) -99]
Test Case: 548 | Input/Output: [(-67 21 -36 -82) -82]
Test Case: 549 | Input/Output: [(44 -78 26 91) -78]
Test Case: 550 | Input/Output: [(5 66 82 -20) -20]
Test Case: 551 | Input/Output: [(-75 31 98 -11) -75]
Test Case: 552 | Input/Output: [(51 77 8 95) 8]
Test Case: 553 | Input/Output: [(-84 -93 -30 -73) -93]
Test Case: 554 | Input/Output: [(-98 -59 -69 -65) -98]
Test Case: 555 | Input/Output: [(-80 -95 -69 21) -95]
Test Case: 556 | Input/Output: [(-57 -9 -12 -61) -61]
Test Case: 557 | Input/Output: [(27 -36 52 83) -36]
Test Case: 558 | Input/Output: [(-56 67 -59 56) -59]
Test Case: 559 | Input/Output: [(89 32 49 -65) -65]
Test Case: 560 | Input/Output: [(24 52 -80 11) -80]
Test Case: 561 | Input/Output: [(-84 39 -92 6) -92]
Test Case: 562 | Input/Output: [(-83 -64 -87 49) -87]
Test Case: 563 | Input/Output: [(49 -89 12 23) -89]
Test Case: 564 | Input/Output: [(-62 66 -88 27) -88]
Test Case: 565 | Input/Output: [(61 19 83 -68) -68]
Test Case: 566 | Input/Output: [(-91 46 -73 -97) -97]
Test Case: 567 | Input/Output: [(21 11 91 -77) -77]
Test Case: 568 | Input/Output: [(-19 -80 97 57) -80]
Test Case: 569 | Input/Output: [(2 34 65 -42) -42]
Test Case: 570 | Input/Output: [(-92 57 -8 -8) -92]
Test Case: 571 | Input/Output: [(26 -98 -97 81) -98]
Test Case: 572 | Input/Output: [(75 -12 -22 -76) -76]
Test Case: 573 | Input/Output: [(-71 -8 -26 55) -71]
Test Case: 574 | Input/Output: [(-49 30 25 -20) -49]
Test Case: 575 | Input/Output: [(-67 70 -45 -65) -67]
Test Case: 576 | Input/Output: [(4 -53 -98 -71) -98]
Test Case: 577 | Input/Output: [(-19 80 -94 89) -94]
Test Case: 578 | Input/Output: [(-23 -64 66 6) -64]
Test Case: 579 | Input/Output: [(-44 -92 14 -57) -92]
Test Case: 580 | Input/Output: [(43 -97 -42 -70) -97]
Test Case: 581 | Input/Output: [(18 22 -75 54) -75]
Test Case: 582 | Input/Output: [(94 -68 -53 -32) -68]
Test Case: 583 | Input/Output: [(-42 -7 -64 7) -64]
Test Case: 584 | Input/Output: [(6 68 -44 -89) -89]
Test Case: 585 | Input/Output: [(-66 -79 -16 -50) -79]
Test Case: 586 | Input/Output: [(-40 85 -97 59) -97]
Test Case: 587 | Input/Output: [(67 -46 -87 -38) -87]
Test Case: 588 | Input/Output: [(84 80 -26 -29) -29]
Test Case: 589 | Input/Output: [(-27 7 65 92) -27]
Test Case: 590 | Input/Output: [(73 40 -43 43) -43]
Test Case: 591 | Input/Output: [(93 -63 -97 -66) -97]
Test Case: 592 | Input/Output: [(35 -70 -40 100) -70]
Test Case: 593 | Input/Output: [(61 100 68 -24) -24]
Test Case: 594 | Input/Output: [(-80 96 -76 -94) -94]
Test Case: 595 | Input/Output: [(67 16 93 16) 16]
Test Case: 596 | Input/Output: [(-20 84 -7 5) -20]
Test Case: 597 | Input/Output: [(96 37 -100 46) -100]
Test Case: 598 | Input/Output: [(-3 62 27 -55) -55]
Test Case: 599 | Input/Output: [(19 62 -40 22) -40]
Test Case: 600 | Input/Output: [(58 47 -34 34) -34]
Test Case: 601 | Input/Output: [(0 50 -4 91) -4]
Test Case: 602 | Input/Output: [(37 -26 -88 -50) -88]
Test Case: 603 | Input/Output: [(-35 50 17 -55) -55]
Test Case: 604 | Input/Output: [(-96 17 -34 -86) -96]
Test Case: 605 | Input/Output: [(36 42 -31 81) -31]
Test Case: 606 | Input/Output: [(53 77 -27 -7) -27]
Test Case: 607 | Input/Output: [(88 92 7 90) 7]
Test Case: 608 | Input/Output: [(-84 -35 -86 60) -86]
Test Case: 609 | Input/Output: [(-15 -88 -4 83) -88]
Test Case: 610 | Input/Output: [(-38 47 96 88) -38]
Test Case: 611 | Input/Output: [(63 -43 0 -2) -43]
Test Case: 612 | Input/Output: [(24 39 56 40) 24]
Test Case: 613 | Input/Output: [(93 -5 -50 -22) -50]
Test Case: 614 | Input/Output: [(10 -33 20 -76) -76]
Test Case: 615 | Input/Output: [(-32 38 94 -54) -54]
Test Case: 616 | Input/Output: [(-93 -64 6 48) -93]
Test Case: 617 | Input/Output: [(96 79 -55 88) -55]
Test Case: 618 | Input/Output: [(54 -6 -29 -8) -29]
Test Case: 619 | Input/Output: [(39 -94 -74 -92) -94]
Test Case: 620 | Input/Output: [(-71 70 -85 81) -85]
Test Case: 621 | Input/Output: [(-61 72 -97 -59) -97]
Test Case: 622 | Input/Output: [(-11 14 30 20) -11]
Test Case: 623 | Input/Output: [(-23 -76 95 -96) -96]
Test Case: 624 | Input/Output: [(-57 13 -71 -24) -71]
Test Case: 625 | Input/Output: [(-98 28 88 -40) -98]
Test Case: 626 | Input/Output: [(54 55 90 11) 11]
Test Case: 627 | Input/Output: [(5 21 -60 19) -60]
Test Case: 628 | Input/Output: [(91 25 94 12) 12]
Test Case: 629 | Input/Output: [(29 2 13 -19) -19]
Test Case: 630 | Input/Output: [(61 22 62 -72) -72]
Test Case: 631 | Input/Output: [(-19 98 -4 64) -19]
Test Case: 632 | Input/Output: [(64 1 22 -79) -79]
Test Case: 633 | Input/Output: [(22 73 0 22) 0]
Test Case: 634 | Input/Output: [(-15 -87 5 -47) -87]
Test Case: 635 | Input/Output: [(-41 -65 -12 -10) -65]
Test Case: 636 | Input/Output: [(-68 -25 90 -44) -68]
Test Case: 637 | Input/Output: [(37 60 -57 -14) -57]
Test Case: 638 | Input/Output: [(-43 -38 92 27) -43]
Test Case: 639 | Input/Output: [(-79 -55 -23 23) -79]
Test Case: 640 | Input/Output: [(7 -77 29 50) -77]
Test Case: 641 | Input/Output: [(24 32 72 -10) -10]
Test Case: 642 | Input/Output: [(-76 71 80 13) -76]
Test Case: 643 | Input/Output: [(-53 -98 -73 -94) -98]
Test Case: 644 | Input/Output: [(53 -40 29 31) -40]
Test Case: 645 | Input/Output: [(-73 48 49 -79) -79]
Test Case: 646 | Input/Output: [(-27 -34 4 10) -34]
Test Case: 647 | Input/Output: [(-96 52 23 -33) -96]
Test Case: 648 | Input/Output: [(31 18 -89 93) -89]
Test Case: 649 | Input/Output: [(-25 96 77 27) -25]
Test Case: 650 | Input/Output: [(73 -79 -92 -87) -92]
Test Case: 651 | Input/Output: [(29 24 -20 -77) -77]
Test Case: 652 | Input/Output: [(-96 -78 78 24) -96]
Test Case: 653 | Input/Output: [(66 35 57 -90) -90]
Test Case: 654 | Input/Output: [(-88 76 -66 39) -88]
Test Case: 655 | Input/Output: [(-42 -79 3 -7) -79]
Test Case: 656 | Input/Output: [(17 -74 -42 -91) -91]
Test Case: 657 | Input/Output: [(68 -12 23 -4) -12]
Test Case: 658 | Input/Output: [(-92 77 -63 29) -92]
Test Case: 659 | Input/Output: [(-29 -79 51 -75) -79]
Test Case: 660 | Input/Output: [(80 -5 72 -86) -86]
Test Case: 661 | Input/Output: [(-52 -75 64 89) -75]
Test Case: 662 | Input/Output: [(-84 -47 -39 -25) -84]
Test Case: 663 | Input/Output: [(-98 22 29 49) -98]
Test Case: 664 | Input/Output: [(94 48 -87 74) -87]
Test Case: 665 | Input/Output: [(-21 -22 -46 -38) -46]
Test Case: 666 | Input/Output: [(-68 39 95 39) -68]
Test Case: 667 | Input/Output: [(61 33 84 91) 33]
Test Case: 668 | Input/Output: [(74 29 80 -97) -97]
Test Case: 669 | Input/Output: [(-7 100 100 -98) -98]
Test Case: 670 | Input/Output: [(-18 -26 -45 -33) -45]
Test Case: 671 | Input/Output: [(-47 9 -17 61) -47]
Test Case: 672 | Input/Output: [(-54 -6 -40 -67) -67]
Test Case: 673 | Input/Output: [(-35 -71 -98 62) -98]
Test Case: 674 | Input/Output: [(31 -79 44 3) -79]
Test Case: 675 | Input/Output: [(-91 13 -69 -92) -92]
Test Case: 676 | Input/Output: [(-66 -65 23 95) -66]
Test Case: 677 | Input/Output: [(-33 -44 78 -62) -62]
Test Case: 678 | Input/Output: [(-69 -91 -68 92) -91]
Test Case: 679 | Input/Output: [(28 30 -33 -42) -42]
Test Case: 680 | Input/Output: [(-11 -23 -56 4) -56]
Test Case: 681 | Input/Output: [(9 41 98 -70) -70]
Test Case: 682 | Input/Output: [(-86 -95 -86 -68) -95]
Test Case: 683 | Input/Output: [(50 -46 36 -50) -50]
Test Case: 684 | Input/Output: [(89 -23 -15 -42) -42]
Test Case: 685 | Input/Output: [(73 50 -90 1) -90]
Test Case: 686 | Input/Output: [(79 -19 -55 47) -55]
Test Case: 687 | Input/Output: [(-44 -97 10 -87) -97]
Test Case: 688 | Input/Output: [(98 83 -76 87) -76]
Test Case: 689 | Input/Output: [(100 57 0 -89) -89]
Test Case: 690 | Input/Output: [(83 -80 -3 34) -80]
Test Case: 691 | Input/Output: [(-32 -62 7 77) -62]
Test Case: 692 | Input/Output: [(-39 -67 14 2) -67]
Test Case: 693 | Input/Output: [(66 -21 15 -65) -65]
Test Case: 694 | Input/Output: [(-60 23 -61 -68) -68]
Test Case: 695 | Input/Output: [(61 -10 73 6) -10]
Test Case: 696 | Input/Output: [(-18 54 -59 -52) -59]
Test Case: 697 | Input/Output: [(-92 -40 -47 89) -92]
Test Case: 698 | Input/Output: [(-64 75 -14 -63) -64]
Test Case: 699 | Input/Output: [(70 -30 -79 83) -79]
Test Case: 700 | Input/Output: [(-5 70 51 -69) -69]
Test Case: 701 | Input/Output: [(29 99 72 73) 29]
Test Case: 702 | Input/Output: [(43 55 -17 7) -17]
Test Case: 703 | Input/Output: [(28 -95 -77 -77) -95]
Test Case: 704 | Input/Output: [(-30 -22 -98 56) -98]
Test Case: 705 | Input/Output: [(75 -20 -55 -35) -55]
Test Case: 706 | Input/Output: [(-11 44 53 37) -11]
Test Case: 707 | Input/Output: [(-21 16 28 -92) -92]
Test Case: 708 | Input/Output: [(-40 -72 -2 -20) -72]
Test Case: 709 | Input/Output: [(86 -28 83 -20) -28]
Test Case: 710 | Input/Output: [(-57 -61 15 -73) -73]
Test Case: 711 | Input/Output: [(-90 -11 51 -61) -90]
Test Case: 712 | Input/Output: [(-99 -26 -70 37) -99]
Test Case: 713 | Input/Output: [(99 7 -26 26) -26]
Test Case: 714 | Input/Output: [(57 -71 5 -5) -71]
Test Case: 715 | Input/Output: [(60 93 -5 89) -5]
Test Case: 716 | Input/Output: [(-65 100 -87 -77) -87]
Test Case: 717 | Input/Output: [(59 90 80 -62) -62]
Test Case: 718 | Input/Output: [(-73 -36 -74 -93) -93]
Test Case: 719 | Input/Output: [(23 -39 -96 -11) -96]
Test Case: 720 | Input/Output: [(-75 -66 10 -98) -98]
Test Case: 721 | Input/Output: [(62 -76 63 95) -76]
Test Case: 722 | Input/Output: [(43 54 -60 56) -60]
Test Case: 723 | Input/Output: [(-49 -68 33 34) -68]
Test Case: 724 | Input/Output: [(-43 94 -51 -54) -54]
Test Case: 725 | Input/Output: [(74 -62 -29 46) -62]
Test Case: 726 | Input/Output: [(86 -8 44 -56) -56]
Test Case: 727 | Input/Output: [(-90 15 42 -45) -90]
Test Case: 728 | Input/Output: [(19 -66 30 33) -66]
Test Case: 729 | Input/Output: [(-22 81 16 -77) -77]
Test Case: 730 | Input/Output: [(-27 -55 35 -66) -66]
Test Case: 731 | Input/Output: [(-52 19 100 15) -52]
Test Case: 732 | Input/Output: [(-10 84 -43 14) -43]
Test Case: 733 | Input/Output: [(-28 -17 -88 -78) -88]
Test Case: 734 | Input/Output: [(20 81 -88 3) -88]
Test Case: 735 | Input/Output: [(65 23 -42 24) -42]
Test Case: 736 | Input/Output: [(-66 -66 -19 10) -66]
Test Case: 737 | Input/Output: [(-81 62 27 -97) -97]
Test Case: 738 | Input/Output: [(17 -34 -64 40) -64]
Test Case: 739 | Input/Output: [(-83 14 100 -43) -83]
Test Case: 740 | Input/Output: [(-63 -98 -3 -96) -98]
Test Case: 741 | Input/Output: [(-100 57 13 23) -100]
Test Case: 742 | Input/Output: [(18 -22 -83 -43) -83]
Test Case: 743 | Input/Output: [(-87 91 -47 -28) -87]
Test Case: 744 | Input/Output: [(-64 26 -12 99) -64]
Test Case: 745 | Input/Output: [(64 -48 -44 22) -48]
Test Case: 746 | Input/Output: [(-76 6 -82 -56) -82]
Test Case: 747 | Input/Output: [(-45 45 -48 15) -48]
Test Case: 748 | Input/Output: [(42 58 -61 -25) -61]
Test Case: 749 | Input/Output: [(-42 82 50 -1) -42]
Test Case: 750 | Input/Output: [(30 -51 -54 -89) -89]
Test Case: 751 | Input/Output: [(-12 16 34 93) -12]
Test Case: 752 | Input/Output: [(35 -2 32 42) -2]
Test Case: 753 | Input/Output: [(64 89 -19 -48) -48]
Test Case: 754 | Input/Output: [(73 -28 -9 46) -28]
Test Case: 755 | Input/Output: [(8 -61 23 -1) -61]
Test Case: 756 | Input/Output: [(-18 24 -66 -89) -89]
Test Case: 757 | Input/Output: [(-75 44 -7 -65) -75]
Test Case: 758 | Input/Output: [(27 -91 -57 -10) -91]
Test Case: 759 | Input/Output: [(-80 74 26 -33) -80]
Test Case: 760 | Input/Output: [(66 -51 -82 -81) -82]
Test Case: 761 | Input/Output: [(-92 -50 -1 82) -92]
Test Case: 762 | Input/Output: [(-47 64 29 -69) -69]
Test Case: 763 | Input/Output: [(-96 -1 63 68) -96]
Test Case: 764 | Input/Output: [(47 -18 55 5) -18]
Test Case: 765 | Input/Output: [(-95 -71 -9 -9) -95]
Test Case: 766 | Input/Output: [(32 16 81 -80) -80]
Test Case: 767 | Input/Output: [(41 -46 -41 20) -46]
Test Case: 768 | Input/Output: [(-23 17 -70 46) -70]
Test Case: 769 | Input/Output: [(-83 93 -99 50) -99]
Test Case: 770 | Input/Output: [(69 -13 65 -81) -81]
Test Case: 771 | Input/Output: [(41 75 -77 63) -77]
Test Case: 772 | Input/Output: [(-85 90 -80 -5) -85]
Test Case: 773 | Input/Output: [(-11 -91 29 -19) -91]
Test Case: 774 | Input/Output: [(-83 -75 11 62) -83]
Test Case: 775 | Input/Output: [(-54 68 48 -30) -54]
Test Case: 776 | Input/Output: [(0 -55 39 39) -55]
Test Case: 777 | Input/Output: [(-49 -75 51 34) -75]
Test Case: 778 | Input/Output: [(43 76 -24 -54) -54]
Test Case: 779 | Input/Output: [(72 -15 -69 59) -69]
Test Case: 780 | Input/Output: [(73 72 -94 99) -94]
Test Case: 781 | Input/Output: [(2 81 100 -73) -73]
Test Case: 782 | Input/Output: [(42 -17 -35 8) -35]
Test Case: 783 | Input/Output: [(64 8 -95 -93) -95]
Test Case: 784 | Input/Output: [(74 -69 70 -52) -69]
Test Case: 785 | Input/Output: [(86 74 57 -62) -62]
Test Case: 786 | Input/Output: [(-14 40 -95 -41) -95]
Test Case: 787 | Input/Output: [(86 12 98 -35) -35]
Test Case: 788 | Input/Output: [(33 -14 34 -48) -48]
Test Case: 789 | Input/Output: [(80 44 98 39) 39]
Test Case: 790 | Input/Output: [(-7 37 7 70) -7]
Test Case: 791 | Input/Output: [(6 30 88 31) 6]
Test Case: 792 | Input/Output: [(21 -78 -46 56) -78]
Test Case: 793 | Input/Output: [(-12 22 -22 -1) -22]
Test Case: 794 | Input/Output: [(-46 87 -28 39) -46]
Test Case: 795 | Input/Output: [(31 96 34 -61) -61]
Test Case: 796 | Input/Output: [(4 -67 -43 -65) -67]
Test Case: 797 | Input/Output: [(-28 12 87 -44) -44]
Test Case: 798 | Input/Output: [(-33 89 -99 99) -99]
Test Case: 799 | Input/Output: [(56 74 -89 -35) -89]
Test Case: 800 | Input/Output: [(-79 -57 35 75) -79]
Test Case: 801 | Input/Output: [(-61 19 -16 -68) -68]
Test Case: 802 | Input/Output: [(86 29 54 -6) -6]
Test Case: 803 | Input/Output: [(41 50 -10 -93) -93]
Test Case: 804 | Input/Output: [(-22 75 12 -3) -22]
Test Case: 805 | Input/Output: [(41 -14 97 -86) -86]
Test Case: 806 | Input/Output: [(-90 -32 51 -13) -90]
Test Case: 807 | Input/Output: [(-42 91 -19 -40) -42]
Test Case: 808 | Input/Output: [(-96 -76 0 92) -96]
Test Case: 809 | Input/Output: [(-58 -44 29 100) -58]
Test Case: 810 | Input/Output: [(59 -35 63 71) -35]
Test Case: 811 | Input/Output: [(-36 -74 85 -88) -88]
Test Case: 812 | Input/Output: [(-76 83 17 -89) -89]
Test Case: 813 | Input/Output: [(-96 10 79 -14) -96]
Test Case: 814 | Input/Output: [(20 -67 29 30) -67]
Test Case: 815 | Input/Output: [(45 -37 -67 74) -67]
Test Case: 816 | Input/Output: [(-35 34 -38 -41) -41]
Test Case: 817 | Input/Output: [(34 67 -58 -41) -58]
Test Case: 818 | Input/Output: [(74 0 14 -46) -46]
Test Case: 819 | Input/Output: [(-4 40 -97 -89) -97]
Test Case: 820 | Input/Output: [(95 23 92 -90) -90]
Test Case: 821 | Input/Output: [(-81 -20 13 86) -81]
Test Case: 822 | Input/Output: [(-80 -8 -58 -44) -80]
Test Case: 823 | Input/Output: [(-28 80 7 -98) -98]
Test Case: 824 | Input/Output: [(100 -47 -2 54) -47]
Test Case: 825 | Input/Output: [(-56 -43 -65 37) -65]
Test Case: 826 | Input/Output: [(-71 53 44 -68) -71]
Test Case: 827 | Input/Output: [(-77 3 -7 -100) -100]
Test Case: 828 | Input/Output: [(-6 38 -51 -48) -51]
Test Case: 829 | Input/Output: [(-48 -56 -84 -10) -84]
Test Case: 830 | Input/Output: [(-92 55 -37 47) -92]
Test Case: 831 | Input/Output: [(96 14 -61 11) -61]
Test Case: 832 | Input/Output: [(-30 -88 -35 -68) -88]
Test Case: 833 | Input/Output: [(33 22 -86 32) -86]
Test Case: 834 | Input/Output: [(-91 34 72 -15) -91]
Test Case: 835 | Input/Output: [(-40 40 10 32) -40]
Test Case: 836 | Input/Output: [(72 -79 -48 -22) -79]
Test Case: 837 | Input/Output: [(48 55 -75 -45) -75]
Test Case: 838 | Input/Output: [(97 -72 95 41) -72]
Test Case: 839 | Input/Output: [(49 -8 -63 34) -63]
Test Case: 840 | Input/Output: [(-67 -5 -70 73) -70]
Test Case: 841 | Input/Output: [(-2 65 5 25) -2]
Test Case: 842 | Input/Output: [(27 37 82 -29) -29]
Test Case: 843 | Input/Output: [(32 -72 -73 -8) -73]
Test Case: 844 | Input/Output: [(-72 4 -20 -29) -72]
Test Case: 845 | Input/Output: [(80 31 58 42) 31]
Test Case: 846 | Input/Output: [(-21 92 -91 -45) -91]
Test Case: 847 | Input/Output: [(-82 68 99 80) -82]
Test Case: 848 | Input/Output: [(60 42 -31 16) -31]
Test Case: 849 | Input/Output: [(31 98 9 -24) -24]
Test Case: 850 | Input/Output: [(-22 58 -18 28) -22]
Test Case: 851 | Input/Output: [(-93 -3 -72 -47) -93]
Test Case: 852 | Input/Output: [(8 84 -96 81) -96]
Test Case: 853 | Input/Output: [(38 41 -32 4) -32]
Test Case: 854 | Input/Output: [(56 98 45 -41) -41]
Test Case: 855 | Input/Output: [(30 -93 98 -39) -93]
Test Case: 856 | Input/Output: [(-91 60 -88 -27) -91]
Test Case: 857 | Input/Output: [(0 52 3 -15) -15]
Test Case: 858 | Input/Output: [(3 -41 -58 83) -58]
Test Case: 859 | Input/Output: [(-94 12 -48 60) -94]
Test Case: 860 | Input/Output: [(15 -45 -38 -65) -65]
Test Case: 861 | Input/Output: [(4 26 92 -18) -18]
Test Case: 862 | Input/Output: [(48 74 33 -95) -95]
Test Case: 863 | Input/Output: [(-14 -99 -80 -45) -99]
Test Case: 864 | Input/Output: [(-39 -5 28 88) -39]
Test Case: 865 | Input/Output: [(48 -88 29 47) -88]
Test Case: 866 | Input/Output: [(-71 -77 -70 -32) -77]
Test Case: 867 | Input/Output: [(28 54 -13 -70) -70]
Test Case: 868 | Input/Output: [(53 24 -87 -51) -87]
Test Case: 869 | Input/Output: [(-50 49 22 -55) -55]
Test Case: 870 | Input/Output: [(71 9 -34 66) -34]
Test Case: 871 | Input/Output: [(58 3 78 25) 3]
Test Case: 872 | Input/Output: [(-27 46 46 -96) -96]
Test Case: 873 | Input/Output: [(65 -47 5 37) -47]
Test Case: 874 | Input/Output: [(-21 -41 -29 28) -41]
Test Case: 875 | Input/Output: [(-70 37 26 51) -70]
Test Case: 876 | Input/Output: [(-7 74 93 -27) -27]
Test Case: 877 | Input/Output: [(-97 2 82 74) -97]
Test Case: 878 | Input/Output: [(35 -41 99 72) -41]
Test Case: 879 | Input/Output: [(67 -65 48 56) -65]
Test Case: 880 | Input/Output: [(11 75 9 67) 9]
Test Case: 881 | Input/Output: [(-49 8 83 27) -49]
Test Case: 882 | Input/Output: [(79 48 79 -10) -10]
Test Case: 883 | Input/Output: [(19 -76 3 71) -76]
Test Case: 884 | Input/Output: [(28 -13 35 55) -13]
Test Case: 885 | Input/Output: [(5 -80 1 88) -80]
Test Case: 886 | Input/Output: [(31 -34 34 54) -34]
Test Case: 887 | Input/Output: [(7 -72 77 74) -72]
Test Case: 888 | Input/Output: [(42 76 33 48) 33]
Test Case: 889 | Input/Output: [(-61 -58 72 16) -61]
Test Case: 890 | Input/Output: [(26 -58 23 6) -58]
Test Case: 891 | Input/Output: [(-9 -43 30 61) -43]
Test Case: 892 | Input/Output: [(-37 98 -60 49) -60]
Test Case: 893 | Input/Output: [(4 7 22 100) 4]
Test Case: 894 | Input/Output: [(47 69 10 -99) -99]
Test Case: 895 | Input/Output: [(61 -59 -16 -24) -59]
Test Case: 896 | Input/Output: [(-76 -34 40 -54) -76]
Test Case: 897 | Input/Output: [(-79 -82 0 -56) -82]
Test Case: 898 | Input/Output: [(8 -13 -83 -65) -83]
Test Case: 899 | Input/Output: [(31 94 -9 -61) -61]
Test Case: 900 | Input/Output: [(96 -40 -18 62) -40]
Test Case: 901 | Input/Output: [(24 31 -58 73) -58]
Test Case: 902 | Input/Output: [(-16 -87 29 -42) -87]
Test Case: 903 | Input/Output: [(14 -76 -51 91) -76]
Test Case: 904 | Input/Output: [(30 31 4 -11) -11]
Test Case: 905 | Input/Output: [(13 -26 59 -76) -76]
Test Case: 906 | Input/Output: [(-60 -54 28 48) -60]
Test Case: 907 | Input/Output: [(37 -16 98 -7) -16]
Test Case: 908 | Input/Output: [(-31 84 -27 -73) -73]
Test Case: 909 | Input/Output: [(-93 12 30 7) -93]
Test Case: 910 | Input/Output: [(-33 -97 -42 33) -97]
Test Case: 911 | Input/Output: [(54 11 -12 67) -12]
Test Case: 912 | Input/Output: [(32 29 -18 25) -18]
Test Case: 913 | Input/Output: [(-98 -90 44 -45) -98]
Test Case: 914 | Input/Output: [(92 -7 30 31) -7]
Test Case: 915 | Input/Output: [(-62 23 17 -87) -87]
Test Case: 916 | Input/Output: [(-29 -14 39 -16) -29]
Test Case: 917 | Input/Output: [(94 -95 93 -57) -95]
Test Case: 918 | Input/Output: [(8 -67 -26 24) -67]
Test Case: 919 | Input/Output: [(-17 91 14 -38) -38]
Test Case: 920 | Input/Output: [(-88 86 -55 -26) -88]
Test Case: 921 | Input/Output: [(-38 43 45 -27) -38]
Test Case: 922 | Input/Output: [(66 -37 77 -96) -96]
Test Case: 923 | Input/Output: [(-85 -78 4 -74) -85]
Test Case: 924 | Input/Output: [(-88 -4 95 -50) -88]
Test Case: 925 | Input/Output: [(78 90 20 -16) -16]
Test Case: 926 | Input/Output: [(-12 -99 92 -81) -99]
Test Case: 927 | Input/Output: [(64 89 -30 -45) -45]
Test Case: 928 | Input/Output: [(82 78 -25 82) -25]
Test Case: 929 | Input/Output: [(5 -52 -13 -7) -52]
Test Case: 930 | Input/Output: [(6 -50 59 100) -50]
Test Case: 931 | Input/Output: [(21 -48 76 -38) -48]
Test Case: 932 | Input/Output: [(-23 51 -58 55) -58]
Test Case: 933 | Input/Output: [(-7 -37 27 34) -37]
Test Case: 934 | Input/Output: [(-85 48 35 -92) -92]
Test Case: 935 | Input/Output: [(52 -83 -65 -62) -83]
Test Case: 936 | Input/Output: [(72 -73 -73 48) -73]
Test Case: 937 | Input/Output: [(-7 86 96 -55) -55]
Test Case: 938 | Input/Output: [(-29 10 -33 26) -33]
Test Case: 939 | Input/Output: [(74 27 -43 -98) -98]
Test Case: 940 | Input/Output: [(-90 27 46 -63) -90]
Test Case: 941 | Input/Output: [(50 -43 -84 50) -84]
Test Case: 942 | Input/Output: [(58 -14 -4 75) -14]
Test Case: 943 | Input/Output: [(-6 59 68 52) -6]
Test Case: 944 | Input/Output: [(51 -39 -17 -89) -89]
Test Case: 945 | Input/Output: [(-86 -82 -65 -79) -86]
Test Case: 946 | Input/Output: [(-80 12 -74 -3) -80]
Test Case: 947 | Input/Output: [(-38 -11 14 87) -38]
Test Case: 948 | Input/Output: [(-94 73 -56 70) -94]
Test Case: 949 | Input/Output: [(19 -59 -94 52) -94]
Test Case: 950 | Input/Output: [(69 -39 -13 99) -39]
Test Case: 951 | Input/Output: [(-55 63 38 54) -55]
Test Case: 952 | Input/Output: [(-85 -70 4 9) -85]
Test Case: 953 | Input/Output: [(-36 46 61 79) -36]
Test Case: 954 | Input/Output: [(8 13 6 67) 6]
Test Case: 955 | Input/Output: [(84 42 45 70) 42]
Test Case: 956 | Input/Output: [(-44 -16 -61 39) -61]
Test Case: 957 | Input/Output: [(87 -30 -47 -62) -62]
Test Case: 958 | Input/Output: [(23 22 63 93) 22]
Test Case: 959 | Input/Output: [(-89 -16 28 -46) -89]
Test Case: 960 | Input/Output: [(-77 -90 90 82) -90]
Test Case: 961 | Input/Output: [(76 -22 -84 -6) -84]
Test Case: 962 | Input/Output: [(73 -67 9 -32) -67]
Test Case: 963 | Input/Output: [(30 45 -50 -21) -50]
Test Case: 964 | Input/Output: [(-43 79 32 -46) -46]
Test Case: 965 | Input/Output: [(9 -89 42 8) -89]
Test Case: 966 | Input/Output: [(-14 75 45 -95) -95]
Test Case: 967 | Input/Output: [(85 41 -30 -34) -34]
Test Case: 968 | Input/Output: [(61 80 -26 55) -26]
Test Case: 969 | Input/Output: [(-57 46 -77 21) -77]
Test Case: 970 | Input/Output: [(-28 53 -31 -99) -99]
Test Case: 971 | Input/Output: [(9 37 86 86) 9]
Test Case: 972 | Input/Output: [(-12 41 -79 -19) -79]
Test Case: 973 | Input/Output: [(-85 -67 -74 82) -85]
Test Case: 974 | Input/Output: [(7 -41 -36 50) -41]
Test Case: 975 | Input/Output: [(-57 0 -59 69) -59]
Test Case: 976 | Input/Output: [(-59 70 -4 -1) -59]
Test Case: 977 | Input/Output: [(-37 60 -56 -67) -67]
Test Case: 978 | Input/Output: [(-15 -79 -90 41) -90]
Test Case: 979 | Input/Output: [(-75 16 -19 -99) -99]
Test Case: 980 | Input/Output: [(38 5 -5 57) -5]
Test Case: 981 | Input/Output: [(84 -95 97 85) -95]
Test Case: 982 | Input/Output: [(2 0 53 -3) -3]
Test Case: 983 | Input/Output: [(-57 4 66 5) -57]
Test Case: 984 | Input/Output: [(-52 -54 -82 100) -82]
Test Case: 985 | Input/Output: [(26 -68 -82 -92) -92]
Test Case: 986 | Input/Output: [(-29 -40 42 75) -40]
Test Case: 987 | Input/Output: [(63 67 -30 -48) -48]
Test Case: 988 | Input/Output: [(15 -42 74 -97) -97]
Test Case: 989 | Input/Output: [(-74 82 -68 -88) -88]
Test Case: 990 | Input/Output: [(85 -87 -93 -31) -93]
Test Case: 991 | Input/Output: [(-92 -99 -100 -92) -100]
Test Case: 992 | Input/Output: [(50 77 -38 91) -38]
Test Case: 993 | Input/Output: [(-57 92 -4 24) -57]
Test Case: 994 | Input/Output: [(-30 -51 -8 -100) -100]
Test Case: 995 | Input/Output: [(60 -76 93 78) -76]
Test Case: 996 | Input/Output: [(26 83 -59 -72) -72]
Test Case: 997 | Input/Output: [(18 -49 50 8) -49]
Test Case: 998 | Input/Output: [(37 -53 33 67) -53]
Test Case: 999 | Input/Output: [(-15 -83 -7 -25) -83]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -8 -127 -78 112 -111 -45 116 72 30 -75 -50 105 44 -58 120 95
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[29 29 -38 29] -38] [[-70 -70 -70 46] -70] [[-67 -67 -66 -67] -67] [[88 -72 88 88] -72] [[-26 -26 -26 -26] -26] [[-42 76 76 76] -42] [[-9 -9 -9 100] -9] [[15 81 15 15] 15] [[6 -54 -54 -54] -54] [[-49 -49 -49 36] -49] [(45 45 45 45) 45] [(83 83 83 83) 83] [(-82 -82 -82 -82) -82] [(84 84 84 84) 84] [(-68 -68 -68 -68) -68] [(59 87 40 33) 33] [(92 23 83 12) 12] [(42 31 41 7) 7] [(97 11 10 8) 8] [(99 72 88 3) 3] [(26 66 9 78) 9] [(97 77 96 74) 74] [(22 77 38 46) 22] [(100 94 8 26) 8] [(18 19 19 80) 18] [(12 84 40 40) 12] [(56 28 97 48) 28] [(11 42 81 44) 11] [(55 9 78 47) 9] [(76 91 16 6) 6] [(3 20 51 78) 3] [(91 68 81 77) 68] [(45 56 57 17) 17] [(30 53 63 94) 30] [(66 25 2 20) 2] [(61 55 29 31) 29] [(35 -85 90 -94) -94] [(-83 -93 95 73) -93] [(19 81 37 -2) -2] [(-19 -69 19 72) -69] [(-80 -7 3 5) -80] [(-15 -12 65 -81) -81] [(-45 85 62 -52) -52] [(3 -42 -6 -71) -71] [(-21 46 -56 -84) -84] [(34 24 -15 47) -15] [(100 23 -84 96) -84] [(8 -92 1 -62) -92] [(17 -32 -82 31) -82] [(-11 -54 25 -87) -87] [(-21 -83 81 -97) -97] [(92 3 42 85) 3] [(-4 -49 -3 63) -49] [(-15 -51 78 -26) -51] [(0 93 -32 28) -32] [(37 -70 -28 -71) -71] [(33 -39 -72 -85) -85] [(21 39 -11 -3) -11] [(15 54 -86 -85) -86] [(-96 34 97 44) -96] [(-69 -52 51 -15) -69] [(-41 -15 -56 49) -56] [(18 87 42 -72) -72] [(23 -40 -2 -73) -73] [(-5 4 -64 89) -64] [(-98 -12 4 87) -98] [(-68 91 45 15) -68] [(-36 -61 -21 62) -61] [(-71 -81 87 100) -81] [(23 -83 65 58) -83] [(91 -72 56 -9) -72] [(56 79 -18 92) -18] [(83 47 40 -81) -81] [(-77 35 72 -50) -77] [(-14 -70 -81 84) -81] [(-13 -83 84 98) -83] [(74 -3 62 -84) -84] [(93 84 -52 89) -52] [(-25 -45 -32 -96) -96] [(-91 92 64 96) -91] [(-11 94 39 48) -11] [(-22 -43 -24 -23) -43] [(-60 83 77 15) -60] [(-27 90 72 -14) -27] [(-47 56 99 -71) -71] [(-15 45 70 16) -15] [(1 -2 38 -4) -4] [(-92 -37 2 -70) -92] [(-14 31 48 -19) -19] [(-100 -98 -93 -24) -100] [(-76 79 -90 -36) -90] [(13 55 85 39) 13] [(93 38 -98 42) -98] [(-90 96 -7 -32) -90] [(-50 75 -16 88) -50])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_frominteger) (boolean_swap integer_yank) integer_lte integer_max integer_rot boolean_frominteger in4 exec_y_when_autoconstructing (print_integer exec_dup_items boolean_stackdepth boolean_dup_times integer_dup_times exec_while (integer_sub boolean_xor in4 boolean_not) in1 exec_do*times (integer_div boolean_yank boolean_empty) exec_if (in4 exec_yank exec_dup_times (exec_pop (boolean_shove integer_fromboolean print_boolean integer_yank exec_while ()))) ()))
Lexicase best errors: [1 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_frominteger) (boolean_swap integer_yank) integer_lte integer_max integer_rot boolean_frominteger in4 exec_y_when_autoconstructing (print_integer exec_dup_items boolean_stackdepth boolean_dup_times integer_dup_times exec_while (integer_sub boolean_xor in4 boolean_not) in1 exec_do*times (integer_div boolean_yank boolean_empty) exec_if (in4 exec_yank exec_dup_times (exec_pop (boolean_shove integer_fromboolean print_boolean integer_yank exec_while ()))) ()))
Zero cases best errors: [1 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 5 5 5 5 5 14 5 5 5)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (3 5 5 5 5 5 14 5 5 5)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction tagged_790} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_dup} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_rot} {:close 0, :instruction tag_boolean_922} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction -6} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_lt})
Best program: (boolean_and exec_eq integer_yank integer_empty exec_swap (integer_yankdup exec_do*count (exec_do*times (exec_s (boolean_flush exec_k (exec_noop boolean_invert_first_then_and) (integer_gt boolean_not) exec_s_when_autoconstructing (exec_empty print_integer in4 print_integer) (exec_k (exec_y (tagged_790 exec_empty integer_empty exec_dup () print_integer) integer_gte boolean_not) (integer_mult exec_do*while () exec_rot (integer_mod integer_min integer_yank) (integer_rot) (tag_boolean_922 exec_stackdepth integer_shove integer_max) exec_dup_items exec_empty) integer_shove integer_div integer_swap -6) (boolean_not)) (integer_lt) ()))) ())
Errors: [1 0 1 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 69
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 9.943
Median total errors in population: 10
Error averages by case: (0.997 0.995 0.995 0.995 0.995 0.995 0.986 0.995 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.14
Average program size in population (points): 69.111
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475219
--- Timings ---
Current time: 1559584530011 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.9 seconds, 35.1%
Fitness Testing:      1.6 seconds, 60.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 622
Test mean error for best: 0.62200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -66                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 40                 
Correct output: 12                  | Program output: 83                 
Correct output: 7                   | Program output: 41                 
Correct output: 8                   | Program output: 10                 
Correct output: 3                   | Program output: 88                 
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 96                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 97                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 81                 
Correct output: 17                  | Program output: 57                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: 90                 
Correct output: -93                 | Program output: 95                 
Correct output: -2                  | Program output: 37                 
Correct output: -69                 | Program output: 19                 
Correct output: -80                 | Program output: 3                  
Correct output: -81                 | Program output: 65                 
Correct output: -52                 | Program output: 62                 
Correct output: -71                 | Program output: -6                 
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: 25                 
Correct output: -97                 | Program output: 81                 
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: -3                 
Correct output: -51                 | Program output: 78                 
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -28                
Correct output: -85                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 97                 
Correct output: -69                 | Program output: 51                 
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: 42                 
Correct output: -73                 | Program output: -2                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 4                  
Correct output: -68                 | Program output: 45                 
Correct output: -61                 | Program output: -21                
Correct output: -81                 | Program output: 87                 
Correct output: -83                 | Program output: 65                 
Correct output: -72                 | Program output: 56                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 40                 
Correct output: -77                 | Program output: 72                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: 84                 
Correct output: -84                 | Program output: 62                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -32                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: 77                 
Correct output: -27                 | Program output: 72                 
Correct output: -71                 | Program output: 99                 
Correct output: -15                 | Program output: 70                 
Correct output: -4                  | Program output: 38                 
Correct output: -92                 | Program output: 2                  
Correct output: -19                 | Program output: 48                 
Correct output: -100                | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_noop} {:close 1, :instruction -32} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline})
Lexicase best program: (exec_do*range (integer_mult exec_yankdup exec_eq) integer_dup_times exec_while (boolean_invert_first_then_and boolean_eq boolean_invert_second_then_and exec_shove () exec_do*times () boolean_dup_times) exec_while (integer_empty exec_yank integer_flush boolean_frominteger exec_dup_times () integer_dup print_boolean) print_integer exec_do*range () exec_eq integer_pop exec_dup_times () boolean_xor integer_mod integer_rot exec_s (in2 exec_when (integer_yank exec_k_when_autoconstructing (exec_eq boolean_yank) (boolean_yankdup) boolean_yankdup print_boolean exec_when (boolean_and) exec_eq exec_do*while () exec_do*range (integer_dec exec_noop))) (-32) (boolean_rot integer_lte exec_yank integer_lte boolean_yankdup integer_stackdepth exec_if (exec_do*while (exec_while (integer_empty boolean_invert_second_then_and boolean_invert_first_then_and) in3 print_integer) integer_max boolean_flush) (boolean_eq exec_y () print_integer boolean_yank boolean_yankdup exec_dup_items integer_lt exec_k () (boolean_dup_times integer_div exec_while () print_exec () exec_k (print_boolean) (integer_gte exec_do*while () exec_dup_times () integer_inc integer_add print_newline)))))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 113
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 3, :instruction exec_noop} {:close 1, :instruction -32} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_div} {:close 1, :instruction exec_while} {:close 1, :instruction print_exec} {:close 0, :instruction exec_k} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline})
Zero cases best program: (exec_do*range (integer_mult exec_yankdup exec_eq) integer_dup_times exec_while (boolean_invert_first_then_and boolean_eq boolean_invert_second_then_and exec_shove () exec_do*times () boolean_dup_times) exec_while (integer_empty exec_yank integer_flush boolean_frominteger exec_dup_times () integer_dup print_boolean) print_integer exec_do*range () exec_eq integer_pop exec_dup_times () boolean_xor integer_mod integer_rot exec_s (in2 exec_when (integer_yank exec_k_when_autoconstructing (exec_eq boolean_yank) (boolean_yankdup) boolean_yankdup print_boolean exec_when (boolean_and) exec_eq exec_do*while () exec_do*range (integer_dec exec_noop))) (-32) (boolean_rot integer_lte exec_yank integer_lte boolean_yankdup integer_stackdepth exec_if (exec_do*while (exec_while (integer_empty boolean_invert_second_then_and boolean_invert_first_then_and) in3 print_integer) integer_max boolean_flush) (boolean_eq exec_y () print_integer boolean_yank boolean_yankdup exec_dup_items integer_lt exec_k () (boolean_dup_times integer_div exec_while () print_exec () exec_k (print_boolean) (integer_gte exec_do*while () exec_dup_times () integer_inc integer_add print_newline)))))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 113
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 401 203 157 403 398 159 251 158 397)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (157 401 203 157 403 398 159 251 158 397)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction tag_boolean_268} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_566} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_k} {:close 2, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 1, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tagged_578} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction print_integer} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_swap} {:close 0, :instruction tagged_878} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_73} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*times} {:close 0, :instruction -58} {:close 0, :instruction exec_do*times})
Best program: (exec_stackdepth boolean_flush integer_div exec_do*range (in3 print_integer) boolean_stackdepth in1 boolean_pop boolean_flush boolean_not boolean_or exec_if (exec_k (integer_yankdup boolean_and) (integer_inc tag_boolean_268 integer_gte integer_gte exec_noop tagged_566 exec_dup_times (integer_fromboolean tag_boolean_509 boolean_yank integer_sub exec_s_when_autoconstructing () (in4 exec_k (integer_dup_times) () integer_mult in4) (exec_dup_items exec_y_when_autoconstructing () tagged_578 exec_do*count (exec_do*times (exec_stackdepth integer_eq boolean_invert_first_then_and) integer_flush exec_k (boolean_eq) (boolean_dup_items boolean_invert_first_then_and print_integer)) integer_pop)) integer_add boolean_yankdup exec_yank exec_empty exec_swap (in2 exec_yankdup integer_mult exec_k (exec_s_when_autoconstructing (boolean_swap integer_rot exec_k (exec_dup_times (integer_fromboolean boolean_swap) tagged_878 integer_div integer_dec) (integer_gte boolean_yankdup) integer_gt integer_div tagged_73 exec_do*while (integer_gte) boolean_xor) (print_integer exec_if (exec_do*times () -58 exec_do*times ()) ()) ()) ()) ())) ())
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 80
Size: 112
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.316
Median total errors in population: 6
Error averages by case: (0.843 0.599 0.797 0.843 0.597 0.602 0.841 0.749 0.842 0.603)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.065
Average program size in population (points): 93.107
Average percent parens in population: 0.252
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1173324
--- Timings ---
Current time: 1559584532706 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 41.8%
Fitness Testing:      2.4 seconds, 39.3%
Report:               1.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 25                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: 46                 
Correct output: -15                 | Program output: 24                 
Correct output: -84                 | Program output: 23                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 93                 
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: 39                 
Correct output: -86                 | Program output: 54                 
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 4                  
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 79                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: 79                 
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 38                 
Correct output: -90                 | Program output: 96                 
Correct output: -50                 | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_fromboolean tag_boolean_509 boolean_yank integer_sub integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (boolean_eq in2 in1) (exec_while ()))))) ())) () ()))
Lexicase best errors: [0 1 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 66
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_509} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_fromboolean tag_boolean_509 boolean_yank integer_sub integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (boolean_eq in2 in1) (exec_while ()))))) ())) () ()))
Zero cases best errors: [0 1 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 66
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 13 1 384 1000 384 440 14 443 841)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (196 13 1 384 0 384 440 14 443 841)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()))
Errors: [0 1 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 42
Size: 68
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 7.284
Median total errors in population: 7
Error averages by case: (0.804 0.987 0.999 0.616 1.0 0.616 0.56 0.986 0.557 0.159)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 60.914
Average program size in population (points): 83.487
Average percent parens in population: 0.271
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.883
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1715303
--- Timings ---
Current time: 1559584535694 milliseconds
Total Time:           9.0 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 51.1%
Fitness Testing:      2.9 seconds, 32.8%
Report:               1.3 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 25                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: 46                 
Correct output: -15                 | Program output: 24                 
Correct output: -84                 | Program output: 23                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 93                 
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: 39                 
Correct output: -86                 | Program output: 54                 
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 4                  
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 79                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 84                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: 79                 
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 38                 
Correct output: -90                 | Program output: 96                 
Correct output: -50                 | Program output: 75                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()))
Lexicase best errors: [1 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.382
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()))
Zero cases best errors: [1 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.382
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 272 272 236 272 273 273 272 235 509)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (101 272 272 236 272 273 273 272 235 509)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()))
Errors: [1 0 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 42
Size: 68
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 7.285
Median total errors in population: 8
Error averages by case: (0.899 0.728 0.728 0.764 0.728 0.727 0.727 0.728 0.765 0.491)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.348
Average program size in population (points): 77.65
Average percent parens in population: 0.319
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.076
Median age in population: 4.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2146962
--- Timings ---
Current time: 1559584538357 milliseconds
Total Time:          11.6 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 56.0%
Fitness Testing:      3.4 seconds, 28.8%
Report:               1.7 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: 6                  
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: 35                 
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: 3                  
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: 8                  
Correct output: -82                 | Program output: 17                 
Correct output: -87                 | Program output: -11                
Correct output: -97                 | Program output: -21                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -15                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: 37                 
Correct output: -85                 | Program output: 33                 
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -41                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: 23                 
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: 91                 
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -14                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: 74                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -25                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_277} {:close 0, :instruction integer_mod} {:close 0, :instruction 18} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (integer_min integer_yank exec_while (integer_yankdup boolean_yankdup exec_dup_times () exec_pop () integer_dup exec_y_when_autoconstructing ()) exec_do*times (tag_integer_277 integer_mod 18 exec_do*range () integer_dup_items integer_empty integer_yankdup) integer_rot in4 in1 print_integer exec_s_when_autoconstructing (integer_gte exec_empty integer_fromboolean boolean_shove integer_empty exec_do*count (boolean_dup exec_stackdepth integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())
Lexicase best errors: [1 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_277} {:close 0, :instruction integer_mod} {:close 0, :instruction 18} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (integer_min integer_yank exec_while (integer_yankdup boolean_yankdup exec_dup_times () exec_pop () integer_dup exec_y_when_autoconstructing ()) exec_do*times (tag_integer_277 integer_mod 18 exec_do*range () integer_dup_items integer_empty integer_yankdup) integer_rot in4 in1 print_integer exec_s_when_autoconstructing (integer_gte exec_empty integer_fromboolean boolean_shove integer_empty exec_do*count (boolean_dup exec_stackdepth integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())
Zero cases best errors: [1 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 584 46 882 79 38 879 79 585 71)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (219 584 46 882 79 38 879 79 585 71)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_integer_277} {:close 0, :instruction integer_mod} {:close 0, :instruction 18} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (integer_min integer_yank exec_while (integer_yankdup boolean_yankdup exec_dup_times () exec_pop () integer_dup exec_y_when_autoconstructing ()) exec_do*times (tag_integer_277 integer_mod 18 exec_do*range () integer_dup_items integer_empty integer_yankdup) integer_rot in4 in1 print_integer exec_s_when_autoconstructing (integer_gte exec_empty integer_fromboolean boolean_shove integer_empty exec_do*count (boolean_dup exec_stackdepth integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop exec_do*times (in1) exec_while ()) () ())
Errors: [1 1 1 0 0 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.538
Median total errors in population: 6
Error averages by case: (0.781 0.416 0.954 0.118 0.921 0.962 0.121 0.921 0.415 0.929)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.844
Average program size in population (points): 73.17
Average percent parens in population: 0.364
Minimum age in population: 4.0
Maximum age in population: 7.375
Average age in population: 5.867
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2471078
--- Timings ---
Current time: 1559584542004 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.0 seconds, 61.0%
Fitness Testing:      3.7 seconds, 25.0%
Report:               2.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (boolean_yank in1) (exec_while ())) ()) ()) ())) () ()))
Lexicase best errors: [0 0 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.434
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (boolean_yank in1) (exec_while ())) ()) ()) ())) () ()))
Zero cases best errors: [0 0 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.434
--- Lexicase Population Statistics ---
Count of elite individuals by case: (293 429 767 171 423 334 134 433 335 293)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (293 429 767 171 423 334 134 433 335 293)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (in1 print_newline boolean_swap -100 boolean_dup_times exec_noop integer_fromboolean exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ()))) ())) () ()))
Errors: [0 0 0 1 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 67
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 6.388
Median total errors in population: 7
Error averages by case: (0.707 0.571 0.233 0.829 0.577 0.666 0.866 0.567 0.665 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.563
Average program size in population (points): 70.513
Average percent parens in population: 0.327
Minimum age in population: 5.0
Maximum age in population: 8.9375
Average age in population: 6.9980625
Median age in population: 7.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2999239
--- Timings ---
Current time: 1559584544530 milliseconds
Total Time:          17.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 60.4%
Fitness Testing:      4.2 seconds, 23.4%
Report:               2.8 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 40                 
Correct output: 12                  | Program output: 83                 
Correct output: 7                   | Program output: 41                 
Correct output: 8                   | Program output: 10                 
Correct output: 3                   | Program output: 88                 
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 96                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 97                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 81                 
Correct output: 17                  | Program output: 57                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: 37                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 62                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 97                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: 42                 
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 45                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 40                 
Correct output: -77                 | Program output: 72                 
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 77                 
Correct output: -27                 | Program output: 72                 
Correct output: -71                 | Program output: 99                 
Correct output: -15                 | Program output: 70                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: 48                 
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_dup_times in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()) ())) () ()))
Lexicase best errors: [0 1 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.414
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_dup_times in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()) ())) () ()))
Zero cases best errors: [0 1 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.414
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 539 196 197 106 10 913 613 10 739)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (179 539 196 197 106 10 913 613 10 739)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()) ()) ()) ())) () ()) ())
Errors: [0 1 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 53
Size: 94
Percent parens: 0.436
--- Population Statistics ---
Average total errors in population: 6.498
Median total errors in population: 6
Error averages by case: (0.821 0.461 0.804 0.803 0.894 0.99 0.087 0.387 0.99 0.261)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.162
Average program size in population (points): 68.927
Average percent parens in population: 0.344
Minimum age in population: 6.0
Maximum age in population: 10.09375
Average age in population: 8.4025625
Median age in population: 8.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3399667
--- Timings ---
Current time: 1559584547069 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.6 seconds, 61.9%
Fitness Testing:      4.5 seconds, 22.4%
Report:               3.1 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 40                 
Correct output: 12                  | Program output: 83                 
Correct output: 7                   | Program output: 41                 
Correct output: 8                   | Program output: 10                 
Correct output: 3                   | Program output: 88                 
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 96                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 97                 
Correct output: 11                  | Program output: 81                 
Correct output: 9                   | Program output: 78                 
Correct output: 6                   | Program output: 16                 
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 81                 
Correct output: 17                  | Program output: 57                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: 37                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: 62                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 97                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: 42                 
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 45                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 40                 
Correct output: -77                 | Program output: 72                 
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 77                 
Correct output: -27                 | Program output: 72                 
Correct output: -71                 | Program output: 99                 
Correct output: -15                 | Program output: 70                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: 48                 
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 85                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap boolean_pop integer_yank integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()))) ())) () ())) ()) ())) () ())
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap boolean_pop integer_yank integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()))) ())) () ())) ()) ())) () ())
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 308 413 889 267 190 406 215 405 406)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (215 308 413 889 267 190 406 215 405 406)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ())))) ())) () ()) ()) ()) ())) () ()) ())
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 94
Percent parens: 0.436
--- Population Statistics ---
Average total errors in population: 6.286
Median total errors in population: 7
Error averages by case: (0.785 0.692 0.587 0.111 0.733 0.81 0.594 0.785 0.595 0.594)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.707
Average program size in population (points): 76.07
Average percent parens in population: 0.356
Minimum age in population: 7.625
Maximum age in population: 11.75
Average age in population: 9.8793125
Median age in population: 9.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3837878
--- Timings ---
Current time: 1559584549669 milliseconds
Total Time:          22.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.4 seconds, 62.7%
Fitness Testing:      5.0 seconds, 21.8%
Report:               3.4 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 574
Test mean error for best: 0.57400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: -30                
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction -30} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (integer_yank) (-30 in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (-100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ()) ()))) ())) () ())) ()) ())) () ()))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 95
Percent parens: 0.411
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction -30} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (integer_yank) (-30 in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (-100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ()) ()))) ())) () ())) ()) ())) () ()))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 95
Percent parens: 0.411
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 906 3 266 583 268 16 904 268 12)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (3 906 3 266 583 268 16 904 268 12)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction -30} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (integer_yank) (-30 in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()))) ())) () ())) ()) ())) () ()))
Errors: [1 0 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 73
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 6.771
Median total errors in population: 7
Error averages by case: (0.997 0.094 0.997 0.734 0.417 0.732 0.984 0.096 0.732 0.988)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.36
Average program size in population (points): 81.004
Average percent parens in population: 0.427
Minimum age in population: 9.71875
Maximum age in population: 13.0234375
Average age in population: 11.7898515625
Median age in population: 11.890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4259366
--- Timings ---
Current time: 1559584552368 milliseconds
Total Time:          25.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.2 seconds, 63.4%
Fitness Testing:      5.4 seconds, 21.3%
Report:               3.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 591
Test mean error for best: 0.59100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 81                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 87                 
Correct output: 12                  | Program output: 23                 
Correct output: 7                   | Program output: 31                 
Correct output: 8                   | Program output: 11                 
Correct output: 3                   | Program output: 72                 
Correct output: 9                   | Program output: 66                 
Correct output: 74                  | Program output: 77                 
Correct output: 22                  | Program output: 77                 
Correct output: 8                   | Program output: 94                 
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 84                 
Correct output: 28                  | Program output: 28                 
Correct output: 11                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 91                 
Correct output: 3                   | Program output: 20                 
Correct output: 68                  | Program output: 68                 
Correct output: 17                  | Program output: 56                 
Correct output: 30                  | Program output: 53                 
Correct output: 2                   | Program output: 0                  
Correct output: 29                  | Program output: 55                 
Correct output: -94                 | Program output: 6                  
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -1                 
Correct output: -81                 | Program output: -1                 
Correct output: -52                 | Program output: 85                 
Correct output: -71                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: 1                  
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -1                 
Correct output: -97                 | Program output: -1                 
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -1                 
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -28                
Correct output: -85                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 34                 
Correct output: -69                 | Program output: -1                 
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: 4                  
Correct output: -73                 | Program output: -2                 
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 91                 
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: 41                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 8                  
Correct output: -77                 | Program output: 35                 
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: 60                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 92                 
Correct output: -11                 | Program output: 94                 
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: 83                 
Correct output: -27                 | Program output: 90                 
Correct output: -71                 | Program output: 56                 
Correct output: -15                 | Program output: 45                 
Correct output: -4                  | Program output: 37                 
Correct output: -92                 | Program output: -36                
Correct output: -19                 | Program output: 31                 
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 55                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction -30} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (integer_yank) (-30 in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()))) ())) () ())) ()) ())) () ()) () ())) ()) ())) () ()))
Lexicase best errors: [0 0 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 100
Percent parens: 0.440
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yank} {:close 0, :instruction -30} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (integer_yank) (-30 in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_y_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod integer_mod in4 integer_yank exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (exec_y (boolean_swap -100 boolean_dup_times boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()))) ())) () ())) ()) ())) () ()) () ())) ()) ())) () ()))
Zero cases best errors: [0 0 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 100
Percent parens: 0.440
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 899 227 266 579 44 266 448 700 266)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (220 899 227 266 579 44 266 448 700 266)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction -100} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items integer_inc in2 exec_s_when_autoconstructing (in3 integer_dup_times) (integer_swap exec_rot () (integer_fromboolean integer_inc in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) integer_add exec_while (print_newline boolean_swap -100 boolean_dup_times exec_noop integer_add exec_do*count () exec_s (boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) (exec_k_when_autoconstructing (in2 in1) (exec_while ())) ()))) ())) () ()) ()) ()) ())) () ()) ()) ()) ())
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 107
Percent parens: 0.430
--- Population Statistics ---
Average total errors in population: 6.085
Median total errors in population: 6
Error averages by case: (0.78 0.101 0.773 0.734 0.421 0.956 0.734 0.552 0.3 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.756
Average program size in population (points): 82.77
Average percent parens in population: 0.411
Minimum age in population: 11.515625
Maximum age in population: 14.96875
Average age in population: 13.32559375
Median age in population: 13.3828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4561719
--- Timings ---
Current time: 1559584554960 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 64.0%
Fitness Testing:      5.8 seconds, 20.6%
Report:               4.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 599
Test mean error for best: 0.59900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: 6                  
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: 3                  
Correct output: -84                 | Program output: -21                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: 1                  
Correct output: -82                 | Program output: 17                 
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: 37                 
Correct output: -85                 | Program output: 33                 
Correct output: -11                 | Program output: 21                 
Correct output: -86                 | Program output: 15                 
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -41                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: 23                 
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -14                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: 93                 
Correct output: -96                 | Program output: -25                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: 1                  
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 93                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_shove (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Lexicase best errors: [1 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.387
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_shove (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Zero cases best errors: [1 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.387
--- Lexicase Population Statistics ---
Count of elite individuals by case: (300 378 2 2 352 12 2 519 2 435)
Population mean number of elite cases: 2.00
Count of perfect (error zero) individuals by case: (300 378 2 2 352 12 2 519 2 435)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_shove (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Errors: [1 1 0 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 75
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 7.996
Median total errors in population: 8
Error averages by case: (0.7 0.622 0.998 0.998 0.648 0.988 0.998 0.481 0.998 0.565)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.794
Average program size in population (points): 82.623
Average percent parens in population: 0.421
Minimum age in population: 13.203125
Maximum age in population: 16.271484375
Average age in population: 14.8353828125
Median age in population: 14.89453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4973125
--- Timings ---
Current time: 1559584557544 milliseconds
Total Time:          30.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 64.1%
Fitness Testing:      6.2 seconds, 20.3%
Report:               4.7 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -66                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: 35                 
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: -6                 
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: 8                  
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -11                
Correct output: -97                 | Program output: -21                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -3                 
Correct output: -51                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -28                
Correct output: -85                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: -2                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -21                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: 91                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: 74                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -32                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_do*times (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.387
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_do*times (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.387
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 183 111 297 432 231 852 428 432 293)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (432 183 111 297 432 231 852 428 432 293)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_do*times (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Errors: [0 0 1 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 46
Size: 75
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 6.309
Median total errors in population: 5
Error averages by case: (0.568 0.817 0.889 0.703 0.568 0.769 0.148 0.572 0.568 0.707)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.759
Average program size in population (points): 75.258
Average percent parens in population: 0.393
Minimum age in population: 14.25
Maximum age in population: 17.78125
Average age in population: 16.1519130859375
Median age in population: 16.3349609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 276
Genome diversity (% unique genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5459761
--- Timings ---
Current time: 1559584560340 milliseconds
Total Time:          33.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.5 seconds, 64.3%
Fitness Testing:      6.7 seconds, 20.2%
Report:               5.1 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output:                    
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output:                    
Correct output: 83                  | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output:                    
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 74                  | Program output:                    
Correct output: 22                  | Program output:                    
Correct output: 8                   | Program output:                    
Correct output: 18                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 28                  | Program output:                    
Correct output: 11                  | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 3                   | Program output:                    
Correct output: 68                  | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 30                  | Program output:                    
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output:                    
Correct output: -94                 | Program output: -85                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output:                    
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -12                
Correct output: -52                 | Program output:                    
Correct output: -71                 | Program output: -42                
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -54                
Correct output: -97                 | Program output: -83                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -70                
Correct output: -85                 | Program output: -39                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output:                    
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output:                    
Correct output: -73                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output:                    
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output:                    
Correct output: -77                 | Program output:                    
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -3                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -45                
Correct output: -91                 | Program output:                    
Correct output: -11                 | Program output:                    
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output:                    
Correct output: -27                 | Program output:                    
Correct output: -71                 | Program output:                    
Correct output: -15                 | Program output:                    
Correct output: -4                  | Program output: -2                 
Correct output: -92                 | Program output: -37                
Correct output: -19                 | Program output:                    
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output:                    
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_yank print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_yank print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 276 810 21 244 244 564 810 810 829)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (18 276 810 21 244 244 564 810 810 829)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_yank print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 45
Size: 69
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 5.374
Median total errors in population: 5
Error averages by case: (0.982 0.724 0.19 0.979 0.756 0.756 0.436 0.19 0.19 0.171)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.171
Average program size in population (points): 76.941
Average percent parens in population: 0.387
Minimum age in population: 15.91796875
Maximum age in population: 18.9677734375
Average age in population: 17.73032470703125
Median age in population: 17.712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.135
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6104095
--- Timings ---
Current time: 1559584563394 milliseconds
Total Time:          36.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.3 seconds, 64.1%
Fitness Testing:      7.3 seconds, 20.1%
Report:               5.6 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 542
Test mean error for best: 0.54200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -66                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 59                 
Correct output: 12                  | Program output: 92                 
Correct output: 7                   | Program output: 42                 
Correct output: 8                   | Program output: 97                 
Correct output: 3                   | Program output: 99                 
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 97                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 100                
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 56                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 55                 
Correct output: 6                   | Program output: 76                 
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 91                 
Correct output: 17                  | Program output: 45                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 66                 
Correct output: 29                  | Program output: 61                 
Correct output: -94                 | Program output: 35                 
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: 19                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -15                
Correct output: -52                 | Program output: -45                
Correct output: -71                 | Program output: -6                 
Correct output: -84                 | Program output: -56                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: 8                  
Correct output: -82                 | Program output: -82                
Correct output: -87                 | Program output: -11                
Correct output: -97                 | Program output: -21                
Correct output: 3                   | Program output: 92                 
Correct output: -49                 | Program output: -3                 
Correct output: -51                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -28                
Correct output: -85                 | Program output: -72                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -56                
Correct output: -72                 | Program output: 18                 
Correct output: -73                 | Program output: -2                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -21                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: 91                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: 83                 
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: 74                 
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -32                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -24                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: 1                  
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -14                
Correct output: -100                | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -7                 
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_swap exec_empty boolean_dup_items) integer_swap exec_empty boolean_dup_items) (boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))) () ()))) () ()))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (in3 exec_shove (exec_rot () (exec_if (exec_shove (integer_mod in4 integer_yank print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_swap exec_empty boolean_dup_items) integer_swap exec_empty boolean_dup_items) (boolean_invert_first_then_and boolean_xor integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))) () ()))) () ()))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 117 900 451 130 62 262 725 428 117)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (427 117 900 451 130 62 262 725 428 117)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (in3 exec_do*times (print_integer) in3 integer_fromboolean) (exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor boolean_dup integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ()) ()) ()) () ())) () ()))
Errors: [1 0 0 0 0 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 46
Size: 75
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 6.381
Median total errors in population: 6
Error averages by case: (0.573 0.883 0.1 0.549 0.87 0.938 0.738 0.275 0.572 0.883)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.97
Average program size in population (points): 74.035
Average percent parens in population: 0.364
Minimum age in population: 17.0517578125
Maximum age in population: 20.60302734375
Average age in population: 18.90559399414062
Median age in population: 18.9140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.007
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7024819
--- Timings ---
Current time: 1559584566471 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.1 seconds, 63.4%
Fitness Testing:      8.1 seconds, 20.4%
Report:               6.3 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 482
Test mean error for best: 0.48200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 78                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 46                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 80                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 78                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 94                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 47                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 28                 
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 92                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 96                 
Correct output: -11                 | Program output: 48                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -36                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))))) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))))) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 44 406 452 237 43 59 865 907 291)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (481 44 406 452 237 43 59 865 907 291)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))))) () ()))
Errors: [1 0 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.215
Median total errors in population: 6
Error averages by case: (0.519 0.956 0.594 0.548 0.763 0.957 0.941 0.135 0.093 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.947
Average program size in population (points): 74.402
Average percent parens in population: 0.368
Minimum age in population: 18.703125
Maximum age in population: 22.147216796875
Average age in population: 20.52943078613281
Median age in population: 20.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7486093
--- Timings ---
Current time: 1559584569053 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 63.5%
Fitness Testing:      8.5 seconds, 20.1%
Report:               6.8 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 303
Test mean error for best: 0.30300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_swap exec_empty boolean_xor boolean_dup boolean_not integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ())))) () ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_swap exec_empty boolean_xor boolean_dup boolean_not integer_dup_times exec_do*times (exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ())))) () ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (685 636 262 711 800 768 149 144 767 267)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (685 636 262 711 800 768 149 144 767 267)
Population mean number of perfect (error zero) cases: 5.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))) ())) () ()))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 36
Size: 57
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 4.811
Median total errors in population: 4
Error averages by case: (0.315 0.364 0.738 0.289 0.2 0.232 0.851 0.856 0.233 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.34
Average program size in population (points): 68.623
Average percent parens in population: 0.368
Minimum age in population: 19.9140625
Maximum age in population: 23.60418701171875
Average age in population: 21.70928063964844
Median age in population: 21.9140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.009
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7938039
--- Timings ---
Current time: 1559584571525 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.6 seconds, 63.8%
Fitness Testing:      9.0 seconds, 20.0%
Report:               7.2 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -41                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -14                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (integer_mod in4 integer_min print_integer) () (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))) ()) () ()) () ()) ())) () ()) ())
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 74
Percent parens: 0.432
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 exec_s_when_autoconstructing (integer_mod in4 integer_min print_integer) () (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))) ()) () ()) () ()) ())) () ()) ())
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 74
Percent parens: 0.432
--- Lexicase Population Statistics ---
Count of elite individuals by case: (939 334 528 527 736 333 753 380 765 765)
Population mean number of elite cases: 6.06
Count of perfect (error zero) individuals by case: (939 334 528 527 736 333 753 380 765 765)
Population mean number of perfect (error zero) cases: 6.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_3} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items) integer_inc in1 tag_boolean_3 in4 integer_min print_integer) () in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))) ())) () ()))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 64
Percent parens: 0.359
--- Population Statistics ---
Average total errors in population: 3.94
Median total errors in population: 3
Error averages by case: (0.061 0.666 0.472 0.473 0.264 0.667 0.247 0.62 0.235 0.235)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.627
Average program size in population (points): 67.79
Average percent parens in population: 0.384
Minimum age in population: 21.5625
Maximum age in population: 24.81552124023438
Average age in population: 23.42251107788086
Median age in population: 23.37774658203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8362117
--- Timings ---
Current time: 1559584574058 milliseconds
Total Time:          47.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.4 seconds, 64.2%
Fitness Testing:      9.4 seconds, 19.8%
Report:               7.5 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing () (in2 exec_shove (in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 53
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing () (in2 exec_shove (in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 53
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (516 516 949 949 938 373 269 373 905 938)
Population mean number of elite cases: 6.73
Count of perfect (error zero) individuals by case: (516 516 949 949 938 373 269 373 905 938)
Population mean number of perfect (error zero) cases: 6.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (in1)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))))) () ()))
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 3.274
Median total errors in population: 3
Error averages by case: (0.484 0.484 0.051 0.051 0.062 0.627 0.731 0.627 0.095 0.062)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.386
Average program size in population (points): 67.28
Average percent parens in population: 0.383
Minimum age in population: 22.9140625
Maximum age in population: 26.50523376464844
Average age in population: 24.93179487609863
Median age in population: 25.003662109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8655969
--- Timings ---
Current time: 1559584576506 milliseconds
Total Time:          49.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.2 seconds, 64.6%
Fitness Testing:      9.7 seconds, 19.5%
Report:               7.8 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt boolean_yankdup integer_fromboolean) exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ())))) () ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_pop} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt boolean_yankdup integer_fromboolean) exec_pop (exec_stackdepth) exec_pop (exec_while (print_newline integer_swap exec_empty boolean_dup_items) boolean_invert_first_then_and boolean_xor exec_pop () boolean_or) boolean_stackdepth) exec_k_when_autoconstructing (in2 in1) () exec_while ())))) () ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (890 343 519 38 454 462 864 519 344 862)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (890 343 519 38 454 462 864 519 344 862)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_stackdepth)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_stackdepth exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))))) () ()))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 4.705
Median total errors in population: 5
Error averages by case: (0.11 0.657 0.481 0.962 0.546 0.538 0.136 0.481 0.656 0.138)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.077
Average program size in population (points): 66.08
Average percent parens in population: 0.377
Minimum age in population: 23.9609375
Maximum age in population: 28.0667724609375
Average age in population: 26.37445638275146
Median age in population: 26.44059753417969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8939867
--- Timings ---
Current time: 1559584579049 milliseconds
Total Time:          52.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 65.1%
Fitness Testing:     10.0 seconds, 19.2%
Report:               8.1 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (integer_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 boolean_dup_items integer_dup_times) integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_stackdepth)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.355
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (integer_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 boolean_dup_items integer_dup_times) integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_stackdepth)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.355
--- Lexicase Population Statistics ---
Count of elite individuals by case: (620 253 256 1000 917 256 269 937 908 270)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (620 253 256 0 917 256 269 937 908 270)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_stackdepth)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ())))))) () ()))
Errors: [0 1 1 1 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 5.314
Median total errors in population: 4
Error averages by case: (0.38 0.747 0.744 1.0 0.083 0.744 0.731 0.063 0.092 0.73)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 40.14
Average program size in population (points): 64.38
Average percent parens in population: 0.374
Minimum age in population: 25.298828125
Maximum age in population: 29.95880508422852
Average age in population: 27.94166361618042
Median age in population: 27.99404907226562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9245705
--- Timings ---
Current time: 1559584581511 milliseconds
Total Time:          54.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.9 seconds, 65.4%
Fitness Testing:     10.4 seconds, 19.0%
Report:               8.4 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -83                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -19                
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 17                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 85                 
Correct output: -49                 | Program output: -4                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -69                
Correct output: -56                 | Program output: -41                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -5                 
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -36                
Correct output: -81                 | Program output: -71                
Correct output: -83                 | Program output: 23                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -14                
Correct output: -83                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) () in1) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer in3 integer_fromboolean exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))) () ()))) () ()))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 64
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) () in1) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer in3 integer_fromboolean exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))) () ()))) () ()))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 64
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (507 926 290 507 291 509 510 507 906 927)
Population mean number of elite cases: 5.88
Count of perfect (error zero) individuals by case: (507 926 290 507 291 509 510 507 906 927)
Population mean number of perfect (error zero) cases: 5.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_9998} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_dup_items integer_dup_times) (integer_swap exec_rot (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (integer_inc in2 exec_s_when_autoconstructing (exec_rot () (exec_rot () (boolean_frominteger) (boolean_dup_items)) (integer_inc in1 tag_boolean_9998 in4 integer_min print_integer)) (integer_add integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop ())))))) () ()) ())) ())) () ()))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 81
Percent parens: 0.420
--- Population Statistics ---
Average total errors in population: 4.12
Median total errors in population: 3
Error averages by case: (0.493 0.074 0.71 0.493 0.709 0.491 0.49 0.493 0.094 0.073)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.762
Average program size in population (points): 65.642
Average percent parens in population: 0.378
Minimum age in population: 26.298828125
Maximum age in population: 31.09686851501465
Average age in population: 29.29127965164185
Median age in population: 29.28589725494385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9540978
--- Timings ---
Current time: 1559584584034 milliseconds
Total Time:          57.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 65.8%
Fitness Testing:     10.7 seconds, 18.8%
Report:               8.8 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: 76                 
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 19                 
Correct output: 12                  | Program output: 40                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 44                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 51                 
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 63                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: 44                 
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: 15                 
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -50                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: 64                 
Correct output: -11                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: 15                 
Correct output: -27                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 16                 
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 39                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -32                
Correct output: -50                 | Program output: -16                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_stackdepth)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or boolean_stackdepth) exec_dup_times (in2 in1) exec_while ())))))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.362
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (boolean_stackdepth)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or boolean_stackdepth) exec_dup_times (in2 in1) exec_while ())))))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.362
--- Lexicase Population Statistics ---
Count of elite individuals by case: (894 223 927 886 445 1000 934 927 222 1000)
Population mean number of elite cases: 7.46
Count of perfect (error zero) individuals by case: (894 223 927 886 445 0 934 927 222 0)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_gt integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot () (boolean_frominteger) (in1)) (integer_dup_times in2 exec_s_when_autoconstructing (exec_shove (integer_mod in4 integer_min print_integer)) (in3 integer_fromboolean) (exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))))) () ()))
Errors: [0 0 0 0 0 1 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 4.542
Median total errors in population: 5
Error averages by case: (0.106 0.777 0.073 0.114 0.555 1.0 0.066 0.073 0.778 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 40.903
Average program size in population (points): 65.999
Average percent parens in population: 0.378
Minimum age in population: 27.298828125
Maximum age in population: 32.65977382659912
Average age in population: 30.79229580307007
Median age in population: 30.87933588027954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9831699
--- Timings ---
Current time: 1559584586590 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 66.0%
Fitness Testing:     11.1 seconds, 18.5%
Report:               9.2 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 347
Test mean error for best: 0.34700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times () exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times () exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (837 837 916 837 4 1 945 945 838 731)
Population mean number of elite cases: 6.89
Count of perfect (error zero) individuals by case: (837 837 916 837 4 1 945 945 838 731)
Population mean number of perfect (error zero) cases: 6.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times () exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 40
Size: 64
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 3.109
Median total errors in population: 2
Error averages by case: (0.163 0.163 0.084 0.163 0.996 0.999 0.055 0.055 0.162 0.269)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.598
Average program size in population (points): 63.099
Average percent parens in population: 0.373
Minimum age in population: 29.05687713623047
Maximum age in population: 34.18083333969116
Average age in population: 32.3000725402832
Median age in population: 32.39693450927734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10104463
--- Timings ---
Current time: 1559584589020 milliseconds
Total Time:          62.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.3 seconds, 66.4%
Fitness Testing:     11.4 seconds, 18.3%
Report:               9.5 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 331
Test mean error for best: 0.33100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: 46                 
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: 88                 
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: 100                
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: 36                 
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: 73                 
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: 72                 
Correct output: -80                 | Program output: 5                  
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -62                
Correct output: -82                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: 63                 
Correct output: -51                 | Program output: -26                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -15                
Correct output: -56                 | Program output: 49                 
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: 87                 
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: 62                 
Correct output: -81                 | Program output: 100                
Correct output: -83                 | Program output: 58                 
Correct output: -72                 | Program output: -9                 
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: 84                 
Correct output: -83                 | Program output: 98                 
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -23                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -24                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 65
Percent parens: 0.369
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 65
Percent parens: 0.369
--- Lexicase Population Statistics ---
Count of elite individuals by case: (874 546 810 547 905 277 277 884 904 871)
Population mean number of elite cases: 6.89
Count of perfect (error zero) individuals by case: (874 546 810 547 905 277 277 884 904 871)
Population mean number of perfect (error zero) cases: 6.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 65
Percent parens: 0.369
--- Population Statistics ---
Average total errors in population: 3.105
Median total errors in population: 2
Error averages by case: (0.126 0.454 0.19 0.453 0.095 0.723 0.723 0.116 0.096 0.129)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.875
Average program size in population (points): 63.752
Average percent parens in population: 0.374
Minimum age in population: 31.6587028503418
Maximum age in population: 35.34555149078369
Average age in population: 32.85231630945206
Median age in population: 32.9254093170166
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 337
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 338
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10379449
--- Timings ---
Current time: 1559584591457 milliseconds
Total Time:          64.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.2 seconds, 66.7%
Fitness Testing:     11.7 seconds, 18.1%
Report:               9.8 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 353
Test mean error for best: 0.35300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: 29                 
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 26                 
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 26                 
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 20                 
Correct output: 29                  | Program output: 31                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: 34                 
Correct output: -84                 | Program output: 96                 
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 42                 
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: 0                  
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -3                 
Correct output: -86                 | Program output: -85                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: 56                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: 89                 
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -76                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times () exec_pop () boolean_or boolean_stackdepth) boolean_eq in2 boolean_or) exec_while ()))) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 63
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times () exec_pop () boolean_or boolean_stackdepth) boolean_eq in2 boolean_or) exec_while ()))) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 63
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (457 7 836 933 457 646 648 463 646 832)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (457 7 836 933 457 646 648 463 646 832)
Population mean number of perfect (error zero) cases: 5.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min print_integer)) (in3 integer_fromboolean) exec_pop () boolean_or boolean_stackdepth) integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_lt integer_dup_times exec_do*times () exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 boolean_or) exec_while ())) () ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 44
Size: 69
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 4.075
Median total errors in population: 4
Error averages by case: (0.543 0.993 0.164 0.067 0.543 0.354 0.352 0.537 0.354 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.3
Average program size in population (points): 64.107
Average percent parens in population: 0.371
Minimum age in population: 32.9254093170166
Maximum age in population: 36.39434194564819
Average age in population: 34.41265831565857
Median age in population: 34.39071226119995
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10658180
--- Timings ---
Current time: 1559584593891 milliseconds
Total Time:          67.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.9 seconds, 66.9%
Fitness Testing:     12.0 seconds, 17.9%
Report:              10.1 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 165
Test mean error for best: 0.16500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 64
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (in2 exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 64
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (139 138 805 840 655 745 865 947 628 865)
Population mean number of elite cases: 6.63
Count of perfect (error zero) individuals by case: (139 138 805 840 655 745 865 947 628 865)
Population mean number of perfect (error zero) cases: 6.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_and} {:close 2, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 2, :instruction print_integer} {:close 0, :instruction in3} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_while})
Best program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 43
Size: 67
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 3.373
Median total errors in population: 2
Error averages by case: (0.861 0.862 0.195 0.16 0.345 0.255 0.135 0.053 0.372 0.135)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.473
Average program size in population (points): 64.57
Average percent parens in population: 0.373
Minimum age in population: 33.9254093170166
Maximum age in population: 37.47191679477692
Average age in population: 35.8750621394515
Median age in population: 35.85326290130615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.01
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10935613
--- Timings ---
Current time: 1559584596381 milliseconds
Total Time:          69.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.8 seconds, 67.2%
Fitness Testing:     12.3 seconds, 17.7%
Report:              10.4 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 25
Successful program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 67


Auto-simplifying with starting size: 67
step: 0
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 500
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1000
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1500
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2000
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2500
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3000
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3500
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4000
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4500
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 5000
program: (boolean_dup_items integer_dup_times integer_swap exec_rot () (boolean_dup_items) (integer_inc in2 exec_s_when_autoconstructing (boolean_dup exec_shove (exec_rot () (exec_rot (boolean_and) () (in1)) (integer_dup_times in2 integer_dup_times in2 exec_s_when_autoconstructing () (exec_shove (boolean_dup in4 integer_min integer_min print_integer)) (in3 integer_fromboolean) exec_pop (print_newline integer_lt boolean_pop exec_noop exec_do*times (integer_gt integer_dup_times exec_do*times (exec_pop () boolean_or boolean_stackdepth) exec_shove (in2 in1) exec_while ()))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 165
Test mean error for best: 0.16500
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -38                 | Program output: -38                
Correct output: -70                 | Program output: -70                
Correct output: -67                 | Program output: -67                
Correct output: -72                 | Program output: -72                
Correct output: -26                 | Program output: -26                
Correct output: -42                 | Program output: -42                
Correct output: -9                  | Program output: -9                 
Correct output: 15                  | Program output: 15                 
Correct output: -54                 | Program output: -54                
Correct output: -49                 | Program output: -49                
Correct output: 45                  | Program output: 45                 
Correct output: 83                  | Program output: 83                 
Correct output: -82                 | Program output: -82                
Correct output: 84                  | Program output: 84                 
Correct output: -68                 | Program output: -68                
Correct output: 33                  | Program output: 33                 
Correct output: 12                  | Program output: 12                 
Correct output: 7                   | Program output: 7                  
Correct output: 8                   | Program output: 8                  
Correct output: 3                   | Program output: 3                  
Correct output: 9                   | Program output: 9                  
Correct output: 74                  | Program output: 74                 
Correct output: 22                  | Program output: 22                 
Correct output: 8                   | Program output: 8                  
Correct output: 18                  | Program output: 18                 
Correct output: 12                  | Program output: 12                 
Correct output: 28                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 9                   | Program output: 47                 
Correct output: 6                   | Program output: 6                  
Correct output: 3                   | Program output: 3                  
Correct output: 68                  | Program output: 77                 
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -2                  | Program output: -2                 
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -7                 
Correct output: -81                 | Program output: -81                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -15                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -82                 | Program output: -32                
Correct output: -87                 | Program output: -87                
Correct output: -97                 | Program output: -97                
Correct output: 3                   | Program output: 3                  
Correct output: -49                 | Program output: -49                
Correct output: -51                 | Program output: -51                
Correct output: -32                 | Program output: -32                
Correct output: -71                 | Program output: -71                
Correct output: -85                 | Program output: -85                
Correct output: -11                 | Program output: -11                
Correct output: -86                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -69                 | Program output: -52                
Correct output: -56                 | Program output: -15                
Correct output: -72                 | Program output: -72                
Correct output: -73                 | Program output: -73                
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -61                 | Program output: -61                
Correct output: -81                 | Program output: -81                
Correct output: -83                 | Program output: -83                
Correct output: -72                 | Program output: -72                
Correct output: -18                 | Program output: -18                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -81                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -52                 | Program output: -52                
Correct output: -96                 | Program output: -96                
Correct output: -91                 | Program output: -91                
Correct output: -11                 | Program output: -11                
Correct output: -43                 | Program output: -43                
Correct output: -60                 | Program output: -60                
Correct output: -27                 | Program output: -27                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -4                  | Program output: -4                 
Correct output: -92                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: 13                  | Program output: 13                 
Correct output: -98                 | Program output: -98                
Correct output: -90                 | Program output: -90                
Correct output: -50                 | Program output: -50                
;;******************************
