Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[9 9 82 9] 9] [[23 -82 23 23] -82] [[25 25 25 -80] -80] [[-15 -15 87 -15] -15] [[-13 -13 -13 66] -13] [[99 -71 99 99] -71] [[-46 79 79 79] -46] [[-17 -17 -48 -17] -48] [[17 -31 -31 -31] -31] [[95 -77 -77 -77] -77] [(44 44 44 44) 44] [(-92 -92 -92 -92) -92] [(39 39 39 39) 39] [(85 85 85 85) 85] [(58 58 58 58) 58] [(20 23 61 67) 20] [(4 51 6 8) 4] [(10 23 29 2) 2] [(54 23 45 52) 23] [(83 88 41 69) 41] [(68 67 31 24) 24] [(20 27 60 47) 20] [(73 89 82 80) 73] [(88 96 64 95) 64] [(23 45 25 74) 23] [(9 92 91 37) 9] [(55 79 97 0) 0] [(64 23 77 13) 13] [(60 7 52 13) 7] [(28 77 38 23) 23] [(92 9 52 46) 9] [(3 15 39 86) 3] [(44 70 15 16) 15] [(52 47 64 56) 47] [(96 64 48 62) 48] [(-41 -37 25 32) -41] [(19 -37 70 -6) -37] [(85 -51 26 4) -51] [(76 18 -74 -21) -74] [(-49 -1 -94 -58) -94] [(92 100 -6 13) -6] [(64 -71 17 96) -71] [(60 9 21 85) 9] [(19 16 81 78) 16] [(-83 -23 -53 96) -83] [(65 86 -89 -66) -89] [(-65 -88 80 -62) -88] [(-95 -75 9 -14) -95] [(-96 78 -78 -16) -96] [(27 27 62 -86) -86] [(-93 29 95 49) -93] [(-76 71 -98 67) -98] [(-43 -43 58 85) -43] [(44 -31 -32 34) -32] [(-35 -5 10 -66) -66] [(7 -2 -26 34) -26] [(-72 -4 -63 98) -72] [(-17 -42 -76 6) -76] [(98 47 -79 33) -79] [(3 -47 -53 78) -53] [(-76 16 39 -92) -92] [(26 -86 83 91) -86] [(62 17 52 -36) -36] [(43 -79 -69 -100) -100] [(-49 -90 73 69) -90] [(55 43 -81 86) -81] [(-14 63 97 -33) -33] [(-6 70 36 48) -6] [(84 79 -86 48) -86] [(77 -84 -39 76) -84] [(-88 -56 67 -89) -89] [(-89 21 -16 -51) -89] [(-26 -51 -77 -37) -77] [(-36 -3 57 39) -36] [(84 -77 -60 -7) -77] [(-95 8 -57 -29) -95] [(60 -93 -11 -54) -93] [(44 41 -48 11) -48] [(-89 60 18 73) -89] [(-69 72 47 99) -69] [(-91 -69 -56 -78) -91] [(35 -81 69 -86) -86] [(43 15 31 -7) -7] [(-61 48 -97 -17) -97] [(-58 -20 -86 -10) -86] [(-21 -81 -38 14) -81] [(-3 26 75 85) -3] [(-87 -7 -96 -83) -96] [(-16 60 58 -48) -48] [(13 49 54 80) 13] [(67 -44 -76 80) -76] [(63 51 67 70) 51] [(-85 96 91 -40) -85] [(-20 21 -92 -4) -92] [(-79 -67 45 -4) -79])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[9 9 82 9] 9]
Train Case:   6 | Input/Output: [[23 -82 23 23] -82]
Train Case:   7 | Input/Output: [[25 25 25 -80] -80]
Train Case:   8 | Input/Output: [[-15 -15 87 -15] -15]
Train Case:   9 | Input/Output: [[-13 -13 -13 66] -13]
Train Case:  10 | Input/Output: [[99 -71 99 99] -71]
Train Case:  11 | Input/Output: [[-46 79 79 79] -46]
Train Case:  12 | Input/Output: [[-17 -17 -48 -17] -48]
Train Case:  13 | Input/Output: [[17 -31 -31 -31] -31]
Train Case:  14 | Input/Output: [[95 -77 -77 -77] -77]
Train Case:  15 | Input/Output: [(44 44 44 44) 44]
Train Case:  16 | Input/Output: [(-92 -92 -92 -92) -92]
Train Case:  17 | Input/Output: [(39 39 39 39) 39]
Train Case:  18 | Input/Output: [(85 85 85 85) 85]
Train Case:  19 | Input/Output: [(58 58 58 58) 58]
Train Case:  20 | Input/Output: [(20 23 61 67) 20]
Train Case:  21 | Input/Output: [(4 51 6 8) 4]
Train Case:  22 | Input/Output: [(10 23 29 2) 2]
Train Case:  23 | Input/Output: [(54 23 45 52) 23]
Train Case:  24 | Input/Output: [(83 88 41 69) 41]
Train Case:  25 | Input/Output: [(68 67 31 24) 24]
Train Case:  26 | Input/Output: [(20 27 60 47) 20]
Train Case:  27 | Input/Output: [(73 89 82 80) 73]
Train Case:  28 | Input/Output: [(88 96 64 95) 64]
Train Case:  29 | Input/Output: [(23 45 25 74) 23]
Train Case:  30 | Input/Output: [(9 92 91 37) 9]
Train Case:  31 | Input/Output: [(55 79 97 0) 0]
Train Case:  32 | Input/Output: [(64 23 77 13) 13]
Train Case:  33 | Input/Output: [(60 7 52 13) 7]
Train Case:  34 | Input/Output: [(28 77 38 23) 23]
Train Case:  35 | Input/Output: [(92 9 52 46) 9]
Train Case:  36 | Input/Output: [(3 15 39 86) 3]
Train Case:  37 | Input/Output: [(44 70 15 16) 15]
Train Case:  38 | Input/Output: [(52 47 64 56) 47]
Train Case:  39 | Input/Output: [(96 64 48 62) 48]
Train Case:  40 | Input/Output: [(-41 -37 25 32) -41]
Train Case:  41 | Input/Output: [(19 -37 70 -6) -37]
Train Case:  42 | Input/Output: [(85 -51 26 4) -51]
Train Case:  43 | Input/Output: [(76 18 -74 -21) -74]
Train Case:  44 | Input/Output: [(-49 -1 -94 -58) -94]
Train Case:  45 | Input/Output: [(92 100 -6 13) -6]
Train Case:  46 | Input/Output: [(64 -71 17 96) -71]
Train Case:  47 | Input/Output: [(60 9 21 85) 9]
Train Case:  48 | Input/Output: [(19 16 81 78) 16]
Train Case:  49 | Input/Output: [(-83 -23 -53 96) -83]
Train Case:  50 | Input/Output: [(65 86 -89 -66) -89]
Train Case:  51 | Input/Output: [(-65 -88 80 -62) -88]
Train Case:  52 | Input/Output: [(-95 -75 9 -14) -95]
Train Case:  53 | Input/Output: [(-96 78 -78 -16) -96]
Train Case:  54 | Input/Output: [(27 27 62 -86) -86]
Train Case:  55 | Input/Output: [(-93 29 95 49) -93]
Train Case:  56 | Input/Output: [(-76 71 -98 67) -98]
Train Case:  57 | Input/Output: [(-43 -43 58 85) -43]
Train Case:  58 | Input/Output: [(44 -31 -32 34) -32]
Train Case:  59 | Input/Output: [(-35 -5 10 -66) -66]
Train Case:  60 | Input/Output: [(7 -2 -26 34) -26]
Train Case:  61 | Input/Output: [(-72 -4 -63 98) -72]
Train Case:  62 | Input/Output: [(-17 -42 -76 6) -76]
Train Case:  63 | Input/Output: [(98 47 -79 33) -79]
Train Case:  64 | Input/Output: [(3 -47 -53 78) -53]
Train Case:  65 | Input/Output: [(-76 16 39 -92) -92]
Train Case:  66 | Input/Output: [(26 -86 83 91) -86]
Train Case:  67 | Input/Output: [(62 17 52 -36) -36]
Train Case:  68 | Input/Output: [(43 -79 -69 -100) -100]
Train Case:  69 | Input/Output: [(-49 -90 73 69) -90]
Train Case:  70 | Input/Output: [(55 43 -81 86) -81]
Train Case:  71 | Input/Output: [(-14 63 97 -33) -33]
Train Case:  72 | Input/Output: [(-6 70 36 48) -6]
Train Case:  73 | Input/Output: [(84 79 -86 48) -86]
Train Case:  74 | Input/Output: [(77 -84 -39 76) -84]
Train Case:  75 | Input/Output: [(-88 -56 67 -89) -89]
Train Case:  76 | Input/Output: [(-89 21 -16 -51) -89]
Train Case:  77 | Input/Output: [(-26 -51 -77 -37) -77]
Train Case:  78 | Input/Output: [(-36 -3 57 39) -36]
Train Case:  79 | Input/Output: [(84 -77 -60 -7) -77]
Train Case:  80 | Input/Output: [(-95 8 -57 -29) -95]
Train Case:  81 | Input/Output: [(60 -93 -11 -54) -93]
Train Case:  82 | Input/Output: [(44 41 -48 11) -48]
Train Case:  83 | Input/Output: [(-89 60 18 73) -89]
Train Case:  84 | Input/Output: [(-69 72 47 99) -69]
Train Case:  85 | Input/Output: [(-91 -69 -56 -78) -91]
Train Case:  86 | Input/Output: [(35 -81 69 -86) -86]
Train Case:  87 | Input/Output: [(43 15 31 -7) -7]
Train Case:  88 | Input/Output: [(-61 48 -97 -17) -97]
Train Case:  89 | Input/Output: [(-58 -20 -86 -10) -86]
Train Case:  90 | Input/Output: [(-21 -81 -38 14) -81]
Train Case:  91 | Input/Output: [(-3 26 75 85) -3]
Train Case:  92 | Input/Output: [(-87 -7 -96 -83) -96]
Train Case:  93 | Input/Output: [(-16 60 58 -48) -48]
Train Case:  94 | Input/Output: [(13 49 54 80) 13]
Train Case:  95 | Input/Output: [(67 -44 -76 80) -76]
Train Case:  96 | Input/Output: [(63 51 67 70) 51]
Train Case:  97 | Input/Output: [(-85 96 91 -40) -85]
Train Case:  98 | Input/Output: [(-20 21 -92 -4) -92]
Train Case:  99 | Input/Output: [(-79 -67 45 -4) -79]
Test Case:   0 | Input/Output: [[27 27 62 27] 27]
Test Case:   1 | Input/Output: [[-43 -14 -43 -43] -43]
Test Case:   2 | Input/Output: [[63 91 91 91] 63]
Test Case:   3 | Input/Output: [[-13 -90 -90 -90] -90]
Test Case:   4 | Input/Output: [[-73 -73 23 -73] -73]
Test Case:   5 | Input/Output: [[9 9 9 -90] -90]
Test Case:   6 | Input/Output: [[-6 26 -6 -6] -6]
Test Case:   7 | Input/Output: [[8 8 8 22] 8]
Test Case:   8 | Input/Output: [[-42 22 -42 -42] -42]
Test Case:   9 | Input/Output: [[-68 -68 -68 27] -68]
Test Case:  10 | Input/Output: [[98 -22 -22 -22] -22]
Test Case:  11 | Input/Output: [[-47 -47 -47 50] -47]
Test Case:  12 | Input/Output: [[-79 22 22 22] -79]
Test Case:  13 | Input/Output: [[92 -42 -42 -42] -42]
Test Case:  14 | Input/Output: [[9 -81 9 9] -81]
Test Case:  15 | Input/Output: [[25 25 25 -22] -22]
Test Case:  16 | Input/Output: [[9 9 9 -97] -97]
Test Case:  17 | Input/Output: [[-63 -29 -29 -29] -63]
Test Case:  18 | Input/Output: [[74 -63 -63 -63] -63]
Test Case:  19 | Input/Output: [[33 19 19 19] 19]
Test Case:  20 | Input/Output: [[55 -87 -87 -87] -87]
Test Case:  21 | Input/Output: [[-9 -92 -9 -9] -92]
Test Case:  22 | Input/Output: [[-61 -61 20 -61] -61]
Test Case:  23 | Input/Output: [[-5 10 -5 -5] -5]
Test Case:  24 | Input/Output: [[-31 -31 -44 -31] -44]
Test Case:  25 | Input/Output: [[-42 -42 -42 -29] -42]
Test Case:  26 | Input/Output: [[58 58 58 21] 21]
Test Case:  27 | Input/Output: [[-34 -80 -80 -80] -80]
Test Case:  28 | Input/Output: [[96 -9 96 96] -9]
Test Case:  29 | Input/Output: [[-75 -75 -97 -75] -97]
Test Case:  30 | Input/Output: [[99 99 99 -45] -45]
Test Case:  31 | Input/Output: [[38 38 38 38] 38]
Test Case:  32 | Input/Output: [[61 35 35 35] 35]
Test Case:  33 | Input/Output: [[63 -62 63 63] -62]
Test Case:  34 | Input/Output: [[-16 -16 -58 -16] -58]
Test Case:  35 | Input/Output: [[13 -26 -26 -26] -26]
Test Case:  36 | Input/Output: [[45 45 45 -49] -49]
Test Case:  37 | Input/Output: [[-20 94 -20 -20] -20]
Test Case:  38 | Input/Output: [[18 18 18 29] 18]
Test Case:  39 | Input/Output: [[74 74 -33 74] -33]
Test Case:  40 | Input/Output: [[27 27 -70 27] -70]
Test Case:  41 | Input/Output: [[40 -83 40 40] -83]
Test Case:  42 | Input/Output: [[-82 -82 -87 -82] -87]
Test Case:  43 | Input/Output: [[-49 16 16 16] -49]
Test Case:  44 | Input/Output: [[-52 -27 -27 -27] -52]
Test Case:  45 | Input/Output: [[72 72 72 -20] -20]
Test Case:  46 | Input/Output: [[-56 -56 34 -56] -56]
Test Case:  47 | Input/Output: [[13 32 13 13] 13]
Test Case:  48 | Input/Output: [[-61 -61 -96 -61] -96]
Test Case:  49 | Input/Output: [[99 99 99 -19] -19]
Test Case:  50 | Input/Output: [[11 11 45 11] 11]
Test Case:  51 | Input/Output: [[-54 -54 -54 -69] -69]
Test Case:  52 | Input/Output: [[-18 -18 -89 -18] -89]
Test Case:  53 | Input/Output: [[-45 -45 1 -45] -45]
Test Case:  54 | Input/Output: [[81 -29 -29 -29] -29]
Test Case:  55 | Input/Output: [[28 -41 28 28] -41]
Test Case:  56 | Input/Output: [[-76 13 13 13] -76]
Test Case:  57 | Input/Output: [[-87 -87 23 -87] -87]
Test Case:  58 | Input/Output: [[-4 9 9 9] -4]
Test Case:  59 | Input/Output: [[3 60 60 60] 3]
Test Case:  60 | Input/Output: [[32 32 32 -36] -36]
Test Case:  61 | Input/Output: [[-79 -79 67 -79] -79]
Test Case:  62 | Input/Output: [[-36 -36 46 -36] -36]
Test Case:  63 | Input/Output: [[-25 14 14 14] -25]
Test Case:  64 | Input/Output: [[97 97 8 97] 8]
Test Case:  65 | Input/Output: [[-48 -48 74 -48] -48]
Test Case:  66 | Input/Output: [[88 88 88 2] 2]
Test Case:  67 | Input/Output: [[83 53 83 83] 53]
Test Case:  68 | Input/Output: [[27 83 83 83] 27]
Test Case:  69 | Input/Output: [[-52 -52 -52 48] -52]
Test Case:  70 | Input/Output: [[76 76 49 76] 49]
Test Case:  71 | Input/Output: [[6 44 6 6] 6]
Test Case:  72 | Input/Output: [[26 -18 -18 -18] -18]
Test Case:  73 | Input/Output: [[-81 94 -81 -81] -81]
Test Case:  74 | Input/Output: [[76 76 -97 76] -97]
Test Case:  75 | Input/Output: [[-82 35 35 35] -82]
Test Case:  76 | Input/Output: [[37 37 -40 37] -40]
Test Case:  77 | Input/Output: [[-76 -76 92 -76] -76]
Test Case:  78 | Input/Output: [[-36 -36 -36 -30] -36]
Test Case:  79 | Input/Output: [[-73 23 -73 -73] -73]
Test Case:  80 | Input/Output: [[-47 31 31 31] -47]
Test Case:  81 | Input/Output: [[-31 -31 -31 95] -31]
Test Case:  82 | Input/Output: [[-21 -21 74 -21] -21]
Test Case:  83 | Input/Output: [[24 59 59 59] 24]
Test Case:  84 | Input/Output: [[65 -60 -60 -60] -60]
Test Case:  85 | Input/Output: [[-64 -64 94 -64] -64]
Test Case:  86 | Input/Output: [[-97 -11 -11 -11] -97]
Test Case:  87 | Input/Output: [[-70 -59 -59 -59] -70]
Test Case:  88 | Input/Output: [[9 9 9 -42] -42]
Test Case:  89 | Input/Output: [[-7 -84 -7 -7] -84]
Test Case:  90 | Input/Output: [[-57 -57 -13 -57] -57]
Test Case:  91 | Input/Output: [[-79 -79 -54 -79] -79]
Test Case:  92 | Input/Output: [[-73 -73 -91 -73] -91]
Test Case:  93 | Input/Output: [[1 82 82 82] 1]
Test Case:  94 | Input/Output: [[68 68 37 68] 37]
Test Case:  95 | Input/Output: [[-60 -60 -60 -10] -60]
Test Case:  96 | Input/Output: [[-4 88 -4 -4] -4]
Test Case:  97 | Input/Output: [[94 99 94 94] 94]
Test Case:  98 | Input/Output: [[52 52 -85 52] -85]
Test Case:  99 | Input/Output: [[-21 0 0 0] -21]
Test Case: 100 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 101 | Input/Output: [(16 16 16 16) 16]
Test Case: 102 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 103 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 104 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 105 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 106 | Input/Output: [(21 21 21 21) 21]
Test Case: 107 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 108 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 109 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 110 | Input/Output: [(11 11 11 11) 11]
Test Case: 111 | Input/Output: [(32 32 32 32) 32]
Test Case: 112 | Input/Output: [(44 44 44 44) 44]
Test Case: 113 | Input/Output: [(40 40 40 40) 40]
Test Case: 114 | Input/Output: [(36 36 36 36) 36]
Test Case: 115 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 116 | Input/Output: [(23 23 23 23) 23]
Test Case: 117 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 118 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 119 | Input/Output: [(91 91 91 91) 91]
Test Case: 120 | Input/Output: [(80 80 80 80) 80]
Test Case: 121 | Input/Output: [(32 32 32 32) 32]
Test Case: 122 | Input/Output: [(82 82 82 82) 82]
Test Case: 123 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 124 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 125 | Input/Output: [(49 49 49 49) 49]
Test Case: 126 | Input/Output: [(62 62 62 62) 62]
Test Case: 127 | Input/Output: [(77 77 77 77) 77]
Test Case: 128 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 129 | Input/Output: [(41 41 41 41) 41]
Test Case: 130 | Input/Output: [(37 37 37 37) 37]
Test Case: 131 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 132 | Input/Output: [(74 74 74 74) 74]
Test Case: 133 | Input/Output: [(72 72 72 72) 72]
Test Case: 134 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 135 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 136 | Input/Output: [(49 49 49 49) 49]
Test Case: 137 | Input/Output: [(82 82 82 82) 82]
Test Case: 138 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 139 | Input/Output: [(53 53 53 53) 53]
Test Case: 140 | Input/Output: [(16 16 16 16) 16]
Test Case: 141 | Input/Output: [(40 40 40 40) 40]
Test Case: 142 | Input/Output: [(66 66 66 66) 66]
Test Case: 143 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 144 | Input/Output: [(84 84 84 84) 84]
Test Case: 145 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 146 | Input/Output: [(99 99 99 99) 99]
Test Case: 147 | Input/Output: [(59 59 59 59) 59]
Test Case: 148 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 149 | Input/Output: [(76 76 76 76) 76]
Test Case: 150 | Input/Output: [(86 86 86 86) 86]
Test Case: 151 | Input/Output: [(48 48 48 48) 48]
Test Case: 152 | Input/Output: [(29 29 29 29) 29]
Test Case: 153 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 154 | Input/Output: [(76 76 76 76) 76]
Test Case: 155 | Input/Output: [(67 67 67 67) 67]
Test Case: 156 | Input/Output: [(50 50 50 50) 50]
Test Case: 157 | Input/Output: [(86 86 86 86) 86]
Test Case: 158 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 159 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 160 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 161 | Input/Output: [(68 68 68 68) 68]
Test Case: 162 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 163 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 164 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 165 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 166 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 167 | Input/Output: [(84 84 84 84) 84]
Test Case: 168 | Input/Output: [(44 44 44 44) 44]
Test Case: 169 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 170 | Input/Output: [(56 56 56 56) 56]
Test Case: 171 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 172 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 173 | Input/Output: [(93 93 93 93) 93]
Test Case: 174 | Input/Output: [(87 87 87 87) 87]
Test Case: 175 | Input/Output: [(100 100 100 100) 100]
Test Case: 176 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 177 | Input/Output: [(54 54 54 54) 54]
Test Case: 178 | Input/Output: [(45 45 45 45) 45]
Test Case: 179 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 180 | Input/Output: [(6 6 6 6) 6]
Test Case: 181 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 182 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 183 | Input/Output: [(84 84 84 84) 84]
Test Case: 184 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 185 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 186 | Input/Output: [(54 54 54 54) 54]
Test Case: 187 | Input/Output: [(31 31 31 31) 31]
Test Case: 188 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 189 | Input/Output: [(81 81 81 81) 81]
Test Case: 190 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 191 | Input/Output: [(33 33 33 33) 33]
Test Case: 192 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 193 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 194 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 195 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 196 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 197 | Input/Output: [(6 6 6 6) 6]
Test Case: 198 | Input/Output: [(97 97 97 97) 97]
Test Case: 199 | Input/Output: [(29 29 29 29) 29]
Test Case: 200 | Input/Output: [(44 64 46 57) 44]
Test Case: 201 | Input/Output: [(70 100 72 38) 38]
Test Case: 202 | Input/Output: [(43 29 42 9) 9]
Test Case: 203 | Input/Output: [(80 52 25 5) 5]
Test Case: 204 | Input/Output: [(60 1 50 82) 1]
Test Case: 205 | Input/Output: [(21 86 57 75) 21]
Test Case: 206 | Input/Output: [(8 4 75 72) 4]
Test Case: 207 | Input/Output: [(77 93 67 1) 1]
Test Case: 208 | Input/Output: [(21 95 46 85) 21]
Test Case: 209 | Input/Output: [(75 30 26 59) 26]
Test Case: 210 | Input/Output: [(88 73 57 33) 33]
Test Case: 211 | Input/Output: [(24 66 40 99) 24]
Test Case: 212 | Input/Output: [(88 82 13 34) 13]
Test Case: 213 | Input/Output: [(27 7 14 12) 7]
Test Case: 214 | Input/Output: [(34 47 35 74) 34]
Test Case: 215 | Input/Output: [(41 6 27 70) 6]
Test Case: 216 | Input/Output: [(10 65 51 38) 10]
Test Case: 217 | Input/Output: [(98 4 68 41) 4]
Test Case: 218 | Input/Output: [(51 6 34 31) 6]
Test Case: 219 | Input/Output: [(35 60 86 32) 32]
Test Case: 220 | Input/Output: [(90 76 20 74) 20]
Test Case: 221 | Input/Output: [(54 55 64 76) 54]
Test Case: 222 | Input/Output: [(54 99 19 29) 19]
Test Case: 223 | Input/Output: [(67 1 7 7) 1]
Test Case: 224 | Input/Output: [(31 19 37 32) 19]
Test Case: 225 | Input/Output: [(25 54 52 68) 25]
Test Case: 226 | Input/Output: [(23 58 17 98) 17]
Test Case: 227 | Input/Output: [(39 69 67 55) 39]
Test Case: 228 | Input/Output: [(21 31 19 42) 19]
Test Case: 229 | Input/Output: [(59 30 53 42) 30]
Test Case: 230 | Input/Output: [(66 92 86 44) 44]
Test Case: 231 | Input/Output: [(37 90 28 98) 28]
Test Case: 232 | Input/Output: [(72 35 20 64) 20]
Test Case: 233 | Input/Output: [(65 99 84 63) 63]
Test Case: 234 | Input/Output: [(64 21 8 43) 8]
Test Case: 235 | Input/Output: [(94 41 69 53) 41]
Test Case: 236 | Input/Output: [(68 34 20 32) 20]
Test Case: 237 | Input/Output: [(7 32 32 48) 7]
Test Case: 238 | Input/Output: [(85 85 100 93) 85]
Test Case: 239 | Input/Output: [(71 99 28 17) 17]
Test Case: 240 | Input/Output: [(45 40 80 29) 29]
Test Case: 241 | Input/Output: [(44 100 35 78) 35]
Test Case: 242 | Input/Output: [(85 0 92 60) 0]
Test Case: 243 | Input/Output: [(26 0 91 45) 0]
Test Case: 244 | Input/Output: [(77 87 7 83) 7]
Test Case: 245 | Input/Output: [(11 26 26 8) 8]
Test Case: 246 | Input/Output: [(11 61 80 12) 11]
Test Case: 247 | Input/Output: [(60 39 14 82) 14]
Test Case: 248 | Input/Output: [(1 82 8 96) 1]
Test Case: 249 | Input/Output: [(19 65 6 73) 6]
Test Case: 250 | Input/Output: [(89 59 59 10) 10]
Test Case: 251 | Input/Output: [(61 80 83 37) 37]
Test Case: 252 | Input/Output: [(22 71 8 50) 8]
Test Case: 253 | Input/Output: [(40 1 59 100) 1]
Test Case: 254 | Input/Output: [(72 46 75 52) 46]
Test Case: 255 | Input/Output: [(83 52 87 17) 17]
Test Case: 256 | Input/Output: [(97 37 44 36) 36]
Test Case: 257 | Input/Output: [(77 12 91 31) 12]
Test Case: 258 | Input/Output: [(62 69 40 30) 30]
Test Case: 259 | Input/Output: [(7 97 66 62) 7]
Test Case: 260 | Input/Output: [(80 8 40 48) 8]
Test Case: 261 | Input/Output: [(65 1 8 19) 1]
Test Case: 262 | Input/Output: [(99 20 3 6) 3]
Test Case: 263 | Input/Output: [(40 27 97 42) 27]
Test Case: 264 | Input/Output: [(47 33 6 87) 6]
Test Case: 265 | Input/Output: [(39 68 79 90) 39]
Test Case: 266 | Input/Output: [(50 74 77 48) 48]
Test Case: 267 | Input/Output: [(97 42 42 13) 13]
Test Case: 268 | Input/Output: [(64 14 46 85) 14]
Test Case: 269 | Input/Output: [(71 61 91 76) 61]
Test Case: 270 | Input/Output: [(62 43 2 77) 2]
Test Case: 271 | Input/Output: [(21 43 51 65) 21]
Test Case: 272 | Input/Output: [(23 58 12 13) 12]
Test Case: 273 | Input/Output: [(57 53 99 34) 34]
Test Case: 274 | Input/Output: [(60 64 74 81) 60]
Test Case: 275 | Input/Output: [(7 62 81 13) 7]
Test Case: 276 | Input/Output: [(26 4 33 32) 4]
Test Case: 277 | Input/Output: [(65 53 10 13) 10]
Test Case: 278 | Input/Output: [(99 31 22 34) 22]
Test Case: 279 | Input/Output: [(82 89 45 53) 45]
Test Case: 280 | Input/Output: [(23 23 3 98) 3]
Test Case: 281 | Input/Output: [(74 44 79 79) 44]
Test Case: 282 | Input/Output: [(47 48 34 11) 11]
Test Case: 283 | Input/Output: [(98 6 14 23) 6]
Test Case: 284 | Input/Output: [(11 85 27 15) 11]
Test Case: 285 | Input/Output: [(77 23 11 45) 11]
Test Case: 286 | Input/Output: [(45 48 8 42) 8]
Test Case: 287 | Input/Output: [(90 57 38 46) 38]
Test Case: 288 | Input/Output: [(5 87 60 32) 5]
Test Case: 289 | Input/Output: [(71 32 96 40) 32]
Test Case: 290 | Input/Output: [(78 39 57 15) 15]
Test Case: 291 | Input/Output: [(72 41 51 80) 41]
Test Case: 292 | Input/Output: [(66 92 83 1) 1]
Test Case: 293 | Input/Output: [(18 28 14 14) 14]
Test Case: 294 | Input/Output: [(31 29 9 24) 9]
Test Case: 295 | Input/Output: [(40 84 87 50) 40]
Test Case: 296 | Input/Output: [(89 19 88 67) 19]
Test Case: 297 | Input/Output: [(11 99 66 54) 11]
Test Case: 298 | Input/Output: [(58 15 55 55) 15]
Test Case: 299 | Input/Output: [(60 83 36 80) 36]
Test Case: 300 | Input/Output: [(61 65 17 62) 17]
Test Case: 301 | Input/Output: [(58 44 50 16) 16]
Test Case: 302 | Input/Output: [(47 40 73 77) 40]
Test Case: 303 | Input/Output: [(52 7 46 80) 7]
Test Case: 304 | Input/Output: [(58 61 1 12) 1]
Test Case: 305 | Input/Output: [(10 23 24 2) 2]
Test Case: 306 | Input/Output: [(84 95 7 38) 7]
Test Case: 307 | Input/Output: [(21 30 62 17) 17]
Test Case: 308 | Input/Output: [(45 71 56 6) 6]
Test Case: 309 | Input/Output: [(33 22 100 2) 2]
Test Case: 310 | Input/Output: [(6 9 63 30) 6]
Test Case: 311 | Input/Output: [(78 91 59 68) 59]
Test Case: 312 | Input/Output: [(76 66 30 93) 30]
Test Case: 313 | Input/Output: [(43 47 45 66) 43]
Test Case: 314 | Input/Output: [(74 13 83 40) 13]
Test Case: 315 | Input/Output: [(37 30 0 95) 0]
Test Case: 316 | Input/Output: [(20 9 26 2) 2]
Test Case: 317 | Input/Output: [(75 20 11 46) 11]
Test Case: 318 | Input/Output: [(51 41 25 29) 25]
Test Case: 319 | Input/Output: [(52 74 35 48) 35]
Test Case: 320 | Input/Output: [(1 20 76 33) 1]
Test Case: 321 | Input/Output: [(27 85 10 90) 10]
Test Case: 322 | Input/Output: [(96 80 98 43) 43]
Test Case: 323 | Input/Output: [(85 79 88 48) 48]
Test Case: 324 | Input/Output: [(65 89 29 78) 29]
Test Case: 325 | Input/Output: [(62 43 31 59) 31]
Test Case: 326 | Input/Output: [(41 83 47 71) 41]
Test Case: 327 | Input/Output: [(74 21 42 48) 21]
Test Case: 328 | Input/Output: [(1 91 14 71) 1]
Test Case: 329 | Input/Output: [(65 77 57 59) 57]
Test Case: 330 | Input/Output: [(1 4 22 22) 1]
Test Case: 331 | Input/Output: [(31 10 34 36) 10]
Test Case: 332 | Input/Output: [(79 37 16 6) 6]
Test Case: 333 | Input/Output: [(91 87 10 3) 3]
Test Case: 334 | Input/Output: [(47 92 14 44) 14]
Test Case: 335 | Input/Output: [(21 95 68 49) 21]
Test Case: 336 | Input/Output: [(10 18 83 25) 10]
Test Case: 337 | Input/Output: [(9 31 16 21) 9]
Test Case: 338 | Input/Output: [(15 69 27 64) 15]
Test Case: 339 | Input/Output: [(6 52 87 48) 6]
Test Case: 340 | Input/Output: [(82 87 83 53) 53]
Test Case: 341 | Input/Output: [(23 13 19 78) 13]
Test Case: 342 | Input/Output: [(91 73 36 98) 36]
Test Case: 343 | Input/Output: [(72 6 31 22) 6]
Test Case: 344 | Input/Output: [(72 88 38 16) 16]
Test Case: 345 | Input/Output: [(51 86 54 35) 35]
Test Case: 346 | Input/Output: [(39 82 68 27) 27]
Test Case: 347 | Input/Output: [(70 18 39 49) 18]
Test Case: 348 | Input/Output: [(54 53 20 53) 20]
Test Case: 349 | Input/Output: [(78 85 8 54) 8]
Test Case: 350 | Input/Output: [(64 77 11 43) 11]
Test Case: 351 | Input/Output: [(78 55 51 76) 51]
Test Case: 352 | Input/Output: [(43 8 95 15) 8]
Test Case: 353 | Input/Output: [(56 43 78 12) 12]
Test Case: 354 | Input/Output: [(87 80 27 2) 2]
Test Case: 355 | Input/Output: [(9 46 56 64) 9]
Test Case: 356 | Input/Output: [(75 2 23 89) 2]
Test Case: 357 | Input/Output: [(10 0 9 32) 0]
Test Case: 358 | Input/Output: [(87 66 12 24) 12]
Test Case: 359 | Input/Output: [(76 65 39 69) 39]
Test Case: 360 | Input/Output: [(89 63 31 73) 31]
Test Case: 361 | Input/Output: [(43 42 38 90) 38]
Test Case: 362 | Input/Output: [(10 8 48 10) 8]
Test Case: 363 | Input/Output: [(96 64 100 40) 40]
Test Case: 364 | Input/Output: [(58 15 6 37) 6]
Test Case: 365 | Input/Output: [(53 77 70 12) 12]
Test Case: 366 | Input/Output: [(44 5 54 32) 5]
Test Case: 367 | Input/Output: [(75 49 35 31) 31]
Test Case: 368 | Input/Output: [(35 2 35 84) 2]
Test Case: 369 | Input/Output: [(60 74 25 8) 8]
Test Case: 370 | Input/Output: [(15 8 68 93) 8]
Test Case: 371 | Input/Output: [(89 19 50 69) 19]
Test Case: 372 | Input/Output: [(78 44 39 92) 39]
Test Case: 373 | Input/Output: [(70 99 30 72) 30]
Test Case: 374 | Input/Output: [(4 35 44 45) 4]
Test Case: 375 | Input/Output: [(55 61 33 95) 33]
Test Case: 376 | Input/Output: [(74 86 10 27) 10]
Test Case: 377 | Input/Output: [(41 5 0 70) 0]
Test Case: 378 | Input/Output: [(9 50 31 6) 6]
Test Case: 379 | Input/Output: [(99 48 67 16) 16]
Test Case: 380 | Input/Output: [(46 93 96 24) 24]
Test Case: 381 | Input/Output: [(60 66 50 54) 50]
Test Case: 382 | Input/Output: [(52 33 43 22) 22]
Test Case: 383 | Input/Output: [(64 90 28 41) 28]
Test Case: 384 | Input/Output: [(40 59 64 24) 24]
Test Case: 385 | Input/Output: [(43 99 96 40) 40]
Test Case: 386 | Input/Output: [(90 90 19 100) 19]
Test Case: 387 | Input/Output: [(75 22 82 68) 22]
Test Case: 388 | Input/Output: [(68 75 60 50) 50]
Test Case: 389 | Input/Output: [(51 96 65 13) 13]
Test Case: 390 | Input/Output: [(46 30 14 37) 14]
Test Case: 391 | Input/Output: [(11 75 84 80) 11]
Test Case: 392 | Input/Output: [(48 67 15 63) 15]
Test Case: 393 | Input/Output: [(10 99 68 25) 10]
Test Case: 394 | Input/Output: [(14 79 18 97) 14]
Test Case: 395 | Input/Output: [(91 18 99 63) 18]
Test Case: 396 | Input/Output: [(14 91 87 90) 14]
Test Case: 397 | Input/Output: [(68 63 53 63) 53]
Test Case: 398 | Input/Output: [(82 38 90 68) 38]
Test Case: 399 | Input/Output: [(68 67 79 41) 41]
Test Case: 400 | Input/Output: [(-90 29 -84 -76) -90]
Test Case: 401 | Input/Output: [(-57 91 -58 -68) -68]
Test Case: 402 | Input/Output: [(16 -46 -100 62) -100]
Test Case: 403 | Input/Output: [(-78 -40 -7 75) -78]
Test Case: 404 | Input/Output: [(-87 -45 91 -18) -87]
Test Case: 405 | Input/Output: [(94 -62 83 59) -62]
Test Case: 406 | Input/Output: [(17 -48 47 -51) -51]
Test Case: 407 | Input/Output: [(61 -50 -48 46) -50]
Test Case: 408 | Input/Output: [(30 76 90 -16) -16]
Test Case: 409 | Input/Output: [(3 -6 13 -91) -91]
Test Case: 410 | Input/Output: [(94 -19 82 -56) -56]
Test Case: 411 | Input/Output: [(47 -71 -1 22) -71]
Test Case: 412 | Input/Output: [(-23 -39 -44 29) -44]
Test Case: 413 | Input/Output: [(-52 34 10 -16) -52]
Test Case: 414 | Input/Output: [(87 -39 57 20) -39]
Test Case: 415 | Input/Output: [(-34 31 -51 -4) -51]
Test Case: 416 | Input/Output: [(40 -26 49 -94) -94]
Test Case: 417 | Input/Output: [(-22 13 30 27) -22]
Test Case: 418 | Input/Output: [(-6 87 -92 -12) -92]
Test Case: 419 | Input/Output: [(-82 -49 30 65) -82]
Test Case: 420 | Input/Output: [(-70 -39 24 -72) -72]
Test Case: 421 | Input/Output: [(-5 -87 49 78) -87]
Test Case: 422 | Input/Output: [(-25 -10 -61 -84) -84]
Test Case: 423 | Input/Output: [(64 18 -66 -43) -66]
Test Case: 424 | Input/Output: [(-45 -20 81 -87) -87]
Test Case: 425 | Input/Output: [(-77 80 -28 -30) -77]
Test Case: 426 | Input/Output: [(21 30 -36 -59) -59]
Test Case: 427 | Input/Output: [(-80 98 -31 -68) -80]
Test Case: 428 | Input/Output: [(78 38 100 9) 9]
Test Case: 429 | Input/Output: [(22 -79 60 52) -79]
Test Case: 430 | Input/Output: [(-60 5 -91 97) -91]
Test Case: 431 | Input/Output: [(-55 74 99 -92) -92]
Test Case: 432 | Input/Output: [(-10 69 93 53) -10]
Test Case: 433 | Input/Output: [(16 25 9 30) 9]
Test Case: 434 | Input/Output: [(-95 22 -7 12) -95]
Test Case: 435 | Input/Output: [(53 59 48 -73) -73]
Test Case: 436 | Input/Output: [(23 95 -23 -13) -23]
Test Case: 437 | Input/Output: [(-19 -72 -94 -83) -94]
Test Case: 438 | Input/Output: [(-8 -5 -52 -20) -52]
Test Case: 439 | Input/Output: [(-78 -19 65 -87) -87]
Test Case: 440 | Input/Output: [(-76 54 83 15) -76]
Test Case: 441 | Input/Output: [(97 -88 -84 33) -88]
Test Case: 442 | Input/Output: [(-37 -95 -73 -50) -95]
Test Case: 443 | Input/Output: [(85 -69 -20 -9) -69]
Test Case: 444 | Input/Output: [(-80 -32 -100 -64) -100]
Test Case: 445 | Input/Output: [(-21 -79 -46 60) -79]
Test Case: 446 | Input/Output: [(33 18 31 -94) -94]
Test Case: 447 | Input/Output: [(-62 -6 28 67) -62]
Test Case: 448 | Input/Output: [(-43 33 94 -16) -43]
Test Case: 449 | Input/Output: [(-38 -51 -6 91) -51]
Test Case: 450 | Input/Output: [(82 -73 41 80) -73]
Test Case: 451 | Input/Output: [(17 -50 56 -92) -92]
Test Case: 452 | Input/Output: [(24 13 72 -75) -75]
Test Case: 453 | Input/Output: [(-96 -32 -76 57) -96]
Test Case: 454 | Input/Output: [(72 -76 -83 -23) -83]
Test Case: 455 | Input/Output: [(-68 -19 -14 -98) -98]
Test Case: 456 | Input/Output: [(-66 -83 57 89) -83]
Test Case: 457 | Input/Output: [(5 16 -80 49) -80]
Test Case: 458 | Input/Output: [(27 -40 -88 29) -88]
Test Case: 459 | Input/Output: [(-30 12 6 -93) -93]
Test Case: 460 | Input/Output: [(-20 -17 -38 -96) -96]
Test Case: 461 | Input/Output: [(-20 -55 79 -95) -95]
Test Case: 462 | Input/Output: [(35 -63 1 -36) -63]
Test Case: 463 | Input/Output: [(35 42 34 25) 25]
Test Case: 464 | Input/Output: [(18 -50 -8 -84) -84]
Test Case: 465 | Input/Output: [(-60 41 -80 -34) -80]
Test Case: 466 | Input/Output: [(-26 -14 -92 -1) -92]
Test Case: 467 | Input/Output: [(93 -96 -59 -85) -96]
Test Case: 468 | Input/Output: [(-22 40 97 61) -22]
Test Case: 469 | Input/Output: [(83 -23 90 13) -23]
Test Case: 470 | Input/Output: [(-35 -58 -71 -57) -71]
Test Case: 471 | Input/Output: [(-79 46 -79 -6) -79]
Test Case: 472 | Input/Output: [(83 -54 39 20) -54]
Test Case: 473 | Input/Output: [(78 46 -98 -49) -98]
Test Case: 474 | Input/Output: [(34 97 40 21) 21]
Test Case: 475 | Input/Output: [(-76 -29 -1 -81) -81]
Test Case: 476 | Input/Output: [(-74 81 -46 88) -74]
Test Case: 477 | Input/Output: [(-9 95 -85 -55) -85]
Test Case: 478 | Input/Output: [(86 40 83 -8) -8]
Test Case: 479 | Input/Output: [(97 -12 -85 78) -85]
Test Case: 480 | Input/Output: [(37 -86 -3 -25) -86]
Test Case: 481 | Input/Output: [(94 31 -32 15) -32]
Test Case: 482 | Input/Output: [(-63 15 47 -36) -63]
Test Case: 483 | Input/Output: [(28 -4 -98 -1) -98]
Test Case: 484 | Input/Output: [(4 46 94 -28) -28]
Test Case: 485 | Input/Output: [(-68 -89 46 98) -89]
Test Case: 486 | Input/Output: [(1 -17 49 -69) -69]
Test Case: 487 | Input/Output: [(40 -69 -68 -15) -69]
Test Case: 488 | Input/Output: [(93 -100 -70 -4) -100]
Test Case: 489 | Input/Output: [(-88 91 -45 19) -88]
Test Case: 490 | Input/Output: [(80 86 -81 -56) -81]
Test Case: 491 | Input/Output: [(68 3 -59 77) -59]
Test Case: 492 | Input/Output: [(30 77 -62 -38) -62]
Test Case: 493 | Input/Output: [(-91 -56 98 70) -91]
Test Case: 494 | Input/Output: [(-51 -3 -45 3) -51]
Test Case: 495 | Input/Output: [(-5 90 25 33) -5]
Test Case: 496 | Input/Output: [(-58 -30 19 65) -58]
Test Case: 497 | Input/Output: [(39 7 92 18) 7]
Test Case: 498 | Input/Output: [(-17 51 -12 -44) -44]
Test Case: 499 | Input/Output: [(-99 51 22 -39) -99]
Test Case: 500 | Input/Output: [(-97 -16 -45 -78) -97]
Test Case: 501 | Input/Output: [(17 14 33 -94) -94]
Test Case: 502 | Input/Output: [(25 -16 -9 99) -16]
Test Case: 503 | Input/Output: [(-15 -67 -43 -72) -72]
Test Case: 504 | Input/Output: [(60 50 99 -77) -77]
Test Case: 505 | Input/Output: [(-50 5 86 -35) -50]
Test Case: 506 | Input/Output: [(2 53 29 30) 2]
Test Case: 507 | Input/Output: [(-85 15 39 -47) -85]
Test Case: 508 | Input/Output: [(-62 -53 80 36) -62]
Test Case: 509 | Input/Output: [(-64 -21 -2 36) -64]
Test Case: 510 | Input/Output: [(73 -23 67 -4) -23]
Test Case: 511 | Input/Output: [(-43 -91 71 89) -91]
Test Case: 512 | Input/Output: [(-12 -85 -30 33) -85]
Test Case: 513 | Input/Output: [(21 -54 -57 -52) -57]
Test Case: 514 | Input/Output: [(16 -48 -4 16) -48]
Test Case: 515 | Input/Output: [(-7 -31 -24 3) -31]
Test Case: 516 | Input/Output: [(47 -86 38 1) -86]
Test Case: 517 | Input/Output: [(32 50 76 3) 3]
Test Case: 518 | Input/Output: [(-38 -69 -50 9) -69]
Test Case: 519 | Input/Output: [(-12 74 -45 -55) -55]
Test Case: 520 | Input/Output: [(7 -48 51 38) -48]
Test Case: 521 | Input/Output: [(-34 21 -77 13) -77]
Test Case: 522 | Input/Output: [(91 89 67 -88) -88]
Test Case: 523 | Input/Output: [(-64 62 71 12) -64]
Test Case: 524 | Input/Output: [(68 -94 -33 -76) -94]
Test Case: 525 | Input/Output: [(-34 88 43 -89) -89]
Test Case: 526 | Input/Output: [(97 97 -51 -36) -51]
Test Case: 527 | Input/Output: [(-78 97 9 -74) -78]
Test Case: 528 | Input/Output: [(-12 -48 97 -22) -48]
Test Case: 529 | Input/Output: [(100 -81 54 -100) -100]
Test Case: 530 | Input/Output: [(-33 -41 -98 67) -98]
Test Case: 531 | Input/Output: [(-93 74 56 89) -93]
Test Case: 532 | Input/Output: [(45 -1 -69 18) -69]
Test Case: 533 | Input/Output: [(27 -18 61 -66) -66]
Test Case: 534 | Input/Output: [(8 -57 78 53) -57]
Test Case: 535 | Input/Output: [(-44 6 -100 62) -100]
Test Case: 536 | Input/Output: [(39 -68 -8 -56) -68]
Test Case: 537 | Input/Output: [(-47 -82 3 -34) -82]
Test Case: 538 | Input/Output: [(-79 -95 -71 57) -95]
Test Case: 539 | Input/Output: [(-51 -13 -64 89) -64]
Test Case: 540 | Input/Output: [(56 22 74 -86) -86]
Test Case: 541 | Input/Output: [(8 10 82 -58) -58]
Test Case: 542 | Input/Output: [(-29 -96 45 -35) -96]
Test Case: 543 | Input/Output: [(7 -66 39 -42) -66]
Test Case: 544 | Input/Output: [(75 85 -6 48) -6]
Test Case: 545 | Input/Output: [(-37 -43 -41 -13) -43]
Test Case: 546 | Input/Output: [(74 70 -50 80) -50]
Test Case: 547 | Input/Output: [(-8 -93 -39 -64) -93]
Test Case: 548 | Input/Output: [(-15 32 -15 22) -15]
Test Case: 549 | Input/Output: [(-45 38 -49 -31) -49]
Test Case: 550 | Input/Output: [(-44 49 -15 28) -44]
Test Case: 551 | Input/Output: [(38 49 -74 -23) -74]
Test Case: 552 | Input/Output: [(-37 15 0 61) -37]
Test Case: 553 | Input/Output: [(38 96 92 -80) -80]
Test Case: 554 | Input/Output: [(89 2 -74 42) -74]
Test Case: 555 | Input/Output: [(-5 -63 46 31) -63]
Test Case: 556 | Input/Output: [(-58 52 -84 -72) -84]
Test Case: 557 | Input/Output: [(-57 -80 -55 30) -80]
Test Case: 558 | Input/Output: [(11 42 79 -30) -30]
Test Case: 559 | Input/Output: [(-84 73 88 100) -84]
Test Case: 560 | Input/Output: [(-66 -69 -64 28) -69]
Test Case: 561 | Input/Output: [(72 96 -10 23) -10]
Test Case: 562 | Input/Output: [(-18 -60 -99 -18) -99]
Test Case: 563 | Input/Output: [(15 -90 -58 45) -90]
Test Case: 564 | Input/Output: [(64 -66 20 -88) -88]
Test Case: 565 | Input/Output: [(-59 39 93 -51) -59]
Test Case: 566 | Input/Output: [(-75 -72 -56 35) -75]
Test Case: 567 | Input/Output: [(-100 35 -13 63) -100]
Test Case: 568 | Input/Output: [(65 28 -42 -3) -42]
Test Case: 569 | Input/Output: [(-67 90 -69 64) -69]
Test Case: 570 | Input/Output: [(82 53 17 -2) -2]
Test Case: 571 | Input/Output: [(37 85 -38 24) -38]
Test Case: 572 | Input/Output: [(-13 40 -9 90) -13]
Test Case: 573 | Input/Output: [(13 -100 64 77) -100]
Test Case: 574 | Input/Output: [(-48 14 -81 59) -81]
Test Case: 575 | Input/Output: [(-53 31 61 2) -53]
Test Case: 576 | Input/Output: [(-31 93 -32 -79) -79]
Test Case: 577 | Input/Output: [(73 -71 -81 -8) -81]
Test Case: 578 | Input/Output: [(-81 5 32 70) -81]
Test Case: 579 | Input/Output: [(-90 28 21 -97) -97]
Test Case: 580 | Input/Output: [(-31 0 -14 16) -31]
Test Case: 581 | Input/Output: [(78 -16 43 -52) -52]
Test Case: 582 | Input/Output: [(-11 -64 -19 -100) -100]
Test Case: 583 | Input/Output: [(-28 75 -75 26) -75]
Test Case: 584 | Input/Output: [(35 -40 9 -49) -49]
Test Case: 585 | Input/Output: [(-88 40 -39 30) -88]
Test Case: 586 | Input/Output: [(2 -90 25 84) -90]
Test Case: 587 | Input/Output: [(59 61 -89 94) -89]
Test Case: 588 | Input/Output: [(12 -29 -22 29) -29]
Test Case: 589 | Input/Output: [(-84 -28 81 -54) -84]
Test Case: 590 | Input/Output: [(-15 -42 40 12) -42]
Test Case: 591 | Input/Output: [(31 96 5 52) 5]
Test Case: 592 | Input/Output: [(-91 31 11 -15) -91]
Test Case: 593 | Input/Output: [(81 -39 35 81) -39]
Test Case: 594 | Input/Output: [(-6 -78 -74 88) -78]
Test Case: 595 | Input/Output: [(71 62 -57 44) -57]
Test Case: 596 | Input/Output: [(63 -46 26 -47) -47]
Test Case: 597 | Input/Output: [(75 71 -91 -43) -91]
Test Case: 598 | Input/Output: [(-25 -79 -65 -3) -79]
Test Case: 599 | Input/Output: [(75 98 53 20) 20]
Test Case: 600 | Input/Output: [(-12 -80 16 92) -80]
Test Case: 601 | Input/Output: [(-58 -61 45 63) -61]
Test Case: 602 | Input/Output: [(-72 61 55 31) -72]
Test Case: 603 | Input/Output: [(25 -19 -82 10) -82]
Test Case: 604 | Input/Output: [(20 -83 11 -19) -83]
Test Case: 605 | Input/Output: [(-43 -41 2 -91) -91]
Test Case: 606 | Input/Output: [(-64 35 10 -71) -71]
Test Case: 607 | Input/Output: [(-60 40 63 7) -60]
Test Case: 608 | Input/Output: [(-68 -40 -58 19) -68]
Test Case: 609 | Input/Output: [(-22 -96 58 -37) -96]
Test Case: 610 | Input/Output: [(-38 42 -47 -56) -56]
Test Case: 611 | Input/Output: [(99 -72 -37 85) -72]
Test Case: 612 | Input/Output: [(79 57 -12 23) -12]
Test Case: 613 | Input/Output: [(-87 17 4 -29) -87]
Test Case: 614 | Input/Output: [(66 81 -78 43) -78]
Test Case: 615 | Input/Output: [(-10 -84 33 93) -84]
Test Case: 616 | Input/Output: [(35 70 56 -80) -80]
Test Case: 617 | Input/Output: [(-2 61 86 81) -2]
Test Case: 618 | Input/Output: [(-12 69 -50 -47) -50]
Test Case: 619 | Input/Output: [(25 -70 -73 10) -73]
Test Case: 620 | Input/Output: [(74 45 -62 78) -62]
Test Case: 621 | Input/Output: [(-36 -3 88 89) -36]
Test Case: 622 | Input/Output: [(85 -21 -90 1) -90]
Test Case: 623 | Input/Output: [(60 60 -89 -17) -89]
Test Case: 624 | Input/Output: [(33 4 51 -9) -9]
Test Case: 625 | Input/Output: [(-14 14 -51 -24) -51]
Test Case: 626 | Input/Output: [(13 -54 -13 41) -54]
Test Case: 627 | Input/Output: [(-72 77 -98 97) -98]
Test Case: 628 | Input/Output: [(-81 -67 11 41) -81]
Test Case: 629 | Input/Output: [(-14 89 -77 -57) -77]
Test Case: 630 | Input/Output: [(46 36 90 -2) -2]
Test Case: 631 | Input/Output: [(14 81 -97 91) -97]
Test Case: 632 | Input/Output: [(-90 -59 -81 -97) -97]
Test Case: 633 | Input/Output: [(21 40 74 -1) -1]
Test Case: 634 | Input/Output: [(-99 -76 -95 53) -99]
Test Case: 635 | Input/Output: [(72 6 -75 44) -75]
Test Case: 636 | Input/Output: [(-66 91 -22 16) -66]
Test Case: 637 | Input/Output: [(-27 68 53 -16) -27]
Test Case: 638 | Input/Output: [(-71 -90 -49 -93) -93]
Test Case: 639 | Input/Output: [(-56 -65 75 -95) -95]
Test Case: 640 | Input/Output: [(-39 -31 64 -48) -48]
Test Case: 641 | Input/Output: [(87 -64 38 -33) -64]
Test Case: 642 | Input/Output: [(2 -12 98 13) -12]
Test Case: 643 | Input/Output: [(93 10 -60 -49) -60]
Test Case: 644 | Input/Output: [(86 -37 44 100) -37]
Test Case: 645 | Input/Output: [(53 5 -99 -70) -99]
Test Case: 646 | Input/Output: [(54 83 -55 -41) -55]
Test Case: 647 | Input/Output: [(-100 -63 -14 61) -100]
Test Case: 648 | Input/Output: [(47 -58 97 -56) -58]
Test Case: 649 | Input/Output: [(-22 83 4 -65) -65]
Test Case: 650 | Input/Output: [(5 -84 -99 9) -99]
Test Case: 651 | Input/Output: [(99 -50 64 100) -50]
Test Case: 652 | Input/Output: [(52 -23 35 -27) -27]
Test Case: 653 | Input/Output: [(94 -83 83 4) -83]
Test Case: 654 | Input/Output: [(-15 2 47 35) -15]
Test Case: 655 | Input/Output: [(-35 37 -48 -2) -48]
Test Case: 656 | Input/Output: [(-2 98 -82 12) -82]
Test Case: 657 | Input/Output: [(65 -69 91 33) -69]
Test Case: 658 | Input/Output: [(40 42 42 -51) -51]
Test Case: 659 | Input/Output: [(33 -37 32 83) -37]
Test Case: 660 | Input/Output: [(0 -88 16 -28) -88]
Test Case: 661 | Input/Output: [(42 23 55 -48) -48]
Test Case: 662 | Input/Output: [(-73 -44 -98 19) -98]
Test Case: 663 | Input/Output: [(-30 100 53 -5) -30]
Test Case: 664 | Input/Output: [(-27 -65 -92 87) -92]
Test Case: 665 | Input/Output: [(72 -100 -96 79) -100]
Test Case: 666 | Input/Output: [(52 10 -35 -28) -35]
Test Case: 667 | Input/Output: [(43 94 -69 42) -69]
Test Case: 668 | Input/Output: [(44 49 16 57) 16]
Test Case: 669 | Input/Output: [(0 47 80 43) 0]
Test Case: 670 | Input/Output: [(-81 -95 -27 -78) -95]
Test Case: 671 | Input/Output: [(-33 48 82 53) -33]
Test Case: 672 | Input/Output: [(50 -4 29 -37) -37]
Test Case: 673 | Input/Output: [(20 37 -72 -96) -96]
Test Case: 674 | Input/Output: [(-24 89 5 14) -24]
Test Case: 675 | Input/Output: [(-55 -46 -14 -98) -98]
Test Case: 676 | Input/Output: [(72 -25 -41 14) -41]
Test Case: 677 | Input/Output: [(11 -22 80 53) -22]
Test Case: 678 | Input/Output: [(63 91 67 90) 63]
Test Case: 679 | Input/Output: [(-3 -18 -43 -10) -43]
Test Case: 680 | Input/Output: [(-67 -25 -60 39) -67]
Test Case: 681 | Input/Output: [(-15 -71 -5 -60) -71]
Test Case: 682 | Input/Output: [(-3 55 95 41) -3]
Test Case: 683 | Input/Output: [(-99 11 -97 -57) -99]
Test Case: 684 | Input/Output: [(90 -42 54 -64) -64]
Test Case: 685 | Input/Output: [(-47 -26 -94 -10) -94]
Test Case: 686 | Input/Output: [(-30 49 -89 18) -89]
Test Case: 687 | Input/Output: [(29 -60 -50 -96) -96]
Test Case: 688 | Input/Output: [(-90 -64 -39 97) -90]
Test Case: 689 | Input/Output: [(-100 -57 92 -22) -100]
Test Case: 690 | Input/Output: [(8 -21 65 95) -21]
Test Case: 691 | Input/Output: [(92 -62 33 -67) -67]
Test Case: 692 | Input/Output: [(64 44 -45 -11) -45]
Test Case: 693 | Input/Output: [(-90 30 100 26) -90]
Test Case: 694 | Input/Output: [(29 47 -58 -84) -84]
Test Case: 695 | Input/Output: [(80 -34 72 48) -34]
Test Case: 696 | Input/Output: [(-13 54 -23 46) -23]
Test Case: 697 | Input/Output: [(-16 47 -53 -40) -53]
Test Case: 698 | Input/Output: [(73 42 0 -95) -95]
Test Case: 699 | Input/Output: [(2 -81 51 55) -81]
Test Case: 700 | Input/Output: [(-67 -71 28 71) -71]
Test Case: 701 | Input/Output: [(58 54 69 -72) -72]
Test Case: 702 | Input/Output: [(93 -57 89 -50) -57]
Test Case: 703 | Input/Output: [(-21 -4 -58 -9) -58]
Test Case: 704 | Input/Output: [(-49 74 96 -30) -49]
Test Case: 705 | Input/Output: [(89 -78 64 26) -78]
Test Case: 706 | Input/Output: [(24 89 99 94) 24]
Test Case: 707 | Input/Output: [(41 -41 -51 -35) -51]
Test Case: 708 | Input/Output: [(-37 -86 19 30) -86]
Test Case: 709 | Input/Output: [(-5 -2 85 -36) -36]
Test Case: 710 | Input/Output: [(11 88 -43 -78) -78]
Test Case: 711 | Input/Output: [(46 69 -72 -65) -72]
Test Case: 712 | Input/Output: [(22 9 23 -99) -99]
Test Case: 713 | Input/Output: [(-80 79 -75 -55) -80]
Test Case: 714 | Input/Output: [(67 57 -80 -18) -80]
Test Case: 715 | Input/Output: [(-4 52 43 69) -4]
Test Case: 716 | Input/Output: [(10 88 -88 12) -88]
Test Case: 717 | Input/Output: [(78 -35 74 44) -35]
Test Case: 718 | Input/Output: [(-53 -93 -50 43) -93]
Test Case: 719 | Input/Output: [(69 4 -28 36) -28]
Test Case: 720 | Input/Output: [(4 41 -38 -52) -52]
Test Case: 721 | Input/Output: [(33 -65 61 -23) -65]
Test Case: 722 | Input/Output: [(-15 38 -4 30) -15]
Test Case: 723 | Input/Output: [(84 26 -24 6) -24]
Test Case: 724 | Input/Output: [(10 57 63 71) 10]
Test Case: 725 | Input/Output: [(16 -65 -64 -70) -70]
Test Case: 726 | Input/Output: [(64 68 -10 17) -10]
Test Case: 727 | Input/Output: [(-48 53 -66 -60) -66]
Test Case: 728 | Input/Output: [(50 24 91 -47) -47]
Test Case: 729 | Input/Output: [(-25 -11 16 3) -25]
Test Case: 730 | Input/Output: [(-73 -93 72 46) -93]
Test Case: 731 | Input/Output: [(-56 -24 -99 -12) -99]
Test Case: 732 | Input/Output: [(16 -92 -90 -76) -92]
Test Case: 733 | Input/Output: [(29 -31 -5 2) -31]
Test Case: 734 | Input/Output: [(85 79 29 -15) -15]
Test Case: 735 | Input/Output: [(92 19 71 53) 19]
Test Case: 736 | Input/Output: [(10 18 -12 -33) -33]
Test Case: 737 | Input/Output: [(-66 -90 92 -54) -90]
Test Case: 738 | Input/Output: [(-87 -11 19 -48) -87]
Test Case: 739 | Input/Output: [(-20 42 26 -71) -71]
Test Case: 740 | Input/Output: [(-49 -45 -40 96) -49]
Test Case: 741 | Input/Output: [(-59 -64 79 -72) -72]
Test Case: 742 | Input/Output: [(-20 61 40 73) -20]
Test Case: 743 | Input/Output: [(-43 78 -39 -53) -53]
Test Case: 744 | Input/Output: [(-88 -69 74 56) -88]
Test Case: 745 | Input/Output: [(-44 64 -69 -31) -69]
Test Case: 746 | Input/Output: [(-33 85 -69 100) -69]
Test Case: 747 | Input/Output: [(-35 -25 33 -89) -89]
Test Case: 748 | Input/Output: [(74 -69 3 28) -69]
Test Case: 749 | Input/Output: [(15 -22 12 80) -22]
Test Case: 750 | Input/Output: [(-46 -32 -48 -30) -48]
Test Case: 751 | Input/Output: [(86 -35 -36 47) -36]
Test Case: 752 | Input/Output: [(11 -24 72 -47) -47]
Test Case: 753 | Input/Output: [(-98 91 -64 8) -98]
Test Case: 754 | Input/Output: [(63 45 -42 -1) -42]
Test Case: 755 | Input/Output: [(-55 -30 12 -62) -62]
Test Case: 756 | Input/Output: [(-16 -74 -56 36) -74]
Test Case: 757 | Input/Output: [(-21 -68 -89 -99) -99]
Test Case: 758 | Input/Output: [(-69 -62 -58 -39) -69]
Test Case: 759 | Input/Output: [(15 -82 94 47) -82]
Test Case: 760 | Input/Output: [(-69 33 -5 35) -69]
Test Case: 761 | Input/Output: [(80 -53 94 -50) -53]
Test Case: 762 | Input/Output: [(-81 32 42 38) -81]
Test Case: 763 | Input/Output: [(5 -51 47 2) -51]
Test Case: 764 | Input/Output: [(41 27 -3 -36) -36]
Test Case: 765 | Input/Output: [(-7 90 12 98) -7]
Test Case: 766 | Input/Output: [(18 98 -10 -7) -10]
Test Case: 767 | Input/Output: [(-30 -4 55 -16) -30]
Test Case: 768 | Input/Output: [(-79 -56 26 -4) -79]
Test Case: 769 | Input/Output: [(38 -32 -80 46) -80]
Test Case: 770 | Input/Output: [(66 84 -71 -35) -71]
Test Case: 771 | Input/Output: [(-82 80 -60 -89) -89]
Test Case: 772 | Input/Output: [(17 -37 -77 26) -77]
Test Case: 773 | Input/Output: [(25 -13 73 98) -13]
Test Case: 774 | Input/Output: [(-75 -3 -83 54) -83]
Test Case: 775 | Input/Output: [(48 -26 23 -38) -38]
Test Case: 776 | Input/Output: [(-76 75 -57 -18) -76]
Test Case: 777 | Input/Output: [(44 38 -50 73) -50]
Test Case: 778 | Input/Output: [(-48 34 2 -83) -83]
Test Case: 779 | Input/Output: [(-29 31 -87 34) -87]
Test Case: 780 | Input/Output: [(-22 -51 62 5) -51]
Test Case: 781 | Input/Output: [(-74 -23 -78 -52) -78]
Test Case: 782 | Input/Output: [(0 22 56 33) 0]
Test Case: 783 | Input/Output: [(71 69 96 25) 25]
Test Case: 784 | Input/Output: [(82 13 40 -11) -11]
Test Case: 785 | Input/Output: [(-13 3 15 -44) -44]
Test Case: 786 | Input/Output: [(75 28 -95 -37) -95]
Test Case: 787 | Input/Output: [(-54 12 18 -7) -54]
Test Case: 788 | Input/Output: [(-81 4 43 61) -81]
Test Case: 789 | Input/Output: [(-70 91 46 -22) -70]
Test Case: 790 | Input/Output: [(10 98 52 61) 10]
Test Case: 791 | Input/Output: [(-37 -94 88 93) -94]
Test Case: 792 | Input/Output: [(65 -32 39 33) -32]
Test Case: 793 | Input/Output: [(45 3 72 -64) -64]
Test Case: 794 | Input/Output: [(-40 19 -16 91) -40]
Test Case: 795 | Input/Output: [(25 -64 -85 6) -85]
Test Case: 796 | Input/Output: [(-49 -95 24 55) -95]
Test Case: 797 | Input/Output: [(-20 -36 -11 -84) -84]
Test Case: 798 | Input/Output: [(20 -45 -37 97) -45]
Test Case: 799 | Input/Output: [(-73 -91 87 -88) -91]
Test Case: 800 | Input/Output: [(-69 91 -82 40) -82]
Test Case: 801 | Input/Output: [(93 85 -24 -53) -53]
Test Case: 802 | Input/Output: [(-22 -69 82 38) -69]
Test Case: 803 | Input/Output: [(60 -85 4 -43) -85]
Test Case: 804 | Input/Output: [(100 -92 -56 93) -92]
Test Case: 805 | Input/Output: [(78 -88 62 84) -88]
Test Case: 806 | Input/Output: [(-45 -65 25 -65) -65]
Test Case: 807 | Input/Output: [(86 -23 71 -61) -61]
Test Case: 808 | Input/Output: [(-79 -22 35 40) -79]
Test Case: 809 | Input/Output: [(-58 22 -56 -70) -70]
Test Case: 810 | Input/Output: [(17 76 33 -49) -49]
Test Case: 811 | Input/Output: [(-18 -9 -53 -39) -53]
Test Case: 812 | Input/Output: [(-31 -28 -47 -25) -47]
Test Case: 813 | Input/Output: [(-77 8 -47 -63) -77]
Test Case: 814 | Input/Output: [(10 -81 79 8) -81]
Test Case: 815 | Input/Output: [(-85 56 -40 95) -85]
Test Case: 816 | Input/Output: [(48 35 63 74) 35]
Test Case: 817 | Input/Output: [(11 -34 99 40) -34]
Test Case: 818 | Input/Output: [(-58 -72 -36 63) -72]
Test Case: 819 | Input/Output: [(45 100 -56 15) -56]
Test Case: 820 | Input/Output: [(-37 -90 8 69) -90]
Test Case: 821 | Input/Output: [(-25 36 -11 -84) -84]
Test Case: 822 | Input/Output: [(62 76 -50 -28) -50]
Test Case: 823 | Input/Output: [(87 37 59 -17) -17]
Test Case: 824 | Input/Output: [(-52 80 22 -69) -69]
Test Case: 825 | Input/Output: [(-15 0 58 46) -15]
Test Case: 826 | Input/Output: [(-25 69 -22 -14) -25]
Test Case: 827 | Input/Output: [(-3 -98 -24 91) -98]
Test Case: 828 | Input/Output: [(95 -25 -46 49) -46]
Test Case: 829 | Input/Output: [(-86 -28 -65 89) -86]
Test Case: 830 | Input/Output: [(-83 -2 -54 -66) -83]
Test Case: 831 | Input/Output: [(-61 -21 -11 31) -61]
Test Case: 832 | Input/Output: [(0 72 -98 -68) -98]
Test Case: 833 | Input/Output: [(53 -68 75 -31) -68]
Test Case: 834 | Input/Output: [(-37 80 88 68) -37]
Test Case: 835 | Input/Output: [(-4 44 23 1) -4]
Test Case: 836 | Input/Output: [(71 86 13 -41) -41]
Test Case: 837 | Input/Output: [(64 -74 -72 76) -74]
Test Case: 838 | Input/Output: [(-27 33 1 10) -27]
Test Case: 839 | Input/Output: [(-27 -91 -28 -33) -91]
Test Case: 840 | Input/Output: [(-68 58 -67 -42) -68]
Test Case: 841 | Input/Output: [(37 36 -35 -4) -35]
Test Case: 842 | Input/Output: [(-54 -22 9 -35) -54]
Test Case: 843 | Input/Output: [(30 27 18 -57) -57]
Test Case: 844 | Input/Output: [(-30 -19 16 -78) -78]
Test Case: 845 | Input/Output: [(-39 -82 -96 -71) -96]
Test Case: 846 | Input/Output: [(-44 -39 47 -94) -94]
Test Case: 847 | Input/Output: [(36 -89 -5 -88) -89]
Test Case: 848 | Input/Output: [(-38 -66 12 87) -66]
Test Case: 849 | Input/Output: [(-42 -69 -20 2) -69]
Test Case: 850 | Input/Output: [(41 -77 -36 26) -77]
Test Case: 851 | Input/Output: [(-55 32 54 -43) -55]
Test Case: 852 | Input/Output: [(72 24 60 -82) -82]
Test Case: 853 | Input/Output: [(-75 25 36 30) -75]
Test Case: 854 | Input/Output: [(50 -68 -6 -31) -68]
Test Case: 855 | Input/Output: [(-2 82 -9 -31) -31]
Test Case: 856 | Input/Output: [(100 16 1 -49) -49]
Test Case: 857 | Input/Output: [(-88 30 -60 -23) -88]
Test Case: 858 | Input/Output: [(-26 -61 -57 0) -61]
Test Case: 859 | Input/Output: [(-65 -29 -100 77) -100]
Test Case: 860 | Input/Output: [(11 -38 49 95) -38]
Test Case: 861 | Input/Output: [(-63 -82 15 -33) -82]
Test Case: 862 | Input/Output: [(49 62 -22 -49) -49]
Test Case: 863 | Input/Output: [(-19 -1 -43 40) -43]
Test Case: 864 | Input/Output: [(-90 34 -44 68) -90]
Test Case: 865 | Input/Output: [(97 11 -14 -23) -23]
Test Case: 866 | Input/Output: [(44 89 37 -67) -67]
Test Case: 867 | Input/Output: [(-56 -89 -60 91) -89]
Test Case: 868 | Input/Output: [(90 -26 -10 -49) -49]
Test Case: 869 | Input/Output: [(-58 31 87 7) -58]
Test Case: 870 | Input/Output: [(-73 20 71 -42) -73]
Test Case: 871 | Input/Output: [(-13 -49 98 -100) -100]
Test Case: 872 | Input/Output: [(-44 66 51 98) -44]
Test Case: 873 | Input/Output: [(-12 15 -6 -92) -92]
Test Case: 874 | Input/Output: [(-11 46 -93 0) -93]
Test Case: 875 | Input/Output: [(16 -21 -18 83) -21]
Test Case: 876 | Input/Output: [(70 79 36 -32) -32]
Test Case: 877 | Input/Output: [(67 -33 -21 10) -33]
Test Case: 878 | Input/Output: [(-19 -10 84 6) -19]
Test Case: 879 | Input/Output: [(-100 71 30 -55) -100]
Test Case: 880 | Input/Output: [(-33 -77 42 20) -77]
Test Case: 881 | Input/Output: [(-80 -93 83 86) -93]
Test Case: 882 | Input/Output: [(-54 -41 -84 -4) -84]
Test Case: 883 | Input/Output: [(-19 40 95 47) -19]
Test Case: 884 | Input/Output: [(40 29 86 71) 29]
Test Case: 885 | Input/Output: [(13 -51 -6 25) -51]
Test Case: 886 | Input/Output: [(91 -10 -29 -2) -29]
Test Case: 887 | Input/Output: [(24 -49 32 -38) -49]
Test Case: 888 | Input/Output: [(81 -4 23 84) -4]
Test Case: 889 | Input/Output: [(42 -19 29 2) -19]
Test Case: 890 | Input/Output: [(60 38 -10 -44) -44]
Test Case: 891 | Input/Output: [(-11 -65 -42 -84) -84]
Test Case: 892 | Input/Output: [(-84 -8 -42 -51) -84]
Test Case: 893 | Input/Output: [(53 44 -44 28) -44]
Test Case: 894 | Input/Output: [(-66 -22 54 -52) -66]
Test Case: 895 | Input/Output: [(44 -11 51 -35) -35]
Test Case: 896 | Input/Output: [(30 -88 -21 10) -88]
Test Case: 897 | Input/Output: [(-91 54 31 87) -91]
Test Case: 898 | Input/Output: [(-45 65 -59 78) -59]
Test Case: 899 | Input/Output: [(-52 82 33 50) -52]
Test Case: 900 | Input/Output: [(-36 71 -27 -10) -36]
Test Case: 901 | Input/Output: [(15 6 40 -48) -48]
Test Case: 902 | Input/Output: [(85 98 56 57) 56]
Test Case: 903 | Input/Output: [(10 36 49 89) 10]
Test Case: 904 | Input/Output: [(-43 -37 96 -93) -93]
Test Case: 905 | Input/Output: [(10 -87 99 30) -87]
Test Case: 906 | Input/Output: [(63 -16 88 -11) -16]
Test Case: 907 | Input/Output: [(-51 -88 -97 97) -97]
Test Case: 908 | Input/Output: [(-94 -23 0 -50) -94]
Test Case: 909 | Input/Output: [(23 36 69 -59) -59]
Test Case: 910 | Input/Output: [(-13 37 41 -95) -95]
Test Case: 911 | Input/Output: [(-79 43 -38 56) -79]
Test Case: 912 | Input/Output: [(-27 39 10 -64) -64]
Test Case: 913 | Input/Output: [(92 4 -16 41) -16]
Test Case: 914 | Input/Output: [(49 -95 -64 76) -95]
Test Case: 915 | Input/Output: [(-94 75 2 -8) -94]
Test Case: 916 | Input/Output: [(21 85 23 -30) -30]
Test Case: 917 | Input/Output: [(41 -21 -34 16) -34]
Test Case: 918 | Input/Output: [(-18 43 92 -10) -18]
Test Case: 919 | Input/Output: [(89 -72 66 82) -72]
Test Case: 920 | Input/Output: [(-23 -53 69 -56) -56]
Test Case: 921 | Input/Output: [(23 -28 25 67) -28]
Test Case: 922 | Input/Output: [(64 -69 -83 24) -83]
Test Case: 923 | Input/Output: [(-100 -79 64 28) -100]
Test Case: 924 | Input/Output: [(-90 -27 70 1) -90]
Test Case: 925 | Input/Output: [(-76 37 22 77) -76]
Test Case: 926 | Input/Output: [(88 69 45 -29) -29]
Test Case: 927 | Input/Output: [(38 -60 65 48) -60]
Test Case: 928 | Input/Output: [(-33 95 -80 -25) -80]
Test Case: 929 | Input/Output: [(96 -100 -2 -67) -100]
Test Case: 930 | Input/Output: [(100 -79 -32 49) -79]
Test Case: 931 | Input/Output: [(-24 31 17 -46) -46]
Test Case: 932 | Input/Output: [(-7 51 -3 -86) -86]
Test Case: 933 | Input/Output: [(35 36 99 38) 35]
Test Case: 934 | Input/Output: [(37 -68 -37 78) -68]
Test Case: 935 | Input/Output: [(52 95 -3 40) -3]
Test Case: 936 | Input/Output: [(57 84 -43 76) -43]
Test Case: 937 | Input/Output: [(78 -33 -54 97) -54]
Test Case: 938 | Input/Output: [(-7 9 -22 -92) -92]
Test Case: 939 | Input/Output: [(-33 20 -26 58) -33]
Test Case: 940 | Input/Output: [(-85 66 72 -50) -85]
Test Case: 941 | Input/Output: [(-58 -82 -81 -22) -82]
Test Case: 942 | Input/Output: [(8 -26 -85 7) -85]
Test Case: 943 | Input/Output: [(43 43 -63 60) -63]
Test Case: 944 | Input/Output: [(-40 28 55 -47) -47]
Test Case: 945 | Input/Output: [(-48 -43 20 -40) -48]
Test Case: 946 | Input/Output: [(-86 1 100 -75) -86]
Test Case: 947 | Input/Output: [(83 -23 -4 -66) -66]
Test Case: 948 | Input/Output: [(70 34 8 50) 8]
Test Case: 949 | Input/Output: [(11 -32 -79 79) -79]
Test Case: 950 | Input/Output: [(13 -42 -43 21) -43]
Test Case: 951 | Input/Output: [(-19 48 -73 -61) -73]
Test Case: 952 | Input/Output: [(-11 -94 46 15) -94]
Test Case: 953 | Input/Output: [(-76 70 -93 95) -93]
Test Case: 954 | Input/Output: [(69 16 -42 52) -42]
Test Case: 955 | Input/Output: [(-18 90 -40 -20) -40]
Test Case: 956 | Input/Output: [(96 52 95 -24) -24]
Test Case: 957 | Input/Output: [(-11 60 27 82) -11]
Test Case: 958 | Input/Output: [(37 63 83 -93) -93]
Test Case: 959 | Input/Output: [(-91 94 65 79) -91]
Test Case: 960 | Input/Output: [(80 27 22 32) 22]
Test Case: 961 | Input/Output: [(58 -94 22 46) -94]
Test Case: 962 | Input/Output: [(-39 56 9 -17) -39]
Test Case: 963 | Input/Output: [(63 90 55 45) 45]
Test Case: 964 | Input/Output: [(55 81 44 98) 44]
Test Case: 965 | Input/Output: [(-79 5 6 -73) -79]
Test Case: 966 | Input/Output: [(-71 90 -91 61) -91]
Test Case: 967 | Input/Output: [(-52 12 -37 -28) -52]
Test Case: 968 | Input/Output: [(68 -17 -32 67) -32]
Test Case: 969 | Input/Output: [(29 75 56 90) 29]
Test Case: 970 | Input/Output: [(-31 84 16 12) -31]
Test Case: 971 | Input/Output: [(15 66 -73 83) -73]
Test Case: 972 | Input/Output: [(14 2 -8 -35) -35]
Test Case: 973 | Input/Output: [(90 78 51 42) 42]
Test Case: 974 | Input/Output: [(31 -46 49 -42) -46]
Test Case: 975 | Input/Output: [(64 -69 -65 56) -69]
Test Case: 976 | Input/Output: [(-95 36 -72 -70) -95]
Test Case: 977 | Input/Output: [(51 -26 -31 65) -31]
Test Case: 978 | Input/Output: [(-49 -28 -11 -57) -57]
Test Case: 979 | Input/Output: [(65 -11 43 87) -11]
Test Case: 980 | Input/Output: [(-83 74 -48 56) -83]
Test Case: 981 | Input/Output: [(67 -100 -12 22) -100]
Test Case: 982 | Input/Output: [(14 -11 -15 77) -15]
Test Case: 983 | Input/Output: [(65 8 -67 -92) -92]
Test Case: 984 | Input/Output: [(39 -47 64 -56) -56]
Test Case: 985 | Input/Output: [(-90 -93 -81 -83) -93]
Test Case: 986 | Input/Output: [(-19 23 84 -40) -40]
Test Case: 987 | Input/Output: [(-69 92 32 31) -69]
Test Case: 988 | Input/Output: [(2 -35 84 61) -35]
Test Case: 989 | Input/Output: [(16 -86 -15 81) -86]
Test Case: 990 | Input/Output: [(-73 -17 84 -76) -76]
Test Case: 991 | Input/Output: [(-99 12 -53 -16) -99]
Test Case: 992 | Input/Output: [(34 -34 45 -68) -68]
Test Case: 993 | Input/Output: [(89 -6 -100 -19) -100]
Test Case: 994 | Input/Output: [(66 -4 14 -29) -29]
Test Case: 995 | Input/Output: [(20 42 76 -74) -74]
Test Case: 996 | Input/Output: [(-56 -92 -53 -28) -92]
Test Case: 997 | Input/Output: [(56 77 83 94) 56]
Test Case: 998 | Input/Output: [(-28 -34 44 5) -34]
Test Case: 999 | Input/Output: [(-80 -79 46 -46) -80]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -28 58 -108 78 -5 77 47 -62 21 -31 -15 90 -104 36 -41 -34
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[9 9 82 9] 9] [[23 -82 23 23] -82] [[25 25 25 -80] -80] [[-15 -15 87 -15] -15] [[-13 -13 -13 66] -13] [[99 -71 99 99] -71] [[-46 79 79 79] -46] [[-17 -17 -48 -17] -48] [[17 -31 -31 -31] -31] [[95 -77 -77 -77] -77] [(44 44 44 44) 44] [(-92 -92 -92 -92) -92] [(39 39 39 39) 39] [(85 85 85 85) 85] [(58 58 58 58) 58] [(20 23 61 67) 20] [(4 51 6 8) 4] [(10 23 29 2) 2] [(54 23 45 52) 23] [(83 88 41 69) 41] [(68 67 31 24) 24] [(20 27 60 47) 20] [(73 89 82 80) 73] [(88 96 64 95) 64] [(23 45 25 74) 23] [(9 92 91 37) 9] [(55 79 97 0) 0] [(64 23 77 13) 13] [(60 7 52 13) 7] [(28 77 38 23) 23] [(92 9 52 46) 9] [(3 15 39 86) 3] [(44 70 15 16) 15] [(52 47 64 56) 47] [(96 64 48 62) 48] [(-41 -37 25 32) -41] [(19 -37 70 -6) -37] [(85 -51 26 4) -51] [(76 18 -74 -21) -74] [(-49 -1 -94 -58) -94] [(92 100 -6 13) -6] [(64 -71 17 96) -71] [(60 9 21 85) 9] [(19 16 81 78) 16] [(-83 -23 -53 96) -83] [(65 86 -89 -66) -89] [(-65 -88 80 -62) -88] [(-95 -75 9 -14) -95] [(-96 78 -78 -16) -96] [(27 27 62 -86) -86] [(-93 29 95 49) -93] [(-76 71 -98 67) -98] [(-43 -43 58 85) -43] [(44 -31 -32 34) -32] [(-35 -5 10 -66) -66] [(7 -2 -26 34) -26] [(-72 -4 -63 98) -72] [(-17 -42 -76 6) -76] [(98 47 -79 33) -79] [(3 -47 -53 78) -53] [(-76 16 39 -92) -92] [(26 -86 83 91) -86] [(62 17 52 -36) -36] [(43 -79 -69 -100) -100] [(-49 -90 73 69) -90] [(55 43 -81 86) -81] [(-14 63 97 -33) -33] [(-6 70 36 48) -6] [(84 79 -86 48) -86] [(77 -84 -39 76) -84] [(-88 -56 67 -89) -89] [(-89 21 -16 -51) -89] [(-26 -51 -77 -37) -77] [(-36 -3 57 39) -36] [(84 -77 -60 -7) -77] [(-95 8 -57 -29) -95] [(60 -93 -11 -54) -93] [(44 41 -48 11) -48] [(-89 60 18 73) -89] [(-69 72 47 99) -69] [(-91 -69 -56 -78) -91] [(35 -81 69 -86) -86] [(43 15 31 -7) -7] [(-61 48 -97 -17) -97] [(-58 -20 -86 -10) -86] [(-21 -81 -38 14) -81] [(-3 26 75 85) -3] [(-87 -7 -96 -83) -96] [(-16 60 58 -48) -48] [(13 49 54 80) 13] [(67 -44 -76 80) -76] [(63 51 67 70) 51] [(-85 96 91 -40) -85] [(-20 21 -92 -4) -92] [(-79 -67 45 -4) -79])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction 60} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_41} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4})
Lexicase best program: (exec_yank boolean_or integer_gt exec_rot () (exec_k_when_autoconstructing (boolean_flush) (exec_k (in1) (exec_s (integer_flush integer_dup_items) (print_boolean integer_gte exec_y_when_autoconstructing () exec_while (exec_swap () (exec_do*times (boolean_dup_times integer_swap) 60 integer_eq) integer_gt boolean_and) in2 in2) (boolean_dup_items integer_gte) in2 integer_gte exec_do*count (boolean_or integer_empty integer_lt in1 boolean_invert_second_then_and boolean_swap in3 boolean_flush print_integer integer_dup_items exec_dup_times (integer_add) in1) in3 print_exec (integer_dup_items boolean_invert_first_then_and boolean_empty integer_eq) integer_fromboolean) exec_when (exec_y (integer_yank print_boolean print_integer) exec_do*count (integer_gt integer_empty boolean_flush integer_dup_items) exec_s_when_autoconstructing (exec_flush integer_mod integer_yankdup integer_flush tagged_41 boolean_rot exec_yankdup) (in4) ()))) ())
Lexicase best errors: [0 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction 60} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_41} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4})
Zero cases best program: (exec_yank boolean_or integer_gt exec_rot () (exec_k_when_autoconstructing (boolean_flush) (exec_k (in1) (exec_s (integer_flush integer_dup_items) (print_boolean integer_gte exec_y_when_autoconstructing () exec_while (exec_swap () (exec_do*times (boolean_dup_times integer_swap) 60 integer_eq) integer_gt boolean_and) in2 in2) (boolean_dup_items integer_gte) in2 integer_gte exec_do*count (boolean_or integer_empty integer_lt in1 boolean_invert_second_then_and boolean_swap in3 boolean_flush print_integer integer_dup_items exec_dup_times (integer_add) in1) in3 print_exec (integer_dup_items boolean_invert_first_then_and boolean_empty integer_eq) integer_fromboolean) exec_when (exec_y (integer_yank print_boolean print_integer) exec_do*count (integer_gt integer_empty boolean_flush integer_dup_items) exec_s_when_autoconstructing (exec_flush integer_mod integer_yankdup integer_flush tagged_41 boolean_rot exec_yankdup) (in4) ()))) ())
Zero cases best errors: [0 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 12 4 2 3 3 5 4 3 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (7 12 4 2 3 3 5 4 3 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Errors: [0 0 1 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 9.954
Median total errors in population: 10
Error averages by case: (0.993 0.988 0.996 0.998 0.997 0.997 0.995 0.996 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.597
Average program size in population (points): 70.661
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 482676
--- Timings ---
Current time: 1559584614196 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 28.2%
Fitness Testing:      1.8 seconds, 67.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction 60} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_41} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4})
Lexicase best program: (exec_yank boolean_or integer_gt exec_rot () (exec_k_when_autoconstructing (boolean_flush) (exec_k (in1) (exec_s (integer_flush integer_dup_items) (print_boolean integer_gte exec_y_when_autoconstructing () exec_while (exec_swap () (exec_do*times (boolean_dup_times integer_swap) 60 integer_eq) integer_gt boolean_and) in2 in2) (boolean_dup_items integer_gte) in2 integer_gte exec_do*count (boolean_or integer_empty integer_lt in1 boolean_invert_second_then_and boolean_swap in3 boolean_flush print_integer integer_dup_items exec_dup_times (integer_add) in1) in3 print_exec (integer_dup_items boolean_invert_first_then_and boolean_empty integer_eq) integer_fromboolean) exec_when (exec_y (integer_yank print_boolean print_integer) exec_do*count (integer_gt integer_empty boolean_flush integer_dup_items) exec_s_when_autoconstructing (exec_flush integer_mod integer_yankdup integer_flush tagged_41 boolean_rot exec_yankdup) (in4) ()))) ())
Lexicase best errors: [0 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction 60} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_41} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4})
Zero cases best program: (exec_yank boolean_or integer_gt exec_rot () (exec_k_when_autoconstructing (boolean_flush) (exec_k (in1) (exec_s (integer_flush integer_dup_items) (print_boolean integer_gte exec_y_when_autoconstructing () exec_while (exec_swap () (exec_do*times (boolean_dup_times integer_swap) 60 integer_eq) integer_gt boolean_and) in2 in2) (boolean_dup_items integer_gte) in2 integer_gte exec_do*count (boolean_or integer_empty integer_lt in1 boolean_invert_second_then_and boolean_swap in3 boolean_flush print_integer integer_dup_items exec_dup_times (integer_add) in1) in3 print_exec (integer_dup_items boolean_invert_first_then_and boolean_empty integer_eq) integer_fromboolean) exec_when (exec_y (integer_yank print_boolean print_integer) exec_do*count (integer_gt integer_empty boolean_flush integer_dup_items) exec_s_when_autoconstructing (exec_flush integer_mod integer_yankdup integer_flush tagged_41 boolean_rot exec_yankdup) (in4) ()))) ())
Zero cases best errors: [0 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 218 142 809 216 179 218 274 509 142)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (217 218 142 809 216 179 218 274 509 142)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction 60} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_41} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4})
Best program: (exec_yank boolean_or integer_gt exec_rot () (exec_k_when_autoconstructing (boolean_flush) (exec_k (in1) (exec_s (integer_flush integer_dup_items) (print_boolean integer_gte exec_y_when_autoconstructing () exec_while (exec_swap () (exec_do*times (boolean_dup_times integer_swap) 60 integer_eq) integer_gt boolean_and) in2 in2) (boolean_dup_items integer_gte) in2 integer_gte exec_do*count (boolean_or integer_empty integer_lt in1 boolean_invert_second_then_and boolean_swap in3 boolean_flush print_integer integer_dup_items exec_dup_times (integer_add) in1) in3 print_exec (integer_dup_items boolean_invert_first_then_and boolean_empty integer_eq) integer_fromboolean) exec_when (exec_y (integer_yank print_boolean print_integer) exec_do*count (integer_gt integer_empty boolean_flush integer_dup_items) exec_s_when_autoconstructing (exec_flush integer_mod integer_yankdup integer_flush tagged_41 boolean_rot exec_yankdup) (in4) ()))) ())
Errors: [0 0 1 0 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 69
Size: 94
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 7.076
Median total errors in population: 7
Error averages by case: (0.783 0.782 0.858 0.191 0.784 0.821 0.782 0.726 0.491 0.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.985
Average program size in population (points): 71.38
Average percent parens in population: 0.236
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.549
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1103952
--- Timings ---
Current time: 1559584617611 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 43.4%
Fitness Testing:      2.7 seconds, 47.8%
Report:               0.4 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_273} {:close 1, :instruction tagged_532} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_exec_518} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank})
Lexicase best program: (exec_swap (boolean_stackdepth exec_dup_times () integer_inc exec_do*times (exec_stackdepth exec_dup (integer_max integer_min) boolean_flush integer_yankdup exec_shove (integer_shove integer_fromboolean integer_lt boolean_dup exec_pop (integer_max integer_min boolean_empty boolean_dup_times integer_pop) integer_dup_items tag_integer_273) tagged_532) integer_empty) (boolean_flush) boolean_flush integer_div exec_rot (boolean_stackdepth) (boolean_swap boolean_stackdepth tag_exec_518 (integer_div) exec_do*range (integer_eq exec_noop integer_max boolean_yank) exec_when () boolean_shove) (exec_do*while (in3 exec_y_when_autoconstructing (print_integer integer_add boolean_eq boolean_and integer_dec boolean_rot) exec_pop () exec_flush integer_dup_items boolean_shove boolean_yank boolean_yankdup) integer_stackdepth exec_y_when_autoconstructing (integer_yank)))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 78
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 1, :instruction tag_integer_273} {:close 1, :instruction tagged_532} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_exec_518} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yank})
Zero cases best program: (exec_swap (boolean_stackdepth exec_dup_times () integer_inc exec_do*times (exec_stackdepth exec_dup (integer_max integer_min) boolean_flush integer_yankdup exec_shove (integer_shove integer_fromboolean integer_lt boolean_dup exec_pop (integer_max integer_min boolean_empty boolean_dup_times integer_pop) integer_dup_items tag_integer_273) tagged_532) integer_empty) (boolean_flush) boolean_flush integer_div exec_rot (boolean_stackdepth) (boolean_swap boolean_stackdepth tag_exec_518 (integer_div) exec_do*range (integer_eq exec_noop integer_max boolean_yank) exec_when () boolean_shove) (exec_do*while (in3 exec_y_when_autoconstructing (print_integer integer_add boolean_eq boolean_and integer_dec boolean_rot) exec_pop () exec_flush integer_dup_items boolean_shove boolean_yank boolean_yankdup) integer_stackdepth exec_y_when_autoconstructing (integer_yank)))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 78
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (397 120 235 848 397 96 95 235 397 94)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (397 120 235 848 397 96 95 235 397 94)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_k} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction 60} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush})
Best program: (exec_yank boolean_or integer_gt exec_rot () (exec_k_when_autoconstructing (boolean_flush) (exec_k (in1) (exec_s (integer_flush integer_dup_items) (print_boolean integer_gte exec_y_when_autoconstructing () exec_while (exec_swap () (exec_do*times (boolean_dup_times integer_swap) 60 integer_eq) integer_gt boolean_and) in2 in2) (boolean_dup_items integer_gte) in2 integer_gte exec_do*count (boolean_or integer_empty integer_lt in1 boolean_invert_second_then_and boolean_swap in3 boolean_flush print_integer integer_dup_items exec_dup_times (integer_add) in1) in3 print_exec (integer_dup_items boolean_invert_first_then_and boolean_empty integer_eq) integer_fromboolean) exec_when (exec_y (integer_yank print_boolean print_integer) exec_do*count (integer_gt integer_empty boolean_flush integer_dup_items) exec_s_when_autoconstructing (exec_flush) () ()))) ())
Errors: [0 1 1 0 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 62
Size: 87
Percent parens: 0.287
--- Population Statistics ---
Average total errors in population: 7.086
Median total errors in population: 7
Error averages by case: (0.603 0.88 0.765 0.152 0.603 0.904 0.905 0.765 0.603 0.906)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.055
Average program size in population (points): 57.849
Average percent parens in population: 0.244
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.034
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1713198
--- Timings ---
Current time: 1559584621228 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 49.0%
Fitness Testing:      3.5 seconds, 37.4%
Report:               1.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 51                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 88                 
Correct output: 24                  | Program output: 67                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 89                 
Correct output: 64                  | Program output: 96                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 92                 
Correct output: 0                   | Program output: 79                 
Correct output: 13                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 70                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 64                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: 18                 
Correct output: -94                 | Program output: -1                 
Correct output: -6                  | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: 78                 
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 71                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -5                 
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 47                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: 17                 
Correct output: -100                | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: 63                 
Correct output: -6                  | Program output: 70                 
Correct output: -86                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -56                
Correct output: -89                 | Program output: 21                 
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 41                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -69                
Correct output: -86                 | Program output: -81                
Correct output: -7                  | Program output: 15                 
Correct output: -97                 | Program output: 48                 
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -7                 
Correct output: -48                 | Program output: 60                 
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: 96                 
Correct output: -92                 | Program output: 21                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_383} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (integer_dec in2 print_integer print_integer tagged_383 in1 exec_stackdepth integer_dec boolean_empty integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Lexicase best errors: [1 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 25
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction tagged_383} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (integer_dec in2 print_integer print_integer tagged_383 in1 exec_stackdepth integer_dec boolean_empty integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Zero cases best errors: [1 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 25
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 289 188 188 188 281 187 281 281 290)
Population mean number of elite cases: 2.46
Count of perfect (error zero) individuals by case: (290 289 188 188 188 281 187 281 281 290)
Population mean number of perfect (error zero) cases: 2.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_exec_780} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add})
Best program: (exec_yank boolean_or exec_k_when_autoconstructing () (in2 exec_rot (print_integer exec_eq) (exec_if (integer_fromboolean exec_swap (tag_exec_780 (boolean_frominteger boolean_flush integer_swap) exec_k (in3 integer_gte -31 integer_stackdepth) (integer_min integer_swap exec_do*count (integer_stackdepth integer_pop)) integer_mod integer_eq boolean_or integer_add) ()) ()) ()))
Errors: [1 1 0 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 28
Size: 42
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.537
Median total errors in population: 7
Error averages by case: (0.71 0.711 0.812 0.812 0.812 0.719 0.813 0.719 0.719 0.71)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.025
Average program size in population (points): 61.0
Average percent parens in population: 0.234
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.53325
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2239904
--- Timings ---
Current time: 1559584624587 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         7.1 seconds, 53.6%
Fitness Testing:      4.1 seconds, 31.0%
Report:               1.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 51                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 88                 
Correct output: 24                  | Program output: 67                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 89                 
Correct output: 64                  | Program output: 96                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 92                 
Correct output: 0                   | Program output: 79                 
Correct output: 13                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 70                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 64                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: 18                 
Correct output: -94                 | Program output: -1                 
Correct output: -6                  | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: 78                 
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 71                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -5                 
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 47                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: 17                 
Correct output: -100                | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: 63                 
Correct output: -6                  | Program output: 70                 
Correct output: -86                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -56                
Correct output: -89                 | Program output: 21                 
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 41                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -69                
Correct output: -86                 | Program output: -81                
Correct output: -7                  | Program output: 15                 
Correct output: -97                 | Program output: 48                 
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -7                 
Correct output: -48                 | Program output: 60                 
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: 96                 
Correct output: -92                 | Program output: 21                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 3, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_if () (integer_pop) exec_if (boolean_invert_second_then_and integer_swap integer_pop integer_mod in2 print_integer boolean_stackdepth integer_swap exec_while (exec_dup_times (boolean_dup boolean_and))) ())
Lexicase best errors: [1 1 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 3, :instruction integer_pop} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_if () (integer_pop) exec_if (boolean_invert_second_then_and integer_swap integer_pop integer_mod in2 print_integer boolean_stackdepth integer_swap exec_while (exec_dup_times (boolean_dup boolean_and))) ())
Zero cases best errors: [1 1 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 254 873 390 1000 1000 390 230 260 390)
Population mean number of elite cases: 5.02
Count of perfect (error zero) individuals by case: (230 254 873 390 0 0 390 230 260 390)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_221} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction tag_integer_999} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_pop})
Best program: (boolean_dup boolean_eq exec_while (print_integer) integer_yank integer_min integer_swap exec_s_when_autoconstructing () (integer_flush integer_div exec_k (boolean_pop) () boolean_not integer_mod integer_yankdup boolean_yank tag_integer_221 integer_add exec_dup_items boolean_dup_items boolean_shove boolean_dup boolean_pop) (in2 integer_dup_times) exec_eq tag_integer_999 exec_stackdepth in2 boolean_not print_integer integer_mod in4 integer_max boolean_empty in4 exec_y (boolean_rot integer_dup exec_while (integer_dup) boolean_or integer_lte) exec_flush integer_eq integer_yankdup in1 boolean_xor boolean_invert_second_then_and integer_eq boolean_yankdup in3 in3 boolean_shove exec_stackdepth boolean_shove integer_stackdepth integer_fromboolean integer_gte exec_s_when_autoconstructing (boolean_pop exec_pop () exec_when () integer_dup_items exec_shove () integer_inc integer_div boolean_flush) (exec_when (integer_mult in1 exec_rot (exec_pop ()) () ())) ())
Errors: [1 1 0 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 73
Size: 93
Percent parens: 0.215
--- Population Statistics ---
Average total errors in population: 6.983
Median total errors in population: 7
Error averages by case: (0.77 0.746 0.127 0.61 1.0 1.0 0.61 0.77 0.74 0.61)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 43.945
Average program size in population (points): 57.106
Average percent parens in population: 0.238
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.974875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2723277
--- Timings ---
Current time: 1559584628146 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.3 seconds, 57.3%
Fitness Testing:      4.6 seconds, 28.7%
Report:               2.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Lexicase best errors: [1 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Zero cases best errors: [1 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 245 400 246 400 1000 246 245 1000 1000)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (232 245 400 246 400 0 246 245 0 0)
Population mean number of perfect (error zero) cases: 2.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Errors: [1 0 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 7.986
Median total errors in population: 8
Error averages by case: (0.768 0.755 0.6 0.754 0.6 1.0 0.754 0.755 1.0 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 1 1)
Average genome size in population (length): 42.379
Average program size in population (points): 54.967
Average percent parens in population: 0.237
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.409625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3203513
--- Timings ---
Current time: 1559584630909 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.3 seconds, 57.9%
Fitness Testing:      5.1 seconds, 26.3%
Report:               3.0 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 138 529 529 528 529 1 1 905 528)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (238 138 529 529 528 529 1 1 905 528)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty integer_mult integer_lte boolean_and) exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 25
Size: 33
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.074
Median total errors in population: 4
Error averages by case: (0.762 0.862 0.471 0.471 0.472 0.471 0.999 0.999 0.095 0.472)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.322
Average program size in population (points): 46.189
Average percent parens in population: 0.241
Minimum age in population: 6.0
Maximum age in population: 11.0
Average age in population: 8.950625
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3590398
--- Timings ---
Current time: 1559584633768 milliseconds
Total Time:          22.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 60.4%
Fitness Testing:      5.6 seconds, 24.8%
Report:               3.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 82                 
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: 87                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 29                 
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 31                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 82                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 91                 
Correct output: 0                   | Program output: 97                 
Correct output: 13                  | Program output: 77                 
Correct output: 7                   | Program output: 52                 
Correct output: 23                  | Program output: 38                 
Correct output: 9                   | Program output: 52                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 64                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: 70                 
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 81                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 80                 
Correct output: -95                 | Program output: 9                  
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: 62                 
Correct output: -93                 | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: 10                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: 39                 
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: 52                 
Correct output: -100                | Program output: -69                
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: 97                 
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: 67                 
Correct output: -89                 | Program output: -16                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 57                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -56                
Correct output: -86                 | Program output: 69                 
Correct output: -7                  | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 58                 
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: 91                 
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_dup_times exec_do*range (exec_pop (in2 exec_yank integer_shove)) exec_yank integer_lt exec_y_when_autoconstructing (exec_when (in3) print_integer integer_shove exec_while (integer_mod integer_dec) boolean_shove integer_lte boolean_eq exec_flush exec_swap (boolean_shove exec_s (in1 exec_eq boolean_flush boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) () boolean_yankdup) ()))
Lexicase best errors: [1 0 0 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_dup_times exec_do*range (exec_pop (in2 exec_yank integer_shove)) exec_yank integer_lt exec_y_when_autoconstructing (exec_when (in3) print_integer integer_shove exec_while (integer_mod integer_dec) boolean_shove integer_lte boolean_eq exec_flush exec_swap (boolean_shove exec_s (in1 exec_eq boolean_flush boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) () boolean_yankdup) ()))
Zero cases best errors: [1 0 0 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 101 102 479 103 163 102 479 101 102)
Population mean number of elite cases: 1.88
Count of perfect (error zero) individuals by case: (152 101 102 479 103 163 102 479 101 102)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4})
Best program: (integer_flush boolean_dup_times boolean_shove boolean_swap boolean_not exec_do*count (print_boolean boolean_dup_times boolean_invert_first_then_and) integer_inc exec_noop boolean_not integer_sub exec_dup_items exec_do*count (boolean_or boolean_and) exec_pop () in1 boolean_invert_second_then_and in3 print_integer exec_while (integer_fromboolean exec_pop (integer_lte boolean_yankdup exec_noop) boolean_rot tag_integer_798 boolean_dup_items) integer_pop exec_do*range () boolean_invert_second_then_and integer_mult in3 integer_dup_items in2 integer_swap exec_yank exec_do*range (boolean_swap integer_swap integer_shove exec_stackdepth integer_flush exec_y_when_autoconstructing (integer_pop integer_mult)) boolean_or integer_mod integer_stackdepth boolean_pop exec_swap (integer_sub integer_dup_times integer_max) (boolean_xor boolean_pop in4))
Errors: [1 0 0 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 71
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 8.116
Median total errors in population: 8
Error averages by case: (0.848 0.899 0.898 0.521 0.897 0.837 0.898 0.521 0.899 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.481
Average program size in population (points): 47.881
Average percent parens in population: 0.255
Minimum age in population: 7.0
Maximum age in population: 12.484375
Average age in population: 10.26084375
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 117
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3915306
--- Timings ---
Current time: 1559584636750 milliseconds
Total Time:          25.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 62.6%
Fitness Testing:      5.9 seconds, 23.5%
Report:               3.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 2, :instruction in2} {:close 0, :instruction integer_div})
Lexicase best program: (exec_pop (boolean_rot integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (integer_dec boolean_empty) (integer_mult integer_lte boolean_and) exec_yankdup exec_noop boolean_dup_times boolean_not exec_stackdepth boolean_rot in3 exec_do*times (exec_y_when_autoconstructing (exec_rot (boolean_invert_second_then_and integer_lte boolean_yankdup exec_noop) (boolean_rot tag_integer_798 integer_yankdup) (integer_pop exec_do*range () boolean_invert_second_then_and) boolean_dup in3 integer_dup_items in2) exec_eq boolean_dup_items boolean_dup_items boolean_or in2) integer_div)
Lexicase best errors: [1 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 2, :instruction in2} {:close 0, :instruction integer_div})
Zero cases best program: (exec_pop (boolean_rot integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (integer_dec boolean_empty) (integer_mult integer_lte boolean_and) exec_yankdup exec_noop boolean_dup_times boolean_not exec_stackdepth boolean_rot in3 exec_do*times (exec_y_when_autoconstructing (exec_rot (boolean_invert_second_then_and integer_lte boolean_yankdup exec_noop) (boolean_rot tag_integer_798 integer_yankdup) (integer_pop exec_do*range () boolean_invert_second_then_and) boolean_dup in3 integer_dup_items in2) exec_eq boolean_dup_items boolean_dup_items boolean_or in2) integer_div)
Zero cases best errors: [1 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 186 186 69 533 121 907 186 186 531)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (69 186 186 69 533 121 907 186 186 531)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_shove})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (boolean_rot) (exec_shove ()) ())
Errors: [1 0 0 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 35
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 7.026
Median total errors in population: 7
Error averages by case: (0.931 0.814 0.814 0.931 0.467 0.879 0.093 0.814 0.814 0.469)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.796
Average program size in population (points): 53.403
Average percent parens in population: 0.236
Minimum age in population: 8.0
Maximum age in population: 13.8359375
Average age in population: 11.7125703125
Median age in population: 11.82421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4228680
--- Timings ---
Current time: 1559584639737 milliseconds
Total Time:          28.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.3 seconds, 64.3%
Fitness Testing:      6.3 seconds, 22.1%
Report:               3.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_dup_times (integer_dec boolean_empty) integer_mult integer_lte boolean_and) exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Lexicase best errors: [1 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_dup_times (integer_dec boolean_empty) integer_mult integer_lte boolean_and) exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Zero cases best errors: [1 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 395 153 395 192 395 192 192 395 395)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (192 395 153 395 192 395 192 192 395 395)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Best program: (integer_dup_items integer_stackdepth integer_swap integer_yank boolean_xor integer_shove boolean_dup in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Errors: [1 0 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 7.104
Median total errors in population: 6
Error averages by case: (0.808 0.605 0.847 0.605 0.808 0.605 0.808 0.808 0.605 0.605)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.175
Average program size in population (points): 48.685
Average percent parens in population: 0.254
Minimum age in population: 10.5
Maximum age in population: 15.43359375
Average age in population: 13.2287265625
Median age in population: 13.32421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4523342
--- Timings ---
Current time: 1559584643030 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.0 seconds, 66.3%
Fitness Testing:      6.6 seconds, 20.9%
Report:               4.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 82                 
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: 87                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 29                 
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 31                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 82                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 91                 
Correct output: 0                   | Program output: 97                 
Correct output: 13                  | Program output: 77                 
Correct output: 7                   | Program output: 52                 
Correct output: 23                  | Program output: 38                 
Correct output: 9                   | Program output: 52                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 64                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: 70                 
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 81                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 80                 
Correct output: -95                 | Program output: 9                  
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: 62                 
Correct output: -93                 | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: 10                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: 39                 
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: 52                 
Correct output: -100                | Program output: -69                
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: 97                 
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: 67                 
Correct output: -89                 | Program output: -16                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 57                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -56                
Correct output: -86                 | Program output: 69                 
Correct output: -7                  | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 58                 
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: 91                 
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_mult} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction tag_integer_433} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_dup_items boolean_not integer_sub exec_dup_items exec_do*count (boolean_or boolean_and) exec_pop () in1 boolean_invert_second_then_and in3 print_integer exec_while (integer_fromboolean exec_pop (integer_lte integer_mult exec_noop boolean_rot) tag_integer_798 integer_yankdup) integer_pop exec_do*range () boolean_invert_second_then_and integer_mult in3 integer_dup_items in2 integer_swap exec_yank exec_do*range (boolean_swap exec_flush boolean_flush exec_stackdepth integer_flush exec_yank integer_pop integer_mult) boolean_or integer_mod integer_stackdepth boolean_pop exec_swap (integer_sub) (integer_dup_times integer_max) exec_flush boolean_yank boolean_eq exec_while (tag_integer_433) boolean_frominteger exec_empty boolean_or boolean_swap boolean_and)
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.149
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_mult} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction tag_integer_433} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_dup_items boolean_not integer_sub exec_dup_items exec_do*count (boolean_or boolean_and) exec_pop () in1 boolean_invert_second_then_and in3 print_integer exec_while (integer_fromboolean exec_pop (integer_lte integer_mult exec_noop boolean_rot) tag_integer_798 integer_yankdup) integer_pop exec_do*range () boolean_invert_second_then_and integer_mult in3 integer_dup_items in2 integer_swap exec_yank exec_do*range (boolean_swap exec_flush boolean_flush exec_stackdepth integer_flush exec_yank integer_pop integer_mult) boolean_or integer_mod integer_stackdepth boolean_pop exec_swap (integer_sub) (integer_dup_times integer_max) exec_flush boolean_yank boolean_eq exec_while (tag_integer_433) boolean_frominteger exec_empty boolean_or boolean_swap boolean_and)
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (448 372 71 376 373 909 19 376 373 371)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (448 372 71 376 373 909 19 376 373 371)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_max} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction tag_integer_433} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction 80} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_k})
Best program: (exec_swap (boolean_stackdepth print_boolean exec_do*count (print_boolean boolean_dup_times boolean_invert_first_then_and) integer_inc) (exec_noop boolean_not integer_sub exec_dup_items exec_do*count (boolean_or boolean_and)) exec_pop () in1 boolean_invert_second_then_and in3 print_integer integer_dup integer_fromboolean exec_pop (integer_lte boolean_yankdup) exec_noop boolean_rot tag_integer_798 integer_yankdup integer_pop exec_do*range () boolean_invert_second_then_and integer_mult in3 integer_dup_items in2 integer_swap exec_yank exec_do*range (boolean_swap) exec_flush integer_shove exec_stackdepth integer_flush boolean_invert_second_then_and integer_pop integer_mult boolean_or integer_inc integer_stackdepth boolean_pop exec_swap (integer_sub integer_dup_times) (integer_max) exec_flush integer_dup_times boolean_eq exec_while (tag_integer_433) integer_mod exec_empty boolean_or boolean_swap boolean_dup_times 80 boolean_not integer_stackdepth integer_yank exec_swap (in2 boolean_pop exec_s_when_autoconstructing (integer_max integer_yank print_newline exec_do*times (exec_noop boolean_dup_items exec_y_when_autoconstructing (integer_yankdup boolean_flush exec_empty) exec_swap (boolean_flush exec_k () ()) ())) () ()) ())
Errors: [1 0 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 86
Size: 109
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.312
Median total errors in population: 8
Error averages by case: (0.552 0.628 0.929 0.624 0.627 0.091 0.981 0.624 0.627 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.675
Average program size in population (points): 47.975
Average percent parens in population: 0.236
Minimum age in population: 11.9375
Maximum age in population: 16.703125
Average age in population: 14.712533203125
Median age in population: 14.76171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4811744
--- Timings ---
Current time: 1559584646024 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.4 seconds, 67.5%
Fitness Testing:      6.9 seconds, 20.0%
Report:               4.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop})
Lexicase best program: (integer_flush boolean_dup_times boolean_shove boolean_swap boolean_not exec_do*count (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_mult integer_lte boolean_and) integer_sub exec_noop)
Lexicase best errors: [0 1 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.154
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop})
Zero cases best program: (integer_flush boolean_dup_times boolean_shove boolean_swap boolean_not exec_do*count (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_mult integer_lte boolean_and) integer_sub exec_noop)
Zero cases best errors: [0 1 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 624 106 92 92 106 624 928 107 102)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (91 624 106 92 92 106 624 928 107 102)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Best program: (exec_pop (integer_stackdepth) integer_swap integer_yank boolean_eq integer_shove boolean_dup in1 print_integer exec_k_when_autoconstructing (in1) (exec_dup_times (integer_dec boolean_empty) integer_mult) integer_lte boolean_and exec_yankdup exec_noop boolean_dup_times integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Errors: [0 1 1 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 25
Size: 34
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 7.128
Median total errors in population: 7
Error averages by case: (0.909 0.376 0.894 0.908 0.908 0.894 0.376 0.072 0.893 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.254
Average program size in population (points): 56.015
Average percent parens in population: 0.246
Minimum age in population: 12.9375
Maximum age in population: 18.3037109375
Average age in population: 16.2656142578125
Median age in population: 16.37744140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5119082
--- Timings ---
Current time: 1559584648713 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 68.1%
Fitness Testing:      7.3 seconds, 19.5%
Report:               4.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Lexicase best program: (boolean_dup_times exec_do*range (exec_pop (in2 exec_yank) boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_when (integer_shove) in2 integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_when} {:close 1, :instruction integer_shove} {:close 0, :instruction in2} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_shove})
Zero cases best program: (boolean_dup_times exec_do*range (exec_pop (in2 exec_yank) boolean_eq integer_shove boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult integer_lte boolean_and exec_when (integer_shove) in2 integer_mod integer_inc exec_s_when_autoconstructing (integer_pop) (exec_shove ()) ())
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (803 293 293 293 204 623 306 916 293 307)
Population mean number of elite cases: 4.33
Count of perfect (error zero) individuals by case: (803 293 293 293 204 623 306 916 293 307)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times})
Best program: (integer_dup_items integer_stackdepth integer_swap integer_yank integer_inc integer_shove boolean_dup in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth exec_k (boolean_empty) (integer_mult integer_lte boolean_and) integer_sub exec_noop) boolean_dup_times integer_stackdepth integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_dup_times) () ())
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.669
Median total errors in population: 5
Error averages by case: (0.197 0.707 0.707 0.707 0.796 0.377 0.694 0.084 0.707 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.537
Average program size in population (points): 51.422
Average percent parens in population: 0.267
Minimum age in population: 14.484375
Maximum age in population: 20.14892578125
Average age in population: 17.9494140625
Median age in population: 18.0498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5459866
--- Timings ---
Current time: 1559584651236 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 68.2%
Fitness Testing:      7.6 seconds, 19.1%
Report:               4.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 82                 
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: 87                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 29                 
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 31                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 82                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 91                 
Correct output: 0                   | Program output: 97                 
Correct output: 13                  | Program output: 77                 
Correct output: 7                   | Program output: 52                 
Correct output: 23                  | Program output: 38                 
Correct output: 9                   | Program output: 52                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 64                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: 70                 
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 81                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: 80                 
Correct output: -95                 | Program output: 9                  
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: 62                 
Correct output: -93                 | Program output: 95                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: 10                 
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: 39                 
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: 52                 
Correct output: -100                | Program output: -69                
Correct output: -90                 | Program output: 73                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: 97                 
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: 67                 
Correct output: -89                 | Program output: -16                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 57                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -56                
Correct output: -86                 | Program output: 69                 
Correct output: -7                  | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: 58                 
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: 91                 
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_mult})
Lexicase best program: (integer_flush boolean_dup_times boolean_shove boolean_swap boolean_not exec_do*count (print_boolean boolean_dup_times boolean_invert_first_then_and) integer_inc exec_noop boolean_not integer_sub exec_dup_items exec_do*count (boolean_or boolean_pop) exec_pop () in1 boolean_invert_second_then_and in3 print_integer exec_while (integer_fromboolean exec_pop (integer_lte boolean_yankdup exec_noop) boolean_rot tag_integer_798 exec_empty) integer_pop exec_do*range () boolean_invert_second_then_and integer_mult in3 integer_dup_items in3 integer_dup_items in2 integer_swap exec_yank exec_do*range (boolean_swap exec_flush integer_shove exec_stackdepth integer_flush boolean_invert_second_then_and integer_pop integer_mult))
Lexicase best errors: [0 0 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 2, :instruction boolean_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_integer_798} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_mult})
Zero cases best program: (integer_flush boolean_dup_times boolean_shove boolean_swap boolean_not exec_do*count (print_boolean boolean_dup_times boolean_invert_first_then_and) integer_inc exec_noop boolean_not integer_sub exec_dup_items exec_do*count (boolean_or boolean_pop) exec_pop () in1 boolean_invert_second_then_and in3 print_integer exec_while (integer_fromboolean exec_pop (integer_lte boolean_yankdup exec_noop) boolean_rot tag_integer_798 exec_empty) integer_pop exec_do*range () boolean_invert_second_then_and integer_mult in3 integer_dup_items in3 integer_dup_items in2 integer_swap exec_yank exec_do*range (boolean_swap exec_flush integer_shove exec_stackdepth integer_flush boolean_invert_second_then_and integer_pop integer_mult))
Zero cases best errors: [0 0 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (150 148 149 2 915 294 470 7 148 6)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (150 148 149 2 915 294 470 7 148 6)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_eq})
Best program: (boolean_dup_times exec_do*range () exec_pop (in2 exec_yank integer_shove) exec_yank integer_lt exec_y_when_autoconstructing (exec_when (in3) print_integer integer_shove exec_while (boolean_rot) exec_s_when_autoconstructing (integer_pop) (exec_eq) ()))
Errors: [0 0 0 1 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.711
Median total errors in population: 8
Error averages by case: (0.85 0.852 0.851 0.998 0.085 0.706 0.53 0.993 0.852 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.686
Average program size in population (points): 47.072
Average percent parens in population: 0.260
Minimum age in population: 15.88671875
Maximum age in population: 21.632080078125
Average age in population: 19.2966611328125
Median age in population: 19.39404296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5785723
--- Timings ---
Current time: 1559584654025 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.4 seconds, 68.9%
Fitness Testing:      8.0 seconds, 18.7%
Report:               5.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 95                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 48                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -17                
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -83                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -4                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [1 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [1 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 368 903 305 424 368 372 424 424 305)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (95 368 903 305 424 368 372 424 424 305)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.012
Median total errors in population: 6
Error averages by case: (0.905 0.632 0.097 0.695 0.576 0.632 0.628 0.576 0.576 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.63
Average program size in population (points): 58.734
Average percent parens in population: 0.255
Minimum age in population: 17.7421875
Maximum age in population: 22.907470703125
Average age in population: 21.25968469238281
Median age in population: 21.315185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6070305
--- Timings ---
Current time: 1559584656627 milliseconds
Total Time:          45.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.4 seconds, 69.5%
Fitness Testing:      8.3 seconds, 18.4%
Report:               5.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 95                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 48                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -17                
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -83                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -4                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction tag_boolean_457} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (tag_boolean_457 boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction tag_boolean_457} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (tag_boolean_457 boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (302 302 347 302 614 511 347 346 346 103)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (302 302 347 302 614 511 347 346 346 103)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [1 1 0 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.48
Median total errors in population: 7
Error averages by case: (0.698 0.698 0.653 0.698 0.386 0.489 0.653 0.654 0.654 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.666
Average program size in population (points): 59.111
Average percent parens in population: 0.258
Minimum age in population: 19.15625
Maximum age in population: 24.392333984375
Average age in population: 22.81452868652344
Median age in population: 22.94546508789062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6351303
--- Timings ---
Current time: 1559584659732 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 70.2%
Fitness Testing:      8.7 seconds, 17.9%
Report:               5.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 95                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 48                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -17                
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -83                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -4                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction -71} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup -71) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction -71} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup -71) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 116 116 358 521 116 926 358 358 358)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (646 116 116 358 521 116 926 358 358 358)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.127
Median total errors in population: 7
Error averages by case: (0.354 0.884 0.884 0.642 0.479 0.884 0.074 0.642 0.642 0.642)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.215
Average program size in population (points): 59.999
Average percent parens in population: 0.260
Minimum age in population: 21.36669921875
Maximum age in population: 26.10552978515625
Average age in population: 24.2569367980957
Median age in population: 24.315185546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6626646
--- Timings ---
Current time: 1559584663005 milliseconds
Total Time:          51.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.6 seconds, 70.9%
Fitness Testing:      9.0 seconds, 17.4%
Report:               5.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 659
Test mean error for best: 0.65900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: 17                 
Correct output: -77                 | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 54                 
Correct output: 41                  | Program output: 83                 
Correct output: 24                  | Program output: 68                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 60                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 92                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 44                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 96                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 85                 
Correct output: -74                 | Program output: 76                 
Correct output: -94                 | Program output: -49                
Correct output: -6                  | Program output: 92                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: 65                 
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 44                 
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 98                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 62                 
Correct output: -100                | Program output: 43                 
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 84                 
Correct output: -84                 | Program output: 77                 
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -26                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: 84                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: 60                 
Correct output: -48                 | Program output: 44                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 43                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_inc boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) () boolean_yankdup boolean_dup_times integer_yank -57 exec_eq boolean_dup_items exec_shove (boolean_flush in2) integer_div integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ())
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_inc boolean_dup) in1 print_integer exec_k_when_autoconstructing (in1) (exec_stackdepth integer_dec boolean_empty) integer_mult -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) () boolean_yankdup boolean_dup_times integer_yank -57 exec_eq boolean_dup_items exec_shove (boolean_flush in2) integer_div integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ())
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (919 309 1000 901 591 309 430 309 1000 923)
Population mean number of elite cases: 6.69
Count of perfect (error zero) individuals by case: (919 309 0 901 591 309 430 309 0 923)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_swap})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 in3 integer_gte -31 integer_stackdepth integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not print_integer integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) () boolean_yankdup boolean_dup_times integer_yank -57 exec_eq boolean_dup_items boolean_dup_items boolean_flush in2 integer_div integer_lt exec_s_when_autoconstructing (in4 boolean_pop exec_swap () ()) () ())
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 5.309
Median total errors in population: 5
Error averages by case: (0.081 0.691 1.0 0.099 0.409 0.691 0.57 0.691 1.0 0.077)
Error minima by case: (0 0 1 0 0 0 0 0 1 0)
Average genome size in population (length): 41.996
Average program size in population (points): 57.424
Average percent parens in population: 0.263
Minimum age in population: 22.93310546875
Maximum age in population: 27.67839050292969
Average age in population: 25.80095718383789
Median age in population: 25.8836669921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6915853
--- Timings ---
Current time: 1559584665983 milliseconds
Total Time:          54.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.9 seconds, 71.3%
Fitness Testing:      9.3 seconds, 17.1%
Report:               6.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 95                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 48                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -17                
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -83                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -4                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing () (in4 integer_min exec_swap () ()) ()))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing () (in4 integer_min exec_swap () ()) ()))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 1000 350 358 1000 560 350 910 242 242)
Population mean number of elite cases: 5.25
Count of perfect (error zero) individuals by case: (242 0 350 358 0 560 350 910 242 242)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 1 0 0 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.746
Median total errors in population: 8
Error averages by case: (0.758 1.0 0.65 0.642 1.0 0.44 0.65 0.09 0.758 0.758)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 37.695
Average program size in population (points): 50.439
Average percent parens in population: 0.246
Minimum age in population: 23.93310546875
Maximum age in population: 29.40875244140625
Average age in population: 27.30301578521729
Median age in population: 27.38392639160156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7218727
--- Timings ---
Current time: 1559584668729 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.0 seconds, 71.6%
Fitness Testing:      9.7 seconds, 16.9%
Report:               6.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 52                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 1 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 67
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 1 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (928 146 146 761 1 147 569 1 761 1)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (928 146 146 761 1 147 569 1 761 1)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.539
Median total errors in population: 6
Error averages by case: (0.072 0.854 0.854 0.239 0.999 0.853 0.431 0.999 0.239 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.119
Average program size in population (points): 62.38
Average percent parens in population: 0.274
Minimum age in population: 25.5760498046875
Maximum age in population: 30.72298049926758
Average age in population: 28.79901360702515
Median age in population: 28.89212036132812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7508641
--- Timings ---
Current time: 1559584671726 milliseconds
Total Time:          60.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 71.9%
Fitness Testing:     10.0 seconds, 16.7%
Report:               6.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 47                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 56                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 78                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -62                
Correct output: -95                 | Program output: -14                
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 39                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (250 322 906 918 906 322 308 322 250 646)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (250 322 906 918 906 322 308 322 250 646)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 4.85
Median total errors in population: 5
Error averages by case: (0.75 0.678 0.094 0.082 0.094 0.678 0.692 0.678 0.75 0.354)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.075
Average program size in population (points): 69.317
Average percent parens in population: 0.278
Minimum age in population: 26.5760498046875
Maximum age in population: 32.23384857177734
Average age in population: 29.38101294136047
Median age in population: 29.53961181640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 190
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 7827716
--- Timings ---
Current time: 1559584674441 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 72.0%
Fitness Testing:     10.4 seconds, 16.5%
Report:               7.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 47                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 56                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 78                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -62                
Correct output: -95                 | Program output: -14                
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 39                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_y_when_autoconstructing () in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_y_when_autoconstructing () in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (647 435 647 435 895 353 805 126 435 354)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (647 435 647 435 895 353 805 126 435 354)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 4.868
Median total errors in population: 4
Error averages by case: (0.353 0.565 0.353 0.565 0.105 0.647 0.195 0.874 0.565 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.781
Average program size in population (points): 67.835
Average percent parens in population: 0.281
Minimum age in population: 28.68161010742188
Maximum age in population: 33.26362609863281
Average age in population: 30.72003569316864
Median age in population: 30.71226692199707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8129918
--- Timings ---
Current time: 1559584677067 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.3 seconds, 72.0%
Fitness Testing:     10.8 seconds, 16.5%
Report:               7.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 52                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 315 152 441 682 152 152 152 152 152)
Population mean number of elite cases: 2.50
Count of perfect (error zero) individuals by case: (152 315 152 441 682 152 152 152 152 152)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction 94} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (exec_pop (integer_stackdepth integer_swap boolean_frominteger boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () 94 boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 1 0 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 7.498
Median total errors in population: 8
Error averages by case: (0.848 0.685 0.848 0.559 0.318 0.848 0.848 0.848 0.848 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.768
Average program size in population (points): 67.738
Average percent parens in population: 0.280
Minimum age in population: 29.68161010742188
Maximum age in population: 34.29736709594727
Average age in population: 32.16892779159546
Median age in population: 32.20093393325806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8439898
--- Timings ---
Current time: 1559584679959 milliseconds
Total Time:          68.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.4 seconds, 72.2%
Fitness Testing:     11.2 seconds, 16.3%
Report:               7.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 47                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 56                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 78                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -62                
Correct output: -95                 | Program output: -14                
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 39                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 boolean_dup exec_flush exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (integer_rot in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 boolean_dup exec_flush exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (integer_rot in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 644 644 132 132 653 891 107 107 107)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (107 644 644 132 132 653 891 107 107 107)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -30} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in3 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_dec boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -30 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.476
Median total errors in population: 6
Error averages by case: (0.893 0.356 0.356 0.868 0.868 0.347 0.109 0.893 0.893 0.893)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.147
Average program size in population (points): 71.541
Average percent parens in population: 0.271
Minimum age in population: 30.68161010742188
Maximum age in population: 35.8349015712738
Average age in population: 33.7073606595993
Median age in population: 33.78696274757385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 8806086
--- Timings ---
Current time: 1559584683238 milliseconds
Total Time:          71.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 72.3%
Fitness Testing:     11.6 seconds, 16.2%
Report:               8.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 8                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 95                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: -16                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 67                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 48                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -29                
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -17                
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -83                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -4                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (782 845 503 252 252 252 265 267 268 266)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (782 845 503 252 252 252 265 267 268 266)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger in1 integer_swap) (exec_k (in3 integer_gte exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 66
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.048
Median total errors in population: 6
Error averages by case: (0.218 0.155 0.497 0.748 0.748 0.748 0.735 0.733 0.732 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.79
Average program size in population (points): 65.77
Average percent parens in population: 0.273
Minimum age in population: 31.68161010742188
Maximum age in population: 37.19728922843933
Average age in population: 35.2217139698267
Median age in population: 35.32511138916016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9107375
--- Timings ---
Current time: 1559584686049 milliseconds
Total Time:          74.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.1 seconds, 72.5%
Fitness Testing:     12.0 seconds, 16.0%
Report:               8.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 52                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_yankdup exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (in4 boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [1 1 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_yankdup exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (in4 boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [1 1 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 377 1000 1000 377 1000 510 376 1000)
Population mean number of elite cases: 7.64
Count of perfect (error zero) individuals by case: (0 0 377 0 0 377 0 510 376 0)
Population mean number of perfect (error zero) cases: 1.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (exec_pop (integer_stackdepth boolean_dup integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer integer_dec) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush) (integer_swap) exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte integer_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod exec_yankdup) (integer_yank -57 exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Errors: [1 1 0 1 1 0 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 8.36
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.623 1.0 1.0 0.623 1.0 0.49 0.624 1.0)
Error minima by case: (1 1 0 1 1 0 1 0 0 1)
Average genome size in population (length): 49.373
Average program size in population (points): 68.172
Average percent parens in population: 0.276
Minimum age in population: 33.61061096191406
Maximum age in population: 38.59034430980682
Average age in population: 36.80331637567282
Median age in population: 36.8781800866127
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9440453
--- Timings ---
Current time: 1559584688684 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.0 seconds, 72.5%
Fitness Testing:     12.4 seconds, 16.0%
Report:               8.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: -82                
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 23                 
Correct output: 4                   | Program output: 51                 
Correct output: 2                   | Program output: 23                 
Correct output: 23                  | Program output: 23                 
Correct output: 41                  | Program output: 88                 
Correct output: 24                  | Program output: 67                 
Correct output: 20                  | Program output: 27                 
Correct output: 73                  | Program output: 89                 
Correct output: 64                  | Program output: 96                 
Correct output: 23                  | Program output: 45                 
Correct output: 9                   | Program output: 92                 
Correct output: 0                   | Program output: 79                 
Correct output: 13                  | Program output: 23                 
Correct output: 7                   | Program output: 7                  
Correct output: 23                  | Program output: 77                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 15                 
Correct output: 15                  | Program output: 70                 
Correct output: 47                  | Program output: 47                 
Correct output: 48                  | Program output: 64                 
Correct output: -41                 | Program output: -37                
Correct output: -37                 | Program output: -37                
Correct output: -51                 | Program output: -51                
Correct output: -74                 | Program output: 18                 
Correct output: -94                 | Program output: -1                 
Correct output: -6                  | Program output: 100                
Correct output: -71                 | Program output: -71                
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: -83                 | Program output: -23                
Correct output: -89                 | Program output: 86                 
Correct output: -88                 | Program output: -88                
Correct output: -95                 | Program output: -75                
Correct output: -96                 | Program output: 78                 
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: 29                 
Correct output: -98                 | Program output: 71                 
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -31                
Correct output: -66                 | Program output: -5                 
Correct output: -26                 | Program output: -2                 
Correct output: -72                 | Program output: -4                 
Correct output: -76                 | Program output: -42                
Correct output: -79                 | Program output: 47                 
Correct output: -53                 | Program output: -47                
Correct output: -92                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -36                 | Program output: 17                 
Correct output: -100                | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 43                 
Correct output: -33                 | Program output: 63                 
Correct output: -6                  | Program output: 70                 
Correct output: -86                 | Program output: 79                 
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -56                
Correct output: -89                 | Program output: 21                 
Correct output: -77                 | Program output: -51                
Correct output: -36                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 8                  
Correct output: -93                 | Program output: -93                
Correct output: -48                 | Program output: 41                 
Correct output: -89                 | Program output: 60                 
Correct output: -69                 | Program output: 72                 
Correct output: -91                 | Program output: -69                
Correct output: -86                 | Program output: -81                
Correct output: -7                  | Program output: 15                 
Correct output: -97                 | Program output: 48                 
Correct output: -86                 | Program output: -20                
Correct output: -81                 | Program output: -81                
Correct output: -3                  | Program output: 26                 
Correct output: -96                 | Program output: -7                 
Correct output: -48                 | Program output: 60                 
Correct output: 13                  | Program output: 49                 
Correct output: -76                 | Program output: -44                
Correct output: 51                  | Program output: 51                 
Correct output: -85                 | Program output: 96                 
Correct output: -92                 | Program output: 21                 
Correct output: -79                 | Program output: -67                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_764} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (integer_mod boolean_dup_times in2 exec_rot (print_integer exec_do*while () exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 tag_boolean_764 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) exec_swap () (integer_lt boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()) ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.324
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction tag_boolean_764} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (integer_mod boolean_dup_times in2 exec_rot (print_integer exec_do*while () exec_if (print_boolean exec_swap (boolean_pop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 tag_boolean_764 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) exec_swap () (integer_lt boolean_flush in2) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()) ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.324
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 246 1000 887 1000 1000 640 245 893 245)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (0 246 0 887 0 0 640 245 893 245)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if () (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1) (exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not exec_y (integer_gte boolean_dup_times) integer_stackdepth boolean_yankdup) ()) boolean_yankdup exec_shove (boolean_flush in2)) integer_div) integer_yank exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()) ())
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 43
Size: 63
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 6.844
Median total errors in population: 7
Error averages by case: (1.0 0.754 1.0 0.113 1.0 1.0 0.36 0.755 0.107 0.755)
Error minima by case: (1 0 1 0 1 1 0 0 0 0)
Average genome size in population (length): 50.885
Average program size in population (points): 69.92
Average percent parens in population: 0.273
Minimum age in population: 34.61061096191406
Maximum age in population: 40.21797049045563
Average age in population: 38.31909959298372
Median age in population: 38.37221395969391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 9773089
--- Timings ---
Current time: 1559584691294 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.9 seconds, 72.5%
Fitness Testing:     12.7 seconds, 16.0%
Report:               9.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 52                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop integer_min integer_swap exec_s (in1 exec_when (boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) boolean_and integer_gte exec_noop) (integer_stackdepth boolean_yankdup) ()) (integer_mod boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_mod exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 66
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop integer_min integer_swap exec_s (in1 exec_when (boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) boolean_and integer_gte exec_noop) (integer_stackdepth boolean_yankdup) ()) (integer_mod boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_mod exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 66
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 259 631 631 365 631 890 259 1 1)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (259 259 631 631 365 631 890 259 1 1)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush exec_s (integer_flush exec_eq boolean_not boolean_not boolean_and boolean_not boolean_and integer_gte boolean_not integer_pop) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () boolean_yankdup boolean_dup_times) (integer_yank -57 exec_eq boolean_dup_items exec_shove (in1 in2)) integer_div) (exec_rot (exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()) () ()))
Errors: [0 0 1 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 48
Size: 69
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 6.073
Median total errors in population: 6
Error averages by case: (0.741 0.741 0.369 0.369 0.635 0.369 0.11 0.741 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.932
Average program size in population (points): 67.562
Average percent parens in population: 0.276
Minimum age in population: 37.02241063117981
Maximum age in population: 41.7170225083828
Average age in population: 39.80197284963727
Median age in population: 39.85012639313936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10065344
--- Timings ---
Current time: 1559584693714 milliseconds
Total Time:          82.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 72.5%
Fitness Testing:     13.1 seconds, 15.9%
Report:               9.4 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 47                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 56                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 78                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -62                
Correct output: -95                 | Program output: -14                
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 39                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 in4 integer_min))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 in4 integer_min))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 147 658 147 438 437 919 321 924 658)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (148 147 658 147 438 437 919 321 924 658)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 in4 integer_min))
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 5.203
Median total errors in population: 5
Error averages by case: (0.852 0.853 0.342 0.853 0.562 0.563 0.081 0.679 0.076 0.342)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.352
Average program size in population (points): 66.024
Average percent parens in population: 0.267
Minimum age in population: 38.3291449546814
Maximum age in population: 43.44899744540453
Average age in population: 41.28156548511982
Median age in population: 41.29871032387018
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10397131
--- Timings ---
Current time: 1559584697350 milliseconds
Total Time:          86.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 72.8%
Fitness Testing:     13.5 seconds, 15.7%
Report:               9.8 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: 79                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 61                 
Correct output: 4                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 47                 
Correct output: 73                  | Program output: 80                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 25                 
Correct output: 9                   | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 56                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: 25                 
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 78                 
Correct output: -83                 | Program output: -53                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -62                
Correct output: -95                 | Program output: -14                
Correct output: -96                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: 49                 
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: 58                 
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -63                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 83                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 69                 
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: 36                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -51                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 39                 
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -57                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: 18                 
Correct output: -69                 | Program output: 47                 
Correct output: -91                 | Program output: -78                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: 75                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 54                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 67                 
Correct output: -85                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 in4 integer_min))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 in4 integer_min))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 643 314 339 314 146 644 146 314 339)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (440 643 314 339 314 146 644 146 314 339)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_min})
Best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 in4 integer_min))
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 59
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.361
Median total errors in population: 7
Error averages by case: (0.56 0.357 0.686 0.661 0.686 0.854 0.356 0.854 0.686 0.661)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.536
Average program size in population (points): 62.859
Average percent parens in population: 0.259
Minimum age in population: 40.34552636742592
Maximum age in population: 44.61195508390665
Average age in population: 42.76611001723632
Median age in population: 42.88157380186021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10697965
--- Timings ---
Current time: 1559584699988 milliseconds
Total Time:          88.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.6 seconds, 72.9%
Fitness Testing:     13.8 seconds, 15.6%
Report:              10.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -17                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 52                 
Correct output: 41                  | Program output: 69                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 88                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 16                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 62                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -21                
Correct output: -94                 | Program output: -58                
Correct output: -6                  | Program output: 13                 
Correct output: -71                 | Program output: 64                 
Correct output: 9                   | Program output: 60                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -66                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -76                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: 7                  
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -17                
Correct output: -79                 | Program output: 33                 
Correct output: -53                 | Program output: 3                  
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: 55                 
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: 48                 
Correct output: -84                 | Program output: 76                 
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -37                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: 11                 
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -61                
Correct output: -86                 | Program output: -58                
Correct output: -81                 | Program output: -21                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: 67                 
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -20                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_534} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction tagged_512} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (tag_boolean_534 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (tagged_512 boolean_dup_items exec_shove () boolean_flush exec_rot () (integer_div) (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction tag_boolean_534} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction tagged_512} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_noop boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty integer_min integer_swap exec_s (tag_boolean_534 exec_eq boolean_not boolean_not boolean_and integer_gte boolean_not boolean_not) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup)) () integer_mod boolean_dup_times) integer_yank -57) (tagged_512 boolean_dup_items exec_shove () boolean_flush exec_rot () (integer_div) (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min exec_swap () ()) () ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (850 467 224 412 454 918 412 455 224 467)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (850 467 224 412 454 918 412 455 224 467)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_max} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap})
Best program: (boolean_eq integer_shove boolean_dup in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (exec_dup_items exec_noop boolean_flush integer_swap exec_k (in3 integer_gte -31 exec_empty) (integer_min integer_swap exec_s (in1 exec_eq boolean_not boolean_not boolean_and integer_gte integer_max exec_yankdup) (boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup))) (integer_mod boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove () boolean_flush in2) integer_div) (integer_lt boolean_dup in4 integer_min exec_swap () ()))
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 5.117
Median total errors in population: 4
Error averages by case: (0.15 0.533 0.776 0.588 0.546 0.082 0.588 0.545 0.776 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.635
Average program size in population (points): 62.309
Average percent parens in population: 0.250
Minimum age in population: 42.20628302544355
Maximum age in population: 45.89371122978628
Average age in population: 44.354437615484
Median age in population: 44.41406849492341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 10996925
--- Timings ---
Current time: 1559584702618 milliseconds
Total Time:          91.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.5 seconds, 73.0%
Fitness Testing:     14.2 seconds, 15.6%
Report:              10.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: 25                 
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 10                 
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 55                 
Correct output: 13                  | Program output: 64                 
Correct output: 7                   | Program output: 52                 
Correct output: 23                  | Program output: 28                 
Correct output: 9                   | Program output: 52                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: 19                 
Correct output: -51                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: 27                 
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -35                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -76                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: 52                 
Correct output: -100                | Program output: -69                
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -14                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -88                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -11                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: 35                 
Correct output: -7                  | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -16                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_max boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 boolean_pop integer_min))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 59
Percent parens: 0.237
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction -31} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_dup_times in2 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (integer_max boolean_frominteger boolean_flush integer_swap) (exec_k (in3 integer_gte -31 exec_empty) (integer_min boolean_or exec_s (in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 boolean_pop integer_min))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 59
Percent parens: 0.237
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 431 350 381 381 430 902 372 351 371)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (372 431 350 381 381 430 902 372 351 371)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min})
Best program: (boolean_dup_times boolean_eq integer_shove boolean_dup in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_pop exec_noop boolean_flush exec_s (integer_flush in1 exec_eq boolean_not integer_lt boolean_and integer_pop boolean_and integer_gte boolean_dup_times) (integer_stackdepth boolean_yankdup) ()) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt in3 boolean_invert_first_then_and integer_min))
Errors: [0 1 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.659
Median total errors in population: 5
Error averages by case: (0.628 0.569 0.65 0.619 0.619 0.57 0.098 0.628 0.649 0.629)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.967
Average program size in population (points): 61.671
Average percent parens in population: 0.253
Minimum age in population: 43.20628302544355
Maximum age in population: 47.63705997820944
Average age in population: 45.83531564074568
Median age in population: 45.8554696184583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11307756
--- Timings ---
Current time: 1559584705281 milliseconds
Total Time:          93.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.5 seconds, 73.0%
Fitness Testing:     14.6 seconds, 15.5%
Report:              10.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 207
Test mean error for best: 0.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_pop integer_min) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_pop integer_min) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 425 319 367 911 370 370 392 337 336)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (336 425 319 367 911 370 370 392 337 336)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_pop integer_min) ()))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.837
Median total errors in population: 5
Error averages by case: (0.664 0.575 0.681 0.633 0.089 0.63 0.63 0.608 0.663 0.664)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.94
Average program size in population (points): 60.993
Average percent parens in population: 0.245
Minimum age in population: 44.57581356167793
Maximum age in population: 49.21755860792473
Average age in population: 47.37964165502926
Median age in population: 47.45769696682692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11602510
--- Timings ---
Current time: 1559584707948 milliseconds
Total Time:          96.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.5 seconds, 73.1%
Fitness Testing:     14.9 seconds, 15.5%
Report:              11.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 207
Test mean error for best: 0.20700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Lexicase best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_pop integer_min) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 64
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_min})
Zero cases best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_pop integer_min) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 64
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (634 581 680 631 581 680 575 680 680 679)
Population mean number of elite cases: 6.40
Count of perfect (error zero) individuals by case: (634 581 680 631 581 680 575 680 680 679)
Population mean number of perfect (error zero) cases: 6.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction -57} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_flush} {:close 2, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min})
Best program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 47
Size: 63
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.599
Median total errors in population: 0
Error averages by case: (0.366 0.419 0.32 0.369 0.419 0.32 0.425 0.32 0.32 0.321)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.624
Average program size in population (points): 63.863
Average percent parens in population: 0.254
Minimum age in population: 47.18843520525843
Maximum age in population: 49.95385597669519
Average age in population: 48.6126066626024
Median age in population: 48.9403711319901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 383
Genome diversity (% unique genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 384
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11950446
--- Timings ---
Current time: 1559584710679 milliseconds
Total Time:          99.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.4 seconds, 73.0%
Fitness Testing:     15.3 seconds, 15.5%
Report:              11.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 33
Successful program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 63


Auto-simplifying with starting size: 63
step: 0
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 500
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 1000
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 1500
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 2000
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 2500
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 3000
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 3500
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 4000
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 4500
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

step: 5000
program: (exec_pop (integer_stackdepth integer_swap integer_yank boolean_eq integer_shove boolean_dup) in1 exec_rot (print_integer exec_eq) (exec_if (print_boolean exec_swap (boolean_dup exec_s (in1 exec_eq boolean_not boolean_not boolean_eq integer_gte boolean_not boolean_and integer_gte boolean_dup_times) () (integer_stackdepth boolean_yankdup)) (boolean_yankdup boolean_dup_times) integer_yank -57) (exec_eq boolean_dup_items exec_shove (boolean_flush in2)) integer_div) (integer_lt exec_s_when_autoconstructing (in4 integer_min integer_div) (integer_lt in3 boolean_eq integer_min) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 63

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 207
Test mean error for best: 0.20700
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 9                   | Program output: 9                  
Correct output: -82                 | Program output: 23                 
Correct output: -80                 | Program output: -80                
Correct output: -15                 | Program output: -15                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 99                 
Correct output: -46                 | Program output: -46                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -77                 | Program output: -77                
Correct output: 44                  | Program output: 44                 
Correct output: -92                 | Program output: -92                
Correct output: 39                  | Program output: 39                 
Correct output: 85                  | Program output: 85                 
Correct output: 58                  | Program output: 58                 
Correct output: 20                  | Program output: 20                 
Correct output: 4                   | Program output: 4                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 45                 
Correct output: 41                  | Program output: 41                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 73                 
Correct output: 64                  | Program output: 64                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 13                  | Program output: 13                 
Correct output: 7                   | Program output: 13                 
Correct output: 23                  | Program output: 23                 
Correct output: 9                   | Program output: 46                 
Correct output: 3                   | Program output: 3                  
Correct output: 15                  | Program output: 15                 
Correct output: 47                  | Program output: 52                 
Correct output: 48                  | Program output: 48                 
Correct output: -41                 | Program output: -41                
Correct output: -37                 | Program output: -6                 
Correct output: -51                 | Program output: 4                  
Correct output: -74                 | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -6                  | Program output: -6                 
Correct output: -71                 | Program output: 17                 
Correct output: 9                   | Program output: 21                 
Correct output: 16                  | Program output: 19                 
Correct output: -83                 | Program output: -83                
Correct output: -89                 | Program output: -89                
Correct output: -88                 | Program output: -65                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -86                 | Program output: -86                
Correct output: -93                 | Program output: -93                
Correct output: -98                 | Program output: -98                
Correct output: -43                 | Program output: -43                
Correct output: -32                 | Program output: -32                
Correct output: -66                 | Program output: -66                
Correct output: -26                 | Program output: -26                
Correct output: -72                 | Program output: -72                
Correct output: -76                 | Program output: -76                
Correct output: -79                 | Program output: -79                
Correct output: -53                 | Program output: -53                
Correct output: -92                 | Program output: -92                
Correct output: -86                 | Program output: 26                 
Correct output: -36                 | Program output: -36                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -49                
Correct output: -81                 | Program output: -81                
Correct output: -33                 | Program output: -33                
Correct output: -6                  | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -84                 | Program output: -39                
Correct output: -89                 | Program output: -89                
Correct output: -89                 | Program output: -89                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -77                 | Program output: -60                
Correct output: -95                 | Program output: -95                
Correct output: -93                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -89                
Correct output: -69                 | Program output: -69                
Correct output: -91                 | Program output: -91                
Correct output: -86                 | Program output: -86                
Correct output: -7                  | Program output: -7                 
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: -81                 | Program output: -38                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -48                 | Program output: -48                
Correct output: 13                  | Program output: 13                 
Correct output: -76                 | Program output: -76                
Correct output: 51                  | Program output: 63                 
Correct output: -85                 | Program output: -85                
Correct output: -92                 | Program output: -92                
Correct output: -79                 | Program output: -79                
;;******************************
